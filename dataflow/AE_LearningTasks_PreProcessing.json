{
	"name": "AE_LearningTasks_PreProcessing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_ADLS_OEA",
						"type": "LinkedServiceReference"
					},
					"name": "AELearningTasks"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "Schema",
					"description": "Creates an explicit mapping for each drifted column"
				}
			],
			"scriptLines": [
				"source(useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'stage1np',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['_AE_ManualUpload_LearningTasks/*']) ~> AELearningTasks",
				"AELearningTasks derive(SubjectName = toString(byName('SubjectName')),",
				"          Code = toString(byName('Code')),",
				"          TeacherImportIdentifier = toString(byName('TeacherImportIdentifier')),",
				"          TaskId = toString(byName('TaskId')),",
				"          IsSubjectWide = toString(byName('IsSubjectWide')),",
				"          TaskName = toString(byName('TaskName')),",
				"          StudentCode = toString(byName('StudentCode')),",
				"          GovtCode1 = toString(byName('GovtCode1')),",
				"          StudentLastName = toString(byName('StudentLastName')),",
				"          StudentFirstName = toString(byName('StudentFirstName')),",
				"          YearLevel = toString(byName('YearLevel')),",
				"          ResultType = toString(byName('ResultType')),",
				"          PrimaryGrade = toString(byName('PrimaryGrade')),",
				"          CommentTimestamp = toString(byName('CommentTimestamp')),",
				"          CommentPosterCode = toString(byName('CommentPosterCode')),",
				"          CommentPosterName = toString(byName('CommentPosterName')),",
				"          Result = toString(byName('Result')),",
				"          ComponentName = toString(byName('ComponentName')),",
				"          ComponentType = toString(byName('ComponentType')),",
				"          IsIncludedInReport = toString(byName('IsIncludedInReport')),",
				"          ReportCycleName = toString(byName('ReportCycleName')),",
				"          DueDate = toString(byName('DueDate')),",
				"          Category = toString(byName('Category')),",
				"          SubmissionStatus = toString(byName('SubmissionStatus')),",
				"          ReceiptTime = toString(byName('ReceiptTime'))) ~> Schema"
			]
		}
	}
}