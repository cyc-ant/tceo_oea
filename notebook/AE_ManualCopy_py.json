{
	"name": "AE_ManualCopy_py",
	"properties": {
		"folder": {
			"name": "Stage1"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b0cd7ce5-8fcb-40fd-a258-4aab334535f6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import lit, monotonically_increasing_id\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"from functools import reduce"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class AEManualCopy(BaseOEAModule):\r\n",
					"    def __init__(self, source_folder, pseudonymize = True):\r\n",
					"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
					"        locationDir = source_folder #\"/_AE_ManualUploadRawFiles\"\r\n",
					"        \r\n",
					"    def mergeAll(self):\r\n",
					"\r\n",
					"        root_dir = f'{self.stage1np}/{self.locationDir}'\r\n",
					"        primaryreport_list = []\r\n",
					"        learningreport_list = []\r\n",
					"        \r\n",
					"        # for each file location in this manual upload directory..\r\n",
					"        file_list = mssparkutils.fs.ls(root_dir)\r\n",
					"        for file in file_list:\r\n",
					"            # ignore subfolders\r\n",
					"            if file.isDir:\r\n",
					"                continue\r\n",
					"                \r\n",
					"            # .. we need to dissect the filename to get the school name, area, semester number and year\r\n",
					"            tokens = file.name.split(\"-\")\r\n",
					"            school_name = tokens[0]\r\n",
					"            school_area = tokens[1]\r\n",
					"\r\n",
					"            semester = tokens[2]split(\" \")[1]\r\n",
					"            year = tokens[2]split(\" \")[2]\r\n",
					"            report_type = tokens[2]split(\" \")[3]\r\n",
					"\r\n",
					"            filename = f'{self.stage1np + self.locationDir}/{file.name}'\r\n",
					"\r\n",
					"            # if the file is not a primary semester or learning task results report, then skip the file\r\n",
					"            if report_type == \"Primary\":\r\n",
					"                df = _addReportDetails(filename)\r\n",
					"                \r\n",
					"                # add the data frame to the list of dataframes\r\n",
					"                primaryreport_list.append(df)\r\n",
					"\r\n",
					"                # add the new df to the list \r\n",
					"            elif report_type == \"Learning\":\r\n",
					"                df = _addReportDetails(filename)\r\n",
					"                \r\n",
					"                # add the data frame to the list of dataframes\r\n",
					"                learningreport_list.append(df)\r\n",
					"\r\n",
					"            else:\r\n",
					"                continue #skip files that are not 'primary' or 'learning' reports\r\n",
					"                \r\n",
					"\r\n",
					"        # once we have all of the files converted to dataframes with the extra columns, we can combined them back to one file\r\n",
					"        primary_combined_df =  reduce(DataFrame.unionAll, primaryreport_list)\r\n",
					"        learning_combined_df = reduce(DataFrame.unionAll, learningreport_list)\r\n",
					"\r\n",
					"        # save the csv files\r\n",
					"        primary_combined_df.write.option(\"header\", True) \\\r\n",
					"            .csv(f'{self.stage1np}/AE_Manual/AE_ManualSemesterReports/AE_ManualSemesterReports.csv')\r\n",
					"\r\n",
					"        learning_combined_df.write.option(\"header\", True) \\\r\n",
					"            .csv(f'{self.stage1np}/AE_Manual/AE_ManualLearningTasks/AE_ManualLearningTasks.csv')\r\n",
					"\r\n",
					"\r\n",
					"    def _addReportDetails(self, file):\r\n",
					"        df = spark.read.options(header='True').csv(filename)\r\n",
					"\r\n",
					"        # add the new columns and the value for each column\r\n",
					"        final_df = df.withColumn('School Name', lit(school_name)) \\\r\n",
					"                    .withColumn('Area', lit(school_area)) \\\r\n",
					"                    .withColumn('Semester', semester) \\\r\n",
					"                    .withColumn('Year', year)\r\n",
					"\r\n",
					"        return final_df\r\n",
					"\r\n",
					"\r\n",
					"# instantiate the AE Manual Data Copy with a source folder that contains all the ingested data files \r\n",
					"aecopy = AEManualCopy(source_folder)\r\n",
					"\r\n",
					"aecopy.mergeAll()\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}