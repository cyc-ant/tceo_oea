{
	"name": "Acer_py",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7010a035-deaf-4738-97c1-7c85905f6b36"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"class Acer(BaseOEAModule):\r\n",
					"    def __init__(self, source_folder='acer_test', pseudonymize = True):\r\n",
					"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
					"        self.schemas['student_acer'] = [['SKACERStudent', 'integer', 'no-op'],\r\n",
					"                                        ['BKACERStudent', 'string', 'no-op'],\r\n",
					"                                        ['SystemID', 'string', 'no-op'],\r\n",
					"                                        ['PersistentStudentID', 'integer', 'no-op'],\r\n",
					"                                        ['FamilyName', 'string', 'no-op'],\r\n",
					"                                        ['GivenName', 'string', 'no-op'],\r\n",
					"                                        ['DateOfBirth', 'date', 'no-op'],\r\n",
					"                                        ['Gender', 'string', 'no-op'],\r\n",
					"                                        ['GenderId', 'integer', 'no-op'],\r\n",
					"                                        ['Username', 'string', 'no-op'],\r\n",
					"                                        ['Password', 'string', 'no-op'],\r\n",
					"                                        ['CampusId', 'integer', 'no-op'],\r\n",
					"                                        ['CreateDate', 'string', 'no-op'],\r\n",
					"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
					"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
					"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
					"                                        ['Iscurrent', 'integer', 'no-op'],\r\n",
					"                                        ['SCDReason', 'string', 'no-op']]                                          \r\n",
					"\r\n",
					"    def ingest(self):\r\n",
					"        oea.ingest_incremental_data(self.source_folder, 'Dim_AcerStudent', self.schemas['student_acer'], 'Gender', 'SKACERStudent', 'parquet')\r\n",
					"\r\n",
					"        #oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\r\n",
					"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\r\n",
					"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\r\n",
					"\r\n",
					"acer = Acer()"
				],
				"execution_count": null
			}
		]
	}
}