{
	"name": "Antares_py",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b2fe0386-777d-42ed-8a91-23a57c06f129"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### This notebook contains Antares helper functions to be used for the OEA"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import Row, SparkSession\r\n",
					"from pyspark.sql.functions import when, col, sum, percent_rank, substring, trim, regexp_replace, length, lower, concat_ws, lit, avg, stddev, upper, mean, expr\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run OEA_py"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def addRow(existing_df, newRow):\r\n",
					"    new_df = spark.createDataFrame([newRow], existing_df.schema)\r\n",
					"\r\n",
					"    return existing_df.union(new_df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def standardiseString(string, case=\"upper\"):\r\n",
					"    \"\"\"Function to standardise a string to upper or lower case and remove all spaces. Can be used when creating SK's from data \"\"\"\r\n",
					"    if case == \"upper\":\r\n",
					"        return upper(regexp_replace(string, \" \", \"\"))\r\n",
					"    \r\n",
					"    return lower(regexp_replace(string, \" \", \"\"))\r\n",
					"    \r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def unpivot_dataframe(df, id_vars, value_vars):\r\n",
					"    \"\"\"\r\n",
					"    Unpivot a DataFrame from wide to long format.\r\n",
					"    \r\n",
					"    Parameters:\r\n",
					"    - df: The DataFrame to unpivot.\r\n",
					"    - id_vars: A list of columns to use as identifier variables.\r\n",
					"    - value_vars: A list of columns to unpivot.\r\n",
					"    \r\n",
					"    Returns:\r\n",
					"    A DataFrame in long format.\r\n",
					"    \"\"\"\r\n",
					"    # Create a Spark session if not already created\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    \r\n",
					"    # Create an array of columns for the stack function\r\n",
					"    select_expr = \", \".join([f\"'{col}', {col}\" for col in value_vars])\r\n",
					"    \r\n",
					"    # Create the SQL expression for the stack function\r\n",
					"    stack_expr = f\"stack({len(value_vars)}, {select_expr}) as (Variable, Value)\"\r\n",
					"    \r\n",
					"    # Construct the select expression including id_vars\r\n",
					"    select_cols = \", \".join(id_vars) + \", \" + stack_expr\r\n",
					"    \r\n",
					"    # Apply the stack expression to unpivot the DataFrame\r\n",
					"    unpivoted_df = df.selectExpr(select_cols)\r\n",
					"    \r\n",
					"    return unpivoted_df\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def unpivot_dataframe2(df, id_vars, value_vars):\r\n",
					"    # Create an array of column expressions for the stack function\r\n",
					"    select_expr = \", \".join([\"'{}', {}\".format(c, c) for c in value_vars])\r\n",
					"    \r\n",
					"    # Construct the SQL expression for the stack function\r\n",
					"    stack_expr = \"stack({}, {}) as (Variable, Value)\".format(len(value_vars), select_expr)\r\n",
					"    \r\n",
					"    # Combine id_vars with the stack expression\r\n",
					"    select_cols = \", \".join(id_vars) + \", \" + stack_expr\r\n",
					"    \r\n",
					"    # Apply the constructed expression to unpivot the DataFrame\r\n",
					"    return df.selectExpr(select_cols)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### this is my new change"
				]
			}
		]
	}
}