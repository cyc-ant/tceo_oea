{
	"name": "DataCopy_py",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "574358fe-6289-4e90-b5c1-1e343f336a17"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# set this value in the base parameters in the pipeline. \r\n",
					"# this is the source directory (in stage1np) that the files will be moved from\r\n",
					"source_folder = ''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"\r\n",
					"class DataCopy(BaseOEAModule):\r\n",
					"    def __init__(self, source_folder, pseudonymize = True):\r\n",
					"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
					"        \r\n",
					"    def createFoldersForAll(self):\r\n",
					"        print(\"Copying files from: \", self.stage1np)\r\n",
					"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
					"        for file in file_list:\r\n",
					"            # if the filename is preceded by 'dbovw', remove it and use the rest of the file name as the directory\r\n",
					"            if file.name.find('dbovw') == 0:\r\n",
					"                destination = file.name.replace('dbovw', '')\r\n",
					"                copyToFolder(file, destination)\r\n",
					"            else:\r\n",
					"                copyToFolder(file, file.name)\r\n",
					"\r\n",
					"\r\n",
					"    def copyToFolder(self, file, destination):\r\n",
					"        \"\"\" Moves the file to a folder that is based on the filename without its file extension\"\"\"\r\n",
					"        tokens = table_name.split(\".\")\r\n",
					"        target = self.stage1np + '/' + tokens[0] +'/' + file.name\r\n",
					"        mssparkutils.fs.mv(file.path, target, True) # will create the new dir and move file into it\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
					"datacopy = DataCopy('testing_folder')\r\n",
					"\r\n",
					"datacopy.createFoldersForAll()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}