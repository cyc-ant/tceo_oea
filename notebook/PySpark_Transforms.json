{
	"name": "PySpark_Transforms",
	"properties": {
		"folder": {
			"name": "Stage3"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2c598c8b-04bc-4ff5-8389-9d9f0a9a0cdc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## This note book contains data transformations using Python (PySpark)\r\n",
					"\r\n",
					"This notebook should not be run on its own, rather it is run as part of the Transforms_Connector notebook"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Load all required libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import when, col, sum, percent_rank, substring, trim, regexp_replace, length, lower, concat_ws, lit, avg, stddev\r\n",
					"from pyspark.sql.window import Window\r\n",
					"import databricks.koalas as ks"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Load all tables from stage 2 and stage 3"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sourcep = oea.stage2p\r\n",
					"source3p = oea.stage3p\r\n",
					"\r\n",
					"# source tables from Stage2\r\n",
					"DMPersonDemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
					"EYAnswers_df = spark.read.load(sourcep + \"/EarlyYearsAnswers/EarlyYearsAnswers_pseudo\", format='delta')\r\n",
					"\r\n",
					"# source tables from Stage3\r\n",
					"EarlyYearsResultsWide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResults_pseudo\", format='delta')\r\n",
					"EYResultsYear2Wide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResultsYear2_pseudo\", format='delta')\r\n",
					"EarlyYearsStudents_df = spark.read.load(source3p + \"/pilot/_FACTODSEarlyYearsStudents\", format='delta')\r\n",
					"\r\n",
					"EarlyYearsStudents_ClassIDCleaned_df = spark.read.load(source3p + \"/pilot/_FACTODSEarlyYearsStudents_ClassIDCleaned\", format='delta')\r\n",
					"\r\n",
					"#Senior Outcomes\r\n",
					"SeniorOutcomes_df = spark.read.load(source3p + \"/pilot/StudentLevel_pseudo\", format='delta')\r\n",
					"\r\n",
					""
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Split the DMPersonDemographic into DMStudentDemographic and DMStaffDemographic"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Clean up the table and remove null and unnecessary columns\r\n",
					"\r\n",
					"df = DMPersonDemographic_df.filter(DMPersonDemographic_df.Ceider != -1) \\\r\n",
					"                .drop(\"UsualTransport\") \\\r\n",
					"                .drop(\"ContactNotesBH\") \\\r\n",
					"                .drop(\"ContactNotesAH\") \\\r\n",
					"                .drop(\"OrganisationUserId\") \\\r\n",
					"                .drop(\"ProgramCode\") \\\r\n",
					"                .drop(\"Disability_YN\") \\\r\n",
					"                .drop(\"DisabilityFundedInt\") \\\r\n",
					"                .drop(\"ReceivesESL_YN\") \\\r\n",
					"                .drop(\"ReceivesESLInt\") \\\r\n",
					"                .drop(\"RequiresESL_YN\") \\\r\n",
					"                .drop(\"RequresESLInt\") \\\r\n",
					"                .drop(\"LBOTE_YN\") \\\r\n",
					"                .drop(\"LBOTEInt\") \\\r\n",
					"                .drop(\"AccessRestrictions_YN\")\r\n",
					"\r\n",
					"cleaned_df = df.withColumn(\"ATSIId\", when(df.ATSIId > 4, 4).when(df.ATSIId < 1, 4).otherwise(df.ATSIId))\r\n",
					"\r\n",
					"# now split the demographic information into two tables \r\n",
					"DMStudentDemographic_df = cleaned_df.filter((cleaned_df.PersonType == \"Student\"))\r\n",
					"DMStaffDemographic_df = cleaned_df.filter((cleaned_df.PersonType == \"Staff\"))"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Clean up the classID's (Join to clean classID table)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# remove the test rows from the year 2 data\r\n",
					"EYResultsYear2Wide_df = EYResultsYear2Wide_df.filter(EYResultsYear2Wide_df.Ceider != 12345)\r\n",
					"EYResultsYear2Wide_df = EYResultsYear2Wide_df.filter(EYResultsYear2Wide_df.Ceider != 111111)\r\n",
					"\r\n",
					"# assign the correct class ID from the latest students list (Year 2)\r\n",
					"\r\n",
					"EYResultsYear2_ClassUpdated_df = EYResultsYear2Wide_df.withColumnRenamed(\"Ceider\", \"xCeider\")\\\r\n",
					"                                                        .withColumnRenamed(\"Year\", \"xYear\")\\\r\n",
					"                                                        .withColumnRenamed(\"ClassID\", \"xClassID\")\r\n",
					"\r\n",
					"EYResultsYear2_ClassUpdated_df = EYResultsYear2_ClassUpdated_df.join(EarlyYearsStudents_ClassIDCleaned_df,\r\n",
					"                                                                            [col('Year') == col('xYear'),\r\n",
					"                                                                                col('Ceider') == col('xCeider')],\r\n",
					"                                                                                how='inner'  #inner will also remove students that have sat the test but has since left the class/school \r\n",
					"                                                                            )\r\n",
					"\r\n",
					"EYResultsYear2_df = EYResultsYear2_ClassUpdated_df.drop(\"xCeider\").drop(\"xClassID\").drop(\"xYear\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# assign the correct class ID based on the early years students list (Prep and Year 1)\r\n",
					"\r\n",
					"EarlyYearsResults_ClassUpdated_df = EarlyYearsResultsWide_df.withColumnRenamed(\"Ceider\", \"xCeider\")\\\r\n",
					"                                                        .withColumnRenamed(\"Year\", \"xYear\")\\\r\n",
					"                                                        .withColumnRenamed(\"ClassID\", \"xClassID\")\r\n",
					"\r\n",
					"EarlyYearsResults_ClassUpdated_df = EarlyYearsResults_ClassUpdated_df.join(EarlyYearsStudents_ClassIDCleaned_df,  \r\n",
					"                                                                                [col('Year') == col('xYear'),\r\n",
					"                                                                                col('Ceider') == col('xCeider')],\r\n",
					"                                                                                how='inner' # remove the students with unknown classes\r\n",
					"                                                                            )\r\n",
					"\r\n",
					"EarlyYearsResults_df = EarlyYearsResults_ClassUpdated_df.drop(\"xCeider\").drop(\"xClassID\").drop(\"xYear\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create test completion table for Prep and Year 1"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# filter out prep and year 1\r\n",
					"\r\n",
					"EarlyYearsStudents_Y1_P_df = EarlyYearsStudents_df.filter((EarlyYearsStudents_df.YearLevel == 'P') | (EarlyYearsStudents_df.YearLevel == '1'))\r\n",
					"\r\n",
					"# Seperate out the Pre and Post tests\r\n",
					"PreTest_df = EarlyYearsResults_df.select(col('Year').alias('xYear'), \r\n",
					"                                            col('CampusID').alias('xCampusID'), \r\n",
					"                                            col('Ceider').alias('xCeider'), \r\n",
					"                                            col('ClassID').alias('xClassID'), \r\n",
					"                                            col('YearLevel').alias('xYearLevel')\r\n",
					"                                        ).filter(col('TestLevel') == \"Pre\") \\\r\n",
					"                                        .withColumn('PreTestComplete', lit(\"1\"))\r\n",
					"\r\n",
					"\r\n",
					"PostTest_df = EarlyYearsResults_df.select(col('Year').alias('xYear'), \r\n",
					"                                            col('CampusID').alias('xCampusID'), \r\n",
					"                                            col('Ceider').alias('xCeider'), \r\n",
					"                                            col('ClassID').alias('xClassID'), \r\n",
					"                                            col('YearLevel').alias('xYearLevel')\r\n",
					"                                        ).filter(col('TestLevel') == \"Post\") \\\r\n",
					"                                        .withColumn('PostTestComplete', lit(\"1\"))\r\n",
					"\r\n",
					"# if the pre and post test dataframes are not empty then join them onto the student list \r\n",
					"if (not PreTest_df.rdd.isEmpty()):\r\n",
					"    EarlyYearsTestCompletion_df = EarlyYearsStudents_Y1_P_df.join(PreTest_df, \r\n",
					"                                                            [col('Year') == col('xYear'),\r\n",
					"                                                            col('CampusID') == col('xCampusID'),\r\n",
					"                                                            col('Ceider') == col('xCeider'),\r\n",
					"                                                            col('ClassID') == col('xClassID'),\r\n",
					"                                                            col('YearLevel') == col('xYearLevel')],\r\n",
					"                                                            how=\"left\"\r\n",
					"                                                            )\r\n",
					"\r\n",
					"    EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
					"\r\n",
					"else:\r\n",
					"    #if the pre tests are completely empty then assign false to pre test completion for every student \r\n",
					"    EarlyYearsTestCompletion_df = EarlyYearsStudents_Y1_P_df.withColumn(\"PreTestComplete\", lit(\"0\"))\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"if (not PostTest_df.rdd.isEmpty()):\r\n",
					"    EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.join(PostTest_df, \r\n",
					"                                                                    [col('Year') == col('xYear'),\r\n",
					"                                                                    col('CampusID') == col('xCampusID'),\r\n",
					"                                                                    col('Ceider') == col('xCeider'),\r\n",
					"                                                                    col('ClassID') == col('xClassID'),\r\n",
					"                                                                    col('YearLevel') == col('xYearLevel')],\r\n",
					"                                                                    how=\"left\"\r\n",
					"                                                                    )\r\n",
					"\r\n",
					"    EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
					"\r\n",
					"else:\r\n",
					"    #if the pre tests are completely empty then assign false to pre test completion for every student \r\n",
					"    EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn(\"PostTestComplete\", lit(\"0\"))\r\n",
					"\r\n",
					"# add columns to make this table compatible with the Year 2 table \r\n",
					"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn('PreTestNumeracyComplete', col('PreTestComplete'))\r\n",
					"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn('PreTestLiteracyComplete', col('PreTestComplete'))\r\n",
					"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn('PostTestNumeracyComplete', col('PostTestComplete'))\r\n",
					"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn('PostTestLiteracyComplete', col('PostTestComplete'))\r\n",
					"\r\n",
					"# sort the columns\r\n",
					"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.select(sorted(EarlyYearsTestCompletion_df.columns))"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create Test Completion table YEAR 2"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# filter out year 2\r\n",
					"\r\n",
					"EarlyYearsStudents_Y2_df = EarlyYearsStudents_df.filter((EarlyYearsStudents_df.YearLevel == '2'))\r\n",
					"\r\n",
					"# Seperate out the Pre/Post and Numeracy/Literacy tests\r\n",
					"PreTestNumeracy_df = EYResultsYear2_df.select(col('Year').alias('xYear'), \r\n",
					"                                                col('CampusID').alias('xCampusID'), \r\n",
					"                                                col('Ceider').alias('xCeider'), \r\n",
					"                                                col('ClassID').alias('xClassID'), \r\n",
					"                                                col('YearLevel').alias('xYearLevel')\r\n",
					"                                                ).filter((col('TestLevel') == \"Pre\") & (col('QuestionType') == \"Numeracy\")) \\\r\n",
					"                                                .withColumn('PreTestNumeracyComplete', lit(\"1\"))\r\n",
					"\r\n",
					"\r\n",
					"PreTestLiteracy_df = EYResultsYear2_df.select(col('Year').alias('xYear'), \r\n",
					"                                                col('CampusID').alias('xCampusID'), \r\n",
					"                                                col('Ceider').alias('xCeider'), \r\n",
					"                                                col('ClassID').alias('xClassID'), \r\n",
					"                                                col('YearLevel').alias('xYearLevel')\r\n",
					"                                                ).filter((col('TestLevel') == \"Pre\") & (col('QuestionType') == \"Literacy\")) \\\r\n",
					"                                                .withColumn('PreTestLiteracyComplete', lit(\"1\"))\r\n",
					"\r\n",
					"\r\n",
					"PostTestNumeracy_df = EYResultsYear2_df.select(col('Year').alias('xYear'), \r\n",
					"                                                col('CampusID').alias('xCampusID'), \r\n",
					"                                                col('Ceider').alias('xCeider'), \r\n",
					"                                                col('ClassID').alias('xClassID'), \r\n",
					"                                                col('YearLevel').alias('xYearLevel')\r\n",
					"                                                ).filter((col('TestLevel') == \"Post\") & (col('QuestionType') == \"Numeracy\")) \\\r\n",
					"                                                .withColumn('PostTestNumeracyComplete', lit(\"1\"))\r\n",
					"\r\n",
					"\r\n",
					"PostTestLiteracy_df = EYResultsYear2_df.select(col('Year').alias('xYear'), \r\n",
					"                                                col('CampusID').alias('xCampusID'), \r\n",
					"                                                col('Ceider').alias('xCeider'), \r\n",
					"                                                col('ClassID').alias('xClassID'), \r\n",
					"                                                col('YearLevel').alias('xYearLevel')\r\n",
					"                                                ).filter((col('TestLevel') == \"Post\") & (col('QuestionType') == \"Literacy\")) \\\r\n",
					"                                                .withColumn('PostTestLiteracyComplete', lit(\"1\"))\r\n",
					"\r\n",
					"\r\n",
					"if (not PreTestNumeracy_df.rdd.isEmpty()):\r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsStudents_Y2_df.join(PreTestNumeracy_df, \r\n",
					"                                                            [col('Year') == col('xYear'),\r\n",
					"                                                            col('CampusID') == col('xCampusID'),\r\n",
					"                                                            col('Ceider') == col('xCeider'),\r\n",
					"                                                            col('ClassID') == col('xClassID'),\r\n",
					"                                                            col('YearLevel') == col('xYearLevel')],\r\n",
					"                                                            how=\"left\"\r\n",
					"                                                            )\r\n",
					"\r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
					"\r\n",
					"else:\r\n",
					"    #if the pre tests are completely empty then assign false to pre test completion for every student \r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsStudents_Y2_df.withColumn(\"PreTestNumeracyComplete\", lit(\"0\"))\r\n",
					"\r\n",
					"\r\n",
					"if (not PreTestLiteracy_df.rdd.isEmpty()):\r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.join(PreTestLiteracy_df, \r\n",
					"                                                                    [col('Year') == col('xYear'),\r\n",
					"                                                                    col('CampusID') == col('xCampusID'),\r\n",
					"                                                                    col('Ceider') == col('xCeider'),\r\n",
					"                                                                    col('ClassID') == col('xClassID'),\r\n",
					"                                                                    col('YearLevel') == col('xYearLevel')],\r\n",
					"                                                                    how=\"left\"\r\n",
					"                                                                    )\r\n",
					"                                                            \r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
					"\r\n",
					"else:\r\n",
					"    #if the pre tests are completely empty then assign false to pre test completion for every student \r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn(\"PreTestLiteracyComplete\", lit(\"0\"))\r\n",
					"\r\n",
					"\r\n",
					"if (not PostTestNumeracy_df.rdd.isEmpty()):\r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.join(PostTestNumeracy_df, \r\n",
					"                                                                    [col('Year') == col('xYear'),\r\n",
					"                                                                    col('CampusID') == col('xCampusID'),\r\n",
					"                                                                    col('Ceider') == col('xCeider'),\r\n",
					"                                                                    col('ClassID') == col('xClassID'),\r\n",
					"                                                                    col('YearLevel') == col('xYearLevel')],\r\n",
					"                                                                    how=\"left\"\r\n",
					"                                                                    )\r\n",
					"                                                            \r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
					"\r\n",
					"else:\r\n",
					"    #if the Post tests are completely empty then assign false to Post test completion for every student \r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn(\"PostTestNumeracyComplete\", lit(\"0\"))\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"if (not PostTestLiteracy_df.rdd.isEmpty()):\r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.join(PostTestLiteracy_df, \r\n",
					"                                                                    [col('Year') == col('xYear'),\r\n",
					"                                                                    col('CampusID') == col('xCampusID'),\r\n",
					"                                                                    col('Ceider') == col('xCeider'),\r\n",
					"                                                                    col('ClassID') == col('xClassID'),\r\n",
					"                                                                    col('YearLevel') == col('xYearLevel')],\r\n",
					"                                                                    how=\"left\"\r\n",
					"                                                                    )\r\n",
					"                                                            \r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
					"\r\n",
					"else:\r\n",
					"    #if the Post tests are completely empty then assign false to Post test completion for every student \r\n",
					"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn(\"PostTestLiteracyComplete\", lit(\"0\"))\r\n",
					"\r\n",
					"\r\n",
					"EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn('PreTestComplete', when( ((col('PreTestNumeracyComplete') == \"1\") & \r\n",
					"                                                                                                    (col('PreTestLiteracyComplete') == \"1\")), lit(\"1\")).otherwise(lit(\"0\")) \r\n",
					"                                                                                                \r\n",
					"                                                                        )\r\n",
					"\r\n",
					"EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn('PostTestComplete', when( ((col('PostTestNumeracyComplete') == \"1\") & \r\n",
					"                                                                                                    (col('PostTestLiteracyComplete') == \"1\")), lit(\"1\")).otherwise(lit(\"0\")) \r\n",
					"                                                                                                \r\n",
					"                                                                        )\r\n",
					"\r\n",
					"# sort the columns\r\n",
					"EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.select(sorted(EarlyYearsTestCompletion2_df.columns))"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# combine the prep/year1 test completion table with the year 2 table\r\n",
					"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.union(EarlyYearsTestCompletion2_df)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create Results Totals tables (Prep and Year 1)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Create the early years transformations for aggregate pre/post test results\r\n",
					"\r\n",
					"EarlyYearsResultsTotals_df = EarlyYearsResults_df.groupBy(\"CampusID\", \"Ceider\",\t\"ClassID\", \"Year\", \"YearLevel\", \"TestLevel\").agg(sum(EarlyYearsResults_df.Ques1+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques2+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques3+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques4+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques5+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques6+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques7+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques8+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques9+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques10+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques11+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques12+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques13+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques14+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques15+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques16+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques17+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques18+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques19+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques20).alias(\"NumeracyTotal\"), \r\n",
					"                                                                                                                sum(EarlyYearsResults_df.Ques21+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques22+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques23+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques24+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques25+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques26+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques27+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques28+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques29+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques30+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques31+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques32+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques33+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques34+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques35+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques36+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques37+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques38+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques39+\r\n",
					"                                                                                                                EarlyYearsResults_df.Ques40).alias(\"LiteracyTotal\"))\r\n",
					"\r\n",
					""
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# add the percent rank based on year, yearlevel, testlevel and numeracy/literacy groups\r\n",
					"\r\n",
					"EarlyYearsResults_Numeracy_df = EarlyYearsResultsTotals_df.select(\"CampusID\", \r\n",
					"                                                                    \"Ceider\", \r\n",
					"                                                                    \"ClassID\", \r\n",
					"                                                                    \"Year\", \r\n",
					"                                                                    \"YearLevel\", \r\n",
					"                                                                    \"TestLevel\", \r\n",
					"                                                                    \"NumeracyTotal\", \r\n",
					"                                                                    \"LiteracyTotal\",\r\n",
					"                                                                    percent_rank().over(Window.partitionBy(EarlyYearsResultsTotals_df['Year'],\r\n",
					"                                                                                                            EarlyYearsResultsTotals_df['YearLevel'],\r\n",
					"                                                                                                            EarlyYearsResultsTotals_df['TestLevel'])\\\r\n",
					"                                                                                                            .orderBy(EarlyYearsResultsTotals_df['NumeracyTotal'])).alias(\"NumeracyPercentile\")\r\n",
					"                                                                    \r\n",
					"                                                                )\r\n",
					"\r\n",
					"\r\n",
					"EarlyYearsResults_Literacy_df = EarlyYearsResultsTotals_df.select(col(\"CampusID\").alias('xCampusID'), \r\n",
					"                                                                    col(\"Ceider\").alias('xCeider'), \r\n",
					"                                                                    col(\"ClassID\").alias('xClassID'), \r\n",
					"                                                                    col(\"Year\").alias('xYear'), \r\n",
					"                                                                    col(\"YearLevel\").alias('xYearLevel'), \r\n",
					"                                                                    col(\"TestLevel\").alias('xTestLevel'), \r\n",
					"                                                                    percent_rank().over(Window.partitionBy(EarlyYearsResultsTotals_df['Year'],\r\n",
					"                                                                                                            EarlyYearsResultsTotals_df['YearLevel'],\r\n",
					"                                                                                                            EarlyYearsResultsTotals_df['TestLevel'])\\\r\n",
					"                                                                                                            .orderBy(EarlyYearsResultsTotals_df['LiteracyTotal'])).alias(\"LiteracyPercentile\")\r\n",
					"                                                                    \r\n",
					"                                                                )\r\n",
					"\r\n",
					"\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Numeracy_df.join(EarlyYearsResults_Literacy_df, \r\n",
					"                                                                    [col('Year') == col('xYear'),\r\n",
					"                                                                    col('CampusID') == col('xCampusID'),\r\n",
					"                                                                    col('Ceider') == col('xCeider'),\r\n",
					"                                                                    col('ClassID') == col('xClassID'),\r\n",
					"                                                                    col('YearLevel') == col('xYearLevel'),\r\n",
					"                                                                    col('TestLevel') == col('xTestLevel')],\r\n",
					"                                                                    how=\"outer\"\r\n",
					"                                                                    )\r\n",
					"\r\n",
					"# merge the values into single column\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newCampusID\", when(col(\"CampusID\").isNull(), col(\"xCampusID\")).otherwise(col(\"CampusID\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newCeider\", when(col(\"Ceider\").isNull(), col(\"xCeider\")).otherwise(col(\"Ceider\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newClassID\", when(col(\"ClassID\").isNull(), col(\"xClassID\")).otherwise(col(\"ClassID\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newYear\", when(col(\"Year\").isNull(), col(\"xYear\")).otherwise(col(\"Year\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newYearLevel\", when(col(\"YearLevel\").isNull(), col(\"xYearLevel\")).otherwise(col(\"YearLevel\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newTestLevel\", when(col(\"TestLevel\").isNull(), col(\"xTestLevel\")).otherwise(col(\"TestLevel\")) )\r\n",
					"\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.drop(\"CampusID\", \"xCampusID\", \r\n",
					"                                                                        \"Ceider\", \"xCeider\", \r\n",
					"                                                                        \"ClassID\", \"xClassID\", \r\n",
					"                                                                        \"Year\", \"xYear\", \r\n",
					"                                                                        \"YearLevel\", \"xYearLevel\", \r\n",
					"                                                                        \"TestLevel\", \"xTestLevel\")\\\r\n",
					"                                                                .withColumnRenamed(\"newCampusID\", \"CampusID\")\\\r\n",
					"                                                                .withColumnRenamed(\"newCeider\", \"Ceider\")\\\r\n",
					"                                                                .withColumnRenamed(\"newClassID\", \"ClassID\")\\\r\n",
					"                                                                .withColumnRenamed(\"newYear\", \"Year\")\\\r\n",
					"                                                                .withColumnRenamed(\"newYearLevel\", \"YearLevel\")\\\r\n",
					"                                                                .withColumnRenamed(\"newTestLevel\", \"TestLevel\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# numeracy average\r\n",
					"\r\n",
					"num_average_df = EarlyYearsResults_Percentile_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(avg(EarlyYearsResults_Percentile_df['NumeracyTotal']).alias('NumeracyAverage'))\r\n",
					"\r\n",
					"num_average_df = num_average_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
					"\r\n",
					"EarlyYearsResults_NumAverage_df = EarlyYearsResults_Percentile_df.join(num_average_df, \r\n",
					"                                                                        [col('Year') == col('xYear'), \r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
					"                                                                        how='outer')\r\n",
					"\r\n",
					"EarlyYearsResults_NumAverage_df = EarlyYearsResults_NumAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
					"\r\n",
					"\r\n",
					"# literacy average \r\n",
					"\r\n",
					"lit_average_df = EarlyYearsResults_Percentile_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(avg(EarlyYearsResults_Percentile_df['LiteracyTotal']).alias('LiteracyAverage'))\r\n",
					"\r\n",
					"lit_average_df = lit_average_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
					"\r\n",
					"EarlyYearsResults_LitAverage_df = EarlyYearsResults_NumAverage_df.join(lit_average_df, \r\n",
					"                                                                        [col('Year') == col('xYear'), \r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
					"                                                                        how='outer')\r\n",
					"\r\n",
					"EarlyYearsResults_Averages_df = EarlyYearsResults_LitAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
					""
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# numeracy standard deviation\r\n",
					"\r\n",
					"num_stddev_df = EarlyYearsResults_Averages_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(stddev(EarlyYearsResults_Averages_df['NumeracyTotal']).alias('NumeracyStdDev'))\r\n",
					"\r\n",
					"\r\n",
					"num_stddev_df = num_stddev_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
					"\r\n",
					"EarlyYearsResults_NumStdDev_df = EarlyYearsResults_Averages_df.join(num_stddev_df, \r\n",
					"                                                                        [col('Year') == col('xYear'), \r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
					"                                                                        how='outer')\r\n",
					"\r\n",
					"EarlyYearsResults_NumStdDev_df = EarlyYearsResults_NumStdDev_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
					"\r\n",
					"\r\n",
					"# literacy average \r\n",
					"\r\n",
					"lit_stddev_df = EarlyYearsResults_Averages_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(stddev(EarlyYearsResults_Averages_df['LiteracyTotal']).alias('LiteracyStdDev'))\r\n",
					"\r\n",
					"lit_stddev_df = lit_stddev_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
					"\r\n",
					"EarlyYearsResults_LitAverage_df = EarlyYearsResults_NumStdDev_df.join(lit_stddev_df, \r\n",
					"                                                                        [col('Year') == col('xYear'), \r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
					"                                                                        how='outer')\r\n",
					"\r\n",
					"EarlyYearsResultsTotals_df = EarlyYearsResults_LitAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
					""
				],
				"execution_count": 84
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Pivot Results from Wide to Long format (PREP and YEAR 1)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# this table will pivot the early years result Questions from columns to rows \r\n",
					"\r\n",
					"df = EarlyYearsResults_df.to_koalas().melt(id_vars=['CampusID', 'Ceider', 'ClassID', 'Year', 'YearLevel', 'TestLevel'],\r\n",
					"                                            value_vars=['Ques1', 'Ques2', 'Ques3', 'Ques4', 'Ques5', 'Ques6', 'Ques7', 'Ques8', 'Ques9', 'Ques10',\r\n",
					"                                                        'Ques11', 'Ques12', 'Ques13', 'Ques14', 'Ques15', 'Ques16', 'Ques17', 'Ques18', 'Ques19', 'Ques20',\r\n",
					"                                                        'Ques21', 'Ques22', 'Ques23', 'Ques24', 'Ques25', 'Ques26', 'Ques27', 'Ques28', 'Ques29', 'Ques30',\r\n",
					"                                                        'Ques31', 'Ques32', 'Ques33', 'Ques34', 'Ques35', 'Ques36', 'Ques37', 'Ques38', 'Ques39', 'Ques40'],\r\n",
					"                                            var_name=\"Question\",\r\n",
					"                                            value_name = \"Result\")\r\n",
					"\r\n",
					"EarlyYearsResultsLong_df = df.to_spark()\r\n",
					""
				],
				"execution_count": 85
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Remove the 'Ques' from the Question number in the results DeltaTable"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# extract the numeral from the Ques## column names\r\n",
					"EarlyYearsResultsLong_df = EarlyYearsResultsLong_df.withColumn(\"Question\", substring(\"Question\", 5, len(\"Question\")-4))\r\n",
					"\r\n",
					"# Create SKQID to uniquely identify the different year levels (Prep and Year 1)\r\n",
					"EarlyYearsResultsLong_df = EarlyYearsResultsLong_df.withColumn(\"SKQID\", concat_ws(\"-\", col('YearLevel'), col('Question')))"
				],
				"execution_count": 86
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Convert answers table from wide to long format "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# convert the answer table to long format (same as the year 2 student answers)\r\n",
					"\r\n",
					"df = EYAnswers_df.to_koalas().melt(id_vars=['Year', 'Question'],\r\n",
					"                                            value_vars=['Numeracy', 'Literacy'],\r\n",
					"                                            var_name=\"QuestionType\",\r\n",
					"                                            value_name = \"Answer\")\r\n",
					"\r\n",
					"EYAnswers_df = df.to_spark()\r\n",
					""
				],
				"execution_count": 87
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Pivot Results from Wide to Long format (YEAR 2) + AUTOMARKER"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# wide to long conversion for year 2 and auto marker\r\n",
					"\r\n",
					"df = EYResultsYear2_df.to_koalas().melt(id_vars=['CampusID', 'Ceider', 'ClassID', 'QuestionType', 'Status', 'StudentEmailID', 'StudentName', 'TeacherEmailID', 'TeacherName', 'Year', 'YearLevel', 'TestLevel'],\r\n",
					"                                            value_vars=['Ques1', 'Ques2', 'Ques3', 'Ques4', 'Ques5', 'Ques6', 'Ques7', 'Ques8', 'Ques9', 'Ques10',\r\n",
					"                                                        'Ques11', 'Ques12', 'Ques13', 'Ques14', 'Ques15', 'Ques16', 'Ques17', 'Ques18', 'Ques19', 'Ques20',\r\n",
					"                                                        'Ques21', 'Ques22', 'Ques23', 'Ques24', 'Ques25'],\r\n",
					"                                            var_name=\"Question\",\r\n",
					"                                            value_name = \"StudentAnswer\")\r\n",
					"\r\n",
					"EYResultsYear2Long_df = df.to_spark()\r\n",
					"\r\n",
					"# extract the numeral from the Ques## column names\r\n",
					"EYResultsYear2Long_df = EYResultsYear2Long_df.withColumn(\"Question\", substring(\"Question\", 5, len(\"Question\")-4))\r\n",
					"\r\n",
					"\r\n",
					"# combine the student answers with the actual answers table\r\n",
					"\r\n",
					"EYAnswers_df = EYAnswers_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('Question', 'xQuestion').withColumnRenamed('QuestionType', 'xQuestionType')\r\n",
					"\r\n",
					"joined_df = EYResultsYear2Long_df.join(EYAnswers_df, [col('Year') == col('xYear'), col('Question') == col('xQuestion'), col('QuestionType') == col('xQuestionType')], how='left')\r\n",
					"\r\n",
					"joinedcleaned_df = joined_df.drop('xYear').drop('xQuestion').drop('xQuestionType')\r\n",
					"\r\n",
					"# do the correction by comparing StudentAnswer to the real Answer\r\n",
					"EYResultsYear2LongFinal_df = joinedcleaned_df.withColumn('Result', when(trim(lower(joinedcleaned_df.StudentAnswer)) == trim(lower(joinedcleaned_df.Answer)), 1).otherwise(0))\r\n",
					""
				],
				"execution_count": 95
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# create the SKQID to uniquely identify between literacy and numeracy test results\r\n",
					"EYResultsYear2LongFinal_df = EYResultsYear2LongFinal_df.withColumn('SKQID', when(EYResultsYear2LongFinal_df['QuestionType'] == \"Literacy\", \r\n",
					"                                                                                concat_ws(\"-\", col('YearLevel'), col('Question'), lit(\"Lit\")))\\\r\n",
					"                                                                                .otherwise(concat_ws(\"-\", col('YearLevel'), col('Question'), lit(\"Num\")))\r\n",
					"                                                                    )\r\n",
					""
				],
				"execution_count": 89
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create Results Totals tables (YEAR 2)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# create the totals dataframe for year 2\r\n",
					"\r\n",
					"EarlyYearsResultsTotalsYear2Numeracy_df = EYResultsYear2LongFinal_df.filter(EYResultsYear2LongFinal_df.QuestionType == 'Numeracy')\r\n",
					"\r\n",
					"EarlyYearsResultsTotalsYear2Literacy_df = EYResultsYear2LongFinal_df.filter(EYResultsYear2LongFinal_df.QuestionType == 'Literacy')\r\n",
					"\r\n",
					"EarlyYearsResultsTotalsYear2Numeracy_df = EarlyYearsResultsTotalsYear2Numeracy_df.groupBy(\"CampusID\", \"Ceider\",\t\"ClassID\", \"Year\", \"YearLevel\", \"TestLevel\").agg(sum(EarlyYearsResultsTotalsYear2Numeracy_df.Result).alias(\"NumeracyTotal\"))\r\n",
					"\r\n",
					"EarlyYearsResultsTotalsYear2Literacy_df = EarlyYearsResultsTotalsYear2Literacy_df.groupBy(\"CampusID\", \"Ceider\",\t\"ClassID\", \"Year\", \"YearLevel\", \"TestLevel\").agg(sum(EarlyYearsResultsTotalsYear2Literacy_df.Result).alias(\"LiteracyTotal\"))\r\n",
					"\r\n",
					"\r\n",
					"EarlyYearsResultsTotalsYear2Literacy_df = EarlyYearsResultsTotalsYear2Literacy_df.withColumnRenamed(\"CampusID\", \"xCampusID\")\\\r\n",
					"                                                                                    .withColumnRenamed(\"Ceider\", \"xCeider\")\\\r\n",
					"                                                                                    .withColumnRenamed(\"ClassID\", \"xClassID\")\\\r\n",
					"                                                                                    .withColumnRenamed(\"Year\", \"xYear\")\\\r\n",
					"                                                                                    .withColumnRenamed(\"YearLevel\", \"xYearLevel\")\\\r\n",
					"                                                                                    .withColumnRenamed(\"TestLevel\", \"xTestLevel\")\r\n",
					"\r\n",
					"\r\n",
					"# join the numeracy and literacy results \r\n",
					"\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Numeracy_df.join(EarlyYearsResultsTotalsYear2Literacy_df, [col('CampusID') == col('xCampusID'),\r\n",
					"                                                                                                                                col('Ceider') == col('xCeider'),\r\n",
					"                                                                                                                                col('ClassID') == col('xClassID'),\r\n",
					"                                                                                                                                col('Year') == col('xYear'),\r\n",
					"                                                                                                                                col('YearLevel') == col('xYearLevel'),\r\n",
					"                                                                                                                                col('TestLevel') == col('xTestLevel')],\r\n",
					"                                                                                                                                how=\"outer\")\r\n",
					"\r\n",
					"# merge the values into single column\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newCampusID\", when(col(\"CampusID\").isNull(), col(\"xCampusID\")).otherwise(col(\"CampusID\")) )\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newCeider\", when(col(\"Ceider\").isNull(), col(\"xCeider\")).otherwise(col(\"Ceider\")) )\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newClassID\", when(col(\"ClassID\").isNull(), col(\"xClassID\")).otherwise(col(\"ClassID\")) )\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newYear\", when(col(\"Year\").isNull(), col(\"xYear\")).otherwise(col(\"Year\")) )\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newYearLevel\", when(col(\"YearLevel\").isNull(), col(\"xYearLevel\")).otherwise(col(\"YearLevel\")) )\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newTestLevel\", when(col(\"TestLevel\").isNull(), col(\"xTestLevel\")).otherwise(col(\"TestLevel\")) )\r\n",
					"\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.drop(\"CampusID\", \"xCampusID\", \r\n",
					"                                                                                    \"Ceider\", \"xCeider\", \r\n",
					"                                                                                    \"ClassID\", \"xClassID\", \r\n",
					"                                                                                    \"Year\", \"xYear\", \r\n",
					"                                                                                    \"YearLevel\", \"xYearLevel\", \r\n",
					"                                                                                    \"TestLevel\", \"xTestLevel\")\\\r\n",
					"                                                                            .withColumnRenamed(\"newCampusID\", \"CampusID\")\\\r\n",
					"                                                                            .withColumnRenamed(\"newCeider\", \"Ceider\")\\\r\n",
					"                                                                            .withColumnRenamed(\"newClassID\", \"ClassID\")\\\r\n",
					"                                                                            .withColumnRenamed(\"newYear\", \"Year\")\\\r\n",
					"                                                                            .withColumnRenamed(\"newYearLevel\", \"YearLevel\")\\\r\n",
					"                                                                            .withColumnRenamed(\"newTestLevel\", \"TestLevel\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# add the percent rank based on year, yearlevel, testlevel and numeracy/literacy groups\r\n",
					"\r\n",
					"EarlyYearsResultsY2_Numeracy_df = EarlyYearsResultsTotalsYear2Joined_df.select(\"CampusID\", \r\n",
					"                                                                                \"Ceider\", \r\n",
					"                                                                                \"ClassID\", \r\n",
					"                                                                                \"Year\", \r\n",
					"                                                                                \"YearLevel\", \r\n",
					"                                                                                \"TestLevel\", \r\n",
					"                                                                                \"NumeracyTotal\", \r\n",
					"                                                                                \"LiteracyTotal\",\r\n",
					"                                                                                percent_rank().over(Window.partitionBy(EarlyYearsResultsTotalsYear2Joined_df['Year'],\r\n",
					"                                                                                                                        EarlyYearsResultsTotalsYear2Joined_df['YearLevel'],\r\n",
					"                                                                                                                        EarlyYearsResultsTotalsYear2Joined_df['TestLevel'])\\\r\n",
					"                                                                                                                        .orderBy(EarlyYearsResultsTotalsYear2Joined_df['NumeracyTotal'])).alias(\"NumeracyPercentile\")\r\n",
					"                                                                    \r\n",
					"                                                                                )\r\n",
					"\r\n",
					"EarlyYearsResultsY2_Literacy_df = EarlyYearsResultsTotalsYear2Joined_df.select(col(\"CampusID\").alias('xCampusID'), \r\n",
					"                                                                                col(\"Ceider\").alias('xCeider'), \r\n",
					"                                                                                col(\"ClassID\").alias('xClassID'), \r\n",
					"                                                                                col(\"Year\").alias('xYear'), \r\n",
					"                                                                                col(\"YearLevel\").alias('xYearLevel'), \r\n",
					"                                                                                col(\"TestLevel\").alias('xTestLevel'), \r\n",
					"                                                                                percent_rank().over(Window.partitionBy(EarlyYearsResultsTotalsYear2Joined_df['Year'],\r\n",
					"                                                                                                                        EarlyYearsResultsTotalsYear2Joined_df['YearLevel'],\r\n",
					"                                                                                                                        EarlyYearsResultsTotalsYear2Joined_df['TestLevel'])\\\r\n",
					"                                                                                                                        .orderBy(EarlyYearsResultsTotalsYear2Joined_df['LiteracyTotal'])).alias(\"LiteracyPercentile\")\r\n",
					"                                            \r\n",
					"                                                                                )\r\n",
					"\r\n",
					"\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResultsY2_Numeracy_df.join(EarlyYearsResultsY2_Literacy_df, \r\n",
					"                                                                        [col('Year') == col('xYear'),\r\n",
					"                                                                        col('CampusID') == col('xCampusID'),\r\n",
					"                                                                        col('Ceider') == col('xCeider'),\r\n",
					"                                                                        col('ClassID') == col('xClassID'),\r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'),\r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')],\r\n",
					"                                                                        how=\"outer\"\r\n",
					"                                                                        )\r\n",
					"\r\n",
					"# merge the values into single column\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newCampusID\", when(col(\"CampusID\").isNull(), col(\"xCampusID\")).otherwise(col(\"CampusID\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newCeider\", when(col(\"Ceider\").isNull(), col(\"xCeider\")).otherwise(col(\"Ceider\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newClassID\", when(col(\"ClassID\").isNull(), col(\"xClassID\")).otherwise(col(\"ClassID\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newYear\", when(col(\"Year\").isNull(), col(\"xYear\")).otherwise(col(\"Year\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newYearLevel\", when(col(\"YearLevel\").isNull(), col(\"xYearLevel\")).otherwise(col(\"YearLevel\")) )\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newTestLevel\", when(col(\"TestLevel\").isNull(), col(\"xTestLevel\")).otherwise(col(\"TestLevel\")) )\r\n",
					"\r\n",
					"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.drop(\"CampusID\", \"xCampusID\", \r\n",
					"                                                                        \"Ceider\", \"xCeider\", \r\n",
					"                                                                        \"ClassID\", \"xClassID\", \r\n",
					"                                                                        \"Year\", \"xYear\", \r\n",
					"                                                                        \"YearLevel\", \"xYearLevel\", \r\n",
					"                                                                        \"TestLevel\", \"xTestLevel\")\\\r\n",
					"                                                                .withColumnRenamed(\"newCampusID\", \"CampusID\")\\\r\n",
					"                                                                .withColumnRenamed(\"newCeider\", \"Ceider\")\\\r\n",
					"                                                                .withColumnRenamed(\"newClassID\", \"ClassID\")\\\r\n",
					"                                                                .withColumnRenamed(\"newYear\", \"Year\")\\\r\n",
					"                                                                .withColumnRenamed(\"newYearLevel\", \"YearLevel\")\\\r\n",
					"                                                                .withColumnRenamed(\"newTestLevel\", \"TestLevel\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 97
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# numeracy average\r\n",
					"\r\n",
					"num_average_df = EarlyYearsResults_Percentile_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(avg(EarlyYearsResults_Percentile_df['NumeracyTotal']).alias('NumeracyAverage'))\r\n",
					"\r\n",
					"num_average_df = num_average_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
					"\r\n",
					"EarlyYearsResults_NumAverage_df = EarlyYearsResults_Percentile_df.join(num_average_df, \r\n",
					"                                                                        [col('Year') == col('xYear'), \r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
					"                                                                        how='outer')\r\n",
					"\r\n",
					"EarlyYearsResults_NumAverage_df = EarlyYearsResults_NumAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
					"\r\n",
					"\r\n",
					"# literacy average \r\n",
					"\r\n",
					"lit_average_df = EarlyYearsResults_Percentile_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(avg(EarlyYearsResults_Percentile_df['LiteracyTotal']).alias('LiteracyAverage'))\r\n",
					"\r\n",
					"lit_average_df = lit_average_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
					"\r\n",
					"EarlyYearsResults_LitAverage_df = EarlyYearsResults_NumAverage_df.join(lit_average_df, \r\n",
					"                                                                        [col('Year') == col('xYear'), \r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
					"                                                                        how='outer')\r\n",
					"\r\n",
					"EarlyYearsResults_Averages_df = EarlyYearsResults_LitAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')"
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# numeracy standard deviation\r\n",
					"\r\n",
					"num_stddev_df = EarlyYearsResults_Averages_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(stddev(EarlyYearsResults_Averages_df['NumeracyTotal']).alias('NumeracyStdDev'))\r\n",
					"\r\n",
					"\r\n",
					"num_stddev_df = num_stddev_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
					"\r\n",
					"EarlyYearsResults_NumStdDev_df = EarlyYearsResults_Averages_df.join(num_stddev_df, \r\n",
					"                                                                        [col('Year') == col('xYear'), \r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
					"                                                                        how='outer')\r\n",
					"\r\n",
					"EarlyYearsResults_NumStdDev_df = EarlyYearsResults_NumStdDev_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
					"\r\n",
					"\r\n",
					"# literacy average \r\n",
					"\r\n",
					"lit_stddev_df = EarlyYearsResults_Averages_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(stddev(EarlyYearsResults_Averages_df['LiteracyTotal']).alias('LiteracyStdDev'))\r\n",
					"\r\n",
					"lit_stddev_df = lit_stddev_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
					"\r\n",
					"EarlyYearsResults_LitAverage_df = EarlyYearsResults_NumStdDev_df.join(lit_stddev_df, \r\n",
					"                                                                        [col('Year') == col('xYear'), \r\n",
					"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
					"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
					"                                                                        how='outer')\r\n",
					"\r\n",
					"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResults_LitAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')"
				],
				"execution_count": 99
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Join Prep/Year 1 and Year 2 datasets"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# join the prep/year 1 and year 2 totals table together (union)\r\n",
					"\r\n",
					"EarlyYearsResultsTotalsCombined_df = EarlyYearsResultsTotalsYear2Joined_df.union(EarlyYearsResultsTotals_df)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Senior Outcomes transformation"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# create a new SAT Column (SBA) that provides counts instead of codes. \r\n",
					"# Codes in the file are N - None, A - Apprenticeship, T - Traineeship\r\n",
					"\r\n",
					"SeniorOutcomes_df = SeniorOutcomes_df.withColumn(\"SBA\", when(SeniorOutcomes_df.sat == \"N\", lit(0)).otherwise(lit(1)))\r\n",
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# convert from wide to long format\r\n",
					"SO_df = SeniorOutcomes_df.to_koalas().melt(id_vars=['year', 'school', 'last_name', 'given_names', 'sex', 'birth_date', 'indigenous', 'qcia', 'qce', 'vet'],\r\n",
					"                                            value_vars=['certs_i', 'certs_ii', 'certs_iii', 'certs_iv', 'diplomas', 'adv_diplomas', 'SBA', 'uni_subjects'],\r\n",
					"                                            var_name=\"CertificationType\",\r\n",
					"                                            value_name = \"CertsAchieved\")\r\n",
					"\r\n",
					"SeniorOutcomesLong_df = SO_df.to_spark()"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Save the new tables "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"saveToTarget(DMStudentDemographic_df, destination_p, f'{version}/DMStudentDemographic_pseudo')\r\n",
					"saveToTarget(DMStaffDemographic_df, destination_p, f'{version}/DMStaffDemographic_pseudo')\r\n",
					"\r\n",
					"saveToTarget(EarlyYearsResultsLong_df, destination_p, f'{version}/EarlyYearsResultsLong_pseudo')\r\n",
					"saveToTarget(EarlyYearsResultsTotals_df, destination_p, f'{version}/EarlyYearsResultsTotals_pseudo')\r\n",
					"\r\n",
					"saveToTarget(EYResultsYear2LongFinal_df, destination_p, f'{version}/EarlyYearsResultsYear2Long_pseudo')\r\n",
					"saveToTarget(EarlyYearsResultsTotalsYear2Joined_df, destination_p, f'{version}/EarlyYearsResultsTotalsYear2Joined_pseudo')\r\n",
					"\r\n",
					"saveToTarget(EarlyYearsResultsTotalsCombined_df, destination_p, f'{version}/EarlyYearsResultsTotalsCombinedYears_pseudo')\r\n",
					"\r\n",
					"# Test completion tables \r\n",
					"saveToTarget(EarlyYearsTestCompletion_df, destination_p, f'{version}/EarlyYearsTestCompletion_pseudo')\r\n",
					"\r\n",
					"# Senior Outcomes tables \r\n",
					"saveToTarget(SeniorOutcomesLong_df, destination_p, f'{version}/SeniorOutcomesLong_pseudo')"
				],
				"execution_count": null
			}
		]
	}
}