{
	"name": "SQL_Transforms",
	"properties": {
		"folder": {
			"name": "Stage3"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "acc37a93-4c74-48b8-b138-32aa1385ae8b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## This note book contains data transformations using SQL\r\n",
					"This notebook should not be run on its own, rather it is run as part of the Transforms_Connector notebook"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Load all required dataframes and convert them to temp sql views"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# setup the temp tables we need\r\n",
					"sourcep = oea.stage2p\r\n",
					"source3p = oea.stage3p\r\n",
					"\r\n",
					"# used for classenrolment view\r\n",
					"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
					"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
					"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
					"#dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
					"#dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
					"#dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
					"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
					"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
					"\r\n",
					"# stage 3\r\n",
					"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
					"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
					"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
					"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
					"\r\n",
					"\r\n",
					"# used for active student view\r\n",
					"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
					"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
					"\r\n",
					"# used for naplan and acer participation view\r\n",
					"factstudentenrolmentcounts_df = spark.read.load(sourcep + \"/enrolment/DMFactStudentEnrolmentCounts_pseudo\", format='delta')\r\n",
					"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
					"# stage 3 naplan and acer participation view\r\n",
					"factnaplanstudentyearresult_df = spark.read.load(source3p + \"/pilot/DMFactNaplanStudentYearResult_pseudo\", format='delta')\r\n",
					"factpatresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
					"\r\n",
					"# used for manual AE Learning Task\r\n",
					"ae_manuallearningtasks_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
					"\r\n",
					"# used for manual AE Semester Report\r\n",
					"ae_manualsemesterreports_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
					"\r\n",
					"\r\n",
					"# used for ODS tables (+ dmcampus_df already added above)\r\n",
					"odsactivity_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
					"odsactivityenrolment_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
					"odscompasssubject_df = spark.read.load(sourcep + \"/_ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
					"odsstaffdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
					"odsstudentdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
					"\r\n",
					"odsstafforganisationdetails_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffOrganisationDetails_pseudo\", format='delta')\r\n",
					"odsstudentorganisationdetails_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentOrganisationDetails_pseudo\", format='delta')\r\n",
					"odsstudentorganisationmilestones_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentOrganisationMilestones_pseudo\", format='delta')\r\n",
					"\r\n",
					"# create temp sql views\r\n",
					"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
					"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
					"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
					"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
					"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
					"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
					"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
					"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
					"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
					"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
					"\r\n",
					"factstudentenrolmentcounts_df.createOrReplaceTempView('vw_factstudentenrolmentcounts')\r\n",
					"factnaplanstudentyearresult_df.createOrReplaceTempView('vw_factnaplanstudentyearresult')\r\n",
					"factpatresults_df.createOrReplaceTempView('vw_factpatresults_df')\r\n",
					"\r\n",
					"ae_manuallearningtasks_df.createOrReplaceTempView('vw_aemanuallearningtasks')\r\n",
					"ae_manualsemesterreports_df.createOrReplaceTempView('vw_aemanualsemesterreports')\r\n",
					"\r\n",
					"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \r\n",
					"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \r\n",
					"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \r\n",
					"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \r\n",
					"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') \r\n",
					"\r\n",
					"odsstafforganisationdetails_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationDetails') \r\n",
					"odsstudentorganisationdetails_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationDetails') \r\n",
					"odsstudentorganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationMilestones')\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Create the SQL temp views from the loaded dataframes "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CREATE TEMP VIEW vw_classenrolment\r\n",
					"AS\r\n",
					"SELECT cy.Year AS CalendarYear,\r\n",
					"    C.SchoolId AS AGEID,\r\n",
					"    c.CampusSuburbAndName,\r\n",
					"    student.FirstName  AS  StudentFirstName,\r\n",
					"    student.LastName AS StudentLastName,\r\n",
					"    Student.Ceider,\r\n",
					"    yl.YearLevelSifDesc AS YearLevel,\r\n",
					"    s.SubjectShortName AS Subject,\r\n",
					"    a.ActivityName AS  ClassName,\r\n",
					"    a.ActivityCode AS ClassCode,\r\n",
					"    ClassStartDate.date AS ClassStartDate,\r\n",
					"    ClassEndDate.date AS ClassEndDate,\r\n",
					"    staff.FirstName AS StaffFirstName,\r\n",
					"    staff.LastName AS StaffLastName\r\n",
					"\r\n",
					"    FROM vw_factsubjectenrolment f\r\n",
					"    JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\r\n",
					"    AND a.ActivityTypeDescription = 'Standard Class'\r\n",
					"    JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\r\n",
					"    JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\r\n",
					"    JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\r\n",
					"    JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
					"    JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
					"    JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\r\n",
					"\r\n",
					"    JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\r\n",
					"    JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\r\n",
					"\r\n",
					"    AND cy.Year = 2022\r\n",
					"    WHERE ClassEndDate.date > current_date() -- spark sql uses current_date() instead of GETDATE()\r\n",
					"    AND s.SubjectShortName <> 'Unknown'\r\n",
					"    ORDER BY\r\n",
					"    AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CREATE TEMP VIEW vw_activestudent\r\n",
					"AS\r\n",
					"SELECT SchoolID AS SchoolAGEID,\r\n",
					"    c.CampusSuburbAndName,\r\n",
					"    pd.FirstName,\r\n",
					"    pd.LastName,\r\n",
					"    yl.SKYearLevel,\r\n",
					"    rg.RollGroupDesc AS RollGroup,\r\n",
					"    pd.Ceider,\r\n",
					"    pd.SKPerson, \r\n",
					"    pd.Disability,\r\n",
					"    pd.ATSIId,\r\n",
					"    pd.LBOTE\r\n",
					"\r\n",
					"FROM vw_factpersonmilestone f\r\n",
					"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
					"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
					"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
					"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
					"WHERE \r\n",
					"    f.IsCurrentMilestone = 'True'\r\n",
					"    AND f.IsActiveMilestone = 'True'\r\n",
					"    AND pd.PersonType = 'Student'\r\n",
					"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CREATE TEMP VIEW vw_inactivestudent\r\n",
					"AS\r\n",
					"SELECT SchoolID AS SchoolAGEID,\r\n",
					"    c.CampusSuburbAndName,\r\n",
					"    pd.FirstName,\r\n",
					"    pd.LastName,\r\n",
					"    yl.YearLevelSifDesc AS YearLevel,\r\n",
					"    rg.RollGroupDesc AS RollGroup,\r\n",
					"    pd.Ceider,\r\n",
					"    pd.SKPerson, \r\n",
					"    pd.Disability,\r\n",
					"    pd.ATSIId,\r\n",
					"    pd.LBOTE,\r\n",
					"    d.date AS DateLeft\r\n",
					"    \r\n",
					"FROM\r\n",
					"    vw_factpersonmilestone f\r\n",
					"JOIN vw_dmdate d ON f.SKMilestoneStartDate = d.SKDate\r\n",
					"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
					"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
					"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
					"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
					"\r\n",
					"WHERE \r\n",
					"    f.IsCurrentMilestone = 'True'\r\n",
					"    AND f.IsActiveMilestone = 'False'\r\n",
					"    AND pd.PersonType = 'Student'\r\n",
					"    AND Date < current_date()\r\n",
					"ORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CREATE TEMP VIEW vw_naplanparticipation\r\n",
					"as\r\n",
					"select \r\n",
					"*\r\n",
					"--, round(cast(#naplan_enrolled as float) / cast(#students_enrolled as float), 2) as participation_perc \r\n",
					", round(naplan_enrolled / students_enrolled , 2) as participation_perc \r\n",
					"from \r\n",
					"(select \r\n",
					"a.skcampus\r\n",
					", a.skyear\r\n",
					", a.skyearlevel\r\n",
					", sum(studentcount) as students_enrolled\r\n",
					", innerquery.naplan_enrolled from vw_factstudentenrolmentcounts a\r\n",
					"left join vw_dmdate b on a.skdate = b.skdate\r\n",
					"left join \r\n",
					"\t(select \r\n",
					"\t\tskcampus\r\n",
					"\t\t, skyear\r\n",
					"\t\t, skyearlevel\r\n",
					"\t\t, count(distinct skpersistentstudentid) as naplan_enrolled \r\n",
					"\t\tfrom vw_factnaplanstudentyearresult\r\n",
					"\t\t\tgroup by skcampus, skyear, skyearlevel) innerquery\r\n",
					"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skyearlevel = innerquery.skyearlevel\r\n",
					"where a.skyearlevel in (11, 2, 12, 3) \r\n",
					"and b.MonthNumberOfYear = 5\r\n",
					"group by a.skcampus, a.skyear, a.skyearlevel, innerquery.naplan_enrolled\r\n",
					") wholequery\r\n",
					"--order by skcampus, skyear, skyearlevel\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CREATE TEMP VIEW vw_acerparticipation\r\n",
					"as\r\n",
					"select \r\n",
					"*\r\n",
					"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
					", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
					"from\r\n",
					"(\r\n",
					"select \r\n",
					"\t--*\r\n",
					"\ta.skcampus\r\n",
					"\t, a.skyear\r\n",
					"\t, a.skdate\r\n",
					"\t, a.skyearlevel\r\n",
					"\t, sum(studentcount) as students_enrolled\r\n",
					"\t, innerquery.count_of_tests \r\n",
					"from vw_factstudentenrolmentcounts a\r\n",
					"\r\n",
					"left join \r\n",
					"\t(\t\r\n",
					"\t\tselect innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, sum(acer_tests) as count_of_tests from \r\n",
					"\t\t\t(\r\n",
					"\t\t\t\tselect \r\n",
					"\t\t\t\t\t\tskcampus\r\n",
					"\t\t\t\t\t\t, skyear\r\n",
					"\t\t\t\t\t\t, SKDate\r\n",
					"\t\t\t\t\t\t, skyearlevel\r\n",
					"\t\t\t\t\t\t, SKACERStudent\r\n",
					"\t\t\t\t\t\t, count(distinct skpattest) as acer_tests\r\n",
					"\t\t\t\t\t\tfrom vw_factpatresults_df\r\n",
					"\t\t\t\t\t\t\tgroup by skcampus, skyear, skdate, skyearlevel, SKACERStudent --9\r\n",
					"\t\t\t) innerinner\r\n",
					"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel\r\n",
					"\t) innerquery\r\n",
					"\r\n",
					"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skdate = innerquery.skdate and a.skyearlevel = innerquery.skyearlevel \r\n",
					"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
					"group by a.skcampus, a.skyear, a.skdate, a.skyearlevel, innerquery.count_of_tests\r\n",
					") wholequery"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CREATE TEMP VIEW vw_ae_manual_learningtasks\r\n",
					"as\r\n",
					"\r\n",
					"select \r\n",
					"m.School_Name\r\n",
					",m.Area\r\n",
					",m.Semester\r\n",
					",m.Year\r\n",
					",m.SubjectName\r\n",
					",m.Code\r\n",
					",m.TeacherImportIdentifier\r\n",
					",m.TaskId\r\n",
					",m.IsSubjectWide\r\n",
					",m.TaskName\r\n",
					",m.StudentCode\r\n",
					",m.GovtCode1\r\n",
					",m.StudentLastName\r\n",
					",m.StudentFirstName\r\n",
					",m.YearLevel\r\n",
					"--,case when m.YearLevel is null then m.YearLevel else concat('Year ' , cast(m.YearLevel as string)) end\r\n",
					",m.ResultType\r\n",
					",m.PrimaryGrade\r\n",
					",m.CommentTimestamp\r\n",
					",m.CommentPosterCode\r\n",
					",m.CommentPosterName\r\n",
					",m.Result\r\n",
					",m.ComponentName\r\n",
					",m.ComponentType\r\n",
					",m.IsIncludedInReport\r\n",
					",m.ReportCycleName\r\n",
					",m.DueDate\r\n",
					",m.Category\r\n",
					",m.SubmissionStatus\r\n",
					",m.ReceiptTime\r\n",
					",m.BKID\r\n",
					",innerquery.ceider\r\n",
					",innerquery.schoolid\r\n",
					",innerquery.skcampus\r\n",
					"from vw_aemanuallearningtasks m\r\n",
					"\r\n",
					"left join \r\n",
					"(\r\n",
					"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, b.skyearlevel,  c.schoolname, c.area, c.schoolid, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
					"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
					"    from vw_dmpersondemographic a \r\n",
					"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
					"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
					"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
					"    where a.persontype = 'Student'\r\n",
					"        and b.iscurrentmilestone = 'True'\r\n",
					") innerquery\r\n",
					"\r\n",
					"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
					"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
					"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
					"--and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
					"and trim(case when m.YearLevel is null then -1 else m.YearLevel end) = trim(innerquery.yearlevelsifcode)\r\n",
					"and lower(m.area) = lower(innerquery.area)\r\n",
					"\r\n",
					"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CREATE TEMP VIEW vw_ae_manual_semesterreports\r\n",
					"as\r\n",
					"\r\n",
					"select \r\n",
					"m.* \r\n",
					", innerquery.ceider\r\n",
					", innerquery.schoolid\r\n",
					", innerquery.skcampus\r\n",
					"from vw_aemanualsemesterreports m\r\n",
					"\r\n",
					"left join \r\n",
					"(\r\n",
					"    select a.ceider, a.firstname, a.lastname, a.persontype\r\n",
					"    ,b.skcampus\r\n",
					"    ,c.schoolname, c.area, c.schoolid\r\n",
					"    ,b.skyearlevel \r\n",
					"    ,d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
					"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
					"    from vw_dmpersondemographic a \r\n",
					"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
					"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
					"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
					"    where a.persontype = 'Student'\r\n",
					"         and b.iscurrentmilestone = 'True'\r\n",
					") innerquery\r\n",
					"\r\n",
					"on lower(m.studentfirstname) = trim(lower(innerquery.firstname))\r\n",
					"and lower(m.studentlastname) = trim(lower(innerquery.lastname))\r\n",
					"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
					"and lower(m.area) = lower(innerquery.area)\r\n",
					"and trim(lower(m.studentyearlevel)) = trim(lower(innerquery.yearlevelsifdesc))\r\n",
					"\r\n",
					"\r\n",
					"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CREATE TEMP VIEW vw_ods_studentclass\r\n",
					"as\r\n",
					"\r\n",
					"SELECT distinct\r\n",
					"d.FirstName AS StudentFirstName \r\n",
					",d.LastName AS StudentLastName\r\n",
					",d.CompassPersonId\r\n",
					",d.GovCode1 AS Ceider\r\n",
					",s.SubjectLongName\r\n",
					",a.SubjectCode\r\n",
					",a.ActivityName\r\n",
					",a.ActivityTypeDescription\r\n",
					",a.ManagingCompassPersonId\r\n",
					",staff.firstname\r\n",
					",staff.lastname\r\n",
					",ae.ActivityEnrolmentStartDate\r\n",
					",ae.ActivityEnrolmentEndDate\r\n",
					",concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
					",a.CampusId AS AGEID\r\n",
					",c.CampusSuburbAndName\r\n",
					"--,c.CompassSchoolURL\r\n",
					",s.AcademicYear\r\n",
					",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
					",a.IsCurrent as IsCurrent_Activity\r\n",
					",s.IsCurrent as IsCurrent_Subject\r\n",
					",staff.iscurrent as IsCurrent_Staff\r\n",
					",d.iscurrent as IsCurrent_Student\r\n",
					"\r\n",
					"\r\n",
					"FROM \r\n",
					"vw_CompassODSStudentDemographic d \r\n",
					"\r\n",
					"JOIN vw_CompassODSActivityEnrolment ae \r\n",
					"ON d.CompassPersonId = ae.CompassPersonId\r\n",
					"\r\n",
					"JOIN vw_CompassODSActivity a \r\n",
					"ON ae.ActivityCode = a.ActivityCode\r\n",
					"AND ae.CampusId = a.CampusId\r\n",
					"\r\n",
					"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
					"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
					"AND a.CampusId = s.CampusId\r\n",
					"\r\n",
					"LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
					"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
					"\r\n",
					"JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\r\n",
					"WHERE \r\n",
					"d.iscurrent is True\r\n",
					"AND a.ActivityTypeDescription = 'Standard Class'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
					"as\r\n",
					"\r\n",
					"-- select count(*) from (\r\n",
					"\r\n",
					"select \r\n",
					"year\r\n",
					", YearLevel\r\n",
					", CampusID\r\n",
					", SchoolName\r\n",
					", TeacherID\r\n",
					", TeacherName\r\n",
					", StudentID \r\n",
					", StudentName\r\n",
					", ClassName\r\n",
					", ClassID\r\n",
					", StaffEmail\r\n",
					", StudentEmail\r\n",
					", ceider\r\n",
					"-- , staff_login_email\r\n",
					"-- , student_login_email\r\n",
					"\r\n",
					"from \r\n",
					"(\r\n",
					"\r\n",
					"select \r\n",
					"\r\n",
					"year\r\n",
					", YearLevel\r\n",
					", CampusID\r\n",
					", SchoolName\r\n",
					", TeacherID\r\n",
					", TeacherName\r\n",
					", StudentID \r\n",
					", StudentName\r\n",
					", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
					", ClassName\r\n",
					", ClassID\r\n",
					", StaffEmail\r\n",
					", StudentEmail\r\n",
					", ceider\r\n",
					"-- , staff_login_email\r\n",
					"-- , student_login_email\r\n",
					"\r\n",
					" from \r\n",
					"(\r\n",
					"SELECT\r\n",
					"s.academicyear as Year \r\n",
					",yl.yearlevelsifcode as YearLevel\r\n",
					"--,staff.campusid as CampusID\r\n",
					",staffemails.campusid as CampusID\r\n",
					",c.schoolname as SchoolName\r\n",
					",staff.compasspersonid as TeacherID\r\n",
					",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
					",d.compasspersonid as StudentID\r\n",
					",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
					",ae.ActivityEnrolmentStartDate \r\n",
					",s.subjectshortname as ClassName\r\n",
					",a.SubjectCode as ClassID\r\n",
					"-- ,staff.emailaddress as StaffEmail\r\n",
					"-- ,d.emailaddress as StudentEmail\r\n",
					",d.govcode1 as ceider\r\n",
					",staffemails.organisationuseremail as StaffEmail\r\n",
					",studentemails.organisationuseremail as StudentEmail\r\n",
					"\r\n",
					"from vw_CompassODSStaffDemographic staff\r\n",
					"\r\n",
					"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
					"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
					"\r\n",
					"\r\n",
					"inner join vw_CompassODSActivity a\r\n",
					"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
					"AND a.iscurrent is True\r\n",
					"\r\n",
					"-- left join vw_dmcampus c \r\n",
					"-- --ON staff.CampusId = c.bkCampusId\r\n",
					"-- ON staffemails.campusid = c.bkCampusId\r\n",
					"\r\n",
					"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
					"ON ae.ActivityCode = a.ActivityCode\r\n",
					"AND ae.CampusId = a.CampusId\r\n",
					"AND ae.IsCurrent is True\r\n",
					"and year(ae.utcactivityenrolmentstartdate) = year(current_date)\r\n",
					"\r\n",
					"\r\n",
					"inner JOIN vw_CompassODSStudentDemographic d \r\n",
					"ON d.CompassPersonId = ae.CompassPersonId\r\n",
					"AND d.iscurrent is True\r\n",
					"\r\n",
					"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
					"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
					"AND a.CampusId = s.CampusId\r\n",
					"AND s.IsCurrent is True\r\n",
					"\r\n",
					"left join vw_activestudent active\r\n",
					"on active.ceider = d.govcode1\r\n",
					"\r\n",
					"left join vw_dmyearlevel yl\r\n",
					"on active.SKYearLevel = yl.SKYearLevel\r\n",
					"\r\n",
					"-- -- --Login emails\r\n",
					"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
					"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
					"-- and staffemails.iscurrent is True\r\n",
					"-- --and staffemails.status = 'Active'\r\n",
					"-- and staff.campusid = staffemails.campusid\r\n",
					"\r\n",
					"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
					"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
					"-- and studentemails.iscurrent is True\r\n",
					"-- --and studentemails.status = 'Active'\r\n",
					"-- and staff.campusid = studentemails.campusid\r\n",
					"\r\n",
					"\r\n",
					"-- --Login emails\r\n",
					"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
					"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
					"and staffemails.iscurrent is True\r\n",
					"and staffemails.status = 'Active'\r\n",
					"--and staff.campusid = staffemails.campusid\r\n",
					"\r\n",
					"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
					"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
					"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
					"and studentemails.iscurrent is True\r\n",
					"and studentemails.status = 'Active'\r\n",
					"--and staff.campusid = studentemails.campusid\r\n",
					"and staffemails.campusid = studentemails.campusid\r\n",
					"\r\n",
					"\r\n",
					"left join vw_dmcampus c \r\n",
					"--ON staff.CampusId = c.bkCampusId\r\n",
					"ON staffemails.campusid = c.bkCampusId\r\n",
					"\r\n",
					"\r\n",
					"where \r\n",
					"    staff.iscurrent is True\r\n",
					") innerquery\r\n",
					"\r\n",
					"where \r\n",
					"innerquery.Year >= 2021 and\r\n",
					"innerquery.yearlevel in ('P', '1', '2') \r\n",
					"\r\n",
					"group by\r\n",
					"year\r\n",
					", YearLevel\r\n",
					", CampusID\r\n",
					", SchoolName\r\n",
					", TeacherID\r\n",
					", TeacherName\r\n",
					", StudentID \r\n",
					", StudentName\r\n",
					", ClassName\r\n",
					", ClassID\r\n",
					", StaffEmail\r\n",
					", StudentEmail\r\n",
					", ceider\r\n",
					"-- , staff_login_email\r\n",
					"-- , student_login_email\r\n",
					"\r\n",
					") mainquery\r\n",
					"\r\n",
					"where year = year(CURRENT_DATE)\r\n",
					"and classname like '%Generalist%'\r\n",
					"-- )"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CREATE TEMP VIEW vw_ods_studentstable\r\n",
					"as\r\n",
					"\r\n",
					"select year\r\n",
					", yearlevel\r\n",
					", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote, count(*) as groupingcount from\r\n",
					"\r\n",
					"(\r\n",
					"select \r\n",
					"year\r\n",
					", YearLevel\r\n",
					", CampusID\r\n",
					", SchoolName\r\n",
					", TeacherID\r\n",
					", TeacherName\r\n",
					", StudentID \r\n",
					", StudentName\r\n",
					", ClassName\r\n",
					", ClassID\r\n",
					", StaffEmail\r\n",
					", StudentEmail\r\n",
					", ceider\r\n",
					",Gender\r\n",
					",Gendercode\r\n",
					",Indigenoustype\r\n",
					",Indigenoustypecode\r\n",
					",Disability\r\n",
					",LBOTE\r\n",
					"\r\n",
					"from \r\n",
					"(\r\n",
					"\r\n",
					"SELECT\r\n",
					"s.academicyear as Year \r\n",
					",yearlevel.yearlevel as YearLevel\r\n",
					",staffemails.campusid as CampusID\r\n",
					",c.schoolname as SchoolName\r\n",
					",staff.compasspersonid as TeacherID\r\n",
					",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
					",d.compasspersonid as StudentID\r\n",
					",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
					",ae.ActivityEnrolmentStartDate \r\n",
					",s.subjectshortname as ClassName\r\n",
					",a.SubjectCode as ClassID\r\n",
					",d.govcode1 as ceider\r\n",
					",staffemails.organisationuseremail as StaffEmail\r\n",
					",studentemails.organisationuseremail as StudentEmail\r\n",
					"\r\n",
					",d.Gender\r\n",
					",d.Gendercode\r\n",
					",d.Indigenoustype\r\n",
					",d.Indigenoustypecode\r\n",
					",d.Disability\r\n",
					",d.LBOTE\r\n",
					"\r\n",
					"from vw_CompassODSStaffDemographic staff\r\n",
					"\r\n",
					"inner join vw_CompassODSActivity a\r\n",
					"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
					"AND a.iscurrent is True\r\n",
					"\r\n",
					"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
					"ON ae.ActivityCode = a.ActivityCode\r\n",
					"AND ae.CampusId = a.CampusId\r\n",
					"AND ae.IsCurrent is True\r\n",
					"\r\n",
					"inner JOIN vw_CompassODSStudentDemographic d \r\n",
					"ON d.CompassPersonId = ae.CompassPersonId\r\n",
					"AND d.iscurrent is True\r\n",
					"\r\n",
					"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
					"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
					"AND a.CampusId = s.CampusId\r\n",
					"AND s.IsCurrent is True\r\n",
					"\r\n",
					"-- --Login emails\r\n",
					"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
					"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
					"and staffemails.iscurrent is True\r\n",
					"and staffemails.status = 'Active'\r\n",
					"\r\n",
					"inner join vw_CompassODSStudentOrganisationDetails studentemails \r\n",
					"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
					"and studentemails.iscurrent is True\r\n",
					"and studentemails.status = 'Active'\r\n",
					"and staffemails.campusid = studentemails.campusid\r\n",
					"\r\n",
					"left join vw_dmcampus c \r\n",
					"ON staffemails.campusid = c.bkCampusId\r\n",
					"\r\n",
					"left join (SELECT CompassPersonId,\r\n",
					"           CampusId,\r\n",
					"           case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
					"           GroupA,\r\n",
					"           GroupB,\r\n",
					"           GroupC,\r\n",
					"           GroupD,\r\n",
					"           GroupE,\r\n",
					"           IsActive,\r\n",
					"           IsCurrentMilestone,\r\n",
					"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
					"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
					"           COALESCE(\r\n",
					"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
					"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
					"                                                                                      OrganisationName\r\n",
					"                                                                         ORDER BY MilestoneTimestamp,\r\n",
					"                                                                                  HomeCampusGuid\r\n",
					"                                                                        ),\r\n",
					"                       make_date(9999, 12, 31)\r\n",
					"                   ) AS MilestoneFinishDate,\r\n",
					"           OrganisationName\r\n",
					"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
					"     WHERE IsCurrent is True\r\n",
					"          AND DioceseId = 12\r\n",
					"          and yearlevel is not null\r\n",
					"              ) yearlevel \r\n",
					"        on d.CompassPersonId = yearlevel.compasspersonid\r\n",
					"        and yearlevel.milestoneyear = s.academicyear\r\n",
					"\r\n",
					"\r\n",
					"where \r\n",
					"    staff.iscurrent is True\r\n",
					"\r\n",
					") mainquery\r\n",
					"\r\n",
					"where \r\n",
					"year is not null\r\n",
					") wholequery\r\n",
					"\r\n",
					"where yearlevel is not null\r\n",
					"\r\n",
					"group by year\r\n",
					", yearlevel\r\n",
					", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CREATE TEMP VIEW vw_ae_manual_combined\r\n",
					"as\r\n",
					"\r\n",
					"select \r\n",
					"concat('LT',row_number() OVER (ORDER BY ceider)) as id\r\n",
					", School_Name\r\n",
					", Area\r\n",
					", Semester\r\n",
					", Year\r\n",
					", trim(substring(subjectname, 3)) as SubjectName \r\n",
					", code as ClassCode\r\n",
					", StudentCode\r\n",
					", GovtCode1\r\n",
					", StudentFirstName\r\n",
					", initcap(studentlastname) as StudentLastName\r\n",
					", CASE\r\n",
					"    WHEN yearlevel is not null THEN concat('Year ', yearlevel)\r\n",
					"    ELSE yearlevel\r\n",
					"        END as YearLevel\r\n",
					", ResultType\r\n",
					", CASE\r\n",
					"    WHEN result = 'A+' THEN 'A'\r\n",
					"    WHEN result = 'A-' THEN 'A'\r\n",
					"    WHEN result = 'B+' THEN 'B'\r\n",
					"    WHEN result = 'B-' THEN 'B'\r\n",
					"    WHEN result = 'C+' THEN 'C'\r\n",
					"    WHEN result = 'C-' THEN 'C'\r\n",
					"    WHEN result = 'D+' THEN 'D'\r\n",
					"    WHEN result = 'D-' THEN 'D'\r\n",
					"    WHEN result = 'E+' THEN 'E'\r\n",
					"    ELSE result\r\n",
					"        END as Result\r\n",
					", BKID\r\n",
					", ceider \r\n",
					", schoolid\r\n",
					", skcampus\r\n",
					"\r\n",
					"from vw_ae_manual_learningtasks \r\n",
					"\r\n",
					"\r\n",
					"union \r\n",
					"\r\n",
					"\r\n",
					"select \r\n",
					"concat('SR',row_number() OVER (ORDER BY ceider)) as id\r\n",
					", School_Name\r\n",
					", Area\r\n",
					", Semester\r\n",
					", Year\r\n",
					", subject as SubjectName \r\n",
					", ClassCode\r\n",
					", StudentCode\r\n",
					", GovtCode1\r\n",
					", StudentFirstName\r\n",
					", StudentLastName\r\n",
					", StudentYearLevel\r\n",
					", AssessmentType as ResultType\r\n",
					", Result\r\n",
					", BKID\r\n",
					", ceider \r\n",
					", schoolid\r\n",
					", skcampus\r\n",
					"\r\n",
					"from vw_ae_manual_semesterreports "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Save the SQL Temp views created above "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# now save the sql views created above\r\n",
					"classenrolment_df = spark.read.table('vw_classenrolment')\r\n",
					"activestudent_df = spark.read.table('vw_activestudent')\r\n",
					"inactivestudent_df = spark.read.table('vw_inactivestudent')\r\n",
					"\r\n",
					"naplanparticipation_df = spark.read.table('vw_naplanparticipation')\r\n",
					"acerparticipation_df = spark.read.table('vw_acerparticipation')\r\n",
					"\r\n",
					"ae_manual_learningtasks_df = spark.read.table('vw_ae_manual_learningtasks')\r\n",
					"ae_manual_semesterreports_df = spark.read.table('vw_ae_manual_semesterreports')\r\n",
					"\r\n",
					"ods_studentclass_df = spark.read.table('vw_ods_studentclass')\r\n",
					"ods_earlyyearsstudents_df = spark.read.table('vw_ods_earlyyearsstudents')\r\n",
					"ods_studentstable_df = spark.read.table('vw_ods_studentstable')\r\n",
					"\r\n",
					"ae_manual_combined_df = spark.read.table('vw_ae_manual_combined')\r\n",
					"\r\n",
					"\r\n",
					"saveToTarget(classenrolment_df, destination_p, f'{version}/_DMClassEnrolment')\r\n",
					"saveToTarget(activestudent_df, destination_p, f'{version}/_FACTActiveStudent')\r\n",
					"saveToTarget(inactivestudent_df, destination_p, f'{version}/_FACTInactiveStudent')\r\n",
					"\r\n",
					"saveToTarget(naplanparticipation_df, destination_p, f'{version}/_FACTNaplanParticipation')\r\n",
					"saveToTarget(acerparticipation_df, destination_p, f'{version}/_FACTAcerParticipation')\r\n",
					"\r\n",
					"saveToTarget(ae_manual_learningtasks_df, destination_p, f'{version}/_FACTAELearningTasks')\r\n",
					"saveToTarget(ae_manual_semesterreports_df, destination_p, f'{version}/_FACTAESemesterReports')\r\n",
					"\r\n",
					"saveToTarget(ods_studentclass_df, destination_p, f'{version}/_FACTODSStudentClass')\r\n",
					"saveToTarget(ods_earlyyearsstudents_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents')\r\n",
					"saveToTarget(ods_studentstable_df, destination_p, f'{version}/_FACTODSStudentsTable')\r\n",
					"\r\n",
					"saveToTarget(ae_manual_combined_df, destination_p, f'{version}/_FACTAECombined')\r\n",
					""
				],
				"execution_count": 5
			}
		]
	}
}