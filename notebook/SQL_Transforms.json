{
	"name": "SQL_Transforms",
	"properties": {
		"folder": {
			"name": "Stage3"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "28049d5e-b335-4485-8883-eed197188682"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparksql",
				"display_name": "sql"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## This note book contains data transformations using SQL\r\n",
					"This notebook should not be run on its own, rather it is run as part of the Transforms_Connector notebook"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Load all required dataframes and convert them to temp sql views"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"from pyspark.sql.functions import split"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# setup the temp tables we need\r\n",
					"sourcep = oea.stage2p\r\n",
					"source3p = oea.stage3p\r\n",
					"\r\n",
					"# used for classenrolment view\r\n",
					"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
					"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
					"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
					"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta') #need to edit source\r\n",
					"\r\n",
					"subjectexclusionlist_df = spark.read.load(source3p + \"/pilot/SubjectExclusionList_pseudo\", format='delta')\r\n",
					"\r\n",
					"# stage 3 general dims\r\n",
					"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
					"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
					"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
					"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
					"\r\n",
					"# used for active student view\r\n",
					"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
					"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
					"\r\n",
					"# used for ODS tables (+ dmcampus_df already added above)\r\n",
					"odsactivity_df = spark.read.load(sourcep + \"/ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
					"odsactivityenrolment_df = spark.read.load(sourcep + \"/ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
					"odsactivityinstance_df = spark.read.load(sourcep + \"/ODSActivityInstance/CompassODSActivityInstance_pseudo\", format='delta')\r\n",
					"odscompasssubject_df = spark.read.load(sourcep + \"/ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
					"\r\n",
					"odsstaffdemographic_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
					"odsstudentdemographic_df = spark.read.load(sourcep + \"/ODSStudentDemographic/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
					"\r\n",
					"odsstafforganisationdetails_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffOrganisationDetails_pseudo\", format='delta')\r\n",
					"odsstudentorganisationdetails_df = spark.read.load(sourcep + \"/ODS/CompassODSStudentOrganisationDetails_pseudo\", format='delta')\r\n",
					"\r\n",
					"odsstafforganisationmilestones_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffOrganisationMilestones_pseudo\", format='delta')\r\n",
					"\r\n",
					"# stage 3 transform on this table\r\n",
					"odsstudentorganisationmilestones_df = spark.read.load(source3p + \"/pilot/CompassODSStudentOrganisationMilestones_pseudo\", format='delta')\r\n",
					"\r\n",
					"# early years\r\n",
					"earlyyearssubteachers_df = spark.read.load(source3p + \"/pilot/EarlyYearsSubTeachers_pseudo\", format='delta')\r\n",
					"\r\n",
					"# Early Years\r\n",
					"EarlyYearsResultsWide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResults_pseudo\", format='delta')\r\n",
					"EYResultsYear2Wide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResultsYear2_pseudo\", format='delta')\r\n",
					"EarlyYearsStudents_df = spark.read.load(source3p + \"/pilot/_FACTODSEarlyYearsStudents\", format='delta')\r\n",
					"\r\n",
					"#NAPLAN\r\n",
					"naplanonlinestudenttest_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANOnlineStudentTestResult_pseudo\", format='delta')\r\n",
					"naplanonlinestudentresult_df = spark.read.load(source3p + \"/pilot/DMNAPLANOnlineStudentResult_pseudo\", format='delta')\r\n",
					"naplantest_df = spark.read.load(source3p + \"/pilot/DMNAPLANTest_pseudo\", format='delta')\r\n",
					"\r\n",
					"#NAPLAN Proficiency\r\n",
					"naplanproficiencytest_df = spark.read.load(source3p + \"/pilot/DMNAPLANProficiencyTest_pseudo\", format='delta')\r\n",
					"naplanproficiencystudentresult_df = spark.read.load(source3p + \"/pilot/DMNAPLANProficiencyStudentResult_pseudo\", format='delta')\r\n",
					"naplanproficiencystudenitemresponse_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANProficiencyStudentItemResponse_pseudo\", format='delta')\r\n",
					"naplanacaraproficiency_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANACARAProficiency_pseudo\", format='delta')\r\n",
					"\r\n",
					"#ACER\r\n",
					"patresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
					"pattest_df = spark.read.load(source3p + \"/pilot/DMPATTest_pseudo\", format='delta')\r\n",
					"acerstudent_df = spark.read.load(source3p + \"/pilot/DMACERStudent_pseudo\", format='delta')\r\n",
					"\r\n",
					"#AE\r\n",
					"aeresults_df = spark.read.load(source3p + \"/pilot/AEResultsCombined_pseudo\", format='delta')\r\n",
					"\r\n",
					"#ICSEA\r\n",
					"icsea_df = spark.read.load(source3p + \"/pilot/ICSEA_pseudo\", format='delta')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# create temp sql views\r\n",
					"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
					"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
					"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
					"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
					"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
					"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
					"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
					"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
					"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
					"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
					"subjectexclusionlist_df.createOrReplaceTempView('vw_subjectexclusionlist')\r\n",
					"\r\n",
					"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \r\n",
					"odsactivityinstance_df.createOrReplaceTempView('vw_CompassODSActivityInstance') \r\n",
					"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \r\n",
					"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \r\n",
					"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \r\n",
					"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') \r\n",
					"\r\n",
					"odsstafforganisationdetails_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationDetails') \r\n",
					"odsstafforganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationMilestones')\r\n",
					"\r\n",
					"odsstudentorganisationdetails_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationDetails') \r\n",
					"odsstudentorganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationMilestones')\r\n",
					"\r\n",
					"# Early Years\r\n",
					"earlyyearssubteachers_df.createOrReplaceTempView('vw_EarlyYearsSubTeachers') \r\n",
					"\r\n",
					"EarlyYearsResultsWide_df.createOrReplaceTempView('vw_EarlyYearsResultsWide') \r\n",
					"EYResultsYear2Wide_df.createOrReplaceTempView('vw_EYResultsYear2Wide') \r\n",
					"EarlyYearsStudents_df.createOrReplaceTempView('vw_EarlyYearsStudents') \r\n",
					"\r\n",
					"#NAPLAN\r\n",
					"naplanonlinestudenttest_df.createOrReplaceTempView('vw_naplanonlinestudenttest') \r\n",
					"naplanonlinestudentresult_df.createOrReplaceTempView('vw_naplanonlinestudentresult') \r\n",
					"naplantest_df.createOrReplaceTempView('vw_naplantest') \r\n",
					"\r\n",
					"#NAPLAN Procifiency\r\n",
					"naplanproficiencytest_df.createOrReplaceTempView('vw_naplanproficiencytest') \r\n",
					"naplanproficiencystudentresult_df.createOrReplaceTempView('vw_naplanproficiencystudentresult') \r\n",
					"naplanproficiencystudenitemresponse_df.createOrReplaceTempView('vw_naplanproficiencystudenitemresponse') \r\n",
					"naplanacaraproficiency_df.createOrReplaceTempView('vw_naplanacaraproficiency') \r\n",
					"\r\n",
					"#ACER\r\n",
					"patresults_df.createOrReplaceTempView('vw_patresults') \r\n",
					"pattest_df.createOrReplaceTempView('vw_pattest') \r\n",
					"acerstudent_df.createOrReplaceTempView('vw_acerstudent') \r\n",
					"\r\n",
					"#AE\r\n",
					"aeresults_df.createOrReplaceTempView('vw_aeresults') \r\n",
					"\r\n",
					"#ICSEA\r\n",
					"icsea_df.createOrReplaceTempView('vw_icsea') \r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## REMOVE (has been replaced by AllEnrolment)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_classenrolment;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_classenrolment\r\n",
					"AS\r\n",
					"SELECT cy.Year AS CalendarYear,\r\n",
					"    C.SchoolId AS AGEID,\r\n",
					"    c.CampusSuburbAndName,\r\n",
					"    student.FirstName  AS  StudentFirstName,\r\n",
					"    student.LastName AS StudentLastName,\r\n",
					"    Student.Ceider,\r\n",
					"    yl.YearLevelSifDesc AS YearLevel,\r\n",
					"    s.SubjectShortName AS Subject,\r\n",
					"    a.ActivityName AS  ClassName,\r\n",
					"    a.ActivityCode AS ClassCode,\r\n",
					"    ClassStartDate.date AS ClassStartDate,\r\n",
					"    ClassEndDate.date AS ClassEndDate,\r\n",
					"    staff.FirstName AS StaffFirstName,\r\n",
					"    staff.LastName AS StaffLastName\r\n",
					"\r\n",
					"    FROM vw_factsubjectenrolment f\r\n",
					"    JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\r\n",
					"    AND a.ActivityTypeDescription = 'Standard Class'\r\n",
					"    JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\r\n",
					"    JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\r\n",
					"    JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\r\n",
					"    JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
					"    JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
					"    JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\r\n",
					"\r\n",
					"    JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\r\n",
					"    JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\r\n",
					"\r\n",
					"    AND cy.Year = 2022\r\n",
					"    WHERE ClassEndDate.date > current_date() -- spark sql uses current_date() instead of GETDATE()\r\n",
					"    AND s.SubjectShortName <> 'Unknown'\r\n",
					"    ORDER BY\r\n",
					"    AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_activestudenttemp;\r\n",
					"\r\n",
					"-- Temporary table do not save \r\n",
					"CREATE TEMP VIEW vw_activestudenttemp\r\n",
					"AS\r\n",
					"SELECT SchoolID AS SchoolAGEID,\r\n",
					"    c.CampusSuburbAndName,\r\n",
					"    c.SchoolId as CampusId,\r\n",
					"    pd.FirstName,\r\n",
					"    pd.LastName,\r\n",
					"    yl.SKYearLevel,\r\n",
					"    rg.RollGroupDesc AS RollGroup,\r\n",
					"    pd.Ceider,\r\n",
					"    pd.SKPerson, \r\n",
					"    pd.Disability,\r\n",
					"    pd.ATSIId,\r\n",
					"    pd.LBOTE\r\n",
					"\r\n",
					"FROM vw_factpersonmilestone f\r\n",
					"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
					"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
					"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
					"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
					"WHERE \r\n",
					"    f.IsCurrentMilestone = 'True'\r\n",
					"    AND f.IsActiveMilestone = 'True'\r\n",
					"    AND pd.PersonType = 'Student'\r\n",
					"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_activestudent;\r\n",
					"\r\n",
					"-- Removes duplicates from the active student temp table above\r\n",
					"CREATE TEMP VIEW vw_activestudent\r\n",
					"AS\r\n",
					"SELECT *\r\n",
					"FROM vw_activestudenttemp\r\n",
					"WHERE Ceider NOT IN (SELECT Ceider\r\n",
					"                    FROM vw_activestudenttemp\r\n",
					"                    GROUP BY Ceider\r\n",
					"                    HAVING COUNT(Ceider) > 1)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_activestudentexceptions;\r\n",
					"\r\n",
					"-- Gets only the duplicates from the active student temp table above so it can be used in an exceptions report \r\n",
					"CREATE TEMP VIEW vw_activestudentexceptions\r\n",
					"AS\r\n",
					"SELECT *\r\n",
					"FROM vw_activestudenttemp\r\n",
					"WHERE Ceider IN (SELECT Ceider\r\n",
					"                    FROM vw_activestudenttemp\r\n",
					"                    GROUP BY Ceider\r\n",
					"                    HAVING COUNT(Ceider) > 1)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_inactivestudent;\r\n",
					"\r\n",
					"-- MAY NOT REQUIRE THIS ANYMORE\r\n",
					"CREATE TEMP VIEW vw_inactivestudent\r\n",
					"AS\r\n",
					"SELECT SchoolID AS SchoolAGEID,\r\n",
					"    c.CampusSuburbAndName,\r\n",
					"    pd.FirstName,\r\n",
					"    pd.LastName,\r\n",
					"    yl.YearLevelSifDesc AS YearLevel,\r\n",
					"    rg.RollGroupDesc AS RollGroup,\r\n",
					"    pd.Ceider,\r\n",
					"    pd.SKPerson, \r\n",
					"    pd.Disability,\r\n",
					"    pd.ATSIId,\r\n",
					"    pd.LBOTE,\r\n",
					"    d.date AS DateLeft\r\n",
					"    \r\n",
					"FROM\r\n",
					"    vw_factpersonmilestone f\r\n",
					"JOIN vw_dmdate d ON f.SKMilestoneStartDate = d.SKDate\r\n",
					"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
					"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
					"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
					"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
					"\r\n",
					"WHERE \r\n",
					"    f.IsCurrentMilestone = 'True'\r\n",
					"    AND f.IsActiveMilestone = 'False'\r\n",
					"    AND pd.PersonType = 'Student'\r\n",
					"    AND Date < current_date()\r\n",
					"ORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_studentclass;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_ods_studentclass\r\n",
					"as\r\n",
					"\r\n",
					"SELECT distinct\r\n",
					"d.FirstName AS StudentFirstName \r\n",
					",d.LastName AS StudentLastName\r\n",
					",d.CompassPersonId\r\n",
					",d.GovCode1 AS Ceider\r\n",
					",s.SubjectLongName\r\n",
					",a.SubjectCode\r\n",
					",a.ActivityName\r\n",
					",a.ActivityTypeDescription\r\n",
					",a.ManagingCompassPersonId\r\n",
					",staff.firstname\r\n",
					",staff.lastname\r\n",
					",ae.ActivityEnrolmentStartDate\r\n",
					",ae.ActivityEnrolmentEndDate\r\n",
					",concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
					",a.CampusId AS AGEID\r\n",
					",c.CampusSuburbAndName\r\n",
					"--,c.CompassSchoolURL\r\n",
					",s.AcademicYear\r\n",
					",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
					",a.IsCurrent as IsCurrent_Activity\r\n",
					",s.IsCurrent as IsCurrent_Subject\r\n",
					",staff.iscurrent as IsCurrent_Staff\r\n",
					",d.iscurrent as IsCurrent_Student\r\n",
					"\r\n",
					"\r\n",
					"FROM \r\n",
					"vw_CompassODSStudentDemographic d \r\n",
					"\r\n",
					"JOIN vw_CompassODSActivityEnrolment ae \r\n",
					"ON d.CompassPersonId = ae.CompassPersonId\r\n",
					"\r\n",
					"JOIN vw_CompassODSActivity a \r\n",
					"ON ae.ActivityCode = a.ActivityCode\r\n",
					"AND ae.CampusId = a.CampusId\r\n",
					"\r\n",
					"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
					"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
					"AND a.CampusId = s.CampusId\r\n",
					"\r\n",
					"LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
					"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
					"\r\n",
					"JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\r\n",
					"WHERE \r\n",
					"d.iscurrent is True\r\n",
					"AND a.ActivityTypeDescription = 'Standard Class'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_studentstable;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_ods_studentstable\r\n",
					"as\r\n",
					"\r\n",
					"select\r\n",
					"distinct ms.CompassPersonId as MS_CompassPersonID\r\n",
					",demo.CompassPersonId as DEMO_CompassPersonID\r\n",
					",ms.yearlevel\r\n",
					",ms.isactive \r\n",
					",ms.iscurrentmilestone \r\n",
					",ms.studenttype \r\n",
					",ms.dioceseId\r\n",
					",ms.campusid \r\n",
					",camp.skcampus\r\n",
					",camp.BKCampusId\r\n",
					",camp.SchoolName\r\n",
					",ms.iscurrent\r\n",
					",demo.firstname\r\n",
					",demo.lastname \r\n",
					"--,demo.gender \r\n",
					",demo.govcode1 as ceider\r\n",
					"--,demo.disability \r\n",
					"--,demo.LBOTE \r\n",
					"--,demo.indigenoustypecode \r\n",
					",ms.milestonetimestamp\r\n",
					",year(MilestoneTimestamp + INTERVAL 10 HOURS) AS calendaryear\r\n",
					"from vw_CompassODSStudentOrganisationMilestones ms\r\n",
					"\r\n",
					"left join vw_CompassODSStudentDemographic demo on ms.CompassPersonId = demo.CompassPersonId \r\n",
					"\tand demo.Iscurrent = 'True'\r\n",
					"\r\n",
					"left join vw_dmcampus camp on ms.campusid = camp.BKCampusId\r\n",
					"\r\n",
					"where \r\n",
					"ms.iscurrent = 'True'\r\n",
					"and ms.isactive = 'True'\r\n",
					"--and ms.iscurrentmilestone  = 'True' --this is just for 2023 (current year)\r\n",
					"and year(MilestoneTimestamp + INTERVAL 10 HOURS) in (2021, 2022, 2023)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Enrolments "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_allenrolments;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_allenrolments\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"\todse.SubjectCode\r\n",
					"\t,odse.ActivityCode\r\n",
					"\t,odse.CampusID\r\n",
					"\t,odss.GovCode1 AS Ceider\r\n",
					"\t,YEAR(odse.ActivityEnrolmentEndDate) AS Year\r\n",
					"\t,c.SkYear\r\n",
					"\tFROM vw_CompassODSActivityEnrolment odse\r\n",
					"\tJOIN vw_CompassODSStudentDemographic odss on odse.CompassPersonId = odss.CompassPersonId\r\n",
					"\tJOIN vw_dmcalendaryear c on YEAR(odse.ActivityEnrolmentEndDate) = c.Year\r\n",
					"\r\n",
					"\tWHERE SubjectCode IS NOT NULL\r\n",
					"\tAND odse.Iscurrent = 'True'\r\n",
					"\tAND odss.Iscurrent = 'True'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_currentyearenrolments;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_currentyearenrolments\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"\te.SubjectCode\r\n",
					"\t,e.ActivityCode\r\n",
					"\t,e.CampusID\r\n",
					"\t,e.Year\r\n",
					"\t,a.SKYearLevel\r\n",
					"\t,a.Ceider\r\n",
					"\r\n",
					"\tFROM vw_allenrolments e\r\n",
					"\tJOIN vw_activestudent a on e.Ceider = a.Ceider -- will not include active students who are not enrolled in classes\r\n",
					"\tAND Year = YEAR(current_date())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_currentyearenrolments_withexclusions;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_currentyearenrolments_withexclusions\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"    ce.*\r\n",
					"    ,subject.SubjectShortName\r\n",
					"\r\n",
					"    FROM vw_currentyearenrolments ce\r\n",
					"    JOIN \r\n",
					"    (\r\n",
					"        SELECT DISTINCT \r\n",
					"            c.SubjectImportIdentifier AS SubjectCode\r\n",
					"            ,c.Campusid\r\n",
					"            ,c.SubjectShortName\r\n",
					"        FROM vw_CompassODSCompassSubject c\r\n",
					"        JOIN vw_subjectexclusionlist e\r\n",
					"        ON c.SubjectImportIdentifier = e.SubjectCode\r\n",
					"        AND c.SubjectShortName = e.SubjectShortName\r\n",
					"        WHERE AcademicYear = YEAR(current_date())\r\n",
					"        AND e.Include = 'TRUE'\r\n",
					"    ) subject\r\n",
					"    ON ce.SubjectCode = subject.SubjectCode\r\n",
					"    AND ce.CampusID = subject.Campusid\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_currentrollgroup;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_currentrollgroup\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"\tRollGroup AS SubjectCode\r\n",
					"\t,RollGroup AS ActivityCode \r\n",
					"\t,CampusID\r\n",
					"\t,YEAR(current_date()) AS Year\r\n",
					"\t,SKYearLevel\r\n",
					"\t,Ceider\r\n",
					"\r\n",
					"  FROM vw_activestudent\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_currentenrolments;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_currentenrolments\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT *\r\n",
					"    FROM vw_currentyearenrolments\r\n",
					"\r\n",
					"UNION\r\n",
					"\r\n",
					"SELECT *\r\n",
					"    FROM vw_currentrollgroup"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Early Years Students"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents;\r\n",
					"\r\n",
					"create temp view vw_ods_earlyyearsstudents\r\n",
					"as\r\n",
					"\r\n",
					"select distinct \r\n",
					"\r\n",
					"\tyear(current_date) as Year\r\n",
					"\t, replace(YearLevel, '0', 'P') as YearLevel\r\n",
					"\t, instance.CampusId as CampusID\r\n",
					"\t, campus.SchoolNameAndArea\r\n",
					"\t, ManagingCompassPersonId as TeacherID\r\n",
					"\t, concat(staffdemo.TeacherFirstName, ' ', staffdemo.TeacherLastName) as TeacherName\r\n",
					"\t, students.StudentCompassPersonId as StudentID\r\n",
					"\t, concat(studentdemo.FirstName, ' ', studentdemo.LastName) as StudentName\r\n",
					"\t, enrolment.ActivityName as ClassName\r\n",
					"\t, enrolment.ActivityCode as ClassID\r\n",
					"\t, trim(coalesce(staffemail.TeacherOrganisationUserEmail, staffdemo.TeacherEmailAddress)) as StaffEmail\r\n",
					"\t, trim(studentemail.OrganisationUserEmail) as StudentEmail\r\n",
					"\t, trim(studentdemo.GovCode1) as Ceider\r\n",
					"\r\n",
					"from\r\n",
					"\r\n",
					"-- Student Organisation Milestones\r\n",
					"(select distinct CompassPersonId as StudentCompassPersonId, YearLevel, OrganisationName, CampusId\r\n",
					"  from vw_CompassODSStudentOrganisationMilestones\r\n",
					"  where 1=1\r\n",
					"  and IsActive = 'True'\r\n",
					"  and IsCurrent = 'True'\r\n",
					"  and IsCurrentMilestone = 'True'\r\n",
					"  and DioceseId = 12\r\n",
					"  and (YearLevel = '0' or YearLevel = '1' or YearLevel = '2')\r\n",
					") students\r\n",
					"\r\n",
					"left join\r\n",
					"\r\n",
					"-- Compass Activity Enrolment\r\n",
					"(select distinct CompassPersonId as StudentCompassPersonId, ActivityCode, ActivityName, CampusID\r\n",
					"\tfrom vw_CompassODSActivityEnrolment\r\n",
					"\twhere 1=1\r\n",
					"\tand IsCurrent = 'True'\r\n",
					"\tand RoleDescription = 'Student'\r\n",
					"\tand ActivityName <> 'Sickbay'\r\n",
					"\tand SubjectCode IS NOT NULL\r\n",
					"\tand year(ActivityEnrolmentStartDate) = year(current_date)\r\n",
					"\t--and to_date(ActivityEnrolmentEndDate) > current_date\r\n",
					"\tand year(to_date(ActivityEnrolmentEndDate)) = year(current_date)\r\n",
					"\tand (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\r\n",
					") enrolment\r\n",
					"\r\n",
					"on students.StudentCompassPersonId = enrolment.StudentCompassPersonId\r\n",
					"\r\n",
					"left join\r\n",
					"\r\n",
					"-- Compass Activity Instance\r\n",
					"(select distinct ActivityCode, ManagingCompassPersonId, CampusId\r\n",
					"  from vw_CompassODSActivityInstance\r\n",
					"  where 1=1 \r\n",
					"  and IsCurrent = 'True'\r\n",
					"  and DioceseId = 12\r\n",
					"  and (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\r\n",
					"  and year(Start) = year(current_date)\r\n",
					"  and ManagingCompassPersonId <> '00000000-0000-0000-0000-000000000000'\r\n",
					") instance \r\n",
					"\r\n",
					"on enrolment.ActivityCode = instance.ActivityCode\r\n",
					"and enrolment.CampusID = instance.CampusId\r\n",
					"\r\n",
					"inner join\r\n",
					"\r\n",
					"-- Staff Organisation Milestones\r\n",
					"(select distinct CompassPersonId as StaffCompassPersonId, OrganisationName\r\n",
					"\tfrom vw_CompassODSStaffOrganisationMilestones\r\n",
					"\twhere 1=1\r\n",
					"\tand DioceseId = 12\r\n",
					"\tand IsCurrentMilestone = 'True'\r\n",
					"\tand Iscurrent = 'True'\r\n",
					"\tand IsActive = 'True'\r\n",
					") staffmilestone\r\n",
					"\r\n",
					"on instance.ManagingCompassPersonId = staffmilestone.StaffCompassPersonId\r\n",
					"\r\n",
					"inner join\r\n",
					"\r\n",
					"-- Staff Demographic\r\n",
					"-- only getting the personal email here because some schools have accidentally \r\n",
					"-- put the org user email in this field in compass\r\n",
					"(select distinct CompassPersonId as StaffCompassPersonId, FirstName as TeacherFirstName, LastName as TeacherLastName, EmailAddress as TeacherEmailAddress\r\n",
					"\tfrom vw_CompassODSStaffDemographic\r\n",
					"\twhere 1=1\r\n",
					"\tand IsCurrent = 'True'\r\n",
					") staffdemo\r\n",
					"\r\n",
					"on staffmilestone.StaffCompassPersonId = staffdemo.StaffCompassPersonId\r\n",
					"\r\n",
					"inner join\r\n",
					"\r\n",
					"-- Staff Organisation Details (email)\r\n",
					"(select distinct CompassPersonId as TeacherCompassPersonId, OrganisationUserEmail as TeacherOrganisationUserEmail, OrganisationName\r\n",
					"\tfrom vw_CompassODSStaffOrganisationDetails\r\n",
					"\twhere 1=1\r\n",
					"\tand Iscurrent = 'True'\r\n",
					"\tand OrganisationUserEmail NOT LIKE '%supply%'\r\n",
					") staffemail\r\n",
					"\r\n",
					"on staffmilestone.StaffCompassPersonId = staffemail.TeacherCompassPersonId\r\n",
					"and staffmilestone.OrganisationName = staffemail.OrganisationName\r\n",
					"and staffemail.OrganisationName like students.OrganisationName\r\n",
					"\r\n",
					"inner join -- inner join will remove students without demographic information\r\n",
					"\r\n",
					"-- Student Demographic\r\n",
					"(select distinct CompassPersonId as StudentCompassPersonId, FirstName, LastName, GovCode1\r\n",
					"\tfrom vw_CompassODSStudentDemographic\r\n",
					"\twhere 1=1\r\n",
					"\tand Iscurrent = 'True'\r\n",
					") studentdemo\r\n",
					"\r\n",
					"on students.StudentCompassPersonId = studentdemo.StudentCompassPersonId\r\n",
					"\r\n",
					"inner join  -- inner join will remove students without email\r\n",
					"\r\n",
					"-- Student Organisation Details (Email)\r\n",
					"(select distinct CompassPersonId as StudentCompassPersonId, OrganisationUserEmail, OrganisationName\r\n",
					"\tfrom vw_CompassODSStudentOrganisationDetails\r\n",
					"\twhere 1=1\r\n",
					"\tand Iscurrent = 'True'\r\n",
					"\tand OrganisationUserEmail IS NOT NULL --these are all duplicate students that have emails in other records\r\n",
					") studentemail\r\n",
					"\r\n",
					"on studentdemo.StudentCompassPersonId = studentemail.StudentCompassPersonId\r\n",
					"and students.OrganisationName = studentemail.OrganisationName\r\n",
					"\r\n",
					"left join\r\n",
					"\r\n",
					"-- Get the School Names\r\n",
					"(select SchoolId, SchoolNameAndArea\r\n",
					"\tfrom vw_dmcampus\r\n",
					") campus\r\n",
					"\r\n",
					"on campus.SchoolId = instance.CampusId\r\n",
					"\r\n",
					"-- filter out the duplicate classid's from campusid 617\r\n",
					"WHERE 1=1\r\n",
					"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GENP_PREP')\r\n",
					"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GEN1_Year 1')\r\n",
					"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GEN2_Year 2')\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_exceptions;\r\n",
					"\r\n",
					"-- Create a student exceptions lists with students that are assigned to multiple 'General' type classes\r\n",
					"\r\n",
					"create temp view vw_ods_earlyyearsstudents_exceptions\r\n",
					"as\r\n",
					"\r\n",
					"select \r\n",
					"    Year\r\n",
					"    ,YearLevel\r\n",
					"    ,CampusID\r\n",
					"    ,SchoolNameAndArea\r\n",
					"    ,Ceider\r\n",
					"    ,StudentName\r\n",
					"    ,TeacherName\r\n",
					"    ,ClassID\r\n",
					"\r\n",
					"from vw_ods_earlyyearsstudents\r\n",
					"\r\n",
					"where Ceider in (\r\n",
					"\r\n",
					"  select Ceider\r\n",
					"  from\r\n",
					"\r\n",
					"  (\r\n",
					"\t  select distinct year, ceider, classid\r\n",
					"\t  FROM vw_ods_earlyyearsstudents\r\n",
					"  ) a\r\n",
					"\r\n",
					"  group by year, ceider\r\n",
					"  having count(*) > 1\r\n",
					"\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_cleaned;\r\n",
					"\r\n",
					"-- Remove the students exceptions (where a student is listed multiple times)\r\n",
					"\r\n",
					"create temp view vw_ods_earlyyearsstudents_cleaned\r\n",
					"as\r\n",
					"\r\n",
					"select \r\n",
					"    Year\r\n",
					"    ,YearLevel\r\n",
					"    ,CampusID\r\n",
					"    ,SchoolNameAndArea\r\n",
					"    ,TeacherID\r\n",
					"    ,TeacherName\r\n",
					"    ,StudentID\r\n",
					"    ,StudentName\r\n",
					"    ,ClassName\r\n",
					"    ,ClassID\r\n",
					"    ,StaffEmail\r\n",
					"    ,StudentEmail\r\n",
					"    ,Ceider\r\n",
					"\r\n",
					"from vw_ods_earlyyearsstudents\r\n",
					"\r\n",
					"where Ceider NOT IN (\r\n",
					"\r\n",
					"  select Ceider\r\n",
					"  from\r\n",
					"\r\n",
					"  (\r\n",
					"\t  select distinct year, ceider, classid\r\n",
					"\t  FROM vw_ods_earlyyearsstudents\r\n",
					"  ) allceiders\r\n",
					"\r\n",
					"  group by year, ceider\r\n",
					"  having count(*) > 1\r\n",
					"\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudentsclassid_cleaned;\r\n",
					"\r\n",
					"-- create a clean student list that lists the correct classid for each student\r\n",
					"\r\n",
					"create temp view vw_ods_earlyyearsstudentsclassid_cleaned\r\n",
					"as\r\n",
					"\r\n",
					"select distinct \r\n",
					"    Year\r\n",
					"    ,Ceider\r\n",
					"    ,ClassID\r\n",
					"    ,ClassName\r\n",
					"\r\n",
					"from vw_ods_earlyyearsstudents_cleaned \r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_EYResultsYear2;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_EYResultsYear2\r\n",
					"AS\r\n",
					"\r\n",
					"select \r\n",
					"    e.Year,\r\n",
					"    e.Ceider,\r\n",
					"    e.CampusID,\r\n",
					"    coalesce(c.ClassID, e.ClassID) AS ClassID,\r\n",
					"    e.Ques1,\r\n",
					"    e.Ques10,\r\n",
					"    e.Ques11,\r\n",
					"    e.Ques12,\r\n",
					"    e.Ques13,\r\n",
					"    e.Ques14,\r\n",
					"    e.Ques15,\r\n",
					"    e.Ques16,\r\n",
					"    e.Ques17,\r\n",
					"    e.Ques18,\r\n",
					"    e.Ques19,\r\n",
					"    e.Ques2,\r\n",
					"    e.Ques20,\r\n",
					"    e.Ques21,\r\n",
					"    e.Ques22,\r\n",
					"    e.Ques23,\r\n",
					"    e.Ques24,\r\n",
					"    e.Ques25,\r\n",
					"    e.Ques3,\r\n",
					"    e.Ques4,\r\n",
					"    e.Ques5,\r\n",
					"    e.Ques6,\r\n",
					"    e.Ques7,\r\n",
					"    e.Ques8,\r\n",
					"    e.Ques9,\r\n",
					"    e.QuestionType,\r\n",
					"    e.Status,\r\n",
					"    e.StudentEmailID,\r\n",
					"    e.StudentName,\r\n",
					"    e.TeacherEmailID,\r\n",
					"    e.TeacherName,\r\n",
					"    e.YearLevel,\r\n",
					"    e.TestLevel,\r\n",
					"    e.BKID,\r\n",
					"    c.ClassName\r\n",
					"\r\n",
					"from vw_EYResultsYear2Wide e\r\n",
					"left join vw_ods_earlyyearsstudentsclassid_cleaned c\r\n",
					"on e.Year = c.Year \r\n",
					"and e.Ceider = c.Ceider\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_EYResults;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_EYResults\r\n",
					"AS\r\n",
					"\r\n",
					"select \r\n",
					"    e.Year,\r\n",
					"    e.Ceider,\r\n",
					"    e.CampusID,\r\n",
					"    coalesce(c.ClassID, e.ClassID) AS ClassID,\r\n",
					"    e.Ques1,\r\n",
					"    e.Ques10,\r\n",
					"    e.Ques11,\r\n",
					"    e.Ques12,\r\n",
					"    e.Ques13,\r\n",
					"    e.Ques14,\r\n",
					"    e.Ques15,\r\n",
					"    e.Ques16,\r\n",
					"    e.Ques17,\r\n",
					"    e.Ques18,\r\n",
					"    e.Ques19,\r\n",
					"    e.Ques2,\r\n",
					"    e.Ques20,\r\n",
					"    e.Ques21,\r\n",
					"    e.Ques22,\r\n",
					"    e.Ques23,\r\n",
					"    e.Ques24,\r\n",
					"    e.Ques25,\r\n",
					"    e.Ques26,\r\n",
					"    e.Ques27,\r\n",
					"    e.Ques28,\r\n",
					"    e.Ques29,\r\n",
					"    e.Ques30,\r\n",
					"    e.Ques31,\r\n",
					"    e.Ques32,\r\n",
					"    e.Ques33,\r\n",
					"    e.Ques34,\r\n",
					"    e.Ques35,\r\n",
					"    e.Ques36,\r\n",
					"    e.Ques37,\r\n",
					"    e.Ques38,\r\n",
					"    e.Ques39,\r\n",
					"    e.Ques40,\r\n",
					"    e.Ques3,\r\n",
					"    e.Ques4,\r\n",
					"    e.Ques5,\r\n",
					"    e.Ques6,\r\n",
					"    e.Ques7,\r\n",
					"    e.Ques8,\r\n",
					"    e.Ques9,\r\n",
					"    e.Status,\r\n",
					"    e.StudentEmailID,\r\n",
					"    e.StudentName,\r\n",
					"    e.TeacherEmailID,\r\n",
					"    e.TeacherName,\r\n",
					"    e.YearLevel,\r\n",
					"    e.TestLevel,\r\n",
					"    e.BKID,\r\n",
					"    c.ClassName\r\n",
					"\r\n",
					"from vw_EarlyYearsResultsWide e\r\n",
					"left join vw_ods_earlyyearsstudentsclassid_cleaned c\r\n",
					"on e.Year = c.Year \r\n",
					"and e.Ceider = c.Ceider\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudentsclassid_updated;\r\n",
					"\r\n",
					"create temp view vw_ods_earlyyearsstudentsclassid_updated\r\n",
					"AS\r\n",
					"\r\n",
					"select \r\n",
					"    e.Year\r\n",
					"    ,e.YearLevel\r\n",
					"    ,e.CampusID\r\n",
					"    ,e.SchoolNameAndArea\r\n",
					"    ,e.TeacherID\r\n",
					"    ,e.TeacherName\r\n",
					"    ,e.StudentID\r\n",
					"    ,e.StudentName\r\n",
					"    ,eclean.ClassName\r\n",
					"    ,eclean.ClassID\r\n",
					"    ,e.StaffEmail\r\n",
					"    ,e.StudentEmail\r\n",
					"    ,e.Ceider\r\n",
					"\r\n",
					"from vw_ods_earlyyearsstudents e\r\n",
					"left join vw_ods_earlyyearsstudents_cleaned eclean \r\n",
					"on e.Year = eclean.Year\r\n",
					"and e.Ceider = eclean.Ceider"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Add Substitute Teachers from the SharePoint Online list"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_substituteteachers;\r\n",
					"\r\n",
					"-- Manual entry of support staff (non teachers) that will be conducting tests\r\n",
					"\r\n",
					"create temp view vw_ods_earlyyearsstudents_substituteteachers\r\n",
					"as\r\n",
					"\r\n",
					"select \r\n",
					"\tYear\r\n",
					"    ,YearLevel\r\n",
					"    ,CampusID\r\n",
					"    ,SchoolNameAndArea\r\n",
					"    ,TeacherID\r\n",
					"    ,TeacherName\r\n",
					"    ,StudentID\r\n",
					"    ,StudentName\r\n",
					"    ,ClassName\r\n",
					"    ,ClassID\r\n",
					"    ,StaffEmail\r\n",
					"    ,StudentEmail\r\n",
					"    ,Ceider\r\n",
					"    from vw_ods_earlyyearsstudents\r\n",
					"\r\n",
					"union all\r\n",
					"\r\n",
					"select distinct\r\n",
					"\torg.Year\r\n",
					"\t,org.YearLevel\r\n",
					"\t,org.CampusID\r\n",
					"\t,org.SchoolNameAndArea\r\n",
					"\t,new.SubTeacherCompassID as TeacherID\r\n",
					"\t,new.SubTeacherName as TeacherName\r\n",
					"\t,org.StudentID\r\n",
					"\t,org.StudentName\r\n",
					"\t,org.ClassName\r\n",
					"\t,org.ClassID\r\n",
					"\t,new.SubTeacherEmail as StaffEmail\r\n",
					"\t,org.StudentEmail\r\n",
					"\t,org.Ceider\r\n",
					"\r\n",
					"    from vw_ods_earlyyearsstudents org\r\n",
					"\r\n",
					"inner join\r\n",
					"\r\n",
					"    (\r\n",
					"    select distinct\r\n",
					"        sub.Title as OriginalTeacherEmail\r\n",
					"        ,coalesce(details.TeacherName, sub.AdditionalTeacherEmail, 'Substitute') as SubTeacherName\r\n",
					"        ,details.TeacherID as SubTeacherCompassID\r\n",
					"        ,sub.AdditionalTeacherEmail as SubTeacherEmail\r\n",
					"\r\n",
					"        from vw_EarlyYearsSubTeachers sub\r\n",
					"        left join\r\n",
					"        (\r\n",
					"        select distinct\r\n",
					"            concat(d.FirstName, ' ', d.LastName) as TeacherName\r\n",
					"            ,d.CompassPersonId as TeacherID\r\n",
					"            ,coalesce(so.OrganisationUserEmail, d.EmailAddress, NULL) as StaffEmail\r\n",
					"\r\n",
					"            from vw_CompassODSStaffDemographic d\r\n",
					"            inner join vw_CompassODSStaffOrganisationDetails so\r\n",
					"            on d.CompassPersonId = so.CompassPersonId\r\n",
					"            where 1=1\r\n",
					"            and d.Iscurrent = 'True'\r\n",
					"            and so.Iscurrent = 'True'\r\n",
					"        ) details\r\n",
					"\r\n",
					"        on sub.AdditionalTeacherEmail = details.StaffEmail\r\n",
					"    ) new\r\n",
					"\r\n",
					"on org.StaffEmail = new.OriginalTeacherEmail"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Combine NAPLAN and NAPLAN Proficiency"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_DMNAPLANTestALL;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_DMNAPLANTestALL AS\r\n",
					"\r\n",
					"-- First part of the UNION\r\n",
					"SELECT \r\n",
					"    NT.SKNAPLANTest AS SKNAPLANProficiencyTest,\r\n",
					"    NT.BKNAPLANTest AS BKNAPLANProficiencyTest,\r\n",
					"    NT.TestYear,\r\n",
					"    NT.TestLevelCode,\r\n",
					"    NT.Domain\r\n",
					"\r\n",
					"FROM vw_naplantest AS NT\r\n",
					"\r\n",
					"UNION\r\n",
					"\r\n",
					"-- Second part of the UNION\r\n",
					"SELECT \r\n",
					"    PT.SKNAPLANProficiencyTest,\r\n",
					"    PT.BKNAPLANProficiencyTest,\r\n",
					"    PT.TestYear,\r\n",
					"    PT.TestLevelCode,\r\n",
					"    PT.Domain\r\n",
					"\r\n",
					"FROM vw_naplanproficiencytest AS PT\r\n",
					"\r\n",
					"WHERE \r\n",
					"    PT.SKNAPLANProficiencyTest <> -1;\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_DIMNAPLANCombinedResultsStudentsActive;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_DIMNAPLANCombinedResultsStudentsActive AS\r\n",
					"\r\n",
					"-- First part of the UNION\r\n",
					"SELECT \r\n",
					"    TR.SKNaplanAssessmentId,\r\n",
					"    A.Ceider,\r\n",
					"    TR.SKYear AS NaplanSKYear,\r\n",
					"    TR.SKYearLevel AS NaplanSKYearLevel,\r\n",
					"    MAX(TR.ScaledScoreValue) AS NaplanScaledScoreValue,\r\n",
					"    MAX(TR.DomainNationalAverage) AS NAPLANDomainNationalAverage\r\n",
					"\r\n",
					"FROM vw_activestudent AS A\r\n",
					"\r\n",
					"LEFT JOIN vw_naplanonlinestudentresult AS SR \r\n",
					"    ON A.Ceider = SR.PersistentIdentifier\r\n",
					"\r\n",
					"JOIN vw_naplanonlinestudenttest AS TR \r\n",
					"    ON SR.SKNAPLANOnlineStudentResult = TR.SKNAPLANOnlineStudentResult\r\n",
					"\r\n",
					"WHERE \r\n",
					"    TR.ScaledScoreValue IS NOT NULL\r\n",
					"\r\n",
					"GROUP BY \r\n",
					"    A.Ceider, \r\n",
					"    TR.SKNaplanAssessmentId, \r\n",
					"    TR.SKYear, \r\n",
					"    TR.SKYearLevel\r\n",
					"\r\n",
					"UNION\r\n",
					"\r\n",
					"-- Second part of the UNION\r\n",
					"SELECT \r\n",
					"    TR.SKNaplanAssessmentId,\r\n",
					"    A.Ceider,\r\n",
					"    TR.SKYear AS NaplanSKYear,\r\n",
					"    TR.SKYearLevel AS NaplanSKYearLevel,\r\n",
					"    MAX(TR.DomainScaledScore) AS NaplanScaledScoreValue,\r\n",
					"    MAX(AP.MeanScale) AS NAPLANDomainNationalAverage\r\n",
					"\r\n",
					"FROM vw_activestudent AS A\r\n",
					"\r\n",
					"LEFT JOIN vw_naplanproficiencystudentresult AS SR \r\n",
					"    ON A.Ceider = SR.PersistentIdentifier\r\n",
					"\r\n",
					"JOIN vw_naplanproficiencystudenitemresponse AS TR \r\n",
					"    ON SR.SKNAPLANProficiencyStudentResult = TR.SKNAPLANProficiencyStudentResult\r\n",
					"\r\n",
					"JOIN vw_naplanacaraproficiency AS AP \r\n",
					"    ON TR.SKYear = AP.SKYear \r\n",
					"    AND TR.SKYearLevel = AP.SKYearLevel \r\n",
					"    AND TR.SKNaplanAssessmentId = AP.SKNaplanAssessmentId\r\n",
					"\r\n",
					"WHERE \r\n",
					"    TR.DomainScaledScore IS NOT NULL\r\n",
					"    AND AP.SKStateTerritory = 12 --National Means\r\n",
					"\r\n",
					"GROUP BY \r\n",
					"    A.Ceider, \r\n",
					"    TR.SKNaplanAssessmentId, \r\n",
					"    TR.SKYear, \r\n",
					"    TR.SKYearLevel;\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_DIMNAPLANCombinedResultsLatestStudentsActive;\r\n",
					"\r\n",
					"CREATE TEMP VIEW vw_DIMNAPLANCombinedResultsLatestStudentsActive AS\r\n",
					"\r\n",
					"-- SELECT \r\n",
					"--     CR.Ceider,\r\n",
					"--     CR.SKNaplanAssessmentId,\r\n",
					"--     MAX(CR.NaplanSKYear) AS NaplanSKYear,\r\n",
					"--     MAX(CR.NaplanSKYearLevel) AS NaplanSKYearLevel,\r\n",
					"--     MAX(CR.NaplanScaledScoreValue) AS NaplanScaledScoreValue,\r\n",
					"--     MAX(CR.NAPLANDomainNationalAverage) AS NAPLANDomainNationalAverage\r\n",
					"\r\n",
					"-- FROM vw_DIMNAPLANCombinedResultsStudentsActive AS CR\r\n",
					"\r\n",
					"-- GROUP BY \r\n",
					"--     CR.Ceider,\r\n",
					"--     CR.SKNaplanAssessmentId;\r\n",
					"\r\n",
					"WITH MaxYear AS (\r\n",
					"    SELECT \r\n",
					"        Ceider,\r\n",
					"        SKNaplanAssessmentId,\r\n",
					"        MAX(NaplanSKYear) AS MaxNaplanSKYear\r\n",
					"    FROM \r\n",
					"        [dbo].[_DIMNAPLANCombinedResultsStudentsActive]\r\n",
					"    GROUP BY \r\n",
					"        Ceider,\r\n",
					"        SKNaplanAssessmentId\r\n",
					"),\r\n",
					"MaxYearLevel AS (\r\n",
					"    SELECT \r\n",
					"        MY.Ceider,\r\n",
					"        MY.SKNaplanAssessmentId,\r\n",
					"        MY.MaxNaplanSKYear,\r\n",
					"        MAX(CR.NaplanSKYearLevel) AS MaxNaplanSKYearLevel\r\n",
					"    FROM \r\n",
					"        MaxYear MY\r\n",
					"    JOIN \r\n",
					"        [dbo].[_DIMNAPLANCombinedResultsStudentsActive] CR\r\n",
					"    ON \r\n",
					"        MY.Ceider = CR.Ceider\r\n",
					"        AND MY.SKNaplanAssessmentId = CR.SKNaplanAssessmentId\r\n",
					"        AND MY.MaxNaplanSKYear = CR.NaplanSKYear\r\n",
					"    GROUP BY \r\n",
					"        MY.Ceider,\r\n",
					"        MY.SKNaplanAssessmentId,\r\n",
					"        MY.MaxNaplanSKYear\r\n",
					")\r\n",
					"SELECT \r\n",
					"    CR.Ceider,\r\n",
					"    CR.SKNaplanAssessmentId,\r\n",
					"    CR.NaplanSKYear,\r\n",
					"    CR.NaplanSKYearLevel,\r\n",
					"    CR.NaplanScaledScoreValue,\r\n",
					"    CR.NAPLANDomainNationalAverage\r\n",
					"FROM \r\n",
					"    [dbo].[_DIMNAPLANCombinedResultsStudentsActive] AS CR\r\n",
					"JOIN \r\n",
					"    MaxYearLevel MYL\r\n",
					"ON \r\n",
					"    CR.Ceider = MYL.Ceider\r\n",
					"    AND CR.SKNaplanAssessmentId = MYL.SKNaplanAssessmentId\r\n",
					"    AND CR.NaplanSKYear = MYL.MaxNaplanSKYear\r\n",
					"    AND CR.NaplanSKYearLevel = MYL.MaxNaplanSKYearLevel;\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Save the SQL Temp views created above "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# now save the sql views created above\r\n",
					"classenrolment_df = spark.read.table('vw_classenrolment')\r\n",
					"activestudent_df = spark.read.table('vw_activestudent')\r\n",
					"activestudentexceptions_df = spark.read.table('vw_activestudentexceptions')\r\n",
					"#inactivestudent_df = spark.read.table('vw_inactivestudent')\r\n",
					"\r\n",
					"ods_studentclass_df = spark.read.table('vw_ods_studentclass')\r\n",
					"ods_studentstable_df = spark.read.table('vw_ods_studentstable')\r\n",
					"ods_earlyyearsstudents_df = spark.read.table('vw_ods_earlyyearsstudents_substituteteachers') #need to make sure we include manually added staff\r\n",
					"ods_earlyyearsstudents_exceptions_df = spark.read.table('vw_ods_earlyyearsstudents_exceptions')\r\n",
					"\r\n",
					"ods_earlyyearsstudents_classidcleaned_df = spark.read.table('vw_ods_earlyyearsstudentsclassid_cleaned')\r\n",
					"\r\n",
					"# Early Years\r\n",
					"EYResultsYear2_df = spark.read.table('vw_EYResultsYear2')\r\n",
					"EYResults_df = spark.read.table('vw_EYResults')\r\n",
					"\r\n",
					"\r\n",
					"#NAPLAN\r\n",
					"naplantestall_df = spark.read.table('vw_DMNAPLANTestALL')\r\n",
					"DIMNAPLANCombinedResultsStudentsActive_df = spark.read.table('vw_DIMNAPLANCombinedResultsStudentsActive')\r\n",
					"DIMNAPLANCombinedResultsLatestStudentsActive_df = spark.read.table('vw_DIMNAPLANCombinedResultsLatestStudentsActive')\r\n",
					"\r\n",
					"\r\n",
					"# Enrolments (Current Year) ALL\r\n",
					"currentenrolments_df = spark.read.table('vw_currentenrolments')\r\n",
					"\r\n",
					"# Enrolments (Current Year) Removed exclusions\r\n",
					"currentyearenrolments_df = spark.read.table('vw_currentyearenrolments_withexclusions')\r\n",
					"\r\n",
					"# ALL Enrolments\r\n",
					"allenrolments_df = spark.read.table('vw_allenrolments')\r\n",
					"\r\n",
					"\r\n",
					"saveToTarget(classenrolment_df, destination_p, f'{version}/_DMClassEnrolment')\r\n",
					"saveToTarget(activestudent_df, destination_p, f'{version}/_FACTActiveStudent')\r\n",
					"saveToTarget(activestudentexceptions_df, destination_p, f'{version}/_FACTActiveStudentExceptions')\r\n",
					"\r\n",
					"#saveToTarget(inactivestudent_df, destination_p, f'{version}/_FACTInactiveStudent')\r\n",
					"\r\n",
					"saveToTarget(ods_studentclass_df, destination_p, f'{version}/_FACTODSStudentClass')\r\n",
					"saveToTarget(ods_studentstable_df, destination_p, f'{version}/_FACTODSStudentsTable')\r\n",
					"saveToTarget(ods_earlyyearsstudents_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents')\r\n",
					"saveToTarget(ods_earlyyearsstudents_exceptions_df, destination_p, f'{version}/_FACTODSEarlyYearsStudentsExceptions')\r\n",
					"\r\n",
					"saveToTarget(ods_earlyyearsstudents_classidcleaned_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents_ClassIDCleaned')\r\n",
					"\r\n",
					"# Early Years\r\n",
					"saveToTarget(EYResultsYear2_df, destination_p, f'{version}/_FACTEarlyYearsResultsYear2')\r\n",
					"saveToTarget(EYResults_df, destination_p, f'{version}/_FACTEarlyYearsResults')\r\n",
					"\r\n",
					"#NAPLAN\r\n",
					"saveToTarget(naplantestall_df, destination_p, f'{version}/DMNAPLANTestALL')\r\n",
					"saveToTarget(DIMNAPLANCombinedResultsStudentsActive_df, destination_p, f'{version}/_DIMNAPLANCombinedResultsStudentsActive')\r\n",
					"saveToTarget(DIMNAPLANCombinedResultsLatestStudentsActive_df, destination_p, f'{version}/_DIMNAPLANCombinedResultsLatestStudentsActive')\r\n",
					"\r\n",
					"# Enrolments\r\n",
					"saveToTarget(currentenrolments_df, destination_p, f'{version}/_DIMStudentCurrentEnrolments')\r\n",
					"saveToTarget(currentyearenrolments_df, destination_p, f'{version}/_DIMStudentCurrentYearEnrolments')\r\n",
					"saveToTarget(allenrolments_df, destination_p, f'{version}/_DIMStudentAllEnrolments')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 5
			}
		]
	}
}