{
	"name": "SQL_Transforms",
	"properties": {
		"folder": {
			"name": "Stage3"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "eecce8a3-67d6-4cae-ba2a-d5177c9da0d9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparksql",
				"display_name": "sql"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## This note book contains data transformations using SQL\n",
					"This notebook should not be run on its own, rather it is run as part of the Transforms_Connector notebook"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Load all required dataframes and convert them to temp sql views"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"from pyspark.sql.functions import split"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"# setup the temp tables we need\n",
					"sourcep = oea.stage2p\n",
					"source3p = oea.stage3p\n",
					"\n",
					"# used for classenrolment view\n",
					"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\n",
					"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\n",
					"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\n",
					"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta') #need to edit source\n",
					"\n",
					"subjectexclusionlist_df = spark.read.load(source3p + \"/pilot/SubjectExclusionList_pseudo\", format='delta')\n",
					"\n",
					"# stage 3 general dims\n",
					"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\n",
					"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\n",
					"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\n",
					"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\n",
					"\n",
					"# used for active student view\n",
					"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\n",
					"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\n",
					"\n",
					"# used for ODS tables (+ dmcampus_df already added above)\n",
					"odsactivity_df = spark.read.load(sourcep + \"/ODS/CompassODSActivity_pseudo\", format='delta')\n",
					"odsactivityenrolment_df = spark.read.load(sourcep + \"/ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\n",
					"odsactivityinstance_df = spark.read.load(sourcep + \"/ODSActivityInstance/CompassODSActivityInstance_pseudo\", format='delta')\n",
					"odscompasssubject_df = spark.read.load(sourcep + \"/ODS/CompassODSCompassSubject_pseudo\", format='delta')\n",
					"\n",
					"odsstaffdemographic_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffDemographic_pseudo\", format='delta')\n",
					"odsstudentdemographic_df = spark.read.load(sourcep + \"/ODSStudentDemographic/CompassODSStudentDemographic_pseudo\", format='delta')\n",
					"\n",
					"odsstafforganisationdetails_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffOrganisationDetails_pseudo\", format='delta')\n",
					"odsstudentorganisationdetails_df = spark.read.load(sourcep + \"/ODS/CompassODSStudentOrganisationDetails_pseudo\", format='delta')\n",
					"\n",
					"odsstafforganisationmilestones_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffOrganisationMilestones_pseudo\", format='delta')\n",
					"\n",
					"# stage 3 transform on this table\n",
					"odsstudentorganisationmilestones_df = spark.read.load(source3p + \"/pilot/CompassODSStudentOrganisationMilestones_pseudo\", format='delta')\n",
					"\n",
					"# early years\n",
					"earlyyearssubteachers_df = spark.read.load(source3p + \"/pilot/EarlyYearsSubTeachers_pseudo\", format='delta')\n",
					"\n",
					"# Early Years\n",
					"EarlyYearsResultsWide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResults_pseudo\", format='delta')\n",
					"EYResultsYear2Wide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResultsYear2_pseudo\", format='delta')\n",
					"EarlyYearsStudents_df = spark.read.load(source3p + \"/pilot/_FACTODSEarlyYearsStudents\", format='delta')\n",
					"\n",
					"#NAPLAN\n",
					"naplanonlinestudenttest_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANOnlineStudentTestResult_pseudo\", format='delta')\n",
					"naplanonlinestudentresult_df = spark.read.load(source3p + \"/pilot/DMNAPLANOnlineStudentResult_pseudo\", format='delta')\n",
					"naplantest_df = spark.read.load(source3p + \"/pilot/DMNAPLANTest_pseudo\", format='delta')\n",
					"\n",
					"#NAPLAN Proficiency\n",
					"naplanproficiencytest_df = spark.read.load(source3p + \"/pilot/DMNAPLANProficiencyTest_pseudo\", format='delta')\n",
					"naplanproficiencystudentresult_df = spark.read.load(source3p + \"/pilot/DMNAPLANProficiencyStudentResult_pseudo\", format='delta')\n",
					"naplanproficiencystudenitemresponse_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANProficiencyStudentItemResponse_pseudo\", format='delta')\n",
					"naplanacaraproficiency_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANACARAProficiency_pseudo\", format='delta')\n",
					"\n",
					"#ACER\n",
					"patresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\n",
					"pattest_df = spark.read.load(source3p + \"/pilot/DMPATTest_pseudo\", format='delta')\n",
					"acerstudent_df = spark.read.load(source3p + \"/pilot/DMACERStudent_pseudo\", format='delta')\n",
					"\n",
					"#AE\n",
					"aeresults_df = spark.read.load(source3p + \"/pilot/AEResultsCombined_pseudo\", format='delta')\n",
					"\n",
					"#ICSEA\n",
					"icsea_df = spark.read.load(source3p + \"/pilot/ICSEA_pseudo\", format='delta')\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"# create temp sql views\n",
					"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\n",
					"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\n",
					"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\n",
					"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\n",
					"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\n",
					"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\n",
					"dmdate_df.createOrReplaceTempView('vw_dmdate')\n",
					"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\n",
					"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\n",
					"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\n",
					"subjectexclusionlist_df.createOrReplaceTempView('vw_subjectexclusionlist')\n",
					"\n",
					"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \n",
					"odsactivityinstance_df.createOrReplaceTempView('vw_CompassODSActivityInstance') \n",
					"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \n",
					"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \n",
					"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \n",
					"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') \n",
					"\n",
					"odsstafforganisationdetails_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationDetails') \n",
					"odsstafforganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationMilestones')\n",
					"\n",
					"odsstudentorganisationdetails_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationDetails') \n",
					"odsstudentorganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationMilestones')\n",
					"\n",
					"# Early Years\n",
					"earlyyearssubteachers_df.createOrReplaceTempView('vw_EarlyYearsSubTeachers') \n",
					"\n",
					"EarlyYearsResultsWide_df.createOrReplaceTempView('vw_EarlyYearsResultsWide') \n",
					"EYResultsYear2Wide_df.createOrReplaceTempView('vw_EYResultsYear2Wide') \n",
					"EarlyYearsStudents_df.createOrReplaceTempView('vw_EarlyYearsStudents') \n",
					"\n",
					"#NAPLAN\n",
					"naplanonlinestudenttest_df.createOrReplaceTempView('vw_naplanonlinestudenttest') \n",
					"naplanonlinestudentresult_df.createOrReplaceTempView('vw_naplanonlinestudentresult') \n",
					"naplantest_df.createOrReplaceTempView('vw_naplantest') \n",
					"\n",
					"#NAPLAN Procifiency\n",
					"naplanproficiencytest_df.createOrReplaceTempView('vw_naplanproficiencytest') \n",
					"naplanproficiencystudentresult_df.createOrReplaceTempView('vw_naplanproficiencystudentresult') \n",
					"naplanproficiencystudenitemresponse_df.createOrReplaceTempView('vw_naplanproficiencystudenitemresponse') \n",
					"naplanacaraproficiency_df.createOrReplaceTempView('vw_naplanacaraproficiency') \n",
					"\n",
					"#ACER\n",
					"patresults_df.createOrReplaceTempView('vw_patresults') \n",
					"pattest_df.createOrReplaceTempView('vw_pattest') \n",
					"acerstudent_df.createOrReplaceTempView('vw_acerstudent') \n",
					"\n",
					"#AE\n",
					"aeresults_df.createOrReplaceTempView('vw_aeresults') \n",
					"\n",
					"#ICSEA\n",
					"icsea_df.createOrReplaceTempView('vw_icsea') \n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## REMOVE (has been replaced by AllEnrolment)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_classenrolment;\n",
					"\n",
					"CREATE TEMP VIEW vw_classenrolment\n",
					"AS\n",
					"SELECT cy.Year AS CalendarYear,\n",
					"    C.SchoolId AS AGEID,\n",
					"    c.CampusSuburbAndName,\n",
					"    student.FirstName  AS  StudentFirstName,\n",
					"    student.LastName AS StudentLastName,\n",
					"    Student.Ceider,\n",
					"    yl.YearLevelSifDesc AS YearLevel,\n",
					"    s.SubjectShortName AS Subject,\n",
					"    a.ActivityName AS  ClassName,\n",
					"    a.ActivityCode AS ClassCode,\n",
					"    ClassStartDate.date AS ClassStartDate,\n",
					"    ClassEndDate.date AS ClassEndDate,\n",
					"    staff.FirstName AS StaffFirstName,\n",
					"    staff.LastName AS StaffLastName\n",
					"\n",
					"    FROM vw_factsubjectenrolment f\n",
					"    JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\n",
					"    AND a.ActivityTypeDescription = 'Standard Class'\n",
					"    JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\n",
					"    JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\n",
					"    JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\n",
					"    JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\n",
					"    JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\n",
					"    JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\n",
					"\n",
					"    JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\n",
					"    JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\n",
					"\n",
					"    AND cy.Year = 2022\n",
					"    WHERE ClassEndDate.date > current_date() -- spark sql uses current_date() instead of GETDATE()\n",
					"    AND s.SubjectShortName <> 'Unknown'\n",
					"    ORDER BY\n",
					"    AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_activestudenttemp;\n",
					"\n",
					"-- Temporary table do not save \n",
					"CREATE TEMP VIEW vw_activestudenttemp\n",
					"AS\n",
					"SELECT SchoolID AS SchoolAGEID,\n",
					"    c.CampusSuburbAndName,\n",
					"    c.SchoolId as CampusId,\n",
					"    pd.FirstName,\n",
					"    pd.LastName,\n",
					"    yl.SKYearLevel,\n",
					"    rg.RollGroupDesc AS RollGroup,\n",
					"    pd.Ceider,\n",
					"    pd.SKPerson, \n",
					"    pd.Disability,\n",
					"    pd.ATSIId,\n",
					"    pd.LBOTE\n",
					"\n",
					"FROM vw_factpersonmilestone f\n",
					"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\n",
					"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\n",
					"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\n",
					"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\n",
					"WHERE \n",
					"    f.IsCurrentMilestone = 'True'\n",
					"    AND f.IsActiveMilestone = 'True'\n",
					"    AND pd.PersonType = 'Student'\n",
					"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_activestudent;\n",
					"\n",
					"-- Removes duplicates from the active student temp table above\n",
					"CREATE TEMP VIEW vw_activestudent\n",
					"AS\n",
					"SELECT *\n",
					"FROM vw_activestudenttemp\n",
					"WHERE Ceider NOT IN (SELECT Ceider\n",
					"                    FROM vw_activestudenttemp\n",
					"                    GROUP BY Ceider\n",
					"                    HAVING COUNT(Ceider) > 1)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_activestudentexceptions;\n",
					"\n",
					"-- Gets only the duplicates from the active student temp table above so it can be used in an exceptions report \n",
					"CREATE TEMP VIEW vw_activestudentexceptions\n",
					"AS\n",
					"SELECT *\n",
					"FROM vw_activestudenttemp\n",
					"WHERE Ceider IN (SELECT Ceider\n",
					"                    FROM vw_activestudenttemp\n",
					"                    GROUP BY Ceider\n",
					"                    HAVING COUNT(Ceider) > 1)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_inactivestudent;\n",
					"\n",
					"-- MAY NOT REQUIRE THIS ANYMORE\n",
					"CREATE TEMP VIEW vw_inactivestudent\n",
					"AS\n",
					"SELECT SchoolID AS SchoolAGEID,\n",
					"    c.CampusSuburbAndName,\n",
					"    pd.FirstName,\n",
					"    pd.LastName,\n",
					"    yl.YearLevelSifDesc AS YearLevel,\n",
					"    rg.RollGroupDesc AS RollGroup,\n",
					"    pd.Ceider,\n",
					"    pd.SKPerson, \n",
					"    pd.Disability,\n",
					"    pd.ATSIId,\n",
					"    pd.LBOTE,\n",
					"    d.date AS DateLeft\n",
					"    \n",
					"FROM\n",
					"    vw_factpersonmilestone f\n",
					"JOIN vw_dmdate d ON f.SKMilestoneStartDate = d.SKDate\n",
					"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\n",
					"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\n",
					"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\n",
					"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\n",
					"\n",
					"WHERE \n",
					"    f.IsCurrentMilestone = 'True'\n",
					"    AND f.IsActiveMilestone = 'False'\n",
					"    AND pd.PersonType = 'Student'\n",
					"    AND Date < current_date()\n",
					"ORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_studentclass;\n",
					"\n",
					"CREATE TEMP VIEW vw_ods_studentclass\n",
					"as\n",
					"\n",
					"SELECT distinct\n",
					"d.FirstName AS StudentFirstName \n",
					",d.LastName AS StudentLastName\n",
					",d.CompassPersonId\n",
					",d.GovCode1 AS Ceider\n",
					",s.SubjectLongName\n",
					",a.SubjectCode\n",
					",a.ActivityName\n",
					",a.ActivityTypeDescription\n",
					",a.ManagingCompassPersonId\n",
					",staff.firstname\n",
					",staff.lastname\n",
					",ae.ActivityEnrolmentStartDate\n",
					",ae.ActivityEnrolmentEndDate\n",
					",concat(staff.FirstName,' ',staff.LastName) AS StaffName\n",
					",a.CampusId AS AGEID\n",
					",c.CampusSuburbAndName\n",
					"--,c.CompassSchoolURL\n",
					",s.AcademicYear\n",
					",ae.iscurrent as IsCurrent_ActivityEnrolment\n",
					",a.IsCurrent as IsCurrent_Activity\n",
					",s.IsCurrent as IsCurrent_Subject\n",
					",staff.iscurrent as IsCurrent_Staff\n",
					",d.iscurrent as IsCurrent_Student\n",
					"\n",
					"\n",
					"FROM \n",
					"vw_CompassODSStudentDemographic d \n",
					"\n",
					"JOIN vw_CompassODSActivityEnrolment ae \n",
					"ON d.CompassPersonId = ae.CompassPersonId\n",
					"\n",
					"JOIN vw_CompassODSActivity a \n",
					"ON ae.ActivityCode = a.ActivityCode\n",
					"AND ae.CampusId = a.CampusId\n",
					"\n",
					"LEFT OUTER JOIN vw_CompassODSCompassSubject s \n",
					"ON ae.SubjectCode = s.SubjectImportIdentifier\n",
					"AND a.CampusId = s.CampusId\n",
					"\n",
					"LEFT outer JOIN vw_CompassODSStaffDemographic  staff \n",
					"ON staff.CompassPersonId = a.ManagingCompassPersonId \n",
					"\n",
					"JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\n",
					"WHERE \n",
					"d.iscurrent is True\n",
					"AND a.ActivityTypeDescription = 'Standard Class'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_studentstable;\n",
					"\n",
					"CREATE TEMP VIEW vw_ods_studentstable\n",
					"as\n",
					"\n",
					"select\n",
					"distinct ms.CompassPersonId as MS_CompassPersonID\n",
					",demo.CompassPersonId as DEMO_CompassPersonID\n",
					",ms.yearlevel\n",
					",ms.isactive \n",
					",ms.iscurrentmilestone \n",
					",ms.studenttype \n",
					",ms.dioceseId\n",
					",ms.campusid \n",
					",camp.skcampus\n",
					",camp.BKCampusId\n",
					",camp.SchoolName\n",
					",ms.iscurrent\n",
					",demo.firstname\n",
					",demo.lastname \n",
					"--,demo.gender \n",
					",demo.govcode1 as ceider\n",
					"--,demo.disability \n",
					"--,demo.LBOTE \n",
					"--,demo.indigenoustypecode \n",
					",ms.milestonetimestamp\n",
					",year(MilestoneTimestamp + INTERVAL 10 HOURS) AS calendaryear\n",
					"from vw_CompassODSStudentOrganisationMilestones ms\n",
					"\n",
					"left join vw_CompassODSStudentDemographic demo on ms.CompassPersonId = demo.CompassPersonId \n",
					"\tand demo.Iscurrent = 'True'\n",
					"\n",
					"left join vw_dmcampus camp on ms.campusid = camp.BKCampusId\n",
					"\n",
					"where \n",
					"ms.iscurrent = 'True'\n",
					"and ms.isactive = 'True'\n",
					"--and ms.iscurrentmilestone  = 'True' --this is just for 2023 (current year)\n",
					"and year(MilestoneTimestamp + INTERVAL 10 HOURS) in (2021, 2022, 2023)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Enrolments "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_allenrolments;\n",
					"\n",
					"CREATE TEMP VIEW vw_allenrolments\n",
					"AS\n",
					"\n",
					"SELECT \n",
					"\todse.SubjectCode\n",
					"\t,odse.ActivityCode\n",
					"\t,odse.CampusID\n",
					"\t,odss.GovCode1 AS Ceider\n",
					"\t,YEAR(odse.ActivityEnrolmentEndDate) AS Year\n",
					"\t,c.SkYear\n",
					"\tFROM vw_CompassODSActivityEnrolment odse\n",
					"\tJOIN vw_CompassODSStudentDemographic odss on odse.CompassPersonId = odss.CompassPersonId\n",
					"\tJOIN vw_dmcalendaryear c on YEAR(odse.ActivityEnrolmentEndDate) = c.Year\n",
					"\n",
					"\tWHERE SubjectCode IS NOT NULL\n",
					"\tAND odse.Iscurrent = 'True'\n",
					"\tAND odss.Iscurrent = 'True'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_currentyearenrolments;\n",
					"\n",
					"CREATE TEMP VIEW vw_currentyearenrolments\n",
					"AS\n",
					"\n",
					"SELECT \n",
					"\te.SubjectCode\n",
					"\t,e.ActivityCode\n",
					"\t,e.CampusID\n",
					"\t,e.Year\n",
					"\t,a.SKYearLevel\n",
					"\t,a.Ceider\n",
					"\n",
					"\tFROM vw_allenrolments e\n",
					"\tJOIN vw_activestudent a on e.Ceider = a.Ceider -- will not include active students who are not enrolled in classes\n",
					"\tAND Year = YEAR(current_date())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_currentyearenrolments_withexclusions;\n",
					"\n",
					"CREATE TEMP VIEW vw_currentyearenrolments_withexclusions\n",
					"AS\n",
					"SELECT DISTINCT\n",
					"    ce.*\n",
					"    ,subject.SubjectShortName\n",
					"\n",
					"    FROM vw_currentyearenrolments ce\n",
					"    JOIN \n",
					"    (\n",
					"        SELECT DISTINCT \n",
					"            c.SubjectImportIdentifier AS SubjectCode\n",
					"            ,c.Campusid\n",
					"            ,c.SubjectShortName\n",
					"        FROM vw_CompassODSCompassSubject c\n",
					"        JOIN vw_subjectexclusionlist e\n",
					"        ON c.SubjectImportIdentifier = e.SubjectCode\n",
					"        AND c.SubjectShortName = e.SubjectShortName\n",
					"        WHERE AcademicYear = YEAR(current_date())\n",
					"        AND e.Include = 'TRUE'\n",
					"    ) subject\n",
					"    ON ce.SubjectCode = subject.SubjectCode\n",
					"    AND ce.CampusID = subject.Campusid\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_currentrollgroup;\n",
					"\n",
					"CREATE TEMP VIEW vw_currentrollgroup\n",
					"AS\n",
					"\n",
					"SELECT \n",
					"\tRollGroup AS SubjectCode\n",
					"\t,RollGroup AS ActivityCode \n",
					"\t,CampusID\n",
					"\t,YEAR(current_date()) AS Year\n",
					"\t,SKYearLevel\n",
					"\t,Ceider\n",
					"\n",
					"  FROM vw_activestudent\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_currentenrolments;\n",
					"\n",
					"CREATE TEMP VIEW vw_currentenrolments\n",
					"AS\n",
					"\n",
					"SELECT *\n",
					"    FROM vw_currentyearenrolments\n",
					"\n",
					"UNION\n",
					"\n",
					"SELECT *\n",
					"    FROM vw_currentrollgroup"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Early Years Students"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents;\n",
					"\n",
					"create temp view vw_ods_earlyyearsstudents\n",
					"as\n",
					"\n",
					"select distinct \n",
					"\n",
					"\tyear(current_date) as Year\n",
					"\t, replace(YearLevel, '0', 'P') as YearLevel\n",
					"\t, instance.CampusId as CampusID\n",
					"\t, campus.SchoolNameAndArea\n",
					"\t, ManagingCompassPersonId as TeacherID\n",
					"\t, concat(staffdemo.TeacherFirstName, ' ', staffdemo.TeacherLastName) as TeacherName\n",
					"\t, students.StudentCompassPersonId as StudentID\n",
					"\t, concat(studentdemo.FirstName, ' ', studentdemo.LastName) as StudentName\n",
					"\t, enrolment.ActivityName as ClassName\n",
					"\t, enrolment.ActivityCode as ClassID\n",
					"\t, trim(coalesce(staffemail.TeacherOrganisationUserEmail, staffdemo.TeacherEmailAddress)) as StaffEmail\n",
					"\t, trim(studentemail.OrganisationUserEmail) as StudentEmail\n",
					"\t, trim(studentdemo.GovCode1) as Ceider\n",
					"\n",
					"from\n",
					"\n",
					"-- Student Organisation Milestones\n",
					"(select distinct CompassPersonId as StudentCompassPersonId, YearLevel, OrganisationName, CampusId\n",
					"  from vw_CompassODSStudentOrganisationMilestones\n",
					"  where 1=1\n",
					"  and IsActive = 'True'\n",
					"  and IsCurrent = 'True'\n",
					"  and IsCurrentMilestone = 'True'\n",
					"  and DioceseId = 12\n",
					"  and (YearLevel = '0' or YearLevel = '1' or YearLevel = '2')\n",
					") students\n",
					"\n",
					"left join\n",
					"\n",
					"-- Compass Activity Enrolment\n",
					"(select distinct CompassPersonId as StudentCompassPersonId, ActivityCode, ActivityName, CampusID\n",
					"\tfrom vw_CompassODSActivityEnrolment\n",
					"\twhere 1=1\n",
					"\tand IsCurrent = 'True'\n",
					"\tand RoleDescription = 'Student'\n",
					"\tand ActivityName <> 'Sickbay'\n",
					"\tand SubjectCode IS NOT NULL\n",
					"\tand year(ActivityEnrolmentStartDate) = year(current_date)\n",
					"\t--and to_date(ActivityEnrolmentEndDate) > current_date\n",
					"\tand year(to_date(ActivityEnrolmentEndDate)) = year(current_date)\n",
					"\tand (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\n",
					") enrolment\n",
					"\n",
					"on students.StudentCompassPersonId = enrolment.StudentCompassPersonId\n",
					"\n",
					"left join\n",
					"\n",
					"-- Compass Activity Instance\n",
					"(select distinct ActivityCode, ManagingCompassPersonId, CampusId\n",
					"  from vw_CompassODSActivityInstance\n",
					"  where 1=1 \n",
					"  and IsCurrent = 'True'\n",
					"  and DioceseId = 12\n",
					"  and (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\n",
					"  and year(Start) = year(current_date)\n",
					"  and ManagingCompassPersonId <> '00000000-0000-0000-0000-000000000000'\n",
					") instance \n",
					"\n",
					"on enrolment.ActivityCode = instance.ActivityCode\n",
					"and enrolment.CampusID = instance.CampusId\n",
					"\n",
					"inner join\n",
					"\n",
					"-- Staff Organisation Milestones\n",
					"(select distinct CompassPersonId as StaffCompassPersonId, OrganisationName\n",
					"\tfrom vw_CompassODSStaffOrganisationMilestones\n",
					"\twhere 1=1\n",
					"\tand DioceseId = 12\n",
					"\tand IsCurrentMilestone = 'True'\n",
					"\tand Iscurrent = 'True'\n",
					"\tand IsActive = 'True'\n",
					") staffmilestone\n",
					"\n",
					"on instance.ManagingCompassPersonId = staffmilestone.StaffCompassPersonId\n",
					"\n",
					"inner join\n",
					"\n",
					"-- Staff Demographic\n",
					"-- only getting the personal email here because some schools have accidentally \n",
					"-- put the org user email in this field in compass\n",
					"(select distinct CompassPersonId as StaffCompassPersonId, FirstName as TeacherFirstName, LastName as TeacherLastName, EmailAddress as TeacherEmailAddress\n",
					"\tfrom vw_CompassODSStaffDemographic\n",
					"\twhere 1=1\n",
					"\tand IsCurrent = 'True'\n",
					") staffdemo\n",
					"\n",
					"on staffmilestone.StaffCompassPersonId = staffdemo.StaffCompassPersonId\n",
					"\n",
					"inner join\n",
					"\n",
					"-- Staff Organisation Details (email)\n",
					"(select distinct CompassPersonId as TeacherCompassPersonId, OrganisationUserEmail as TeacherOrganisationUserEmail, OrganisationName\n",
					"\tfrom vw_CompassODSStaffOrganisationDetails\n",
					"\twhere 1=1\n",
					"\tand Iscurrent = 'True'\n",
					"\tand OrganisationUserEmail NOT LIKE '%supply%'\n",
					") staffemail\n",
					"\n",
					"on staffmilestone.StaffCompassPersonId = staffemail.TeacherCompassPersonId\n",
					"and staffmilestone.OrganisationName = staffemail.OrganisationName\n",
					"and staffemail.OrganisationName like students.OrganisationName\n",
					"\n",
					"inner join -- inner join will remove students without demographic information\n",
					"\n",
					"-- Student Demographic\n",
					"(select distinct CompassPersonId as StudentCompassPersonId, FirstName, LastName, GovCode1\n",
					"\tfrom vw_CompassODSStudentDemographic\n",
					"\twhere 1=1\n",
					"\tand Iscurrent = 'True'\n",
					") studentdemo\n",
					"\n",
					"on students.StudentCompassPersonId = studentdemo.StudentCompassPersonId\n",
					"\n",
					"inner join  -- inner join will remove students without email\n",
					"\n",
					"-- Student Organisation Details (Email)\n",
					"(select distinct CompassPersonId as StudentCompassPersonId, OrganisationUserEmail, OrganisationName\n",
					"\tfrom vw_CompassODSStudentOrganisationDetails\n",
					"\twhere 1=1\n",
					"\tand Iscurrent = 'True'\n",
					"\tand OrganisationUserEmail IS NOT NULL --these are all duplicate students that have emails in other records\n",
					") studentemail\n",
					"\n",
					"on studentdemo.StudentCompassPersonId = studentemail.StudentCompassPersonId\n",
					"and students.OrganisationName = studentemail.OrganisationName\n",
					"\n",
					"left join\n",
					"\n",
					"-- Get the School Names\n",
					"(select SchoolId, SchoolNameAndArea\n",
					"\tfrom vw_dmcampus\n",
					") campus\n",
					"\n",
					"on campus.SchoolId = instance.CampusId\n",
					"\n",
					"-- filter out the duplicate classid's from campusid 617\n",
					"WHERE 1=1\n",
					"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GENP_PREP')\n",
					"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GEN1_Year 1')\n",
					"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GEN2_Year 2')\n",
					"\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"select count(*) from vw_ods_earlyyearsstudents"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_exceptions;\n",
					"\n",
					"-- Create a student exceptions lists with students that are assigned to multiple 'General' type classes\n",
					"\n",
					"create temp view vw_ods_earlyyearsstudents_exceptions\n",
					"as\n",
					"\n",
					"select \n",
					"    Year\n",
					"    ,YearLevel\n",
					"    ,CampusID\n",
					"    ,SchoolNameAndArea\n",
					"    ,Ceider\n",
					"    ,StudentName\n",
					"    ,TeacherName\n",
					"    ,ClassID\n",
					"\n",
					"from vw_ods_earlyyearsstudents\n",
					"\n",
					"where Ceider in (\n",
					"\n",
					"  select Ceider\n",
					"  from\n",
					"\n",
					"  (\n",
					"\t  select distinct year, ceider, classid\n",
					"\t  FROM vw_ods_earlyyearsstudents\n",
					"  ) a\n",
					"\n",
					"  group by year, ceider\n",
					"  having count(*) > 1\n",
					"\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_cleaned;\n",
					"\n",
					"-- Remove the students exceptions (where a student is listed multiple times)\n",
					"\n",
					"create temp view vw_ods_earlyyearsstudents_cleaned\n",
					"as\n",
					"\n",
					"select \n",
					"    Year\n",
					"    ,YearLevel\n",
					"    ,CampusID\n",
					"    ,SchoolNameAndArea\n",
					"    ,TeacherID\n",
					"    ,TeacherName\n",
					"    ,StudentID\n",
					"    ,StudentName\n",
					"    ,ClassName\n",
					"    ,ClassID\n",
					"    ,StaffEmail\n",
					"    ,StudentEmail\n",
					"    ,Ceider\n",
					"\n",
					"from vw_ods_earlyyearsstudents\n",
					"\n",
					"where Ceider NOT IN (\n",
					"\n",
					"  select Ceider\n",
					"  from\n",
					"\n",
					"  (\n",
					"\t  select distinct year, ceider, classid\n",
					"\t  FROM vw_ods_earlyyearsstudents\n",
					"  ) allceiders\n",
					"\n",
					"  group by year, ceider\n",
					"  having count(*) > 1\n",
					"\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudentsclassid_cleaned;\n",
					"\n",
					"-- create a clean student list that lists the correct classid for each student\n",
					"\n",
					"create temp view vw_ods_earlyyearsstudentsclassid_cleaned\n",
					"as\n",
					"\n",
					"select distinct \n",
					"    Year\n",
					"    ,Ceider\n",
					"    ,ClassID\n",
					"    ,ClassName\n",
					"\n",
					"from vw_ods_earlyyearsstudents_cleaned \n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_EYResultsYear2;\n",
					"\n",
					"CREATE TEMP VIEW vw_EYResultsYear2\n",
					"AS\n",
					"\n",
					"select \n",
					"    e.Year,\n",
					"    e.Ceider,\n",
					"    e.CampusID,\n",
					"    coalesce(c.ClassID, e.ClassID) AS ClassID,\n",
					"    e.Ques1,\n",
					"    e.Ques10,\n",
					"    e.Ques11,\n",
					"    e.Ques12,\n",
					"    e.Ques13,\n",
					"    e.Ques14,\n",
					"    e.Ques15,\n",
					"    e.Ques16,\n",
					"    e.Ques17,\n",
					"    e.Ques18,\n",
					"    e.Ques19,\n",
					"    e.Ques2,\n",
					"    e.Ques20,\n",
					"    e.Ques21,\n",
					"    e.Ques22,\n",
					"    e.Ques23,\n",
					"    e.Ques24,\n",
					"    e.Ques25,\n",
					"    e.Ques3,\n",
					"    e.Ques4,\n",
					"    e.Ques5,\n",
					"    e.Ques6,\n",
					"    e.Ques7,\n",
					"    e.Ques8,\n",
					"    e.Ques9,\n",
					"    e.QuestionType,\n",
					"    e.Status,\n",
					"    e.StudentEmailID,\n",
					"    e.StudentName,\n",
					"    e.TeacherEmailID,\n",
					"    e.TeacherName,\n",
					"    e.YearLevel,\n",
					"    e.TestLevel,\n",
					"    e.BKID,\n",
					"    c.ClassName\n",
					"\n",
					"from vw_EYResultsYear2Wide e\n",
					"left join vw_ods_earlyyearsstudentsclassid_cleaned c\n",
					"on e.Year = c.Year \n",
					"and e.Ceider = c.Ceider\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_EYResults;\n",
					"\n",
					"CREATE TEMP VIEW vw_EYResults\n",
					"AS\n",
					"\n",
					"select \n",
					"    e.Year,\n",
					"    e.Ceider,\n",
					"    e.CampusID,\n",
					"    coalesce(c.ClassID, e.ClassID) AS ClassID,\n",
					"    e.Ques1,\n",
					"    e.Ques10,\n",
					"    e.Ques11,\n",
					"    e.Ques12,\n",
					"    e.Ques13,\n",
					"    e.Ques14,\n",
					"    e.Ques15,\n",
					"    e.Ques16,\n",
					"    e.Ques17,\n",
					"    e.Ques18,\n",
					"    e.Ques19,\n",
					"    e.Ques2,\n",
					"    e.Ques20,\n",
					"    e.Ques21,\n",
					"    e.Ques22,\n",
					"    e.Ques23,\n",
					"    e.Ques24,\n",
					"    e.Ques25,\n",
					"    e.Ques26,\n",
					"    e.Ques27,\n",
					"    e.Ques28,\n",
					"    e.Ques29,\n",
					"    e.Ques30,\n",
					"    e.Ques31,\n",
					"    e.Ques32,\n",
					"    e.Ques33,\n",
					"    e.Ques34,\n",
					"    e.Ques35,\n",
					"    e.Ques36,\n",
					"    e.Ques37,\n",
					"    e.Ques38,\n",
					"    e.Ques39,\n",
					"    e.Ques40,\n",
					"    e.Ques3,\n",
					"    e.Ques4,\n",
					"    e.Ques5,\n",
					"    e.Ques6,\n",
					"    e.Ques7,\n",
					"    e.Ques8,\n",
					"    e.Ques9,\n",
					"    e.Status,\n",
					"    e.StudentEmailID,\n",
					"    e.StudentName,\n",
					"    e.TeacherEmailID,\n",
					"    e.TeacherName,\n",
					"    e.YearLevel,\n",
					"    e.TestLevel,\n",
					"    e.BKID,\n",
					"    c.ClassName\n",
					"\n",
					"from vw_EarlyYearsResultsWide e\n",
					"left join vw_ods_earlyyearsstudentsclassid_cleaned c\n",
					"on e.Year = c.Year \n",
					"and e.Ceider = c.Ceider\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudentsclassid_updated;\n",
					"\n",
					"create temp view vw_ods_earlyyearsstudentsclassid_updated\n",
					"AS\n",
					"\n",
					"select \n",
					"    e.Year\n",
					"    ,e.YearLevel\n",
					"    ,e.CampusID\n",
					"    ,e.SchoolNameAndArea\n",
					"    ,e.TeacherID\n",
					"    ,e.TeacherName\n",
					"    ,e.StudentID\n",
					"    ,e.StudentName\n",
					"    ,eclean.ClassName\n",
					"    ,eclean.ClassID\n",
					"    ,e.StaffEmail\n",
					"    ,e.StudentEmail\n",
					"    ,e.Ceider\n",
					"\n",
					"from vw_ods_earlyyearsstudents e\n",
					"left join vw_ods_earlyyearsstudents_cleaned eclean \n",
					"on e.Year = eclean.Year\n",
					"and e.Ceider = eclean.Ceider"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Add Substitute Teachers from the SharePoint Online list"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_substituteteachers;\n",
					"\n",
					"-- Manual entry of support staff (non teachers) that will be conducting tests\n",
					"\n",
					"create temp view vw_ods_earlyyearsstudents_substituteteachers\n",
					"as\n",
					"\n",
					"select \n",
					"\tYear\n",
					"    ,YearLevel\n",
					"    ,CampusID\n",
					"    ,SchoolNameAndArea\n",
					"    ,TeacherID\n",
					"    ,TeacherName\n",
					"    ,StudentID\n",
					"    ,StudentName\n",
					"    ,ClassName\n",
					"    ,ClassID\n",
					"    ,StaffEmail\n",
					"    ,StudentEmail\n",
					"    ,Ceider\n",
					"    from vw_ods_earlyyearsstudents\n",
					"\n",
					"union all\n",
					"\n",
					"select distinct\n",
					"\torg.Year\n",
					"\t,org.YearLevel\n",
					"\t,org.CampusID\n",
					"\t,org.SchoolNameAndArea\n",
					"\t,new.SubTeacherCompassID as TeacherID\n",
					"\t,new.SubTeacherName as TeacherName\n",
					"\t,org.StudentID\n",
					"\t,org.StudentName\n",
					"\t,org.ClassName\n",
					"\t,org.ClassID\n",
					"\t,new.SubTeacherEmail as StaffEmail\n",
					"\t,org.StudentEmail\n",
					"\t,org.Ceider\n",
					"\n",
					"    from vw_ods_earlyyearsstudents org\n",
					"\n",
					"inner join\n",
					"\n",
					"    (\n",
					"    select distinct\n",
					"        sub.Title as OriginalTeacherEmail\n",
					"        ,coalesce(details.TeacherName, sub.AdditionalTeacherEmail, 'Substitute') as SubTeacherName\n",
					"        ,details.TeacherID as SubTeacherCompassID\n",
					"        ,sub.AdditionalTeacherEmail as SubTeacherEmail\n",
					"\n",
					"        from vw_EarlyYearsSubTeachers sub\n",
					"        left join\n",
					"        (\n",
					"        select distinct\n",
					"            concat(d.FirstName, ' ', d.LastName) as TeacherName\n",
					"            ,d.CompassPersonId as TeacherID\n",
					"            ,coalesce(so.OrganisationUserEmail, d.EmailAddress, NULL) as StaffEmail\n",
					"\n",
					"            from vw_CompassODSStaffDemographic d\n",
					"            inner join vw_CompassODSStaffOrganisationDetails so\n",
					"            on d.CompassPersonId = so.CompassPersonId\n",
					"            where 1=1\n",
					"            and d.Iscurrent = 'True'\n",
					"            and so.Iscurrent = 'True'\n",
					"        ) details\n",
					"\n",
					"        on sub.AdditionalTeacherEmail = details.StaffEmail\n",
					"    ) new\n",
					"\n",
					"on org.StaffEmail = new.OriginalTeacherEmail"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Combine NAPLAN and NAPLAN Proficiency"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_DMNAPLANTestALL;\n",
					"\n",
					"CREATE TEMP VIEW vw_DMNAPLANTestALL AS\n",
					"\n",
					"-- First part of the UNION\n",
					"SELECT \n",
					"    NT.SKNAPLANTest AS SKNAPLANProficiencyTest,\n",
					"    NT.BKNAPLANTest AS BKNAPLANProficiencyTest,\n",
					"    NT.TestYear,\n",
					"    NT.TestLevelCode,\n",
					"    NT.Domain\n",
					"\n",
					"FROM vw_naplantest AS NT\n",
					"\n",
					"UNION\n",
					"\n",
					"-- Second part of the UNION\n",
					"SELECT \n",
					"    PT.SKNAPLANProficiencyTest,\n",
					"    PT.BKNAPLANProficiencyTest,\n",
					"    PT.TestYear,\n",
					"    PT.TestLevelCode,\n",
					"    PT.Domain\n",
					"\n",
					"FROM vw_naplanproficiencytest AS PT\n",
					"\n",
					"WHERE \n",
					"    PT.SKNAPLANProficiencyTest <> -1;\n",
					"\n",
					"\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_DIMNAPLANCombinedResultsStudentsActive;\n",
					"\n",
					"CREATE TEMP VIEW vw_DIMNAPLANCombinedResultsStudentsActive AS\n",
					"\n",
					"-- First part of the UNION\n",
					"SELECT \n",
					"    TR.SKNaplanAssessmentId,\n",
					"    A.Ceider,\n",
					"    TR.SKYear AS NaplanSKYear,\n",
					"    TR.SKYearLevel AS NaplanSKYearLevel,\n",
					"    MAX(TR.ScaledScoreValue) AS NaplanScaledScoreValue,\n",
					"    MAX(TR.DomainNationalAverage) AS NAPLANDomainNationalAverage\n",
					"\n",
					"FROM vw_activestudent AS A\n",
					"\n",
					"LEFT JOIN vw_naplanonlinestudentresult AS SR \n",
					"    ON A.Ceider = SR.PersistentIdentifier\n",
					"\n",
					"JOIN vw_naplanonlinestudenttest AS TR \n",
					"    ON SR.SKNAPLANOnlineStudentResult = TR.SKNAPLANOnlineStudentResult\n",
					"\n",
					"WHERE \n",
					"    TR.ScaledScoreValue IS NOT NULL\n",
					"\n",
					"GROUP BY \n",
					"    A.Ceider, \n",
					"    TR.SKNaplanAssessmentId, \n",
					"    TR.SKYear, \n",
					"    TR.SKYearLevel\n",
					"\n",
					"UNION\n",
					"\n",
					"-- Second part of the UNION\n",
					"SELECT \n",
					"    TR.SKNaplanAssessmentId,\n",
					"    A.Ceider,\n",
					"    TR.SKYear AS NaplanSKYear,\n",
					"    TR.SKYearLevel AS NaplanSKYearLevel,\n",
					"    MAX(TR.DomainScaledScore) AS NaplanScaledScoreValue,\n",
					"    MAX(AP.MeanScale) AS NAPLANDomainNationalAverage\n",
					"\n",
					"FROM vw_activestudent AS A\n",
					"\n",
					"LEFT JOIN vw_naplanproficiencystudentresult AS SR \n",
					"    ON A.Ceider = SR.PersistentIdentifier\n",
					"\n",
					"JOIN vw_naplanproficiencystudenitemresponse AS TR \n",
					"    ON SR.SKNAPLANProficiencyStudentResult = TR.SKNAPLANProficiencyStudentResult\n",
					"\n",
					"JOIN vw_naplanacaraproficiency AS AP \n",
					"    ON TR.SKYear = AP.SKYear \n",
					"    AND TR.SKYearLevel = AP.SKYearLevel \n",
					"    AND TR.SKNaplanAssessmentId = AP.SKNaplanAssessmentId\n",
					"\n",
					"WHERE \n",
					"    TR.DomainScaledScore IS NOT NULL\n",
					"    AND AP.SKStateTerritory = 12 --National Means\n",
					"\n",
					"GROUP BY \n",
					"    A.Ceider, \n",
					"    TR.SKNaplanAssessmentId, \n",
					"    TR.SKYear, \n",
					"    TR.SKYearLevel;\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DROP VIEW IF EXISTS vw_DIMNAPLANCombinedResultsLatestStudentsActive;\n",
					"\n",
					"CREATE TEMP VIEW vw_DIMNAPLANCombinedResultsLatestStudentsActive AS\n",
					"\n",
					"-- SELECT \n",
					"--     CR.Ceider,\n",
					"--     CR.SKNaplanAssessmentId,\n",
					"--     MAX(CR.NaplanSKYear) AS NaplanSKYear,\n",
					"--     MAX(CR.NaplanSKYearLevel) AS NaplanSKYearLevel,\n",
					"--     MAX(CR.NaplanScaledScoreValue) AS NaplanScaledScoreValue,\n",
					"--     MAX(CR.NAPLANDomainNationalAverage) AS NAPLANDomainNationalAverage\n",
					"\n",
					"-- FROM vw_DIMNAPLANCombinedResultsStudentsActive AS CR\n",
					"\n",
					"-- GROUP BY \n",
					"--     CR.Ceider,\n",
					"--     CR.SKNaplanAssessmentId;\n",
					"\n",
					"WITH MaxYear AS (\n",
					"    SELECT \n",
					"        Ceider,\n",
					"        SKNaplanAssessmentId,\n",
					"        MAX(NaplanSKYear) AS MaxNaplanSKYear\n",
					"    FROM \n",
					"        vw_DIMNAPLANCombinedResultsStudentsActive\n",
					"    GROUP BY \n",
					"        Ceider,\n",
					"        SKNaplanAssessmentId\n",
					"),\n",
					"MaxYearLevel AS (\n",
					"    SELECT \n",
					"        MY.Ceider,\n",
					"        MY.SKNaplanAssessmentId,\n",
					"        MY.MaxNaplanSKYear,\n",
					"        MAX(CR.NaplanSKYearLevel) AS MaxNaplanSKYearLevel\n",
					"    FROM \n",
					"        MaxYear MY\n",
					"    JOIN \n",
					"        vw_DIMNAPLANCombinedResultsStudentsActive CR\n",
					"    ON \n",
					"        MY.Ceider = CR.Ceider\n",
					"        AND MY.SKNaplanAssessmentId = CR.SKNaplanAssessmentId\n",
					"        AND MY.MaxNaplanSKYear = CR.NaplanSKYear\n",
					"    GROUP BY \n",
					"        MY.Ceider,\n",
					"        MY.SKNaplanAssessmentId,\n",
					"        MY.MaxNaplanSKYear\n",
					")\n",
					"SELECT \n",
					"    CR.Ceider,\n",
					"    CR.SKNaplanAssessmentId,\n",
					"    CR.NaplanSKYear,\n",
					"    CR.NaplanSKYearLevel,\n",
					"    CR.NaplanScaledScoreValue,\n",
					"    CR.NAPLANDomainNationalAverage\n",
					"FROM \n",
					"    vw_DIMNAPLANCombinedResultsStudentsActive AS CR\n",
					"JOIN \n",
					"    MaxYearLevel MYL\n",
					"ON \n",
					"    CR.Ceider = MYL.Ceider\n",
					"    AND CR.SKNaplanAssessmentId = MYL.SKNaplanAssessmentId\n",
					"    AND CR.NaplanSKYear = MYL.MaxNaplanSKYear\n",
					"    AND CR.NaplanSKYearLevel = MYL.MaxNaplanSKYearLevel;\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Save the SQL Temp views created above "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"# now save the sql views created above\n",
					"classenrolment_df = spark.read.table('vw_classenrolment')\n",
					"activestudent_df = spark.read.table('vw_activestudent')\n",
					"activestudentexceptions_df = spark.read.table('vw_activestudentexceptions')\n",
					"#inactivestudent_df = spark.read.table('vw_inactivestudent')\n",
					"\n",
					"ods_studentclass_df = spark.read.table('vw_ods_studentclass')\n",
					"ods_studentstable_df = spark.read.table('vw_ods_studentstable')\n",
					"ods_earlyyearsstudents_df = spark.read.table('vw_ods_earlyyearsstudents_substituteteachers') #need to make sure we include manually added staff\n",
					"ods_earlyyearsstudents_exceptions_df = spark.read.table('vw_ods_earlyyearsstudents_exceptions')\n",
					"\n",
					"ods_earlyyearsstudents_classidcleaned_df = spark.read.table('vw_ods_earlyyearsstudentsclassid_cleaned')\n",
					"\n",
					"# Early Years\n",
					"EYResultsYear2_df = spark.read.table('vw_EYResultsYear2')\n",
					"EYResults_df = spark.read.table('vw_EYResults')\n",
					"\n",
					"\n",
					"#NAPLAN\n",
					"naplantestall_df = spark.read.table('vw_DMNAPLANTestALL')\n",
					"DIMNAPLANCombinedResultsStudentsActive_df = spark.read.table('vw_DIMNAPLANCombinedResultsStudentsActive')\n",
					"DIMNAPLANCombinedResultsLatestStudentsActive_df = spark.read.table('vw_DIMNAPLANCombinedResultsLatestStudentsActive')\n",
					"\n",
					"\n",
					"# Enrolments (Current Year) ALL\n",
					"currentenrolments_df = spark.read.table('vw_currentenrolments')\n",
					"\n",
					"# Enrolments (Current Year) Removed exclusions\n",
					"currentyearenrolments_df = spark.read.table('vw_currentyearenrolments_withexclusions')\n",
					"\n",
					"# ALL Enrolments\n",
					"allenrolments_df = spark.read.table('vw_allenrolments')\n",
					"\n",
					"\n",
					"saveToTarget(classenrolment_df, destination_p, f'{version}/_DMClassEnrolment')\n",
					"saveToTarget(activestudent_df, destination_p, f'{version}/_FACTActiveStudent')\n",
					"saveToTarget(activestudentexceptions_df, destination_p, f'{version}/_FACTActiveStudentExceptions')\n",
					"\n",
					"#saveToTarget(inactivestudent_df, destination_p, f'{version}/_FACTInactiveStudent')\n",
					"\n",
					"saveToTarget(ods_studentclass_df, destination_p, f'{version}/_FACTODSStudentClass')\n",
					"saveToTarget(ods_studentstable_df, destination_p, f'{version}/_FACTODSStudentsTable')\n",
					"saveToTarget(ods_earlyyearsstudents_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents')\n",
					"saveToTarget(ods_earlyyearsstudents_exceptions_df, destination_p, f'{version}/_FACTODSEarlyYearsStudentsExceptions')\n",
					"\n",
					"saveToTarget(ods_earlyyearsstudents_classidcleaned_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents_ClassIDCleaned')\n",
					"\n",
					"# Early Years\n",
					"saveToTarget(EYResultsYear2_df, destination_p, f'{version}/_FACTEarlyYearsResultsYear2')\n",
					"saveToTarget(EYResults_df, destination_p, f'{version}/_FACTEarlyYearsResults')\n",
					"\n",
					"#NAPLAN\n",
					"saveToTarget(naplantestall_df, destination_p, f'{version}/DMNAPLANTestALL')\n",
					"saveToTarget(DIMNAPLANCombinedResultsStudentsActive_df, destination_p, f'{version}/_DIMNAPLANCombinedResultsStudentsActive')\n",
					"saveToTarget(DIMNAPLANCombinedResultsLatestStudentsActive_df, destination_p, f'{version}/_DIMNAPLANCombinedResultsLatestStudentsActive')\n",
					"\n",
					"# Enrolments\n",
					"saveToTarget(currentenrolments_df, destination_p, f'{version}/_DIMStudentCurrentEnrolments')\n",
					"saveToTarget(currentyearenrolments_df, destination_p, f'{version}/_DIMStudentCurrentYearEnrolments')\n",
					"saveToTarget(allenrolments_df, destination_p, f'{version}/_DIMStudentAllEnrolments')\n",
					"\n",
					"\n",
					"\n",
					""
				],
				"execution_count": 5
			}
		]
	}
}