{
	"name": "Transform_Functions_py",
	"properties": {
		"folder": {
			"name": "Stage3"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a6640356-f7e5-4b9c-ac7a-7861885faba3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import when, max, regexp_replace"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMYearLevel_pseudo(df):\r\n",
					"\r\n",
					"    df = df.withColumn(\"DisplayName\", when(df.BusinessDesc == \"Unknown\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"Ungraded\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"SecondaryUngraded\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"PrimaryUngraded\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"Childcare\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"4yo Kindergarten\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"3yo Kindergarten\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"TwoYearsBeforeYear1\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"Pre-Year 1\", \"Prep\")\r\n",
					"                                        .when(df.BusinessDesc == \"Pre-School\", \"Prep\")\r\n",
					"                                        .when(df.BusinessDesc == \"OneYearBeforeYear1\", \"Prep\")\r\n",
					"                                        .otherwise(df.BusinessDesc)\r\n",
					"                                        )\r\n",
					"\r\n",
					"    return df"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMCampus_pseudo(df):\r\n",
					"    df = df.filter(df.DioceseName == 'Townsville') \\\r\n",
					"            .filter(df.SchoolName !=  'Townsville Catholic Education Office') \\\r\n",
					"            .filter(df.SchoolName !=  'Canossa Convent School') \\\r\n",
					"            .filter(df.SchoolName !=  'St Patrick\\'s College Townsville')\r\n",
					"\r\n",
					"    return df\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMDate_pseudo(df):\r\n",
					"\r\n",
					"    sourcep = oea.stage2p\r\n",
					"\r\n",
					"    df.createOrReplaceTempView('vw_df_dmdate_pseudo')\r\n",
					"\r\n",
					"    calendar_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
					"\r\n",
					"    calendar_df.createOrReplaceTempView('vw_df_calendar')\r\n",
					"\r\n",
					"    final_df = spark.sql(\"select d.*, c.skyear from vw_df_dmdate_pseudo d left join vw_df_calendar c on d.year = c.year where d.year >= 2008 and d.year <= 2030\")\r\n",
					"\r\n",
					"    return final_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMStudent_pseudo(df):\r\n",
					"\r\n",
					"    sourcep = oea.stage2p\r\n",
					"\r\n",
					"    df.createOrReplaceTempView('vw_df_dmstudent_pseudo')\r\n",
					"\r\n",
					"    final_df = spark.sql(\"select * from vw_df_dmstudent_pseudo where length(bksourcestudentid) = 36\")\r\n",
					"\r\n",
					"    return final_df"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMNAPLAN_pseudo(df):\r\n",
					"\r\n",
					"    sourcep = oea.stage2p\r\n",
					"\r\n",
					"    df.createOrReplaceTempView('vw_df_dmnaplan_pseudo')\r\n",
					"\r\n",
					"    final_df = spark.sql(\"select * from vw_df_dmnaplan_pseudo where PersistentStudentID <> -1\")\r\n",
					"\r\n",
					"    return final_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMPersonDemographic_pseudo(df):\r\n",
					"\r\n",
					"    sourcep = oea.stage2p\r\n",
					"\r\n",
					"    df.createOrReplaceTempView('vw_df_dmpersondemographic_pseudo')\r\n",
					"\r\n",
					"    # final_df = spark.sql(\"select * from vw_df_dmpersondemographic_pseudo where PersonType = 'Student' or PersonType = 'Staff'\")\r\n",
					"    final_df = spark.sql(\"select SKPerson,BKPerson,PersonType,Ceider,CompassPersonId,Title,FirstName,PreferredFirstName,LastName,PreferredLastName,MiddleName,SecondMiddleName,EmailAddress,HomePhoneNumber,MobileNumber,DateOfDeath,DateOfBirth,RecievesESL,RequiresESL,LBOTE,\\\r\n",
					"    InterpreterRequired,GenderId,GenderDesc,ATSIId,ATSIDesc,ReligionId,ReligionDesc,BirthCountryId,BirthCountryDesc,NationalityId,NationalityDesc,ArrivalDate,VisaSubClassCode,VisaSubClassName,VisaExpiryDate,YouthAllowance,GovernmentFunded,GovCode2,Disability,DisabilityFunded,\\\r\n",
					"    LivingArrangements,ResidentialStatus,RefugeeStatus,AmbulanceSubscriber,UserName,Occupation,OccupationGroup,Employer,SchoolEducation,NonSchoolEducation,EarliestMilestoneDate,Contactable,EmailAllowed,SMSAllowed,PublishPhotoToMedia,PublishPhotoToInternal,AuthenticationMode, \\\r\n",
					"    FeeMode,ImportMode,CreateDate,LastUpdateDate,EffectiveStartDate,EffectiveEndDate,IsCurrent,SCDReason,DisabilityInt,StudentReportingId,CommunicationPreference,AccessRestrictionsInt,DioceseId,ReligiousOrLay,Parish,ImmunisationRecordSighted,HomeTown,HeadLiceCheckAllowed, \\\r\n",
					"    TownOfBirth from vw_df_dmpersondemographic_pseudo where PersonType = 'Student' or PersonType = 'Staff'\")\r\n",
					"\r\n",
					"    return final_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def DMFactPATResults_pseudo(df):\r\n",
					"#     aggdf = df.groupBy(\"SKPATTest\").agg(max(\"NormMeanScaledScore\").alias(\"NormMeanScaledScore_cleaned\"))\r\n",
					"#     aggdf = aggdf.withColumnRenamed(\"SKPATTest\", \"xSKPATTest\")\r\n",
					"\r\n",
					"#     final_df = aggdf.join(df, df.SKPATTest == aggdf.xSKPATTest, \"inner\")\r\n",
					"#     final_df = final_df.drop(\"xSKPATTest\")\r\n",
					"#     return final_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"def DMFactPATResults_pseudo(df):\r\n",
					"\r\n",
					"    sourcep = oea.stage2p\r\n",
					"\r\n",
					"    df.createOrReplaceTempView('vw_df_dmfactpatresults_pseudo')\r\n",
					"\r\n",
					"    datedetails_df = spark.read.load(sourcep + \"/ACER/DMPATStudentTestGrouping_pseudo\", format='delta')\r\n",
					"\r\n",
					"    datedetails_df.createOrReplaceTempView('vw_df_dmpatstudenttestgrouping')\r\n",
					"\r\n",
					"    final_df = spark.sql(\"select a.*, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetimefrom vw_df_dmfactpatresults_pseudo aleft join vw_df_dmpatstudenttestgrouping bon a.skpatstudenttestgrouping = b.skpatstudenttestgroupinginner join (select skyear, skacerstudent, skpattest, skcampus, scalescore, datecomplete, timecomplete, combineddatetime, max(skpatresults) as maxskpatresultsfrom(select a.skpatresults, a.skyear, a.skacerstudent, a.skpattest, a.skcampus,  a.ScaleScore,  b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetimefrom vw_df_dmfactpatresults_pseudo aleft join vw_df_dmpatstudenttestgrouping bon a.skpatstudenttestgrouping = b.skpatstudenttestgroupinginner join (select skyear, skacerstudent, skpattest, skcampus, combineddatetime, max(scalescore) as maxscalescorefrom(select a.skyear, a.skacerstudent, a.skpattest, a.skcampus,  a.ScaleScore,  b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetimefrom vw_df_dmfactpatresults_pseudo aleft join vw_df_dmpatstudenttestgrouping bon a.skpatstudenttestgrouping = b.skpatstudenttestgroupinginner join(select \t\t\tskyear, skacerstudent, skpattest, skcampus, \t\t\tmax(concat(datecomplete, ' ', right(left(timecomplete, 10), 8))) as latestdate\t\t\tfrom\t\t\t\t(\t\t\t\tselect a.*, orig.skpatstudenttestgrouping, orig.skacerstanine, ScaleScore, skpatresults\t\t\t\t, b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime\t\t\t\t\tfrom (\t\t\t\t\tselect skyear, skacerstudent, skpattest, skcampus, count(*) as counttotal \t\t\t\t\tfrom vw_df_dmfactpatresults_pseudo\t\t\t\t\twhere skpattest not in (43, 54, 65, 66, 76, 79, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112)\t\t\t\t\tgroup by skyear, skacerstudent, skpattest, skcampus\t\t\t\t\t--having count(*) = 1\t\t\t\t\t) a\t\t\t\tleft join vw_df_dmfactpatresults_pseudo orig\t\t\t\ton a.skyear = orig.skyear and a.skacerstudent = orig.skacerstudent and a.skpattest = orig.skpattest and a.skcampus = orig.skcampus\t\t\t\tleft join vw_df_dmpatstudenttestgrouping b\t\t\t\ton orig.skpatstudenttestgrouping = b.skpatstudenttestgrouping\t\t\t\t) total\t\t\tgroup by skyear, skacerstudent, skpattest, skcampus\t\t\t) inner1on a.skyear = inner1.skyearand a.skacerstudent = inner1.SKACERStudentand a.SKPATTest = inner1.SKPATTestand a.SKCampus = inner1.SKCampusand concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner1.latestdate) inner2group by skyear, skacerstudent, skpattest, skcampus, combineddatetime) inner3on a.skyear = inner3.skyearand a.skacerstudent = inner3.SKACERStudentand a.SKPATTest = inner3.SKPATTestand a.SKCampus = inner3.SKCampusand concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner3.combineddatetime) inner4group by skyear, skacerstudent, skpattest, skcampus, scalescore, datecomplete, timecomplete, combineddatetime) inner5on a.skyear = inner5.skyearand a.skacerstudent = inner5.SKACERStudentand a.SKPATTest = inner5.SKPATTestand a.SKCampus = inner5.SKCampusand concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner5.combineddatetimeand a.SKPATResults = inner5.maxskpatresults\")\r\n",
					"\r\n",
					"    return final_df\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}