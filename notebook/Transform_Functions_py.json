{
	"name": "Transform_Functions_py",
	"properties": {
		"folder": {
			"name": "Stage3"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "be9d77f7-cddc-4a47-8f2e-f7262c50521f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import when\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMYearLevel_pseudo(df):\r\n",
					"\r\n",
					"    df = df.withColumn(\"DisplayName\", when(df.BusinessDesc == \"Unknown\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"Ungraded\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"SecondaryUngraded\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"PrimaryUngraded\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"Childcare\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"4yo Kindergarten\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"3yo Kindergarten\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"TwoYearsBeforeYear1\", \"\")\r\n",
					"                                        .when(df.BusinessDesc == \"Pre-Year 1\", \"Prep\")\r\n",
					"                                        .when(df.BusinessDesc == \"Pre-School\", \"Prep\")\r\n",
					"                                        .when(df.BusinessDesc == \"OneYearBeforeYear1\", \"Prep\")\r\n",
					"                                        .otherwise(df.BusinessDesc)\r\n",
					"                                        )\r\n",
					"\r\n",
					"    return df"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMCampus_pseudo(df):\r\n",
					"    df = df.filter(df.DioceseName == 'Townsville') \\\r\n",
					"            .filter(df.SchoolName !=  'Townsville Catholic Education Office') \\\r\n",
					"            .filter(df.SchoolName !=  'Canossa Convent School') \\\r\n",
					"            .filter(df.SchoolName !=  'St Patrick\\'s College Townsville')\r\n",
					"\r\n",
					"    return df\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def DMDate_pseudo(df):\r\n",
					"\r\n",
					"    sourcep = oea.stage2p\r\n",
					"\r\n",
					"    df.createOrReplaceTempView('vw_df_dmdate_pseudo')\r\n",
					"\r\n",
					"    calendar_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
					"\r\n",
					"    calendar_df.createOrReplaceTempView('vw_df_calendar')\r\n",
					"\r\n",
					"    final_df = spark.sql(\"select d.*, c.skyear from vw_df_dmdate_pseudo d left join vw_df_calendar c on d.year = c.year where d.year >= 2008 and d.year <= 2030\")\r\n",
					"\r\n",
					"    return final_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _DMClassEnrolments_pseudo():\r\n",
					"    sourcep = oea.stage2p\r\n",
					"\r\n",
					"    factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
					"    dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
					"    dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
					"    dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
					"    dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
					"    dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
					"    dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
					"    dmcalendaryear = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
					"\r\n",
					"    # create temp sql views\r\n",
					"    factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
					"    dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
					"    dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
					"    dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
					"    dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
					"    dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
					"    dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
					"    dmcalendaryear.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
					"\r\n",
					"    query = \"\"\" USE DBTOW\r\n",
					"\r\n",
					"                SELECT \r\n",
					"                cy.Year AS CalendarYear,\r\n",
					"                C.SchoolId AS AGEID,\r\n",
					"                c.CampusSuburbAndName,\r\n",
					"                student.FirstName  AS  StudentFirstName,\r\n",
					"                student.LastName AS StudentLastName,\r\n",
					"                Student.Ceider,\r\n",
					"                yl.YearLevelSifDesc AS YearLevel,\r\n",
					"                s.SubjectShortName AS [Subject],\r\n",
					"                a.ActivityName AS  ClassName,\r\n",
					"                a.ActivityCode AS ClassCode,\r\n",
					"                ClassStartDate.date AS ClassStartDate,\r\n",
					"                ClassEndDate.date AS ClassEndDate,\r\n",
					"                staff.FirstName AS StaffFirstName,\r\n",
					"                staff.LastName AS StaffLastName,\r\n",
					"                c.CompassSchoolURL\r\n",
					"\r\n",
					"                FROM \r\n",
					"                vw_factsubjectenrolment f\r\n",
					"                JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\r\n",
					"                AND a.ActivityTypeDescription = 'Standard Class'\r\n",
					"                JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\r\n",
					"                JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\r\n",
					"                JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\r\n",
					"                JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
					"                JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
					"                JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\r\n",
					"                \r\n",
					"                JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\r\n",
					"                JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\r\n",
					"                \r\n",
					"                AND cy.Year = 2022\r\n",
					"                WHERE ClassEndDate.date > GETDATE() \r\n",
					"                AND s.SubjectShortName <> 'Unknown'\r\n",
					"                ORDER BY\r\n",
					"                AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider  \r\n",
					"            \"\"\"\r\n",
					"\r\n",
					"    final_df = spark.sql(query)\r\n",
					"\r\n",
					"    return final_df\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}