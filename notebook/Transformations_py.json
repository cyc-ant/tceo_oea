{
	"name": "Transformations_py",
	"properties": {
		"folder": {
			"name": "Stage3"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3231cec2-2e22-40c9-b3b8-3a0c87a0c53e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Transformation functions for each data table ingested "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run Stage3/Transform_Functions_py"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def transformation(df, name):\r\n",
					"\r\n",
					"    if name == \"DMYearLevel_pseudo\":\r\n",
					"        final_df = DMYearLevel_pseudo(df)\r\n",
					"    elif name == \"DMCampus_pseudo\":\r\n",
					"        final_df = DMCampus_pseudo(df)\r\n",
					"    elif name == \"DMDate_pseudo\":\r\n",
					"        final_df = DMDate_pseudo(df)\r\n",
					"    elif name == \"DMStudent_pseudo\":\r\n",
					"        final_df = DMStudent_pseudo(df)\r\n",
					"    elif name == \"DMNAPLAN_pseudo\":\r\n",
					"        final_df = DMNAPLAN_pseudo(df)\r\n",
					"    elif name == \"DMPersonDemographic_pseudo\":\r\n",
					"        final_df = DMPersonDemographic_pseudo(df)\r\n",
					"    #elif name == \"DMFactPATResults_pseudo\":\r\n",
					"    #    final_df = DMFactPATResults_pseudo(df)  \r\n",
					"    elif name == \"EarlyYearsResults_pseudo\":\r\n",
					"        final_df = EarlyYearsResults_pseudo(df)\r\n",
					"    elif name == \"EarlyYearsResultsYear2_pseudo\":\r\n",
					"        final_df = EarlyYearsResultsYear2_pseudo(df)\r\n",
					"    elif name == \"ATAR_pseudo\":\r\n",
					"        final_df = ATAR_pseudo(df)\r\n",
					"    elif name == \"StudentLevel_pseudo\":\r\n",
					"        final_df = StudentLevel_pseudo(df)\r\n",
					"    elif name == \"CompassODSStudentDemographicFull_pseudo\":\r\n",
					"        final_df = CompassODSStudentDemographicFull_pseudo(df)\r\n",
					"    else:  \r\n",
					"        final_df = df\r\n",
					"\r\n",
					"    return final_df"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# call this function with the name of the table to transform\r\n",
					"def transform(tableName):\r\n",
					"\r\n",
					"    try:\r\n",
					"        df = spark.read.load(f\"{tableName.path}\", format='delta')\r\n",
					"        return transformation(df, tableName.name)\r\n",
					"\r\n",
					"    except AnalysisException as e:\r\n",
					"        raise ValueError(f\"Failed to load {tableName.path}. Check the paths.\\nMore info below:\\n\" + str(e)) \r\n",
					"    \r\n",
					"    return None"
				],
				"execution_count": null
			}
		]
	}
}