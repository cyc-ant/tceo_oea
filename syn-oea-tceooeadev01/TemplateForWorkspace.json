{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "syn-oea-tceooeadev01"
		},
		"LS_Azure_SQL_DB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Azure_SQL_DB'"
		},
		"LS_SQL_Serverless_OEA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_Serverless_OEA'"
		},
		"syn-oea-tceooeadev01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syn-oea-tceooeadev01-WorkspaceDefaultSqlServer'"
		},
		"CeNet_DataBlend_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "CeNet-Datablend-DB"
		},
		"LS_ADLS_OEA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeatceooeadev01.dfs.core.windows.net"
		},
		"LS_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseURL}"
		},
		"LS_KeyVault_OEA_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-oea-tceooeadev01.vault.azure.net/"
		},
		"syn-oea-tceooeadev01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeatceooeadev01.dfs.core.windows.net"
		},
		"tmp_datablend_dev_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "temp-datablend-db"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/AcerStudent_test02')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_j1b",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.vwDMACERStudent"
							},
							{
								"name": "Destination",
								"value": "stage1np/students/acer2/AcerStudent"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_Acer02",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_Acer02",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_Acer02')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_Acer02')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BulkPipeline_test01')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_j06",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_j06",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np//@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_j06",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_j06",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMStudent"
								},
								"destination": {
									"fileName": "dbovwDMStudent.txt"
								}
							},
							{
								"source": {
									"table": "vwDMStudentClass"
								},
								"destination": {
									"fileName": "dbovwDMStudentClass.txt"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_j06')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_j06')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyAEStudent')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_cxs",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.vwDMAEStudent"
							},
							{
								"name": "Destination",
								"value": "stage1np/student3/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_cxs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_cxs",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_cxs')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_cxs')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyAEStudent_texttest01')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_d0j",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.vwDMAEStudent"
							},
							{
								"name": "Destination",
								"value": "stage1np/student4/aestudents.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_d0j",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_d0j",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_d0j')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_d0j')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyAcerAEStudent_test01')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_uk5",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_uk5",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/students/acer/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_ACERAEStudent",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_ACERAEStudent",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMACERStudent"
								},
								"destination": {
									"fileName": "ACERStudent"
								}
							},
							{
								"source": {
									"table": "vwDMAEStudent"
								},
								"destination": {
									"fileName": "AEStudent"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ACERAEStudent')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ACERAEStudent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_All_schools')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_hwe",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_hwe",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/schools_all/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_All_schools",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_All_schools",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwAggWholeDayAttendanceBySchool"
								},
								"destination": {
									"fileName": "dbovwAggWholeDayAttendanceBySchool.txt"
								}
							},
							{
								"source": {
									"table": "vwDMEducationNonSchoolLevel"
								},
								"destination": {
									"fileName": "dbovwDMEducationNonSchoolLevel.txt"
								}
							},
							{
								"source": {
									"table": "vwDMEducationSchoolLevel"
								},
								"destination": {
									"fileName": "dbovwDMEducationSchoolLevel.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsAttendance.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsEnrolmentsByGrade"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsEnrolmentsByGrade.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsFinance"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsFinance.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsNAPLANResults"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResults.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsNAPLANResultsSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResultsSimilarSchools.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsProfile"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsProfile.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsSeniorOutcomes"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsSeniorOutcomes.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGain"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGain.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGainSameStartingScore"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGainSameStartingScore.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGainSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGainSimilarSchools.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsVETInSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsVETInSchools.txt"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships.txt"
								}
							},
							{
								"source": {
									"table": "vwDMHSCSchools"
								},
								"destination": {
									"fileName": "dbovwDMHSCSchools.txt"
								}
							},
							{
								"source": {
									"table": "vwDMMultipleChoiceAnalysisSchoolCourse"
								},
								"destination": {
									"fileName": "dbovwDMMultipleChoiceAnalysisSchoolCourse.txt"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsStudentGainGroup"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsStudentGainGroup.txt"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsVETClassification"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsVETClassification.txt"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsVETStatus"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsVETStatus.txt"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolLevel"
								},
								"destination": {
									"fileName": "dbovwDMSchoolLevel.txt"
								}
							},
							{
								"source": {
									"table": "vwDMSchools"
								},
								"destination": {
									"fileName": "dbovwDMSchools.txt"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolSubject"
								},
								"destination": {
									"fileName": "dbovwDMSchoolSubject.txt"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolSubjectQCS"
								},
								"destination": {
									"fileName": "dbovwDMSchoolSubjectQCS.txt"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolSubLevel"
								},
								"destination": {
									"fileName": "dbovwDMSchoolSubLevel.txt"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolTerm"
								},
								"destination": {
									"fileName": "dbovwDMSchoolTerm.txt"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolTermWeek"
								},
								"destination": {
									"fileName": "dbovwDMSchoolTermWeek.txt"
								}
							},
							{
								"source": {
									"table": "vwDMStatisticallySimilarSchoolsCEnetGroup"
								},
								"destination": {
									"fileName": "dbovwDMStatisticallySimilarSchoolsCEnetGroup.txt"
								}
							},
							{
								"source": {
									"table": "vwDMStudentSchoolHistory"
								},
								"destination": {
									"fileName": "dbovwDMStudentSchoolHistory.txt"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_All_schools')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_All_schools')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_All_student')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_xfq",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_xfq",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{item().source.schema}.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np//@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_All_student",
											"type": "DatasetReference",
											"parameters": {
												"cw_schema": "@item().source.schema",
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_All_student",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"schema": "dbo",
									"table": "vwAggWholeDayAttendanceByStudent"
								},
								"destination": {
									"fileName": "dbovwAggWholeDayAttendanceByStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMACERStudent"
								},
								"destination": {
									"fileName": "dbovwDMACERStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMAEStudent"
								},
								"destination": {
									"fileName": "dbovwDMAEStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMAEStudentDescription"
								},
								"destination": {
									"fileName": "dbovwDMAEStudentDescription.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMAEStudentResultId"
								},
								"destination": {
									"fileName": "dbovwDMAEStudentResultId.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMBorrowingStudent"
								},
								"destination": {
									"fileName": "dbovwDMBorrowingStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMCensusStudentWithDisabilityId"
								},
								"destination": {
									"fileName": "dbovwDMCensusStudentWithDisabilityId.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMDetailedStudentPreSubmission"
								},
								"destination": {
									"fileName": "dbovwDMDetailedStudentPreSubmission.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactCensusStudentWithDisability"
								},
								"destination": {
									"fileName": "dbovwDMFactCensusStudentWithDisability.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactDetailedStudentCensusPreSubmission"
								},
								"destination": {
									"fileName": "dbovwDMFactDetailedStudentCensusPreSubmission.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactHSCMinStdStudentItemLevelResult"
								},
								"destination": {
									"fileName": "dbovwDMFactHSCMinStdStudentItemLevelResult.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactHSCMinStdStudentResult"
								},
								"destination": {
									"fileName": "dbovwDMFactHSCMinStdStudentResult.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMAIStudentGrowthResult"
								},
								"destination": {
									"fileName": "dbovwDMFactMAIStudentGrowthResult.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMAIStudentGrowthResult_new"
								},
								"destination": {
									"fileName": "dbovwDMFactMAIStudentGrowthResult_new.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMySchoolsStudentGain"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGain.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMySchoolsStudentGainSameStartingScore"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGainSameStartingScore.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMySchoolsStudentGainSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGainSimilarSchools.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANOnlineStudentItemResponse"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANOnlineStudentItemResponse.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANOnlineStudentTestResult"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANOnlineStudentTestResult.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANStudentResponse"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANStudentResponse.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNaplanStudentYearResult"
								},
								"destination": {
									"fileName": "dbovwDMFactNaplanStudentYearResult.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactStudent"
								},
								"destination": {
									"fileName": "dbovwDMFactStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactStudentAEResult"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentAEResult.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactStudentCensusEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentCensusEnrolment.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactStudentEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolment.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactStudentEnrolmentCounts"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolmentCounts.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactStudentLibraryBorrowingHabits"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentLibraryBorrowingHabits.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactStudentWellbeing"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentWellbeing.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMHSCMinStdStudent"
								},
								"destination": {
									"fileName": "dbovwDMHSCMinStdStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMHSCMinStdStudentItemLevelResultId"
								},
								"destination": {
									"fileName": "dbovwDMHSCMinStdStudentItemLevelResultId.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMHSCMinStdStudentResultId"
								},
								"destination": {
									"fileName": "dbovwDMHSCMinStdStudentResultId.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMHSCStudent"
								},
								"destination": {
									"fileName": "dbovwDMHSCStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMHSCStudentCourses"
								},
								"destination": {
									"fileName": "dbovwDMHSCStudentCourses.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMMAIStudent"
								},
								"destination": {
									"fileName": "dbovwDMMAIStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMMAIStudentGrowthResultId"
								},
								"destination": {
									"fileName": "dbovwDMMAIStudentGrowthResultId.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMMySchoolsStudentGainGroup"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsStudentGainGroup.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentItemResponse"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentItemResponse.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentResult"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentResult.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentTestResultId"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentTestResultId.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANStudent"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANStudent.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANStudentResponseId"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANStudentResponseId.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMPATStudentResponseGrouping"
								},
								"destination": {
									"fileName": "dbovwDMPATStudentResponseGrouping.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMPATStudentTestGrouping"
								},
								"destination": {
									"fileName": "dbovwDMPATStudentTestGrouping.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMPATStudentTestGrouping_bkp_08112019"
								},
								"destination": {
									"fileName": "dbovwDMPATStudentTestGrouping_bkp_08112019.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentAccessRestrictions"
								},
								"destination": {
									"fileName": "dbovwDMStudentAccessRestrictions.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentAdditionalNotes"
								},
								"destination": {
									"fileName": "dbovwDMStudentAdditionalNotes.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentClass"
								},
								"destination": {
									"fileName": "dbovwDMStudentClass.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentClass_backup"
								},
								"destination": {
									"fileName": "dbovwDMStudentClass_backup.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentDebtor"
								},
								"destination": {
									"fileName": "dbovwDMStudentDebtor.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentImmunisations"
								},
								"destination": {
									"fileName": "dbovwDMStudentImmunisations.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentOrganisationDetails"
								},
								"destination": {
									"fileName": "dbovwDMStudentOrganisationDetails.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentOutcomes"
								},
								"destination": {
									"fileName": "dbovwDMStudentOutcomes.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentRelationships"
								},
								"destination": {
									"fileName": "dbovwDMStudentRelationships.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentReligiousMilestones"
								},
								"destination": {
									"fileName": "dbovwDMStudentReligiousMilestones.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentSchoolHistory"
								},
								"destination": {
									"fileName": "dbovwDMStudentSchoolHistory.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentSubjects"
								},
								"destination": {
									"fileName": "dbovwDMStudentSubjects.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentType"
								},
								"destination": {
									"fileName": "dbovwDMStudentType.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentVetCourses"
								},
								"destination": {
									"fileName": "dbovwDMStudentVetCourses.txt"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStudentVetUnits"
								},
								"destination": {
									"fileName": "dbovwDMStudentVetUnits.txt"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "NAPLANStudent"
								},
								"destination": {
									"fileName": "NAPLANNAPLANStudent.txt"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "NAPLANStudentView"
								},
								"destination": {
									"fileName": "NAPLANNAPLANStudentView.txt"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "Student"
								},
								"destination": {
									"fileName": "NAPLANStudent.txt"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "StudentYearResult"
								},
								"destination": {
									"fileName": "NAPLANStudentYearResult.txt"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_All_student')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_All_student')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_attendance_object')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_vrr",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_vrr",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/attendance/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_attendance_object",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_attendance_object",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwAggWholeDayAttendanceBySchool"
								},
								"destination": {
									"fileName": "dbovwAggWholeDayAttendanceBySchool.csv"
								}
							},
							{
								"source": {
									"table": "vwAggWholeDayAttendanceByStudent"
								},
								"destination": {
									"fileName": "dbovwAggWholeDayAttendanceByStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMAttendanceCode"
								},
								"destination": {
									"fileName": "dbovwDMAttendanceCode.csv"
								}
							},
							{
								"source": {
									"table": "vwDMAttendanceNote"
								},
								"destination": {
									"fileName": "dbovwDMAttendanceNote.csv"
								}
							},
							{
								"source": {
									"table": "vwDMAttendanceStatus"
								},
								"destination": {
									"fileName": "dbovwDMAttendanceStatus.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactAttendanceCheckin"
								},
								"destination": {
									"fileName": "dbovwDMFactAttendanceCheckin.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactAttendanceRealTime"
								},
								"destination": {
									"fileName": "dbovwDMFactAttendanceRealTime.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactHalfDayAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactHalfDayAttendance.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsAttendance.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPeriodAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactPeriodAttendance.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactWholeDayAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactWholeDayAttendance.csv"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_attendance_object')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_attendance_object')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_student_object')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_61r",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_61r",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/student/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_student_profile_object",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_student_profile_object",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMDetailedStudentPreSubmission"
								},
								"destination": {
									"fileName": "dbovwDMDetailedStudentPreSubmission.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPersonMilestone"
								},
								"destination": {
									"fileName": "dbovwDMFactPersonMilestone.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudent"
								},
								"destination": {
									"fileName": "dbovwDMFactStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudentEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPersonDemographic"
								},
								"destination": {
									"fileName": "dbovwDMPersonDemographic.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentOrganisationDetails"
								},
								"destination": {
									"fileName": "dbovwDMStudentOrganisationDetails.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentSchoolHistory"
								},
								"destination": {
									"fileName": "dbovwDMStudentSchoolHistory.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentType"
								},
								"destination": {
									"fileName": "dbovwDMStudentType.csv"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_student_profile_object')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_student_profile_object')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_student_object_2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_6wf",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/student/dbovwDMStudent.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\r\nSKStudent,\r\nBKSourceStudentId,\r\nBKPersistentStudentId,\r\nCampusId,\r\nCampusName,\r\nSchoolId,\r\nSchoolName,\r\nDioceseId,\r\nDioceseName,\r\nVisaSubClassId,\r\nVisaSubClassDesc,\r\nVisaIdentificationNumber,\r\nVisaExpiryData,\r\nVisaEndDate,\r\nCitizenshipResidencyStatusId,\r\nCitizenshipResidencyStatusDesc,\r\nBoarder,\r\nSingleNameOnly,\r\nOfficialFirstName,\r\nPreferredFirstName,\r\nOfficialSurname,\r\nPreferredSurname,\r\nDOB,\r\nGenderId,\r\nGenderSifDesc,\r\nBirthCountryId,\r\nBirthCountrySifDesc,\r\nPrimaryCitizenshipCountryId,\r\nPrimaryCitizenshipCountrySifDesc,\r\nPrimaryPassportIssueCountryId,\r\nPrimaryPassportIssueCountrySifDesc,\r\nAttendanceStatusId,\r\nAttendanceStatusSifDesc,\r\nRollGroup,\r\nFFPOS,\r\nESLYesNo,\r\nEslLanguageId,\r\nESLLanguageSifDesc,\r\nLBOTEYesNo,\r\nLBOTELanguageId,\r\nLBOTELanguageSifDesc,\r\nAtsiId,\r\nATSIDesc,\r\nReligionId,\r\nReligionDesc,\r\nSWDYesNo,\r\nSwdId,\r\nSwdSifDesc,\r\nStudentAddressStreet,\r\nStudentAddressSuburb,\r\nStudentAddressPostCode,\r\nBKStudentAddressState,\r\nStudentAddressState,\r\ncast(StudentAddressGeoData as nvarchar),\r\nStudentAddressLongitude,\r\nStudentAddressLatitude,\r\nHomePhone,\r\nHomeEmail,\r\nStudentMobile,\r\nStudentEmail,\r\nGuardian1FirstName,\r\nGuardian1Surname,\r\nGuardian1Phone,\r\nGuardian1Mobile,\r\nGuardian1Email,\r\nGuardian1OccupationalGroupId,\r\nGuardian1OccupationalGroupSifDesc,\r\nGuardian1EducationSchoolLevelId,\r\nGuardian1EducationSchoolLevelSifDesc,\r\nGuardian1EducationNonSchoolLevelId,\r\nGuardian1EducationNonSchoolLevelSifDesc,\r\nGuardian1LanguageId,\r\nGuardian1LanguageSifDesc,\r\nGuardian2FirstName,\r\nGuardian2Surname,\r\nGuardian2Phone,\r\nGuardian2Mobile,\r\nGuardian2Email,\r\nGuardian2OccupationalGroupId,\r\nGuardian2OccupationalGroupSifDesc,\r\nGuardian2EducationSchoolLevelId,\r\nGuardian2EducationSchoolLevelSifDesc,\r\nGuardian2EducationNonSchoolLevelId,\r\nGuardian2EducationNonSchoolLevelSifDesc,\r\nGuardian2LanguageId,\r\nGuardian2LanguageSifDesc,\r\nBaptismDate,\r\nFirstReconciliationDate,\r\nFirstEucharistDate,\r\nConfirmationDate,\r\nBaptismParish,\r\nCreateDate,\r\nEffectiveStartDate,\r\nEffectiveEndDate,\r\nIsCurrent,\r\nScdReason,\r\nLastUpdateDate,\r\nMainCampusId,\r\nOrganisationUserId,\r\nSKPerson,\r\nStudentReportingId,\r\nAccessRestrictions_YN,\r\nAccessRestrictionsInt\r\nfrom dbo.vwDMStudent\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_student_profile_object_2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_student_profile_object_2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_student_profile_object_2')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_student_profile_object_2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_student_test')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_6i6",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/students/student_test"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\r\nSKStudent,\r\nBKSourceStudentId,\r\nBKPersistentStudentId,\r\nCampusId,\r\nCampusName,\r\nSchoolId,\r\nSchoolName,\r\nDioceseId,\r\nDioceseName,\r\nVisaSubClassId,\r\nVisaSubClassDesc,\r\nVisaIdentificationNumber,\r\nVisaExpiryData,\r\nVisaEndDate,\r\nCitizenshipResidencyStatusId,\r\nCitizenshipResidencyStatusDesc,\r\nBoarder,\r\nSingleNameOnly,\r\nOfficialFirstName,\r\nPreferredFirstName,\r\nOfficialSurname,\r\nPreferredSurname,\r\nDOB,\r\nGenderId,\r\nGenderSifDesc,\r\nBirthCountryId,\r\nBirthCountrySifDesc,\r\nPrimaryCitizenshipCountryId,\r\nPrimaryCitizenshipCountrySifDesc,\r\nPrimaryPassportIssueCountryId,\r\nPrimaryPassportIssueCountrySifDesc,\r\nAttendanceStatusId,\r\nAttendanceStatusSifDesc,\r\nRollGroup,\r\nFFPOS,\r\nESLYesNo,\r\nEslLanguageId,\r\nESLLanguageSifDesc,\r\nLBOTEYesNo,\r\nLBOTELanguageId,\r\nLBOTELanguageSifDesc,\r\nAtsiId,\r\nATSIDesc,\r\nReligionId,\r\nReligionDesc,\r\nSWDYesNo,\r\nSwdId,\r\nSwdSifDesc,\r\nStudentAddressStreet,\r\nStudentAddressSuburb,\r\nStudentAddressPostCode,\r\nBKStudentAddressState,\r\nStudentAddressState,\r\ncast(StudentAddressGeoData as nvarchar),\r\nStudentAddressLongitude,\r\nStudentAddressLatitude,\r\nHomePhone,\r\nHomeEmail,\r\nStudentMobile,\r\nStudentEmail,\r\nGuardian1FirstName,\r\nGuardian1Surname,\r\nGuardian1Phone,\r\nGuardian1Mobile,\r\nGuardian1Email,\r\nGuardian1OccupationalGroupId,\r\nGuardian1OccupationalGroupSifDesc,\r\nGuardian1EducationSchoolLevelId,\r\nGuardian1EducationSchoolLevelSifDesc,\r\nGuardian1EducationNonSchoolLevelId,\r\nGuardian1EducationNonSchoolLevelSifDesc,\r\nGuardian1LanguageId,\r\nGuardian1LanguageSifDesc,\r\nGuardian2FirstName,\r\nGuardian2Surname,\r\nGuardian2Phone,\r\nGuardian2Mobile,\r\nGuardian2Email,\r\nGuardian2OccupationalGroupId,\r\nGuardian2OccupationalGroupSifDesc,\r\nGuardian2EducationSchoolLevelId,\r\nGuardian2EducationSchoolLevelSifDesc,\r\nGuardian2EducationNonSchoolLevelId,\r\nGuardian2EducationNonSchoolLevelSifDesc,\r\nGuardian2LanguageId,\r\nGuardian2LanguageSifDesc,\r\nBaptismDate,\r\nFirstReconciliationDate,\r\nFirstEucharistDate,\r\nConfirmationDate,\r\nBaptismParish,\r\nCreateDate,\r\nEffectiveStartDate,\r\nEffectiveEndDate,\r\nIsCurrent,\r\nScdReason,\r\nLastUpdateDate,\r\nMainCampusId,\r\nOrganisationUserId,\r\nSKPerson,\r\nStudentReportingId,\r\nAccessRestrictions_YN,\r\nAccessRestrictionsInt\r\nfrom dbo.vwDMStudent\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_vwDMStudent",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_vwDMStudent",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_vwDMStudent')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_vwDMStudent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_student_test_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_6i6",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/students/student_test_file/student_test"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\r\nSKStudent,\r\nBKSourceStudentId,\r\nBKPersistentStudentId,\r\nCampusId,\r\nCampusName,\r\nSchoolId,\r\nSchoolName,\r\nDioceseId,\r\nDioceseName,\r\nVisaSubClassId,\r\nVisaSubClassDesc,\r\nVisaIdentificationNumber,\r\nVisaExpiryData,\r\nVisaEndDate,\r\nCitizenshipResidencyStatusId,\r\nCitizenshipResidencyStatusDesc,\r\nBoarder,\r\nSingleNameOnly,\r\nOfficialFirstName,\r\nPreferredFirstName,\r\nOfficialSurname,\r\nPreferredSurname,\r\nDOB,\r\nGenderId,\r\nGenderSifDesc,\r\nBirthCountryId,\r\nBirthCountrySifDesc,\r\nPrimaryCitizenshipCountryId,\r\nPrimaryCitizenshipCountrySifDesc,\r\nPrimaryPassportIssueCountryId,\r\nPrimaryPassportIssueCountrySifDesc,\r\nAttendanceStatusId,\r\nAttendanceStatusSifDesc,\r\nRollGroup,\r\nFFPOS,\r\nESLYesNo,\r\nEslLanguageId,\r\nESLLanguageSifDesc,\r\nLBOTEYesNo,\r\nLBOTELanguageId,\r\nLBOTELanguageSifDesc,\r\nAtsiId,\r\nATSIDesc,\r\nReligionId,\r\nReligionDesc,\r\nSWDYesNo,\r\nSwdId,\r\nSwdSifDesc,\r\nStudentAddressStreet,\r\nStudentAddressSuburb,\r\nStudentAddressPostCode,\r\nBKStudentAddressState,\r\nStudentAddressState,\r\ncast(StudentAddressGeoData as nvarchar),\r\nStudentAddressLongitude,\r\nStudentAddressLatitude,\r\nHomePhone,\r\nHomeEmail,\r\nStudentMobile,\r\nStudentEmail,\r\nGuardian1FirstName,\r\nGuardian1Surname,\r\nGuardian1Phone,\r\nGuardian1Mobile,\r\nGuardian1Email,\r\nGuardian1OccupationalGroupId,\r\nGuardian1OccupationalGroupSifDesc,\r\nGuardian1EducationSchoolLevelId,\r\nGuardian1EducationSchoolLevelSifDesc,\r\nGuardian1EducationNonSchoolLevelId,\r\nGuardian1EducationNonSchoolLevelSifDesc,\r\nGuardian1LanguageId,\r\nGuardian1LanguageSifDesc,\r\nGuardian2FirstName,\r\nGuardian2Surname,\r\nGuardian2Phone,\r\nGuardian2Mobile,\r\nGuardian2Email,\r\nGuardian2OccupationalGroupId,\r\nGuardian2OccupationalGroupSifDesc,\r\nGuardian2EducationSchoolLevelId,\r\nGuardian2EducationSchoolLevelSifDesc,\r\nGuardian2EducationNonSchoolLevelId,\r\nGuardian2EducationNonSchoolLevelSifDesc,\r\nGuardian2LanguageId,\r\nGuardian2LanguageSifDesc,\r\nBaptismDate,\r\nFirstReconciliationDate,\r\nFirstEucharistDate,\r\nConfirmationDate,\r\nBaptismParish,\r\nCreateDate,\r\nEffectiveStartDate,\r\nEffectiveEndDate,\r\nIsCurrent,\r\nScdReason,\r\nLastUpdateDate,\r\nMainCampusId,\r\nOrganisationUserId,\r\nSKPerson,\r\nStudentReportingId,\r\nAccessRestrictions_YN,\r\nAccessRestrictionsInt\r\nfrom dbo.vwDMStudent\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_vwDMStudent",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_vwDMStudent",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_vwDMStudent')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_vwDMStudent')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_vuj')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_vuj",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/students/student_test_file/student_test"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\r\nSKStudent,\r\nBKSourceStudentId,\r\nBKPersistentStudentId,\r\nCampusId,\r\nCampusName,\r\nSchoolId,\r\nSchoolName,\r\nDioceseId,\r\nDioceseName,\r\nVisaSubClassId,\r\nVisaSubClassDesc,\r\nVisaIdentificationNumber,\r\nVisaExpiryData,\r\nVisaEndDate,\r\nCitizenshipResidencyStatusId,\r\nCitizenshipResidencyStatusDesc,\r\nBoarder,\r\nSingleNameOnly,\r\nOfficialFirstName,\r\nPreferredFirstName,\r\nOfficialSurname,\r\nPreferredSurname,\r\nDOB,\r\nGenderId,\r\nGenderSifDesc,\r\nBirthCountryId,\r\nBirthCountrySifDesc,\r\nPrimaryCitizenshipCountryId,\r\nPrimaryCitizenshipCountrySifDesc,\r\nPrimaryPassportIssueCountryId,\r\nPrimaryPassportIssueCountrySifDesc,\r\nAttendanceStatusId,\r\nAttendanceStatusSifDesc,\r\nRollGroup,\r\nFFPOS,\r\nESLYesNo,\r\nEslLanguageId,\r\nESLLanguageSifDesc,\r\nLBOTEYesNo,\r\nLBOTELanguageId,\r\nLBOTELanguageSifDesc,\r\nAtsiId,\r\nATSIDesc,\r\nReligionId,\r\nReligionDesc,\r\nSWDYesNo,\r\nSwdId,\r\nSwdSifDesc,\r\nStudentAddressStreet,\r\nStudentAddressSuburb,\r\nStudentAddressPostCode,\r\nBKStudentAddressState,\r\nStudentAddressState,\r\ncast(StudentAddressGeoData as nvarchar),\r\nStudentAddressLongitude,\r\nStudentAddressLatitude,\r\nHomePhone,\r\nHomeEmail,\r\nStudentMobile,\r\nStudentEmail,\r\nGuardian1FirstName,\r\nGuardian1Surname,\r\nGuardian1Phone,\r\nGuardian1Mobile,\r\nGuardian1Email,\r\nGuardian1OccupationalGroupId,\r\nGuardian1OccupationalGroupSifDesc,\r\nGuardian1EducationSchoolLevelId,\r\nGuardian1EducationSchoolLevelSifDesc,\r\nGuardian1EducationNonSchoolLevelId,\r\nGuardian1EducationNonSchoolLevelSifDesc,\r\nGuardian1LanguageId,\r\nGuardian1LanguageSifDesc,\r\nGuardian2FirstName,\r\nGuardian2Surname,\r\nGuardian2Phone,\r\nGuardian2Mobile,\r\nGuardian2Email,\r\nGuardian2OccupationalGroupId,\r\nGuardian2OccupationalGroupSifDesc,\r\nGuardian2EducationSchoolLevelId,\r\nGuardian2EducationSchoolLevelSifDesc,\r\nGuardian2EducationNonSchoolLevelId,\r\nGuardian2EducationNonSchoolLevelSifDesc,\r\nGuardian2LanguageId,\r\nGuardian2LanguageSifDesc,\r\nBaptismDate,\r\nFirstReconciliationDate,\r\nFirstEucharistDate,\r\nConfirmationDate,\r\nBaptismParish,\r\nCreateDate,\r\nEffectiveStartDate,\r\nEffectiveEndDate,\r\nIsCurrent,\r\nScdReason,\r\nLastUpdateDate,\r\nMainCampusId,\r\nOrganisationUserId,\r\nSKPerson,\r\nStudentReportingId,\r\nAccessRestrictions_YN,\r\nAccessRestrictionsInt\r\nfrom dbo.vwDMStudent\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_student_test_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_student_test_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_student_test_file')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_student_test_file')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_all_from_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get list of tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select schema_name(t.schema_id) as schema_name, t.name as table_name\nfrom sys.tables t",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set currentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDateTime",
							"value": {
								"value": "@{formatDateTime(convertTimeZone(utcnow(), 'UTC', pipeline().parameters.timezone), 'yyyy-MM-ddTHHmm_ss')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get list of tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set currentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get list of tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy_from_Azure_SQL_DB",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy_from_Azure_SQL_DB",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"dbServer": {
												"value": "@pipeline().parameters.dbServer",
												"type": "Expression"
											},
											"dbName": {
												"value": "@pipeline().parameters.dbName",
												"type": "Expression"
											},
											"userName": {
												"value": "@pipeline().parameters.userName",
												"type": "Expression"
											},
											"keyVaultSecretName": {
												"value": "@pipeline().parameters.keyVaultSecretName",
												"type": "Expression"
											},
											"query": {
												"value": "select * from @{item().schema_name}.@{item().table_name}",
												"type": "Expression"
											},
											"sinkFilesystem": {
												"value": "@pipeline().parameters.sinkFilesystem",
												"type": "Expression"
											},
											"sinkDirectory": {
												"value": "@{pipeline().parameters.sinkDirectory}/@{variables('currentDateTime')}/@{item().table_name}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "contosoisd3a.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqladmin-password"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db"
					},
					"timezone": {
						"type": "string",
						"defaultValue": "Eastern Standard Time"
					}
				},
				"variables": {
					"currentDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:07Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy from Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.query",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_parquet",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sinkDirectory",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "contosoisd3a.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqladmin-password"
					},
					"query": {
						"type": "string",
						"defaultValue": "select * from person"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db/person"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_Azure_SQL_DB_cenettest')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy from Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_parquet",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sinkDirectory",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "cenettest.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "cenettestdata"
					},
					"userName": {
						"type": "string",
						"defaultValue": "testadmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "dbpass"
					},
					"query": {
						"type": "string",
						"defaultValue": "select * from dbo.student"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db"
					},
					"table": {
						"type": "string",
						"defaultValue": "dbo.student"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_URL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copies data from the specified URL and lands it in the specified location in the data lake.",
				"activities": [
					{
						"name": "copy from URL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "URL",
								"value": "@pipeline().parameters.URL"
							},
							{
								"name": "sinkFilesystem",
								"value": "@pipeline().parameters.sinkFilesystem"
							},
							{
								"name": "sinkFilename",
								"value": "@pipeline().parameters.sinkFilename"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_HTTP_binary",
								"type": "DatasetReference",
								"parameters": {
									"URL": {
										"value": "@pipeline().parameters.URL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_binary_file",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.sinkFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"URL": {
						"type": "string",
						"defaultValue": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentattendance.csv"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkFilename": {
						"type": "string",
						"defaultValue": "contoso_sis/example1/studentattendance.csv"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_HTTP_binary')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_file')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_each_URL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieves data from multiple HTTP endpoints as specified in the 'endpoints' parameter.\nThe data is landed in the data lake within a folder named with the current datetime (in the timezone specified).\n\nFor a list of timezones, see: https://docs.microsoft.com/en-us/azure/data-factory/control-flow-expression-language-functions#convertfromutc",
				"activities": [
					{
						"name": "get data for each endpoint",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set currentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.endpoints",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "Copy_from_URL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy_from_URL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"URL": {
												"value": "@item().URL",
												"type": "Expression"
											},
											"sinkFilesystem": {
												"value": "@pipeline().parameters.sinkFilesystem",
												"type": "Expression"
											},
											"sinkFilename": {
												"value": "@{item().sinkDirectory}/@{variables('currentDateTime')}/@{item().sinkFilename}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set currentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDateTime",
							"value": {
								"value": "@{formatDateTime(convertTimeZone(utcnow(), 'UTC', pipeline().parameters.timezone), 'yyyy-MM-ddTHHmm_ss')}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"endpoints": {
						"type": "array",
						"defaultValue": [
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentattendance.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentattendance/studentattendance.csv"
							},
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentdemographics.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentdemographics/studentdemographics.csv"
							},
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentsectionmark.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentsectionmark/studentsectionmark.csv"
							}
						]
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"timezone": {
						"type": "string",
						"defaultValue": "Eastern Standard Time"
					}
				},
				"variables": {
					"currentDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_URL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ingestion_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StudentCopyText_test01')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_45g",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_45g",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/student2/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_45g",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_45g",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMStudent"
								},
								"destination": {
									"fileName": "dbovwDMStudent"
								}
							},
							{
								"source": {
									"table": "vwDMStudentClass"
								},
								"destination": {
									"fileName": "dbovwDMStudentClass"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_45g')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_45g')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Student_copy_test01')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_jdg",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_jdg",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/student/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_Student",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_Student",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMStudent"
								},
								"destination": {
									"fileName": "dbovwDMStudent"
								}
							},
							{
								"source": {
									"table": "vwDMStudentClass"
								},
								"destination": {
									"fileName": "dbovwDMStudentClass"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_Student')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_Student')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_lake_db')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create_lake_db",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "kwargs",
								"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':@{pipeline().parameters.sourceDirectory}"
							}
						],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "oea",
									"type": "string"
								},
								"method_name": {
									"value": "create_lake_db",
									"type": "string"
								},
								"kwargs": {
									"value": {
										"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':'@{pipeline().parameters.sourceDirectory}'}",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"stageNum": {
						"type": "string",
						"defaultValue": "2"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis"
					}
				},
				"folder": {
					"name": "OEA_Framework/Ingest"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_sql_db')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "set sqlDBName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sqlDBName",
							"value": {
								"value": "sqls@{pipeline().parameters.stage}_@{pipeline().parameters.sourceDirectory}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "set sqlDBName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_executesql]",
							"storedProcedureParameters": {
								"command": {
									"value": {
										"value": "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '@{variables('sqlDBName')}') \nBEGIN\n  CREATE DATABASE @{variables('sqlDBName')}; \nEND;",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_Serverless_OEA",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "master"
							}
						}
					},
					{
						"name": "get folders in stageXp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}p",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for pseduonymized tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "get folders in stageXnp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}np",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXnp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXnp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for lookup tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}np/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeacisd3gg1"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"stage": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"sqlDBName": {
						"type": "String",
						"defaultValue": "sqls2_mydb"
					}
				},
				"folder": {
					"name": "OEA_Framework/Ingest"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_Serverless_OEA')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/example_main_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Example pipeline demonstrating typical orchestration of data extraction, landing, ingestion, and creation of lake and sql db's.",
				"activities": [
					{
						"name": "ingest into stage2p and 2np",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Copy_from_Azure_SQL_DB_cenettest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "contoso_sis",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "If create_sql_db",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ingest into stage2p and 2np",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.create_sql_db",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "create_sql_db",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "create_sql_db",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"storageAccount": {
												"value": "@pipeline().parameters.storageAccount",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"stage": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If create_lake_db",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ingest into stage2p and 2np",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.create_lake_db",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "create_lake_db",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "create_lake_db",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"stageNum": "2",
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy_from_Azure_SQL_DB_cenettest",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_from_Azure_SQL_DB_cenettest",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sinkDirectory": "contoso_sis_db"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeatceooeadev01"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db"
					},
					"create_sql_db": {
						"type": "bool",
						"defaultValue": true
					},
					"create_lake_db": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:55Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_Azure_SQL_DB_cenettest')]",
				"[concat(variables('workspaceId'), '/pipelines/create_sql_db')]",
				"[concat(variables('workspaceId'), '/pipelines/create_lake_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "acer",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage2np"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "ZZZ_OEA_connector_Test",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "student_test",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage2np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "student_test"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/ZZZ_OEA_connector_Test')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reset_all_for_source')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Deletes the ingestion for the specified system and table - in order to start over when testing during implementation.",
				"activities": [
					{
						"name": "delete source system dir from stage1np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2np",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2p",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSystem": {
						"type": "string",
						"defaultValue": "contoso_sis"
					}
				},
				"folder": {
					"name": "OEA_Framework/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:20:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reset_ingestion_of_table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Deletes the ingestion for the specified system and table - in order to start over when testing during implementation.",
				"activities": [
					{
						"name": "delete _checkpoints_p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}/_checkpoints_p",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete _checkpoints_np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}/_checkpoints_np",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2p",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSystem": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "studentattendance"
					}
				},
				"folder": {
					"name": "OEA_Framework/Reset"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:20:24Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tmp_datablend_dev')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy NAPLAN Student",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "BKSourceStudentId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "BKSourceStudentId",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "BKPersistentStudentId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "BKPersistentStudentId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "SKStudent",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SKStudent",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "OfficialFirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "OfficialFirstName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "OfficialSurname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "OfficialSurname",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PreferredFirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PreferredFirstName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PreferredSurname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PreferredSurname",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SingleNameOnly",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "SingleNameOnly",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "GenderId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "GenderId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DOB",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DOB",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "AttendanceStatusId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "AttendanceStatusId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "StudentAddressStreet",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "StudentAddressStreet",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StudentAddressSuburb",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "StudentAddressSuburb",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StudentAddressState",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "StudentAddressState",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StudentAddressPostCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "StudentAddressPostCode",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StudentAddressLatitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 6,
											"precision": 9
										},
										"sink": {
											"name": "StudentAddressLatitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "StudentAddressLongitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 6,
											"precision": 9
										},
										"sink": {
											"name": "StudentAddressLongitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "HomePhone",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "HomePhone",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "HomeEmail",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "HomeEmail",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StudentMobile",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "StudentMobile",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StudentEmail",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "StudentEmail",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "BirthCountryId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "BirthCountryId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "CitizenshipResidencyStatusId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CitizenshipResidencyStatusId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "PrimaryCitizenshipCountryId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PrimaryCitizenshipCountryId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "PrimaryPassportIssueCountryId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PrimaryPassportIssueCountryId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Boarder",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "Boarder",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "VisaSubClassId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "VisaSubClassId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "VisaSubClassDesc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "VisaSubClassDesc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "VisaExpiryData",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "VisaExpiryData",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "VisaEndDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "VisaEndDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "AtsiId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "AtsiId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "ATSIDesc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ATSIDesc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ESLYesNo",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "ESLYesNo",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "EslLanguageId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "EslLanguageId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "LBOTEYesNo",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "LBOTEYesNo",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "LBOTELanguageId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "LBOTELanguageId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FFPOS",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "FFPOS",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "SWDYesNo",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "SWDYesNo",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "SwdSifDesc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SwdSifDesc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian1FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian1FirstName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian1Surname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian1Surname",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian1LanguageId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Guardian1LanguageId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Guardian1Email",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian1Email",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian1Phone",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian1Phone",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian1Mobile",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian1Mobile",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian1OccupationalGroupId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Guardian1OccupationalGroupId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Guardian1EducationSchoolLevelId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Guardian1EducationSchoolLevelId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Guardian1EducationNonSchoolLevelId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Guardian1EducationNonSchoolLevelId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Guardian2FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian2FirstName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian2Surname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian2Surname",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian2LanguageId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Guardian2LanguageId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Guardian2Email",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian2Email",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian2Phone",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian2Phone",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian2Mobile",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Guardian2Mobile",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Guardian2OccupationalGroupId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Guardian2OccupationalGroupId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Guardian2EducationSchoolLevelId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Guardian2EducationSchoolLevelId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Guardian2EducationNonSchoolLevelId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Guardian2EducationNonSchoolLevelId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "ReligionId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ReligionId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "BaptismDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "BaptismDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "BaptismParish",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "BaptismParish",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ConfirmationDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "ConfirmationDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "FirstEucharistDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "FirstEucharistDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "FirstReconciliationDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "FirstReconciliationDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "RollGroup",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RollGroup",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Naplan_Student",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_parquet",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "@pipeline().parameters.sinkFilesystem",
									"directory": "@pipeline().parameters.sinkDirectory"
								}
							}
						]
					},
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Copy NAPLAN Student",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Naplan_py",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "naplan",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "naplan"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Naplan_Student')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_parquet')]",
				"[concat(variables('workspaceId'), '/notebooks/Naplan_py')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tmp_datablend_dev_copy2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy NAPLAN Student",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SKACERStudent",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SKACERStudent",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "BKACERStudent",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "BKACERStudent",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SystemId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SystemId",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PersistentStudentId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PersistentStudentId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FamilyName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FamilyName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GivenName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "GivenName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "DateOfBirth",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DateOfBirth",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "GenderId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "GenderId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Username",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Username",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Password",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Password",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CampusId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CampusId",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "CreateDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "CreateDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "LastUpdateDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "LastUpdateDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "EffectiveStartDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "EffectiveStartDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "EffectiveEndDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "EffectiveEndDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "Iscurrent",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "Iscurrent",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "SCDReason",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SCDReason",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Dim_ACER_Student",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_parquet",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "@pipeline().parameters.sinkFilesystem",
									"directory": "@pipeline().parameters.sinkDirectory"
								}
							}
						]
					},
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Copy NAPLAN Student",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Naplan_py",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "naplan",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "acer_test"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Dim_ACER_Student')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_parquet')]",
				"[concat(variables('workspaceId'), '/notebooks/Naplan_py')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AggWholeDayAttendanceBySchool')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAggWholeDayAttendanceBySchool",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKCampus",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKAttendanceDate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKGender",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKATSI",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKYearLevel",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalSchoolMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalMinutesMissed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MinutesArrivedLate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MinutesDepartedEarly",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnmarkedMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnscheduledMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ArrivedLate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DepartedEarly",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WholeDayAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PartialAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NoAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CountAttended",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "Disability",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwAggWholeDayAttendanceBySchool"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_binary_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used for landing data in the data lake.\nDefaults to landing data in stage1np.\nNote that you can specify a full path in the filename param (eg, to land a file in a specific folder filename param can be 'contoso_sis/students/students.csv').\n",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_binary_folder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used for landing data in the data lake as in parquet format.\nDefaults to landing data in stage1np.\nNote that you cannot specify a filename because with parquet the filename should be auto-generated.\n",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SQL_DB",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbServer": {
							"value": "@dataset().dbServer",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						},
						"userName": {
							"value": "@dataset().userName",
							"type": "Expression"
						},
						"keyVaultSecretName": {
							"value": "@dataset().keyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "myserver.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "testdb"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqlAdmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqlAdminPwd"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "student"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_HTTP_binary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieves data from an http endpoint.\nThe data can be in any format - the binary dataset allows us to pull any payload without affecting it.",
				"linkedServiceName": {
					"referenceName": "LS_HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"baseURL": {
							"value": "@dataset().URL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"URL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_45g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student2",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACERAEStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "students/acer",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Acer02')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AcerStudent",
						"folderPath": "students/acer2",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_All_schools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "schools_all",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_All_student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_attendance_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "attendance",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_cxs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "student3",
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_d0j')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "aestudents.csv",
						"folderPath": "student4",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_j06')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_profile_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_profile_object_2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbovwDMStudent.csv",
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_test_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "student_test",
						"folderPath": "students/student_test_file",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_vwDMStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "student_test",
						"folderPath": "students",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dim_ACER_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tmp_datablend_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKACERStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKACERStudent",
						"type": "nvarchar"
					},
					{
						"name": "SystemId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FamilyName",
						"type": "nvarchar"
					},
					{
						"name": "GivenName",
						"type": "nvarchar"
					},
					{
						"name": "DateOfBirth",
						"type": "date"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Username",
						"type": "nvarchar"
					},
					{
						"name": "Password",
						"type": "nvarchar"
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					},
					{
						"name": "SCDReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMACERStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/tmp_datablend_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Naplan_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tmp_datablend_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "BKSourceStudentId",
						"type": "nvarchar"
					},
					{
						"name": "BKPersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OfficialFirstName",
						"type": "nvarchar"
					},
					{
						"name": "OfficialSurname",
						"type": "nvarchar"
					},
					{
						"name": "PreferredFirstName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredSurname",
						"type": "nvarchar"
					},
					{
						"name": "SingleNameOnly",
						"type": "bit"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DOB",
						"type": "date"
					},
					{
						"name": "AttendanceStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StudentAddressStreet",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressSuburb",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressState",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressPostCode",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressLatitude",
						"type": "decimal",
						"precision": 9,
						"scale": 6
					},
					{
						"name": "StudentAddressLongitude",
						"type": "decimal",
						"precision": 9,
						"scale": 6
					},
					{
						"name": "HomePhone",
						"type": "nvarchar"
					},
					{
						"name": "HomeEmail",
						"type": "nvarchar"
					},
					{
						"name": "StudentMobile",
						"type": "nvarchar"
					},
					{
						"name": "StudentEmail",
						"type": "nvarchar"
					},
					{
						"name": "BirthCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CitizenshipResidencyStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryCitizenshipCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryPassportIssueCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Boarder",
						"type": "bit"
					},
					{
						"name": "VisaSubClassId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VisaSubClassDesc",
						"type": "nvarchar"
					},
					{
						"name": "VisaExpiryData",
						"type": "date"
					},
					{
						"name": "VisaEndDate",
						"type": "date"
					},
					{
						"name": "AtsiId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ATSIDesc",
						"type": "nvarchar"
					},
					{
						"name": "ESLYesNo",
						"type": "bit"
					},
					{
						"name": "EslLanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LBOTEYesNo",
						"type": "bit"
					},
					{
						"name": "LBOTELanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FFPOS",
						"type": "bit"
					},
					{
						"name": "SWDYesNo",
						"type": "bit"
					},
					{
						"name": "SwdSifDesc",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1FirstName",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Surname",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1LanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1Email",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Phone",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Mobile",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1OccupationalGroupId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1EducationSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1EducationNonSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2FirstName",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Surname",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2LanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2Email",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Phone",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Mobile",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2OccupationalGroupId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2EducationSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2EducationNonSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReligionId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BaptismDate",
						"type": "date"
					},
					{
						"name": "BaptismParish",
						"type": "nvarchar"
					},
					{
						"name": "ConfirmationDate",
						"type": "date"
					},
					{
						"name": "FirstEucharistDate",
						"type": "date"
					},
					{
						"name": "FirstReconciliationDate",
						"type": "date"
					},
					{
						"name": "RollGroup",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "NAPLAN",
					"table": "Student"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/tmp_datablend_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_45g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACERAEStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Acer02')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKACERStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKACERStudent",
						"type": "nvarchar"
					},
					{
						"name": "SystemId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FamilyName",
						"type": "nvarchar"
					},
					{
						"name": "GivenName",
						"type": "nvarchar"
					},
					{
						"name": "DateOfBirth",
						"type": "date"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Username",
						"type": "nvarchar"
					},
					{
						"name": "Password",
						"type": "nvarchar"
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					},
					{
						"name": "SCDReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMACERStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_All_schools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_All_student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_attendance_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_cxs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAEStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKSourceStudentId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StudentFirstName",
						"type": "nvarchar"
					},
					{
						"name": "StudentSurname",
						"type": "nvarchar"
					},
					{
						"name": "DOB",
						"type": "date"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ATSIId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LBOTELanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WholeDaysAbsent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PartialDaysAbsent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "ScdReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAEStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_d0j')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAEStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_j06')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_profile_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_profile_object_2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_test_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_vwDMStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CeNet_DataBlend')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('CeNet_DataBlend_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_ADLS_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to the OEA data lake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_OEA_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Allows for connecting to an Azure SQL database using SQL authentication and retrieving the user password from the key vault.",
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "myserver.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "testdb"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqlAdmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqlAdminPwd"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_Azure_SQL_DB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().keyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_HTTP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to an HTTP endpoint.\nThe baseURL parameter must be passed in from the dataset that utilizes this linked service.",
				"parameters": {
					"baseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_KeyVault_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_KeyVault_OEA_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_SQL_Serverless_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "master"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_Serverless_OEA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-tceooeadev01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syn-oea-tceooeadev01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-tceooeadev01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('syn-oea-tceooeadev01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tmp_datablend_dev')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('tmp_datablend_dev_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SelfHostedIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"description": "Temporary TCEO Private network access to DEV database",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_read_me')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {}
				},
				"metadata": {
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"![OEA](https://openeducationanalytics.org/assets/imgs/img_oea_logo.png)\n",
							"# OEA and the OEA Framework\n",
							"\n",
							"[OEA](https://openeducationanalytics.org/) is the overarching community and ecosystem centered around the effective and responsible use of data and analytics in education.\n",
							"\n",
							"The [OEA framework](https://github.com/microsoft/OpenEduAnalytics/tree/main/framework) is an open source python library and synapse pipeline assets - built in collaboration with the OEA community - that simplifies the process of working with the data in your data lake in a way that follows a standardized data lake architecture and data processing best practices through use of [Apache Spark](https://spark.apache.org/) and [delta lake](https://delta.io/) technologies.\n",
							"\n",
							"Listed below are 3 included examples that demonstrate the usage of the OEA framework."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"# Example #1: End to end (collect, prep, view)\n",
							"The OEA framework comes with a set of Synapse pipelines that demonstrate how to extract data from data sources with common interfaces.\n",
							"\n",
							"By clicking on \"Integrate\" in the left nav bar and opening \"example_main_pipeline\" you can run an example pipeline that does the following:\n",
							"- 1. Retrieves data from an http endpoint\n",
							"- 2. Lands the data in the stage1np directory\n",
							"- 3. Ingests the data by first running a pseudonymization process, then writing pseudonymized data to delta tables in stage2p and writing non-pseudonymized data to delta tables in stage2np\n",
							"- 4. Creates a spark db that points to the delta tables in stage2p and stage2np\n",
							"- 5. Creates a sql serverless db with views pointing to the delta tables in stage2p and stage2np\n",
							"\n",
							"You can then run the pipeline in the Reset folder called \"reset_all_for_source\" to reset everything in the data lake that was done in the \"example_main_pipeline\"."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Example #2: batch data processing\n",
							"The notebook **_2_batch_processing_demo_** provides a self-contained demonstration of landing and ingesting 3 different types of batch data sets:\n",
							"\n",
							"1. [Incremental data](https://github.com/microsoft/OpenEduAnalytics/tree/main/framework#1-incremental-data)\n",
							"2. [Delta data](https://github.com/microsoft/OpenEduAnalytics/tree/main/framework#2-delta-data-change-data)\n",
							"3. [Snapshot data](https://github.com/microsoft/OpenEduAnalytics/tree/main/framework#3-snapshot-data)\n",
							"\n",
							"Open that notebook and walk through each cell for the details."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Example #3: data generation demo\n",
							"When learning to work synapse studio and the OEA framework, and when developing the data exploration and data prep scripts you need, it's especially helpful to have test data sets to work with.\n",
							"\n",
							"The notebook **_3_data_generation_demo_** data generation demo shows how to generate test data sets across multiple fictional schools for testing purposes."
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_batch_processing_demo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7897f677-0c0e-40e1-aed9-518d03e69c88"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA Demo\r\n",
							"This notebook demonstrates the batch processing features of the OEA framework."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Incremental batches"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# reset this example (deletes data in stage1np/example, stage2np/example, and stage2p/example)\r\n",
							"oea.delete_data_source('example')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Land the first batch of test data (test)\r\n",
							"df1 = spark.createDataFrame([(1,'Joe','English','2021'), (2,'Helen','English','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('example', 'student', df1)\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/example/student')\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ingest the first batch of test data into stage2\r\n",
							"example_schema = [['id', 'string', 'hash'], ['name', 'string', 'mask'], ['language', 'string', 'no-op'], ['school_year', 'string', 'partition-by']]\r\n",
							"oea.ingest_incremental_data('example', 'student', example_schema, 'school_year', 'id')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/example/student_pseudo')\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# land the second batch of test data\r\n",
							"df2 = spark.createDataFrame([(3,'Elisa','Spanish','2021'), (4,'Lily','English','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('example', 'student', df2)\r\n",
							"# show the comprehensive set of data landed in stage1\r\n",
							"df = oea.load_csv('stage1np/example/student')\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ingest the second batch of test data into stage2\r\n",
							"oea.ingest_incremental_data('example', 'student', example_schema, 'school_year', 'id')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/example/student_pseudo')\r\n",
							"df.show()\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Delta batches"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# reset this example (deletes data in stage1np/example, stage2np/example, and stage2p/example)\r\n",
							"oea.delete_data_source('delta_example')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Land the first batch of test data\r\n",
							"df1 = spark.createDataFrame([(1,'Joseph','English','2021'), (2,'Helen','English','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('delta_example', 'student', df1)\r\n",
							"\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/delta_example/student')\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ingest the first batch of test data into stage2\r\n",
							"example_schema = [['id', 'string', 'hash'], ['name', 'string', 'mask'], ['language', 'string', 'no-op'], ['school_year', 'string', 'partition-by']]\r\n",
							"oea.ingest_delta_data('delta_example', 'student', example_schema, 'school_year')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/delta_example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/delta_example/student_pseudo')\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Land the second batch of test data\r\n",
							"df2 = spark.createDataFrame([(1,'Joseph','Spanish','2021'), (3,'Elisa','Spanish','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('delta_example', 'student', df2)\r\n",
							"\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/delta_example/student')\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ingest the second batch of test data into stage2\r\n",
							"oea.ingest_delta_data('delta_example', 'student', example_schema, 'school_year')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/delta_example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/delta_example/student_pseudo')\r\n",
							"df.show()\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Snapshot batches"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# reset this example (deletes data in stage1np/example, stage2np/example, and stage2p/example)\r\n",
							"oea.delete_data_source('snapshot_example')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# land data in stage1\r\n",
							"df1 = spark.createDataFrame([(1,'Joseph','English','2021'), (2,'Helen','English','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('snapshot_example', 'student', df1)\r\n",
							"\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/snapshot_example/student')\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# process data from stage1 into stage2\r\n",
							"example_schema = [['id', 'string', 'hash'], ['name', 'string', 'mask'], ['language', 'string', 'no-op'], ['school_year', 'string', 'partition-by']]\r\n",
							"oea.ingest_snapshot_data('snapshot_example', 'student', example_schema, 'school_year')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/snapshot_example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/snapshot_example/student_pseudo')\r\n",
							"df.show()\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# land the second test data batch in stage1\r\n",
							"df2 = spark.createDataFrame([(1,'Joseph','Spanish','2021'), (3,'Elisa','Spanish','2021')], ['id', 'name', 'language', 'school_year'])\r\n",
							"oea.land('snapshot_example', 'student', df2)\r\n",
							"\r\n",
							"# show what's landed in stage1\r\n",
							"df = oea.load_csv('stage1np/snapshot_example/student')\r\n",
							"df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# process data from stage1 into stage2\r\n",
							"example_schema = [['id', 'string', 'hash'], ['name', 'string', 'mask'], ['language', 'string', 'no-op'], ['school_year', 'string', 'partition-by']]\r\n",
							"oea.ingest_snapshot_data('snapshot_example', 'student', example_schema, 'school_year')\r\n",
							"\r\n",
							"# show what's in stage2\r\n",
							"df = oea.load_delta('stage2np/snapshot_example/student_lookup')\r\n",
							"df.show()\r\n",
							"df = oea.load_delta('stage2p/snapshot_example/student_pseudo')\r\n",
							"df.show()\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_data_generation_demo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {}
				},
				"metadata": {
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Data Generation Example\r\n",
							"This notebook demonstrates how to use the EdFiDataGenerator to generate test student data in the Ed-Fi format for as many schools as specified.\r\n",
							"\r\n",
							"To generate test Ed-Fi data, simple run this notebook.\r\n",
							"The test data will be generated in json format and written to stage1np/test_data in your data lake."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run DataGen_py"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dg = EdFiDataGenerator()\r\n",
							"writer = DataLakeWriter(oea.stage1np + '/test_data')\r\n",
							"dg.generate_data(2, writer)"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Acer_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "24e3a54a-23cd-403c-b580-6a0b9ebd18c8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Acer(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='acer_test', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        self.schemas['student_acer'] = [['SKACERStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKACERStudent', 'string', 'no-op'],\r\n",
							"                                        ['SystemID', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentID', 'integer', 'no-op'],\r\n",
							"                                        ['FamilyName', 'string', 'no-op'],\r\n",
							"                                        ['GivenName', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'date', 'no-op'],\r\n",
							"                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['Username', 'string', 'no-op'],\r\n",
							"                                        ['Password', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']]                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAcerStudent', self.schemas['student_acer'], None, 'SKACERStudent')\r\n",
							"\r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\r\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\r\n",
							"\r\n",
							"acer = Acer()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Attendance_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "74850474-e190-4288-a81f-f35a3bb8be72"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Attendance_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='attendance', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['AggWholeDayAttendanceBySchool'] = [\r\n",
							"                                        ['SKAggWholeDayAttendanceBySchool', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['CountAttended', 'integer', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                                                     \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['AggWholeDayAttendanceByStudent'] = [\r\n",
							"                                        ['SKAggWholeDayAttendanceByStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['CountAttended', 'integer', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceCode'] = [\r\n",
							"        #                                 ['SKAttendanceCode', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKattendanceCode', 'string', 'no-op'],\r\n",
							"        #                                 ['ExtendedStatusGUId', 'string', 'no-op'],\r\n",
							"        #                                 ['CountAbscence', 'integer', 'no-op'],\r\n",
							"        #                                 ['StatusDescription', 'string', 'no-op'],\r\n",
							"        #                                 ['StatusName', 'string', 'no-op'],\r\n",
							"        #                                 ['SchoolSystemExportIdentifier', 'string', 'no-op'],\r\n",
							"        #                                 ['ShortCode', 'string', 'no-op'],\r\n",
							"        #                                 ['ShortName', 'string', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['Iscurrent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SCDReason', 'string', 'no-op']                                \r\n",
							"        #                                 ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceNote'] = [\r\n",
							"        #                                 ['SKAttendanceNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKAttendanceNote', 'string', 'no-op'],\r\n",
							"        #                                 ['CompassPersonId', 'string', 'no-op'],\r\n",
							"        #                                 ['CalendarYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['NoteStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LengthOfNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['Details', 'string', 'no-op'],\r\n",
							"        #                                 ['DateNoteEntered', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteAttendanceCodeDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteAttendanceCode', 'string', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'integer', 'no-op'],\r\n",
							"        #                                 ['ScdReason', 'string', 'no-op']                                \r\n",
							"        #                                 ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceStatus'] = [\r\n",
							"        #                                 ['SKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusSifCode', 'string', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusSifDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['PrimarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['SecondarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'integer', 'no-op'],\r\n",
							"        #                                 ['ScdReason', 'string', 'no-op'],\r\n",
							"        #                                 ['BusinessDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusGroup', 'string', 'no-op']                                                                                                             \r\n",
							"        #                                 ]\r\n",
							"        \r\n",
							"\r\n",
							"        # self.schemas['DMFactAttendanceCheckin'] = [\r\n",
							"        #                                 ['SKAttendanceCheckIn', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentID', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['CheckInTime', 'time', 'no-op'],\r\n",
							"        #                                 ['CheckInType', 'integer', 'no-op'],\r\n",
							"        #                                 ['CheckInCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'integer', 'no-op']                                                                      \r\n",
							"        #                                 ]    \r\n",
							"\r\n",
							"        # self.schemas['DMFactAttendanceRealTime'] = [\r\n",
							"        #                                 ['SKAttendanceRealTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentType', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['ArrivedLate', 'integer', 'no-op'],\r\n",
							"        #                                 ['DepartedEarly', 'integer', 'no-op'],\r\n",
							"        #                                 ['HasNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['Iscurrent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SliceCode', 'string', 'no-op']                                \r\n",
							"        #                             ]  \r\n",
							"\r\n",
							"        # self.schemas['DMFactMySchoolsAttendance'] = [ \r\n",
							"        #                                 ['SKMySchoolsAttendance', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKMySchoolsAttendance', 'string', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"        #                                 ['ICSEACode', 'integer', 'no-op'],\r\n",
							"        #                                 ['AttendanceRate', 'double', 'no-op'],\r\n",
							"        #                                 ['IndigenousAttendanceRate', 'double', 'no-op'],\r\n",
							"        #                                 ['NonIndigenousAttendanceRate', 'double', 'no-op'],\r\n",
							"        #                                 ['AttendanceLevel', 'double', 'no-op'],\r\n",
							"        #                                 ['IndigenousAttendanceLevel', 'double', 'no-op'],\r\n",
							"        #                                 ['NonIndigenousAttendanceLevel', 'double', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'integer', 'no-op'],\r\n",
							"        #                                 ['LocationId', 'integer', 'no-op']                                \r\n",
							"        #                             ] \r\n",
							"\r\n",
							"        self.schemas['DMFactWholeDayAttendance'] = [ \r\n",
							"                                        ['SKWholeDayAttendance', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"                                        ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentType', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['HasNote', 'integer', 'no-op'],\r\n",
							"                                        ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                \r\n",
							"                                    ]   \r\n",
							"                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['AggWholeDayAttendanceBySchool'], None, '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['AggWholeDayAttendanceByStudent'], None, '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceCode'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceNote'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceStatus'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactAttendanceCheckin'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactAttendanceRealTime'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactMySchoolsAttendance'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactWholeDayAttendance'], 'LastUpdateDate', '<key>')\r\n",
							"\r\n",
							"\r\n",
							"        \r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student_test_file', self.schemas['student_test'], 'LastUpdateDate', 'SKStudent') # try to partition by LastUpdateDate instead of CreateDate\r\n",
							"\r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\r\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\r\n",
							"\r\n",
							"attendance_object = Attendance_object()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ContosoSIS_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b1f8f17c-b44d-4b74-a6e3-e38848e25b95"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class ContosoSIS(BaseOEAModule):\n",
							"    def __init__(self, source_folder='contoso_sis', pseudonymize = True):\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\n",
							"        self.schemas['student'] = [['id', 'string', 'no-op'],\n",
							"                                            ['name', 'string', 'partition-by']]                                          \n",
							"\n",
							"    def ingest(self):\n",
							"        oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\n",
							"\n",
							"contoso_sis = ContosoSIS()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e81d2bdc-b20a-4c62-ae42-2c7b921a4130"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class DataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"    def createFoldersForAll(self):\r\n",
							"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"                \r\n",
							"            # if the filename is preceded by 'dbovw', remove it and use the rest of the file name as the directory\r\n",
							"            if file.name.find('dbovw') == 0:\r\n",
							"                destination = file.name.replace('dbovw', '')\r\n",
							"                self._copyToFolder(file, destination)\r\n",
							"            else:\r\n",
							"                self._copyToFolder(file, file.name)\r\n",
							"\r\n",
							"\r\n",
							"    def _copyToFolder(self, file, destination):\r\n",
							"        \"\"\" Moves the file to a folder that is based on the filename without its file extension\"\"\"\r\n",
							"        tokens = destination.split(\".\")\r\n",
							"        target = self.stage1np + '/' + tokens[0] +'/' + file.name\r\n",
							"        mssparkutils.fs.mv(file.path, target, True) # will create the new dir and move file into it\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
							"datacopy = DataCopy(source_folder)\r\n",
							"\r\n",
							"datacopy.createFoldersForAll()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataGen_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {}
				},
				"metadata": {
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import random\r\n",
							"import json\r\n",
							"from faker import Faker\r\n",
							"\r\n",
							"\"\"\" From DataGenUtil.py \"\"\"\r\n",
							"def list_of_dict_to_csv(list_of_dict, includeHeaders = True):\r\n",
							"    csv_str = ''\r\n",
							"    if includeHeaders == True:\r\n",
							"        header = []\r\n",
							"        for column_name in list_of_dict[0].keys(): \r\n",
							"            if not column_name.startswith('_'): header.append(column_name)\r\n",
							"        csv_str += \",\".join(header) + \"\\n\"\r\n",
							"\r\n",
							"    for row in list_of_dict:\r\n",
							"        csv_str += obj_to_csv(row) + \"\\n\"\r\n",
							"\r\n",
							"    return csv_str\r\n",
							"\r\n",
							"def obj_to_csv(obj):\r\n",
							"    csv = ''\r\n",
							"    for key in obj:\r\n",
							"        if not (key.startswith('_')): csv += str(obj[key]) + ','\r\n",
							"    return csv[:-1]\r\n",
							"\r\n",
							"def list_of_dict_to_json(list_of_dict):\r\n",
							"    json_str = '['\r\n",
							"    for row in list_of_dict:\r\n",
							"        json_str += obj_to_json(row) + \",\\n\"\r\n",
							"    return json_str[:-2] + ']'\r\n",
							"\r\n",
							"def obj_to_json(obj):\r\n",
							"    json_dict = {}\r\n",
							"    for key in obj:\r\n",
							"        if not (key.startswith('_')): json_dict[key] = obj[key]\r\n",
							"    return json.dumps(json_dict)\r\n",
							"\r\n",
							"\"\"\" From EdFiDataGenerator.py \"\"\"\r\n",
							"GENDER = ['Male','Female']\r\n",
							"BOOLEAN = [True, False]\r\n",
							"OPERATIONAL_STATUS = ['Active','Inactive']\r\n",
							"CHARTER_STATUS = ['School Charter', 'Open Enrollment Charter', 'Not a Charter School']\r\n",
							"GRADE_LEVEL = ['First Grade','Second Grade','Third Grade','Fourth Grade','Fifth Grade','Sixth Grade','Seventh Grade','Eighth Grade','Ninth Grade','Tenth Grade','Eleventh Grade','Twelfth Grade']\r\n",
							"SCHOOL_TYPES = ['High School', 'Middle School', 'Elementary School']\r\n",
							"SUBJECT_NAMES = [('Math','Algebra'), ('Math','Geometry'), ('Language','English'), ('History','World History'),('Science','Biology'), ('Science','Health'), ('Technology',' Programming'), ('Physical Education','Sports'), ('Arts','Music')]\r\n",
							"LEVELS_OF_EDUCATION = ['Some College No Degree', 'Doctorate', 'Bachelor\\'s','Master\\'s']\r\n",
							"PERSONAL_INFORMATION_VERIFICATION_DESCRIPTIONS = ['Entry in family Bible', 'Other official document', 'State-issued ID', 'Hospital certificate', 'Passport', 'Parents affidavit', 'Immigration document/visa', 'Drivers license']\r\n",
							"RACES = ['Asian' , 'Native Hawaiian - Pacific Islander', 'American Indian - Alaska Native', 'White']\r\n",
							"\r\n",
							"class EdFiDataGenerator:\r\n",
							"    def __init__(self,number_students_per_school=100, include_optional_fields=True, school_year='2021', credit_conversion_factor = 2.0, number_of_grades_per_school = 5, is_current_school_year = True, graduation_plans_per_school = 10, unique_id_length = 5, number_staffs_per_school = 50, number_sections_per_school = 10):\r\n",
							"        # Set a seed value in Faker so it generates same values every run.\r\n",
							"        self.faker = Faker('en_US')\r\n",
							"        Faker.seed(1)\r\n",
							"\r\n",
							"        self.include_optional_fields = include_optional_fields\r\n",
							"        self.graduation_plans_per_school = graduation_plans_per_school\r\n",
							"        self.school_year = school_year\r\n",
							"        self.country = 'United States of America'\r\n",
							"        self.number_students_per_school = number_students_per_school\r\n",
							"        self.credit_conversion_factor = credit_conversion_factor\r\n",
							"        self.number_of_grades_per_school = number_of_grades_per_school\r\n",
							"        self.is_current_school_year = is_current_school_year\r\n",
							"        self.unique_id_length = unique_id_length\r\n",
							"        self.number_staffs_per_school = number_staffs_per_school\r\n",
							"        self.number_sections_per_school = number_sections_per_school\r\n",
							"\r\n",
							"    def get_descriptor_string(self, key, value):\r\n",
							"        return \"uri://ed-fi.org/{}#{}\".format(key,value)\r\n",
							"\r\n",
							"    def generate_data(self, num_of_schools, writer):\r\n",
							"        edfi_data = [self.create_school() for _ in range(num_of_schools)]\r\n",
							"        edfi_data_formatted = self.format_edfi_data(edfi_data)\r\n",
							"\r\n",
							"\r\n",
							"        writer.write(f'EdFi/School.json',list_of_dict_to_json(edfi_data_formatted['Schools']))\r\n",
							"        writer.write(f'EdFi/Student.json',list_of_dict_to_json(edfi_data_formatted['Students']))\r\n",
							"        writer.write(f'EdFi/StudentSchoolAssociation.json',list_of_dict_to_json(edfi_data_formatted['StudentSchoolAssociations']))\r\n",
							"        writer.write(f'EdFi/Course.json',list_of_dict_to_json(edfi_data_formatted['Courses']))\r\n",
							"        writer.write(f'EdFi/Calendar.json',list_of_dict_to_json(edfi_data_formatted['Calendars']))\r\n",
							"        writer.write(f'EdFi/Sessions.json',list_of_dict_to_json(edfi_data_formatted['Sessions']))\r\n",
							"        writer.write(f'EdFi/StaffSchoolAssociations.json',list_of_dict_to_json(edfi_data_formatted['StaffSchoolAssociations']))\r\n",
							"        writer.write(f'EdFi/Sections.json',list_of_dict_to_json(edfi_data_formatted['Sections']))\r\n",
							"        writer.write(f'EdFi/Staffs.json',list_of_dict_to_json(edfi_data_formatted['Staffs']))\r\n",
							"        writer.write(f'EdFi/StudentSectionAssociations.json',list_of_dict_to_json(edfi_data_formatted['StudentSectionAssociations']))\r\n",
							"        writer.write(f'EdFi/StaffSectionAssociations.json',list_of_dict_to_json(edfi_data_formatted['StaffSectionAssociations']))\r\n",
							"\r\n",
							"\r\n",
							"    def create_school(self):\r\n",
							"        school_type = random.choice(SCHOOL_TYPES)\r\n",
							"        school_name = self.faker.city() + ' ' + school_type\r\n",
							"        school = {\r\n",
							"            'Id': self.faker.uuid4().replace('-',''),\r\n",
							"            'SchoolId': self.faker.random_number(digits = self.unique_id_length),\r\n",
							"            'NameOfInstitution': school_name,\r\n",
							"            'OperationalStatusDescriptor': self.get_descriptor_string('OperationalStatusDescriptor',random.choice(OPERATIONAL_STATUS)),\r\n",
							"            'ShortNameOfInstitution': ''.join([word[0] for word in school_name.split()]),\r\n",
							"            'Website':''.join(['www.',school_name.lower().replace(' ',''),'.com']),\r\n",
							"            'AdministrativeFundingControlDescriptor': self.get_descriptor_string('AdministrativeFundingControlDescriptor',random.choice(['public', 'private']) + ' School'),\r\n",
							"            'CharterStatusDescriptor': self.get_descriptor_string('CharterStatusDescriptor',random.choice(CHARTER_STATUS)),\r\n",
							"            'SchoolTypeDescriptor': self.get_descriptor_string('SchoolTypeDescriptor','Regular'),\r\n",
							"            'TitleIPartASchoolDesignationDescriptor': self.get_descriptor_string('TitleIPartASchoolDesignationDescriptor','Not A Title I School'),\r\n",
							"            'Addresses': self.create_address() if self.include_optional_fields else '',\r\n",
							"            'EducationOrganizationCategories':[{'EducationOrganizationCategoryDescriptor': self.get_descriptor_string('educationOrganizationCategoryDescriptor','School')}],\r\n",
							"            'IdentificationCodes': [\r\n",
							"                {\r\n",
							"                    'educationOrganizationIdentificationSystemDescriptor': self.get_descriptor_string('educationOrganizationIdentificationSystemDescriptor','SEA'),\r\n",
							"                    'identificationCode': self.faker.random_number(digits=10)\r\n",
							"                }\r\n",
							"            ],\r\n",
							"            'InstitutionTelephones': self.create_telephones(),\r\n",
							"            'InternationalAddresses': [],\r\n",
							"            'SchoolCategories': [\r\n",
							"                {\r\n",
							"                    'SchoolCategoryDescriptor': self.get_descriptor_string('SchoolCategoryDescriptor',school_type)\r\n",
							"                }\r\n",
							"            ],\r\n",
							"            'gradeLevels': [\r\n",
							"                {'gradeLevelDescriptor': self.get_descriptor_string('GradeLevelDescriptor',random.choice(GRADE_LEVEL))} for _ in range(4)\r\n",
							"            ]\r\n",
							"        }\r\n",
							"\r\n",
							"        school['_SchoolYears'] = self.create_school_years()\r\n",
							"        school['_Calendars'] = self.create_calendars(school)\r\n",
							"        school['_Students'] = self.create_students()\r\n",
							"        school['_Courses'] = self.create_courses(school['SchoolId'],school['Id'],school_name)\r\n",
							"        school['_GraduationPlans'] = self.create_graduation_plans(school)\r\n",
							"        school['_StudentAssociations'] = self.create_student_school_associations(school)\r\n",
							"        school['_Staffs'] = self.create_staffs()\r\n",
							"        school['_StaffSchoolAssociations'] = self.create_staff_school_associations(school)\r\n",
							"        school['_Sessions'] = self.create_sessions(school)\r\n",
							"        school['_Sections'] = self.create_sections(school)\r\n",
							"        school['_StaffSectionAssociations'] = self.create_staff_section_associations(school)\r\n",
							"        school['_StudentSectionAssociations'] = self.create_student_section_associations(school)\r\n",
							"        return school\r\n",
							"\r\n",
							"    def create_students(self):\r\n",
							"        students = []\r\n",
							"        for _ in range(self.number_students_per_school):\r\n",
							"            gender = random.choice(GENDER)\r\n",
							"            fname = self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()\r\n",
							"            students.append({\r\n",
							"                'Id': self.faker.uuid4().replace('-',''),\r\n",
							"                'StudentUniqueId': self.faker.random_number(digits = self.unique_id_length),\r\n",
							"                \"BirthCity\": self.faker.city(),\r\n",
							"                \"BirthDate\": str(self.faker.date_between(start_date='-18y',end_date='-5y')),\r\n",
							"                \"BirthSexDescriptor\": self.get_descriptor_string('birthStateAbbreviationDescriptor', gender),\r\n",
							"                \"FirstName\": fname,\r\n",
							"                \"IdentificationDocuments\": [],\r\n",
							"                \"LastSurname\": self.faker.last_name(),\r\n",
							"                \"OtherNames\": [\r\n",
							"                    {\r\n",
							"                        \"OtherNameTypeDescriptor\": self.get_descriptor_string('otherNameTypeDescriptor','Nickname'),\r\n",
							"                        \"FirstName\": self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female(),\r\n",
							"                        \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms'\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"PersonalIdentificationDocuments\": [],\r\n",
							"                \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms',\r\n",
							"                \"Visas\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"        })\r\n",
							"        return students\r\n",
							"\r\n",
							"\r\n",
							"    def create_student_school_associations(self,school):\r\n",
							"        result = []\r\n",
							"        graduation_plan_ids = [gp['Id'] for gp in school['_GraduationPlans']]\r\n",
							"        for student in school['_Students']:\r\n",
							"            result.append({\r\n",
							"                'Id': self.faker.uuid4().replace('-',''),\r\n",
							"                \"GraduationPlanReference\": {\r\n",
							"                    \"EducationOrganizationId\": school['SchoolId'],\r\n",
							"                    \"GraduationPlanTypeDescriptor\": \"uri://ed-fi.org/GraduationPlanTypeDescriptor#Minimum\",\r\n",
							"                    \"GraduationSchoolYear\": self.school_year,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GraduationPlan\",\r\n",
							"                        \"href\": '/ed-fi/graduationPlans/{}'.format(random.choice(graduation_plan_ids))\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"SchoolReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": '/ed-fi/schools/{}'.format(school['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"StudentReference\": {\r\n",
							"                    \"StudentUniqueId\": student['StudentUniqueId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Student\",\r\n",
							"                        \"href\": \"/ed-fi/students/{}\".format(student['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"EntryDate\": str(self.faker.date_between(start_date='-5y',end_date='today')),\r\n",
							"                \"EntryGradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#{}\".format(random.choice(GRADE_LEVEL)),\r\n",
							"                \"AlternativeGraduationPlans\": [],\r\n",
							"                \"EducationPlans\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return result\r\n",
							"\r\n",
							"    def create_calendars(self,school):\r\n",
							"        return {\r\n",
							"            'Id': self.faker.uuid4().replace('-',''),\r\n",
							"            'CalendarCode':self.faker.random_number(digits = self.unique_id_length),\r\n",
							"            \"SchoolReference\": {\r\n",
							"                \"SchoolId\": school['SchoolId'],\r\n",
							"                \"Link\": {\r\n",
							"                    \"rel\": \"School\",\r\n",
							"                    \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SchoolYearTypeReference\": {\r\n",
							"                \"SchoolYear\": self.school_year,\r\n",
							"                \"Link\": {\r\n",
							"                    \"rel\": \"SchoolYearType\",\r\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            'CalendarTypeDescriptor': self.get_descriptor_string('calendarTypeDescriptor','Student Specific'),\r\n",
							"            'GradeLevel': []\r\n",
							"        }\r\n",
							"\r\n",
							"    def create_address(self):\r\n",
							"        address = []\r\n",
							"        state = self.faker.state_abbr()\r\n",
							"        for n in ['Physical', 'Mailing']:\r\n",
							"            address.append({\r\n",
							"                'AddressType':n,\r\n",
							"                'City':self.faker.city(),\r\n",
							"                'PostalCode':self.faker.postcode(),\r\n",
							"                'StateAbbreviation':state,\r\n",
							"                'StreetNumberName':self.faker.street_name()\r\n",
							"            })\r\n",
							"        return address\r\n",
							"\r\n",
							"    def create_courses(self,school_id,id,school_name):\r\n",
							"        courses = []\r\n",
							"        for subject,course_name in SUBJECT_NAMES:\r\n",
							"            courseCode = '{}-{}'.format(course_name[0:3].upper(),random.choice(range(1,5)))\r\n",
							"            courses.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"EducationOrganizationReference\": {\r\n",
							"                    \"EducationOrganizationId\": school_id,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(id)\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"CourseCode\": courseCode,\r\n",
							"                \"AcademicSubjectDescriptor\": self.get_descriptor_string('academicSubjectDescriptor', subject),\r\n",
							"                \"CourseDefinedByDescriptor\": self.get_descriptor_string('CourseDefinedByDescriptor','SEA'),\r\n",
							"                \"CourseDescription\": 'Description about {}'.format(course_name),\r\n",
							"                \"CourseGPAApplicabilityDescriptor\": self.get_descriptor_string('CourseGPAApplicabilityDescriptor',random.choice(['Applicable','Not Applicable'])),\r\n",
							"                \"CourseTitle\": course_name,\r\n",
							"                \"HighSchoolCourseRequirement\": random.choice(BOOLEAN),\r\n",
							"                \"NumberOfParts\": 1,\r\n",
							"                \"CompetencyLevels\": [],\r\n",
							"                \"IdentificationCodes\": [\r\n",
							"                    {\r\n",
							"                        \"CourseIdentificationSystemDescriptor\": self.get_descriptor_string('CourseIdentificationSystemDescriptor','LEA course code'),\r\n",
							"                        \"CourseCatalogURL\": \"http://www.{}.edu/coursecatalog\".format(school_name.lower().replace(' ','')),\r\n",
							"                        \"IdentificationCode\": courseCode\r\n",
							"                    },\r\n",
							"                    {\r\n",
							"                        \"CourseIdentificationSystemDescriptor\": self.get_descriptor_string('CourseIdentificationSystemDescriptor','State course code'),\r\n",
							"                        \"IdentificationCode\": self.faker.random_number(digits = self.unique_id_length)\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"LearningObjectives\": [],\r\n",
							"                \"LearningStandards\": [\r\n",
							"                    {\r\n",
							"                        \"LearningStandardReference\": {\r\n",
							"                            \"LearningStandardId\": self.faker.random_number(digits = self.unique_id_length),\r\n",
							"                            \"Link\": {\r\n",
							"                                \"rel\": \"LearningStandard\",\r\n",
							"                                \"href\": \"/ed-fi/learningStandards/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                            }\r\n",
							"                        }\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"LevelCharacteristics\": [\r\n",
							"                    {\r\n",
							"                        \"CourseLevelCharacteristicDescriptor\": self.get_descriptor_string('CourseLevelCharacteristicDescriptor','Core Subject')\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"OfferedGradeLevels\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return courses\r\n",
							"\r\n",
							"\r\n",
							"    def create_graduation_plans(self, school):\r\n",
							"        graduation_plans = []\r\n",
							"        for _ in range(self.graduation_plans_per_school):\r\n",
							"            graduation_plans.append({\r\n",
							"                'Id': self.faker.uuid4().replace('-',''),\r\n",
							"                \"EducationOrganizationReference\": {\r\n",
							"                    \"EducationOrganizationId\": school['SchoolId'],\r\n",
							"                    \"link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"GraduationSchoolYearTypeReference\": {\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"SchoolYearType\",\r\n",
							"                        \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"GraduationPlanTypeDescriptor\": self.get_descriptor_string('GraduationPlanTypeDescriptor', random.choice(['Minimum','Recommended'])),\r\n",
							"                \"TotalRequiredCredits\": random.choice(range(20,30)),\r\n",
							"                \"CreditsByCourses\": [],\r\n",
							"                \"CreditsByCreditCategories\": [\r\n",
							"                    {\r\n",
							"                        \"CreditCategoryDescriptor\": self.get_descriptor_string('CreditCategoryDescriptor','Honors'),\r\n",
							"                        \"Credits\": random.choice(range(5,15))\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"CreditsBySubjects\": [],\r\n",
							"                \"RequiredAssessments\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return graduation_plans\r\n",
							"\r\n",
							"    def create_school_years(self):\r\n",
							"        return {\r\n",
							"            'Id': self.faker.uuid4().replace('-',''),\r\n",
							"            'SchoolYear': self.school_year,\r\n",
							"            'CurrentSchoolYear': self.is_current_school_year,\r\n",
							"            'schoolYearDescription': 'Description about school year',\r\n",
							"            '_etag': self.faker.random_number(digits=10)\r\n",
							"        }\r\n",
							"\r\n",
							"    def create_telephones(self):\r\n",
							"        return [\r\n",
							"            {\r\n",
							"                'InstitutionTelephoneNumberTypeDescriptor': self.get_descriptor_string('InstitutionTelephoneNumberTypeDescriptor', _),\r\n",
							"                \"TelephoneNumber\": self.faker.phone_number()\r\n",
							"            }\r\n",
							"            for _ in ['Fax','Main']\r\n",
							"        ]\r\n",
							"\r\n",
							"    def create_staffs(self):\r\n",
							"        staffs = []\r\n",
							"        for _ in range(self.number_staffs_per_school):\r\n",
							"            gender = random.choice(GENDER)\r\n",
							"            fname = self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()\r\n",
							"            lname = self.faker.last_name()\r\n",
							"            staffs.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"StaffUniqueId\": self.faker.random_number(digits = self.unique_id_length),\r\n",
							"                \"BirthDate\": str(self.faker.date_between(start_date='-60y',end_date='-30y')),\r\n",
							"                \"FirstName\": fname,\r\n",
							"                \"HighestCompletedLevelOfEducationDescriptor\": self.get_descriptor_string('LevelOfEducationDescriptor', value = random.choice(LEVELS_OF_EDUCATION)),\r\n",
							"                \"HispanicLatinoEthnicity\": random.choice(BOOLEAN),\r\n",
							"                \"LastSurname\": lname,\r\n",
							"                \"LoginId\": '{}{}'.format(fname[0],lname.lower()),\r\n",
							"                \"PersonalTitlePrefix\": 'Mr' if gender == 'Male' else 'Ms',\r\n",
							"                \"SexDescriptor\": self.get_descriptor_string('SexDescriptor', value = gender),\r\n",
							"                \"YearsOfPriorProfessionalExperience\": random.choice(range(50)),\r\n",
							"                \"Addresses\": self.create_address(),\r\n",
							"                \"AncestryEthnicOrigins\": [],\r\n",
							"                \"Credentials\": [\r\n",
							"                    {\r\n",
							"                        \"CredentialReference\": {\r\n",
							"                            \"CredentialIdentifier\": self.faker.random_number(digits = 10),\r\n",
							"                            \"StateOfIssueStateAbbreviationDescriptor\": self.get_descriptor_string('StateAbbreviationDescriptor', 'TX'),\r\n",
							"                            \"Link\": {\r\n",
							"                                \"rel\": \"Credential\",\r\n",
							"                                \"href\": \"/ed-fi/credentials/\" + self.faker.uuid4().replace('-','')\r\n",
							"                            }\r\n",
							"                        }\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"ElectronicMails\": [\r\n",
							"                    {\r\n",
							"                        \"ElectronicMailAddress\": \"{}{}@edfi.org\".format(fname,lname),\r\n",
							"                        \"ElectronicMailTypeDescriptor\": self.get_descriptor_string('ElectronicMailTypeDescriptor','Work')\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"IdentificationCodes\": [\r\n",
							"                    {\r\n",
							"                        \"StaffIdentificationSystemDescriptor\": self.get_descriptor_string('StaffIdentificationSystemDescriptor','State'),\r\n",
							"                        \"IdentificationCode\": self.faker.random_number(digits = self.unique_id_length)\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"IdentificationDocuments\": [],\r\n",
							"                \"InternationalAddresses\": self.create_address(),\r\n",
							"                \"Languages\": [],\r\n",
							"                \"OtherNames\": [self.faker.first_name_male() if gender == 'Male' else self.faker.first_name_female()],\r\n",
							"                \"PersonalIdentificationDocuments\": [\r\n",
							"                    {\r\n",
							"                        \"IdentificationDocumentUseDescriptor\": \"uri://ed-fi.org/IdentificationDocumentUseDescriptor#Personal Information Verification\",\r\n",
							"                        \"PersonalInformationVerificationDescriptor\": self.get_descriptor_string('PersonalInformationVerificationDescriptor', value = random.choice(PERSONAL_INFORMATION_VERIFICATION_DESCRIPTIONS))\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"Races\": [\r\n",
							"                    {\r\n",
							"                        \"RaceDescriptor\": self.get_descriptor_string('RaceDescriptor', value = random.choice(RACES))\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return staffs\r\n",
							"\r\n",
							"    def create_sessions(self, school):\r\n",
							"\r\n",
							"        return [{\r\n",
							"            \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"            \"SchoolReference\":{\r\n",
							"                \"SchoolId\":school['SchoolId'],\r\n",
							"                \"Link\":{\r\n",
							"                    \"rel\":\"School\",\r\n",
							"                    \"href\":\"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SchoolYearTypeReference\": {\r\n",
							"                \"SchoolYear\": self.school_year,\r\n",
							"                \"Link\": {\r\n",
							"                    \"rel\": \"SchoolYearType\",\r\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SessionName\": \"{} - {} Fall Semester\".format(int(self.school_year) - 1, self.school_year ),\r\n",
							"            \"BeginDate\": \"{}-08-{}\".format(int(self.school_year) - 1, random.randint(1,30)),\r\n",
							"            \"EndDate\": \"{}-12-{}\".format(int(self.school_year) - 1, random.randint(1,30)),\r\n",
							"            \"TermDescriptor\": self.get_descriptor_string('TermDescriptor', 'Fall Semester'),\r\n",
							"            \"TotalInstructionalDays\": random.randint(60,130),\r\n",
							"            \"GradingPeriods\": [\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 1,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 2,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Third Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 3,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                }\r\n",
							"            ],\r\n",
							"            \"_etag\": self.faker.random_number(digits=10)\r\n",
							"        },\r\n",
							"        {\r\n",
							"            \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"            \"SchoolReference\":{\r\n",
							"                \"SchoolId\":school['SchoolId'],\r\n",
							"                \"Link\":{\r\n",
							"                    \"rel\":\"School\",\r\n",
							"                    \"href\":\"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SchoolYearTypeReference\": {\r\n",
							"                \"SchoolYear\": self.school_year,\r\n",
							"                \"Link\": {\r\n",
							"                    \"rel\": \"SchoolYearType\",\r\n",
							"                    \"href\": \"/ed-fi/schoolYearTypes/{}\".format(school['_SchoolYears']['Id'])\r\n",
							"                }\r\n",
							"            },\r\n",
							"            \"SessionName\": \"{} - {} Spring Semester\".format(int(self.school_year) - 1, self.school_year),\r\n",
							"            \"BeginDate\": \"{}-01-{}\".format(self.school_year, random.randint(1,30)),\r\n",
							"            \"EndDate\": \"{}-05-{}\".format(self.school_year, random.randint(1,30)),\r\n",
							"            \"TermDescriptor\": self.get_descriptor_string('TermDescriptor', 'Spring Semester'),\r\n",
							"            \"TotalInstructionalDays\": random.randint(60,130),\r\n",
							"            \"GradingPeriods\": [\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Fourth Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 4,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Fifth Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 5,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                {\r\n",
							"                    \"GradingPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"GradingPeriodDescriptor\": \"uri://ed-fi.org/GradingPeriodDescriptor#Sixth Six Weeks\",\r\n",
							"                    \"PeriodSequence\": 6,\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"GradingPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/gradingPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                }\r\n",
							"            ],\r\n",
							"            \"_etag\": self.faker.random_number(digits=10)\r\n",
							"        }]\r\n",
							"\r\n",
							"    def create_sections(self, school):\r\n",
							"        sections = []\r\n",
							"        for _ in range(self.number_sections_per_school):\r\n",
							"            semesterType = random.choice(['Spring', 'Fall'])\r\n",
							"            subjectName = random.choice(SUBJECT_NAMES)[1]\r\n",
							"            subjectNumber = random.randint(1,5)\r\n",
							"            sections.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"CourseOfferingReference\": {\r\n",
							"                    \"LocalCourseCode\": \"{}-{}\".format(subjectName[0:3].upper(), subjectNumber),\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"SessionName\": \"{} - {} {} Semester\".format(int(self.school_year) - 1, semesterType, self.school_year),\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"CourseOffering\",\r\n",
							"                        \"href\": \"/ed-fi/courseOfferings/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"LocationReference\": {\r\n",
							"                    \"ClassroomIdentificationCode\": self.faker.random_number(digits = 3),\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Location\",\r\n",
							"                        \"href\": \"/ed-fi/locations/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"LocationSchoolReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"SectionIdentifier\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"AvailableCredits\": random.randint(1,4),\r\n",
							"                \"EducationalEnvironmentDescriptor\": self.get_descriptor_string('EducationalEnvironmentDescriptor','Classroom'),\r\n",
							"                \"SectionName\": \"{} {}\".format(subjectName, subjectNumber),\r\n",
							"                \"SequenceOfCourse\": random.randint(1,5),\r\n",
							"                \"Characteristics\": [],\r\n",
							"                \"ClassPeriods\": [\r\n",
							"                {\r\n",
							"                    \"ClassPeriodReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"ClassPeriodName\": \"{} - Traditional\".format(random.randint(1,5)),\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"ClassPeriod\",\r\n",
							"                        \"href\": \"/ed-fi/classPeriods/{}\".format(self.faker.uuid4().replace('-',''))\r\n",
							"                    }\r\n",
							"                    }\r\n",
							"                }\r\n",
							"                ],\r\n",
							"                \"CourseLevelCharacteristics\": [],\r\n",
							"                \"OfferedGradeLevels\": [],\r\n",
							"                \"Programs\": [],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return sections\r\n",
							"\r\n",
							"    def create_student_section_associations(self, school):\r\n",
							"        student_section_associations = []\r\n",
							"        session = random.choice(school['_Sessions'])\r\n",
							"        for student in school['_Students']:\r\n",
							"            course = random.choice(school['_Courses'])\r\n",
							"            section = random.choice(school['_Sections'])\r\n",
							"            student_section_associations.append({\r\n",
							"                    \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                    \"SectionReference\": {\r\n",
							"                        \"LocalCourseCode\": course['CourseCode'],\r\n",
							"                        \"SchoolId\": school['SchoolId'],\r\n",
							"                        \"SchoolYear\": self.school_year,\r\n",
							"                        \"SectionIdentifier\": section['SectionIdentifier'],\r\n",
							"                        \"SessionName\": session['SessionName'],\r\n",
							"                        \"Link\": {\r\n",
							"                            \"rel\": \"Section\",\r\n",
							"                            \"href\": \"/ed-fi/sections/{}\".format(section['Id'])\r\n",
							"                        }\r\n",
							"                    },\r\n",
							"                    \"StudentReference\": {\r\n",
							"                        \"StudentUniqueId\": student['StudentUniqueId'],\r\n",
							"                        \"Link\": {\r\n",
							"                            \"rel\": \"Student\",\r\n",
							"                            \"href\": \"/ed-fi/students/{}\".format(student['Id'])\r\n",
							"                        }\r\n",
							"                    },\r\n",
							"                    \"BeginDate\": session['BeginDate'],\r\n",
							"                    \"EndDate\": session['EndDate'],\r\n",
							"                    \"HomeroomIndicator\": random.choice(BOOLEAN),\r\n",
							"                    \"_etag\": self.faker.random_number(digits = 10)\r\n",
							"                })\r\n",
							"        return student_section_associations\r\n",
							"\r\n",
							"    def create_staff_section_associations(self,school):\r\n",
							"        staff_section_associations = []\r\n",
							"        for staff in school['_Staffs']:\r\n",
							"            session = random.choice(school['_Sessions'])\r\n",
							"            section = random.choice(school['_Sections'])\r\n",
							"            staff_section_associations.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"SectionReference\": {\r\n",
							"                    \"LocalCourseCode\": section['CourseOfferingReference']['LocalCourseCode'],\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"SchoolYear\": self.school_year,\r\n",
							"                    \"SectionIdentifier\": section['SectionIdentifier'],\r\n",
							"                    \"SessionName\": session['SessionName'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Section\",\r\n",
							"                        \"href\": \"/ed-fi/sections/{}\".format(section['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"StaffReference\": {\r\n",
							"                    \"StaffUniqueId\": staff['StaffUniqueId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Staff\",\r\n",
							"                        \"href\": \"/ed-fi/staffs/{}\".format(staff['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"BeginDate\": session['BeginDate'],\r\n",
							"                \"ClassroomPositionDescriptor\": \"uri://ed-fi.org/ClassroomPositionDescriptor#Teacher of Record\",\r\n",
							"                \"EndDate\": session['EndDate'],\r\n",
							"                \"_etag\": self.faker.uuid4().replace('-','')\r\n",
							"            })\r\n",
							"        return staff_section_associations\r\n",
							"\r\n",
							"\r\n",
							"    def create_staff_school_associations(self, school):\r\n",
							"        staff_school_associations = []\r\n",
							"        for staff in school['_Staffs']:\r\n",
							"            staff_school_associations.append({\r\n",
							"                \"Id\": self.faker.uuid4().replace('-',''),\r\n",
							"                \"SchoolReference\": {\r\n",
							"                    \"SchoolId\": school['SchoolId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"School\",\r\n",
							"                        \"href\": \"/ed-fi/schools/{}\".format(school['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"StaffReference\": {\r\n",
							"                    \"StaffUniqueId\": staff['StaffUniqueId'],\r\n",
							"                    \"Link\": {\r\n",
							"                        \"rel\": \"Staff\",\r\n",
							"                        \"href\": \"/ed-fi/staffs/{}\".format(staff['Id'])\r\n",
							"                    }\r\n",
							"                },\r\n",
							"                \"ProgramAssignmentDescriptor\": self.get_descriptor_string('ProgramAssignmentDescriptor','Regular Education'),\r\n",
							"                \"AcademicSubjects\": [\r\n",
							"                    {\r\n",
							"                        \"AcademicSubjectDescriptor\": self.get_descriptor_string('AcademicSubjectDescriptor',random.choice(SUBJECT_NAMES)[0])\r\n",
							"                    }\r\n",
							"                ],\r\n",
							"                \"GradeLevels\": [\r\n",
							"                    {'GradeLevelDescriptor': self.get_descriptor_string('GradeLevelDescriptor',random.choice(GRADE_LEVEL))} for _ in range(4)\r\n",
							"            ],\r\n",
							"                \"_etag\": self.faker.random_number(digits=10)\r\n",
							"            })\r\n",
							"        return staff_school_associations\r\n",
							"\r\n",
							"    def format_edfi_data(self,data):\r\n",
							"        result = {\r\n",
							"            'Schools':[],\r\n",
							"            'Students':[],\r\n",
							"            'Calendars':[],\r\n",
							"            'Courses':[],\r\n",
							"            'StudentSchoolAssociations':[],\r\n",
							"            'Staffs':[],\r\n",
							"            'Sections': [],\r\n",
							"            'StaffSchoolAssociations':[],\r\n",
							"            'Sessions':[],\r\n",
							"            'StudentSectionAssociations':[],\r\n",
							"            'StaffSectionAssociations':[]\r\n",
							"\r\n",
							"        }\r\n",
							"        for school in data:\r\n",
							"            result['Schools'].append({key: school[key] for key in school if not (key.startswith('_')) })\r\n",
							"            result['Students'] += school['_Students']\r\n",
							"            result['Courses'] += school['_Courses']\r\n",
							"            result['StudentSchoolAssociations'] += school['_StudentAssociations']\r\n",
							"            result['Calendars'].append(school['_Calendars'])\r\n",
							"            result['Staffs'] += school['_Staffs']\r\n",
							"            result['Sections'] += school['_Sections']\r\n",
							"            result['StaffSchoolAssociations'] += school['_StaffSchoolAssociations']\r\n",
							"            result['Sessions'] += school['_Sessions']\r\n",
							"            result['StudentSectionAssociations'] += school['_StudentSectionAssociations']\r\n",
							"            result['StaffSectionAssociations'] += school['_StaffSectionAssociations']\r\n",
							"\r\n",
							"\r\n",
							"        return result\r\n"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Naplan_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f3d4a7be-e571-4289-b1da-2559bd37b5b9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Naplan(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='acer_test', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        self.schemas['student_acer'] = [['SKACERStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKACERStudent', 'string', 'no-op'],\r\n",
							"                                        ['SystemID', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentID', 'integer', 'no-op'],\r\n",
							"                                        ['FamilyName', 'string', 'no-op'],\r\n",
							"                                        ['GivenName', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'date', 'no-op'],\r\n",
							"                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['Username', 'string', 'no-op'],\r\n",
							"                                        ['Password', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']]                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_incremental_data(self.source_folder, 'dbo.vwDMACERStudent.parquet', self.schemas['student_acer'], 'Gender', 'SKACERStudent', 'parquet')\r\n",
							"\r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\r\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\r\n",
							"\r\n",
							"naplan = Naplan()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2001c038-dd0c-44ef-9df2-c26b2d5d880b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"\r\n",
							"# use as the source for ingested files to be moved into individual folders using DataCopy\r\n",
							"source_folder = ''\r\n",
							"\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /Acer_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Student_Attendance')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3bcc05de-863f-4a8d-b36d-2728ee076e68"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Attendance_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {}
				},
				"metadata": {
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"from delta.tables import DeltaTable\n",
							"from notebookutils import mssparkutils\n",
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, ArrayType, TimestampType, BooleanType, ShortType, DateType\n",
							"from pyspark.sql import functions as F\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.utils import AnalysisException\n",
							"import pandas as pd\n",
							"import sys\n",
							"import re\n",
							"import json\n",
							"import datetime\n",
							"import pytz\n",
							"import random\n",
							"import io\n",
							"import logging\n",
							"\n",
							"logger = logging.getLogger('OEA')\n",
							"\n",
							"class OEA:\n",
							"    def __init__(self, storage_account='', instrumentation_key=None, salt='', logging_level=logging.DEBUG):\n",
							"        if storage_account:\n",
							"            self.storage_account = storage_account\n",
							"        else:\n",
							"            oea_id = mssparkutils.env.getWorkspaceName()[8:] # extracts the OEA id for this OEA instance from the synapse workspace name (based on OEA naming convention)\n",
							"            self.storage_account = 'stoea' + oea_id # sets the name of the storage account based on OEA naming convention\n",
							"            self.keyvault = 'kv-oea-' + oea_id\n",
							"        self.keyvault_linked_service = 'LS_KeyVault_OEA'\n",
							"        self.serverless_sql_endpoint = mssparkutils.env.getWorkspaceName() + '-ondemand.sql.azuresynapse.net'\n",
							"        self._initialize_logger(instrumentation_key, logging_level)\n",
							"        self.salt = salt\n",
							"        self.timezone = 'EST'\n",
							"        self.stage1np = 'abfss://stage1np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage2np = 'abfss://stage2np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage2p = 'abfss://stage2p@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage3np = 'abfss://stage3np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage3p = 'abfss://stage3p@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.framework_path = 'abfss://oea-framework@' + self.storage_account + '.dfs.core.windows.net'\n",
							"\n",
							"        # Initialize framework db\n",
							"        spark.sql(f\"CREATE DATABASE IF NOT EXISTS oea\")\n",
							"        spark.sql(f\"CREATE TABLE IF NOT EXISTS oea.env (name string not null, value string not null, description string) USING DELTA LOCATION '{self.framework_path}/db/env'\")\n",
							"        df = spark.sql(\"select value from oea.env where name='storage_account'\")\n",
							"        if df.first(): spark.sql(f\"UPDATE oea.env set value='{self.storage_account}' where name='storage_account'\")\n",
							"        else: spark.sql(f\"INSERT INTO oea.env VALUES ('storage_account', '{self.storage_account}', 'The name of the data lake storage account for this OEA instance.')\")\n",
							"        spark.sql(f\"CREATE TABLE IF NOT EXISTS OEA.watermark (source string not null, entity string not null, watermark timestamp not null) USING DELTA LOCATION '{self.framework_path}/db/watermark'\")\n",
							"\n",
							"        logger.debug(\"OEA initialized.\")\n",
							"    \n",
							"    def path(self, container_name, directory_path=None):\n",
							"        if directory_path:\n",
							"            return f'abfss://{container_name}@{self.storage_account}.dfs.core.windows.net/{directory_path}'\n",
							"        else:\n",
							"            return f'abfss://{container_name}@{self.storage_account}.dfs.core.windows.net'\n",
							"\n",
							"    def convert_path(self, path):\n",
							"        \"\"\" Converts the given path into a valid url.\n",
							"            eg, convert_path('stage1np/contoso_sis/student/*') # returns abfss://stage1np@storageaccount.dfs.core.windows.net/contoso_sis/student/*\n",
							"        \"\"\"\n",
							"        path_args = path.split('/')\n",
							"        stage = path_args.pop(0)\n",
							"        return self.path(stage, '/'.join(path_args))            \n",
							"\n",
							"    def _initialize_logger(self, instrumentation_key, logging_level):\n",
							"        logging.lastResort = None\n",
							"        # the logger will print an error like \"ValueError: I/O operation on closed file\" because we're trying to have log messages also print to stdout\n",
							"        # and apparently this causes issues on some of the spark executor nodes. The bottom line is that we don't want these logging errors to get printed in the notebook output.\n",
							"        logging.raiseExceptions = False\n",
							"        logger.setLevel(logging_level)\n",
							"\n",
							"        handler = logging.StreamHandler(sys.stdout)\n",
							"        handler.setLevel(logging_level)\n",
							"        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
							"        handler.setFormatter(formatter)\n",
							"        logger.addHandler(handler)\n",
							"\n",
							"    def get_value_from_db(self, query):\n",
							"        df = spark.sql(query)\n",
							"        if df.first(): return df.first()[0]\n",
							"        else: return None\n",
							"\n",
							"    def get_last_watermark(self, source, entity):\n",
							"        return self.get_value_from_db(f\"select w.watermark from oea.watermark w where w.source='{source}' and w.entity='{entity}' order by w.watermark desc\")\n",
							"\n",
							"    def insert_watermark(self, source, entity, watermark_datetime):\n",
							"        spark.sql(f\"insert into oea.watermark values ('{source}', '{entity}', '{watermark_datetime}')\")\n",
							"\n",
							"    def get_secret(self, secret_name):\n",
							"        \"\"\" Retrieves the specified secret from the keyvault.\n",
							"            This method assumes that the keyvault linked service has been setup and is accessible.\n",
							"        \"\"\"\n",
							"        sc = SparkSession.builder.getOrCreate()\n",
							"        token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
							"        value = token_library.getSecret(self.keyvault, secret_name, self.keyvault_linked_service)        \n",
							"        return value\n",
							"\n",
							"    def delete(self, path):\n",
							"        oea.rm_if_exists(self.convert_path(path))\n",
							"\n",
							"    def land(self, data_source, entity, df, partition_label='', format_str='csv', header=True, mode='overwrite'):\n",
							"        \"\"\" Lands data in stage1np. If partition label is not provided, the current datetime is used with the label of 'batchdate'.\n",
							"            eg, land('contoso_isd', 'student', data, 'school_year=2021')\n",
							"        \"\"\"\n",
							"        tz = pytz.timezone(self.timezone)\n",
							"        datetime_str = datetime.datetime.now(tz).replace(microsecond=0).isoformat()\n",
							"        datetime_str = datetime_str.replace(':', '') # Path names can't have a colon - https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/site/markdown/filesystem/introduction.md#path-names\n",
							"        df.write.format(format_str).save(self.path('stage1np', f'{data_source}/{entity}/{partition_label}/batchdate={datetime_str}'), header=header, mode=mode)\n",
							"\n",
							"    def load(self, folder, table, stage=None, data_format='delta'):\n",
							"        \"\"\" Loads a dataframe based on the path specified in the given args \"\"\"\n",
							"        if stage is None: stage = self.stage2p\n",
							"        path = f\"{stage}/{folder}/{table}\"\n",
							"        try:\n",
							"            df = spark.read.load(f\"{stage}/{folder}/{table}\", format=data_format)\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(\"Failed to load. Are you sure you have the right path?\\nMore info below:\\n\" + str(e)) \n",
							"\n",
							"    def load_csv(self, path, header=True):\n",
							"        \"\"\" Loads a dataframe based on the path specified \n",
							"            eg, df = load_csv('stage1np/example/student/*')\n",
							"        \"\"\"\n",
							"        url_path = self.convert_path(path)\n",
							"        try:\n",
							"            df = spark.read.load(url_path, format='csv', header=header)\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(f\"Failed to load from: {url_path}. Are you sure you have the right path?\\nMore info below:\\n\" + str(e))\n",
							"\n",
							"    def load_delta(self, path):\n",
							"        \"\"\" Loads a dataframe based on the path specified \n",
							"            eg, df = load_delta('stage2np/example/student/*')\n",
							"        \"\"\"\n",
							"        url_path = self.convert_path(path)\n",
							"        try:\n",
							"            df = spark.read.load(url_path, format='delta')\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(f\"Failed to load from: {url_path}. Are you sure you have the right path?\\nMore info below:\\n\" + str(e))\n",
							"\n",
							"    def load_from_stage1(self, path_and_filename, data_format='csv', header=True):\n",
							"        \"\"\" Loads a dataframe with data from stage1, based on the path specified in the given args \"\"\"\n",
							"        path = f\"{self.stage1np}/{path_and_filename}\"\n",
							"        df = spark.read.load(path, format=data_format, header=header)\n",
							"        return df        \n",
							"\n",
							"    def load_sample_from_csv_file(self, path_and_filename, header=True, stage=None):\n",
							"        \"\"\" Loads a sample from the specified csv file and returns a pandas dataframe.\n",
							"            Ex: print(load_sample_from_csv_file('/student_data/students.csv'))\n",
							"        \"\"\"\n",
							"        if stage is None: stage = self.stage1np\n",
							"        csv_str = mssparkutils.fs.head(f\"{stage}/{path_and_filename}\") # https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python#preview-file-content\n",
							"        complete_lines = re.match(r\".*\\n\", csv_str, re.DOTALL).group(0)\n",
							"        if header: header = 0 # for info on why this is needed: https://pandas.pydata.org/pandas-docs/dev/reference/api/pandas.read_csv.html\n",
							"        else: header = None\n",
							"        pdf = pd.read_csv(io.StringIO(complete_lines), sep=',', header=header)\n",
							"        return pdf\n",
							"\n",
							"    def print_stage(self, path):\n",
							"        \"\"\" Prints out the highlevel contents of the specified stage.\"\"\"\n",
							"        msg = path + \"\\n\"\n",
							"        folders = self.get_folders(path)\n",
							"        for folder_name in folders:\n",
							"            entities = self.get_folders(path + '/' + folder_name)\n",
							"            msg += f\"{folder_name}: {entities}\\n\"\n",
							"        print(msg)            \n",
							"\n",
							"    def fix_column_names(self, df):\n",
							"        \"\"\" Fix column names to satisfy the Parquet naming requirements by substituting invalid characters with an underscore. \"\"\"\n",
							"        df_with_valid_column_names = df.select([F.col(col).alias(re.sub(\"[ ,;{}()\\n\\t=]+\", \"_\", col)) for col in df.columns])\n",
							"        return df_with_valid_column_names\n",
							"\n",
							"    def to_spark_schema(self, schema):#: list[list[str]]):\n",
							"        \"\"\" Creates a spark schema from a schema specified in the OEA schema format. \n",
							"            Example:\n",
							"            schemas['Person'] = [['Id','string','hash'],\n",
							"                                    ['CreateDate','timestamp','no-op'],\n",
							"                                    ['LastModifiedDate','timestamp','no-op']]\n",
							"            to_spark_schema(schemas['Person'])\n",
							"        \"\"\"\n",
							"        fields = []\n",
							"        for col_name, dtype, op in schema:\n",
							"            fields.append(StructField(col_name, globals()[dtype.lower().capitalize() + \"Type\"](), True))\n",
							"        spark_schema = StructType(fields)\n",
							"        return spark_schema\n",
							"\n",
							"    def ingest_incremental_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes incremental batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing incremental data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.readStream.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        #df = spark.read.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        #display(df)\n",
							"        #df = df.withColumn('batchdate', F.to_timestamp(df.batchdate, \"yyyy-MM-dd'T'HHmmssZ\"))\n",
							"        df = df.dropDuplicates([primary_key]) # drop duplicates across batches. More info: https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#streaming-deduplication\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:        \n",
							"            query = df_pseudo.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", source_path + '/_checkpoints/incremental_p').partitionBy(partition_by)\n",
							"            query = query.start(p_destination_path)\n",
							"            query.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"            logger.info(query.lastProgress)\n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            query2 = df_lookup.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", source_path + '/_checkpoints/incremental_np').partitionBy(partition_by)\n",
							"            query2 = query2.start(np_destination_path)\n",
							"            query2.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"            logger.info(query2.lastProgress)        \n",
							"\n",
							"    def _merge_into_table(self, df, destination_path, checkpoints_path, condition):\n",
							"        \"\"\" Merges data from the given dataframe into the delta table at the specified destination_path, based on the given condition.\n",
							"            If not delta table exists at the specified destination_path, a new delta table is created and the data from the given dataframe is inserted.\n",
							"            eg, merge_into_table(df_lookup, np_destination_path, source_path + '/_checkpoints/delta_np', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"        \"\"\"\n",
							"        if DeltaTable.isDeltaTable(spark, destination_path):      \n",
							"            dt = DeltaTable.forPath(spark, destination_path)\n",
							"            def upsert(batch_df, batchId):\n",
							"                dt.alias(\"current\").merge(batch_df.alias(\"updates\"), condition).whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()                \n",
							"            query = df.writeStream.format(\"delta\").foreachBatch(upsert).outputMode(\"update\").trigger(once=True).option(\"checkpointLocation\", checkpoints_path)\n",
							"        else:\n",
							"            logger.info(f'Delta table does not yet exist at {destination_path} - creating one now and inserting initial data.')\n",
							"            query = df.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", checkpoints_path)\n",
							"        query = query.start(destination_path)\n",
							"        query.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"        logger.info(query.lastProgress)    \n",
							"\n",
							"    def ingest_delta_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes delta batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing delta data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.readStream.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:\n",
							"            self._merge_into_table(df_pseudo, p_destination_path, source_path + '/_checkpoints/delta_p', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            self._merge_into_table(df_lookup, np_destination_path, source_path + '/_checkpoints/delta_np', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"\n",
							"    def ingest_snapshot_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes snapshot batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        latest_batch = self.get_latest_folder(source_path)\n",
							"        source_path = source_path + '/' + latest_batch\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing snapshot data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.read.load(source_path, format=data_format, header=header_flag, schema=spark_schema)\n",
							"        df = df.dropDuplicates([primary_key]) # More info: https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#streaming-deduplication\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:\n",
							"            df_pseudo.write.save(p_destination_path, format='delta', mode='overwrite', partitionBy=partition_by) \n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            df_lookup.write.save(np_destination_path, format='delta', mode='overwrite', partitionBy=partition_by) \n",
							"\n",
							"    def pseudonymize(self, df, schema): #: list[list[str]]):\n",
							"        \"\"\" Performs pseudonymization of the given dataframe based on the provided schema.\n",
							"            For example, if the given df is for an entity called person, \n",
							"            2 dataframes will be returned, one called person that has hashed ids and masked fields, \n",
							"            and one called person_lookup that contains the original person_id, person_id_pseudo,\n",
							"            and the non-masked values for columns marked to be masked.\"\"\"\n",
							"        \n",
							"        df_pseudo = df_lookup = df\n",
							"\n",
							"        for col_name, dtype, op in schema:\n",
							"            if op == \"hash-no-lookup\" or op == \"hnl\":\n",
							"                # This means that the lookup can be performed against a different table so no lookup is needed.\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256)).withColumnRenamed(col_name, col_name + \"_pseudonym\")\n",
							"                df_lookup = df_lookup.drop(col_name)           \n",
							"            elif op == \"hash\" or op == 'h':\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256)).withColumnRenamed(col_name, col_name + \"_pseudonym\")\n",
							"                df_lookup = df_lookup.withColumn(col_name + \"_pseudonym\", F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256))\n",
							"            elif op == \"mask\" or op == 'm':\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.lit('*'))\n",
							"            elif op == \"partition-by\":\n",
							"                pass # make no changes for this column so that it will be in both dataframes and can be used for partitioning\n",
							"            elif op == \"no-op\" or op == 'x':\n",
							"                df_lookup = df_lookup.drop(col_name)\n",
							"\n",
							"        df_pseudo = self.fix_column_names(df_pseudo)\n",
							"        df_lookup = self.fix_column_names(df_lookup)\n",
							"\n",
							"        return (df_pseudo, df_lookup)\n",
							"\n",
							"    # Returns true if the path exists\n",
							"    def path_exists(self, path):\n",
							"        tableExists = False\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            tableExists = True\n",
							"        except Exception as e:\n",
							"            # This Exception comes as a generic Py4JJavaError that occurs when the path specified is not found.\n",
							"            pass\n",
							"        return tableExists\n",
							"\n",
							"    def ls(self, path):\n",
							"        if not path.startswith(\"abfss:\"):\n",
							"            path = self.convert_path(path)\n",
							"        folders = []\n",
							"        files = []\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            for item in items:\n",
							"                if item.isFile:\n",
							"                    files.append(item.name)\n",
							"                elif item.isDir:\n",
							"                    folders.append(item.name)\n",
							"        except Exception as e:\n",
							"            logger.warning(\"[OEA] Could not peform ls on specified path: \" + path + \"\\nThis may be because the path does not exist.\")\n",
							"        return (folders, files)\n",
							"\n",
							"    def print_stage(self, path):\n",
							"        print(path)\n",
							"        folders = self.get_folders(path)\n",
							"        for folder_name in folders:\n",
							"            entities = self.get_folders(path + '/' + folder_name)\n",
							"            print(f\"{folder_name}: {entities}\")\n",
							"\n",
							"    # Return the list of folders found in the given path.\n",
							"    def get_folders(self, path):\n",
							"        dirs = []\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            for item in items:\n",
							"                #print(item.name, item.isDir, item.isFile, item.path, item.size)\n",
							"                if item.isDir:\n",
							"                    dirs.append(item.name)\n",
							"        except Exception as e:\n",
							"            logger.warning(\"[OEA] Could not get list of folders in specified path: \" + path + \"\\nThis may be because the path does not exist.\")\n",
							"        return dirs\n",
							"\n",
							"    def get_latest_folder(self, path):\n",
							"        folders = self.get_folders(path)\n",
							"        if len(folders) > 0: return folders[-1]\n",
							"        else: return None\n",
							"\n",
							"    # Remove a folder if it exists (defaults to use of recursive removal).\n",
							"    def rm_if_exists(self, path, recursive_remove=True):\n",
							"        try:\n",
							"            mssparkutils.fs.rm(path, recursive_remove)\n",
							"        except Exception as e:\n",
							"            pass\n",
							"\n",
							"    def pop_from_path(self, path):\n",
							"        \"\"\" Pops the last arg in a path and returns the path and the last arg as a tuple.\n",
							"            pop_from_path('abfss://stage2@xyz.dfs.core.windows.net/ms_insights/test.csv') # returns ('abfss://stage2@xyz.dfs.core.windows.net/ms_insights', 'test.csv')\n",
							"        \"\"\"\n",
							"        m = re.match(r\"(.*)\\/([^/]+)\", path)\n",
							"        return (m.group(1), m.group(2))\n",
							"\n",
							"    def parse_source_path(self, path):\n",
							"        \"\"\" Parses a path that looks like this: abfss://stage2p@stoeacisd3ggimpl3.dfs.core.windows.net/ms_insights\n",
							"            and returns a dictionary like this: {'stage_num': '2', 'ss': 'ms_insights'}\n",
							"            Note that it will also return a 'stage_num' of 2 if the path is stage2p or stage2np - this is by design because the spark db with the s2 prefix will be used for data in stage2 and stage2p.\n",
							"        \"\"\"\n",
							"        m = re.match(r\".*:\\/\\/stage(?P<stage_num>\\d+)[n]?[p]?@[^/]+\\/(?P<ss>[^/]+)\", path)\n",
							"        return m.groupdict()\n",
							"    \n",
							"    def create_lake_db(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Creates a spark db that points to data in the given stage under the specified source directory (assumes that every folder in the source_dir is a table).\n",
							"            Example: create_lake_db(2, 'contoso_sis')\n",
							"            Note that a spark db that points to source data in the delta format can't be queried via SQL serverless pool. More info here: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql/resources-self-help-sql-on-demand#delta-lake\n",
							"        \"\"\"\n",
							"        db_name = f's{stage_num}_{source_dir}'\n",
							"        spark.sql(f'CREATE DATABASE IF NOT EXISTS {db_name}')\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}np', source_dir), source_format)\n",
							"        result = \"Database created: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result        \n",
							"\n",
							"    def create_lake_views(self, db_name, source_path, source_format):\n",
							"        dirs = self.get_folders(source_path)\n",
							"        for table_name in dirs:\n",
							"            spark.sql(f\"create table if not exists {db_name}.{table_name} using {source_format} location '{source_path}/{table_name}'\")\n",
							"\n",
							"    def drop_lake_db(self, db_name):\n",
							"        spark.sql(f'DROP DATABASE IF EXISTS {db_name} CASCADE')\n",
							"        result = \"Database dropped: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result       \n",
							"\n",
							"    def create_sql_db(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Prints out the sql script needed for creating a sql serverless db and set of views. \"\"\"\n",
							"        db_name = f'sqls{stage_num}_{source_dir}'\n",
							"        cmd += '-- Create a new sql script then execute the following in it:'\n",
							"        cmd += f\"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '{db_name}')\\nBEGIN\\n  CREATE DATABASE {db_name};\\nEND;\\nGO\\n\"\n",
							"        cmd += f\"USE {db_name};\\nGO\\n\\n\"\n",
							"        cmd += self.create_sql_views(self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        cmd += self.create_sql_views(self.path(f'stage{stage_num}np', source_dir), source_format)\n",
							"        print(cmd)\n",
							"\n",
							"    def create_sql_views(self, source_path, source_format):\n",
							"        cmd = ''      \n",
							"        dirs = self.get_folders(source_path)\n",
							"        for table_name in dirs:\n",
							"            cmd += f\"CREATE OR ALTER VIEW {table_name} AS\\n  SELECT * FROM OPENROWSET(BULK '{source_path}/{table_name}', FORMAT='{source_format}') AS [r];\\nGO\\n\"\n",
							"        return cmd\n",
							"\n",
							"    def drop_sql_db(self, db_name):\n",
							"        print('Click on the menu next to the SQL db and select \"Delete\"')\n",
							"\n",
							"    # List installed packages\n",
							"    def list_packages(self):\n",
							"        import pkg_resources\n",
							"        for d in pkg_resources.working_set:\n",
							"            print(d)\n",
							"\n",
							"    def print_schema_starter(self, entity_name, df):\n",
							"        \"\"\" Prints a starter schema that can be modified as needed when developing the oea schema for a new module. \"\"\"\n",
							"        st = f\"self.schemas['{entity_name}'] = [\"\n",
							"        for col in df.schema:\n",
							"            st += f\"['{col.name}', '{str(col.dataType)[:-4].lower()}', 'no-op'],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\"\n",
							"        return st[:-11] + ']'\n",
							"\n",
							"    def write_rows_as_csv(data, folder, filename, container=None):\n",
							"        \"\"\" Writes a dictionary as a csv to the specified location. This is helpful when creating test data sets and landing them in stage1np.\n",
							"            data = [{'id':'1','fname':'John'}, {'id':'1','fname':'Jane'}]\n",
							"        \"\"\"\n",
							"        if container == None: container = self.stage1np\n",
							"        pdf = pd.DataFrame(data)\n",
							"        mssparkutils.fs.put(f\"{container}/{folder}/{filename}\", pdf.to_csv(index=False), True) # True indicates overwrite mode  \n",
							"\n",
							"    def write_rowset_as_csv(data, folder, container=None):\n",
							"        \"\"\" Writes out as csv rows the passed in data. The inbound data should be in a format like this:\n",
							"            data = { 'students':[{'id':'1','fname':'John'}], 'courses':[{'id':'31', 'name':'Math'}] }\n",
							"        \"\"\"\n",
							"        if container == None: container = self.stage1np\n",
							"        for entity_name, value in data.items():\n",
							"            pdf = pd.DataFrame(value)\n",
							"            mssparkutils.fs.put(f\"{container}/{folder}/{entity_name}.csv\", pdf.to_csv(index=False), True) # True indicates overwrite mode         \n",
							"\n",
							"    def create_empty_dataframe(self, schema):\n",
							"        \"\"\" Creates an empty dataframe based on the given schema which is specified as an array of column names and sql types.\n",
							"            eg, schema = [['data_source','string'], ['entity','string'], ['watermark','timestamp']]\n",
							"        \"\"\"\n",
							"        fields = []\n",
							"        for col_name, col_type in schema:\n",
							"            fields.append(StructField(col_name, globals()[col_type.lower().capitalize() + \"Type\"](), True))\n",
							"        spark_schema = StructType(fields)\n",
							"        df = spark.createDataFrame(spark.sparkContext.emptyRDD(), spark_schema)\n",
							"        return df\n",
							"\n",
							"    def delete_data_source(self, data_source):\n",
							"        self.rm_if_exists(self.convert_path(f'stage1np/{data_source}'))\n",
							"        self.rm_if_exists(self.convert_path(f'stage2np/{data_source}'))\n",
							"        self.rm_if_exists(self.convert_path(f'stage2p/{data_source}'))\n",
							"\n",
							"class BaseOEAModule:\n",
							"    \"\"\" Provides data processing methods for Contoso SIS data (the student information system for the fictional Contoso school district).  \"\"\"\n",
							"    def __init__(self, source_folder, pseudonymize = True):\n",
							"        self.source_folder = source_folder\n",
							"        self.pseudonymize = pseudonymize\n",
							"        self.stage1np = f\"{oea.stage1np}/{source_folder}\"\n",
							"        self.stage2np = f\"{oea.stage2np}/{source_folder}\"\n",
							"        self.stage2p = f\"{oea.stage2p}/{source_folder}\"\n",
							"        self.stage3np = f\"{oea.stage3np}/{source_folder}\"\n",
							"        self.stage3p = f\"{oea.stage3p}/{source_folder}\"\n",
							"        self.module_path = f\"{oea.framework_path}/modules/{source_folder}\"\n",
							"        self.schemas = {}\n",
							"\n",
							"    def _process_entity_from_stage1(self, path, entity_name, format='csv', write_mode='overwrite', header='true'):\n",
							"        spark_schema = oea.to_spark_schema(self.schemas[entity_name])\n",
							"        df = spark.read.format(format).load(f\"{self.stage1np}/{path}/{entity_name}\", header=header, schema=spark_schema)\n",
							"\n",
							"        if self.pseudonymize:\n",
							"            df_pseudo, df_lookup = oea.pseudonymize(df, self.schemas[entity_name])\n",
							"            df_pseudo.write.format('delta').mode(write_mode).save(f\"{self.stage2p}/{entity_name}\")\n",
							"            if len(df_lookup.columns) > 0:\n",
							"                df_lookup.write.format('delta').mode(write_mode).save(f\"{self.stage2np}/{entity_name}_lookup\")\n",
							"        else:\n",
							"            df = oea.fix_column_names(df)   \n",
							"            df.write.format('delta').mode(write_mode).save(f\"{self.stage2np}/{entity_name}\")\n",
							"\n",
							"    def delete_stage1(self):\n",
							"        oea.rm_if_exists(self.stage1np)\n",
							"\n",
							"    def delete_stage2(self):\n",
							"        oea.rm_if_exists(self.stage2np)\n",
							"        oea.rm_if_exists(self.stage2p)\n",
							"\n",
							"    def delete_stage3(self):\n",
							"        oea.rm_if_exists(self.stage3np)\n",
							"        oea.rm_if_exists(self.stage3p)                \n",
							"\n",
							"    def delete_all_stages(self):\n",
							"        self.delete_stage1()\n",
							"        self.delete_stage2()\n",
							"        self.delete_stage3()\n",
							"\n",
							"    def create_stage2_lake_db(self, format='DELTA'):\n",
							"        oea.create_lake_db(self.stage2p, format)\n",
							"        oea.create_lake_db(self.stage2np, format)\n",
							"\n",
							"    def create_stage3_lake_db(self, format='DELTA'):\n",
							"        oea.create_lake_db(self.stage3p, format)\n",
							"        oea.create_lake_db(self.stage3np, format)\n",
							"\n",
							"    def copy_test_data_to_stage1(self):\n",
							"        mssparkutils.fs.cp(self.module_path + '/test_data', self.stage1np, True)   \n",
							"\n",
							"class DataLakeWriter:\n",
							"    def __init__(self, root_destination):\n",
							"        self.root_destination = root_destination\n",
							"\n",
							"    def write(self, path_and_filename, data_str, format='csv'):\n",
							"        mssparkutils.fs.append(f\"{self.root_destination}/{path_and_filename}\", data_str, True) # Set the last parameter as True to create the file if it does not exist\n",
							"\n",
							"oea = OEA()"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Student_profile_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "db1259bb-a640-4a40-8d28-f580ea44709e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Student_profile(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='student', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMDetailedStudentPreSubmission'] = [\r\n",
							"                                        ['SKDetailedStudentPreSubmission', 'integer', 'no-op'],\r\n",
							"                                        ['BKDetailedStudentPreSubmission', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CensusYear', 'integer', 'no-op'],\r\n",
							"                                        ['CensusPeriod', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseIdentifierStudentId', 'string', 'no-op'],\r\n",
							"                                        ['OfficialFirstName', 'string', 'hash'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'hash'],\r\n",
							"                                        ['OfficialLastName', 'string', 'hash'],\r\n",
							"                                        ['PreferredLastName', 'string', 'hash'],\r\n",
							"                                        ['MiddleName', 'string', 'hash'],\r\n",
							"                                        ['YearLevel', 'string', 'no-op'],\r\n",
							"                                        ['RollClass', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'date', 'hash'],\r\n",
							"                                        ['GenderSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEFlag', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['ReceivesESL', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['NationalitySourceValue', 'string', 'no-op'],\r\n",
							"                                        ['NationalitySIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['NationalitySIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResidentIndicator', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResidentStatus', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'date', 'no-op'],\r\n",
							"                                        ['VisaSubClassNumber', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalent', 'double', 'no-op'],\r\n",
							"                                        ['BoardingFlag', 'string', 'no-op'],\r\n",
							"                                        ['OverseasStudentFlag', 'string', 'no-op'],\r\n",
							"                                        ['ReligionSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['ReligionSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionCategory', 'string', 'no-op'],\r\n",
							"                                        ['PreviousSchoolName', 'string', 'no-op'],\r\n",
							"                                        ['PreviousSchoolAGEID', 'integer', 'no-op'],\r\n",
							"                                        ['DateEnrolled', 'date', 'no-op'],\r\n",
							"                                        ['Guardian1FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1SchoolEducationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1SchoolEducationSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2SchoolEducationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2SchoolEducationSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['SWDSourceValueFlag', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentStatus', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentStatusSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['StudentStatus', 'string', 'no-op'],\r\n",
							"                                        ['DateLeft', 'date', 'no-op'],\r\n",
							"                                        ['CreatedDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['CompassProfileURL', 'string', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANSchoolName', 'string', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANSchoolACARAId', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANYear', 'integer', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressState', 'string', 'no-op'],\r\n",
							"                                        ['StudentPostCode', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressState', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Postcode', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressState', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Postcode', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactPersonMilestone'] = [\r\n",
							"                                        ['SKPersonMilestone', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersonType', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentID', 'integer', 'no-op'],\r\n",
							"                                        ['SKMilestoneStartDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKMilestoneEndDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKHouseGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetail', 'integer', 'no-op'],\r\n",
							"                                        ['SKStaffOrganisationDetail', 'integer', 'no-op'],\r\n",
							"                                        ['PersonHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['FTETimeAllocation', 'double', 'no-op'],\r\n",
							"                                        ['PartTime', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTE', 'integer', 'no-op'],\r\n",
							"                                        ['ESL', 'integer', 'no-op'],\r\n",
							"                                        ['EALD', 'integer', 'no-op'],\r\n",
							"                                        ['ExternalStudent', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'integer', 'no-op'],\r\n",
							"                                        ['Boarder', 'integer', 'no-op'],\r\n",
							"                                        ['IsActiveMilestone', 'integer', 'no-op'],\r\n",
							"                                        ['IsCurrentMilestone', 'integer', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"        self.schemas['DMFactStudent'] = [\r\n",
							"                                        ['FullTimeStudentSummaryId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCensusYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKAge', 'integer', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['Count', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SKCensusGroupingId', 'integer', 'no-op'],\r\n",
							"                                        ['FTE', 'double', 'no-op'],\r\n",
							"                                        ['SKAttendanceStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SWDCount', 'integer', 'no-op'],\r\n",
							"                                        ['ESLCOUNT', 'integer', 'no-op'],\r\n",
							"                                        ['BoarderCount', 'integer', 'no-op'],\r\n",
							"                                        ['OverseasStudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['DistanceEducationCount', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousDistanceEducationCount', 'integer', 'no-op'],\r\n",
							"                                        ['StudentOnVisaCount', 'integer', 'no-op'],\r\n",
							"                                        ['StudentOnBridgeVisaCount', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousBoardersCount', 'integer', 'no-op'],\r\n",
							"                                        ['SWDDistanceEdCount', 'integer', 'no-op'],\r\n",
							"                                        ['NotStatedIndigenousPrimaryCount', 'integer', 'no-op'],\r\n",
							"                                        ['NotStatedIndigenousSecondaryCount', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTECount', 'integer', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentEnrolment'] = [\r\n",
							"                                        ['UIDEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentSubmitted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentStarted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentEnded', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'integer', 'no-op'],\r\n",
							"                                        ['EslYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['LboteYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['SwdYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentFTE', 'double', 'no-op'],\r\n",
							"                                        ['SKMainCampus', 'integer', 'no-op']\r\n",
							"                                        ]\r\n",
							"        self.schemas['DMPersonDemographic'] = [\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['BKPerson', 'string', 'no-op'],\r\n",
							"                                        ['PersonType', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Title', 'string', 'hash'],\r\n",
							"                                        ['FirstName', 'string', 'hash'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'hash'],\r\n",
							"                                        ['LastName', 'string', 'hash'],\r\n",
							"                                        ['PreferredLastName', 'string', 'hash'],\r\n",
							"                                        ['MiddleName', 'string', 'hash'],\r\n",
							"                                        ['SecondMiddleName', 'string', 'hash'],\r\n",
							"                                        ['EmailAddress', 'string', 'hash'],\r\n",
							"                                        ['UsualTransport', 'string', 'no-op'],\r\n",
							"                                        ['HomePhoneNumber', 'string', 'hash'],\r\n",
							"                                        ['MobileNumber', 'string', 'hash'],\r\n",
							"                                        ['DateOfDeath', 'string', 'hash'],\r\n",
							"                                        ['DateOfBirth', 'string', 'hash'],\r\n",
							"                                        ['RecievesESL', 'integer', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTE', 'integer', 'no-op'],\r\n",
							"                                        ['InterpreterRequired', 'integer', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['ATSIId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountryDesc', 'string', 'no-op'],\r\n",
							"                                        ['NationalityId', 'integer', 'no-op'],\r\n",
							"                                        ['NationalityDesc', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassName', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryDate', 'string', 'no-op'],\r\n",
							"                                        ['YouthAllowance', 'integer', 'no-op'],\r\n",
							"                                        ['GovernmentFunded', 'integer', 'no-op'],\r\n",
							"                                        ['GovCode2', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityFunded', 'integer', 'no-op'],\r\n",
							"                                        ['LivingArrangements', 'string', 'no-op'],\r\n",
							"                                        ['ResidentialStatus', 'string', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'integer', 'no-op'],\r\n",
							"                                        ['AmbulanceSubscriber', 'integer', 'no-op'],\r\n",
							"                                        ['UserName', 'string', 'no-op'],\r\n",
							"                                        ['Occupation', 'string', 'no-op'],\r\n",
							"                                        ['OccupationGroup', 'string', 'no-op'],\r\n",
							"                                        ['Employer', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesBH', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesAH', 'string', 'no-op'],\r\n",
							"                                        ['EarliestMilestoneDate', 'string', 'no-op'],\r\n",
							"                                        ['Contactable', 'integer', 'no-op'],\r\n",
							"                                        ['EmailAllowed', 'integer', 'no-op'],\r\n",
							"                                        ['SMSAllowed', 'integer', 'no-op'],\r\n",
							"                                        ['PublishPhotoToMedia', 'integer', 'no-op'],\r\n",
							"                                        ['PublishPhotoToInternal', 'integer', 'no-op'],\r\n",
							"                                        ['AuthenticationMode', 'string', 'no-op'],\r\n",
							"                                        ['FeeMode', 'string', 'no-op'],\r\n",
							"                                        ['ImportMode', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['RequiresESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityFundedInt', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE_YN', 'string', 'no-op'],\r\n",
							"                                        ['Disability_YN', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded_YN', 'string', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['CommunicationPreference', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op'],\r\n",
							"                                        ['ProgramCode', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligiousOrLay', 'string', 'no-op'],\r\n",
							"                                        ['Parish', 'string', 'no-op'],\r\n",
							"                                        ['ImmunisationRecordSighted', 'integer', 'no-op'],\r\n",
							"                                        ['HomeTown', 'string', 'no-op'],\r\n",
							"                                        ['HeadLiceCheckAllowed', 'integer', 'no-op'],\r\n",
							"                                        ['TownOfBirth', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"        \r\n",
							"\r\n",
							"        self.schemas['DMStudent'] = [\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['BKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseName', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassId', 'integer', 'hash'],   ## HASH\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['VisaIdentificationNumber', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['VisaExpiryData', 'date', 'hash'],   ## HASH\r\n",
							"                                        ['VisaEndDate', 'date', 'hash'],   ## HASH\r\n",
							"                                        ['CitizenshipResidencyStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['CitizenshipResidencyStatusDesc', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'integer', 'no-op'],\r\n",
							"                                        ['SingleNameOnly', 'integer', 'hash'],   ## HASH\r\n",
							"                                        ['OfficialFirstName', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['PreferredFirstName', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['OfficialSurname', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['PreferredSurname', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['DOB', 'date', 'hash'], ## HASH\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['RollGroup', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'integer', 'no-op'],\r\n",
							"                                        ['ESLYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['EslLanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['ESLLanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['SWDYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['SwdId', 'integer', 'no-op'],\r\n",
							"                                        ['SwdSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressStreet', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentAddressPostCode', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['BKStudentAddressState', 'integer', 'hash'],   ## HASH\r\n",
							"                                        ['StudentAddressState', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentAddressGeoData', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLongitude', 'double', 'no-op'], #changed 'decimal' to 'double' (float doesn't work)\r\n",
							"                                        ['StudentAddressLatitude', 'double', 'no-op'], #changed 'decimal' to 'double' (float doesn't work)\r\n",
							"                                        ['HomePhone', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['HomeEmail', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentMobile', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentEmail', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1FirstName', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1Surname', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1Phone', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1Mobile', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1Email', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2Surname', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2Phone', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2Mobile', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2Email', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BaptismDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstReconciliationDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstEucharistDate', 'date', 'no-op'],\r\n",
							"                                        ['ConfirmationDate', 'date', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'timestamp', 'no-op'], #changed 'string' to 'timestamp'\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['MainCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op']\r\n",
							"                                        ]    \r\n",
							"\r\n",
							"        self.schemas['DMStudentOrganisationDetails'] = [\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentOrganisationDetails', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserEmail', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'integer', 'no-op'],\r\n",
							"                                        ['DateAppliedFor', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentConditions', 'string', 'no-op'],\r\n",
							"                                        ['TransportDetails', 'string', 'no-op'],\r\n",
							"                                        ['IntendedFutureSchool', 'string', 'no-op'],\r\n",
							"                                        ['LockerDetails', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['Status', 'string', 'no-op'],\r\n",
							"                                        ['GetPersonPhotoURL', 'string', 'no-op'],\r\n",
							"                                        ['BoarderType', 'string', 'no-op'],\r\n",
							"                                        ['CensusStartDate', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentCompassURL', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentWithdrawalReason', 'string', 'no-op'],\r\n",
							"                                        ['ExternalScholarship', 'string', 'no-op'],\r\n",
							"                                        ['DateNotifiedOfLeaving', 'string', 'no-op']\r\n",
							"                                    ]  \r\n",
							"\r\n",
							"        self.schemas['DMStudentSchoolHistory'] = [ \r\n",
							"                                        ['SKStudentSchoolHistory', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentSchoolHistory', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['SchoolStartDate', 'datetime', 'no-op'],\r\n",
							"                                        ['SchoolEndDate', 'datetime', 'no-op'],\r\n",
							"                                        ['YearLevelFinish', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                    ] \r\n",
							"\r\n",
							"        self.schemas['DMStudentType'] = [ \r\n",
							"                                        ['SKStudentType', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentType', 'string', 'no-op'],\r\n",
							"                                        ['StudentType', 'string', 'no-op'],\r\n",
							"                                        ['StudentStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']\r\n",
							"                                    ]   \r\n",
							"                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMDetailedStudentPreSubmission'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMFactPersonMilestone'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMFactStudent'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMFactStudentEnrolment'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMPersonDemographic'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMStudent'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMStudentOrganisationDetails'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMStudentSchoolHistory'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'student', self.schemas['DMStudentType'], '<partition>', '<key>')\r\n",
							"\r\n",
							"\r\n",
							"        \r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student_test_file', self.schemas['student_test'], 'LastUpdateDate', 'SKStudent') # try to partition by LastUpdateDate instead of CreateDate\r\n",
							"\r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\r\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\r\n",
							"\r\n",
							"student_profile = Student_profile()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ZZZ_OEA_connector_Test')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "12b2ec94-7227-497c-85ed-41508d000b19"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Student_py_test"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ZZZ_Student_py_test')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e6264011-4ee6-41bc-9585-2d5e58c6b294"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Student_test(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='students', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        self.schemas['student_test'] = [\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['BKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseName', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassId', 'integer', 'hash'],   ## HASH\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['VisaIdentificationNumber', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['VisaExpiryData', 'date', 'hash'],   ## HASH\r\n",
							"                                        ['VisaEndDate', 'date', 'hash'],   ## HASH\r\n",
							"                                        ['CitizenshipResidencyStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['CitizenshipResidencyStatusDesc', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'integer', 'no-op'],\r\n",
							"                                        ['SingleNameOnly', 'integer', 'hash'],   ## HASH\r\n",
							"                                        ['OfficialFirstName', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['PreferredFirstName', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['OfficialSurname', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['PreferredSurname', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['DOB', 'date', 'hash'], ## HASH\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['RollGroup', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'integer', 'no-op'],\r\n",
							"                                        ['ESLYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['EslLanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['ESLLanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['SWDYesNo', 'integer', 'no-op'],\r\n",
							"                                        ['SwdId', 'integer', 'no-op'],\r\n",
							"                                        ['SwdSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressStreet', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentAddressPostCode', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['BKStudentAddressState', 'integer', 'hash'],   ## HASH\r\n",
							"                                        ['StudentAddressState', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentAddressGeoData', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLongitude', 'double', 'no-op'], #changed 'decimal' to 'double' (float doesn't work)\r\n",
							"                                        ['StudentAddressLatitude', 'double', 'no-op'], #changed 'decimal' to 'double' (float doesn't work)\r\n",
							"                                        ['HomePhone', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['HomeEmail', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentMobile', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['StudentEmail', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1FirstName', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1Surname', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1Phone', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1Mobile', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1Email', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian1OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2Surname', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2Phone', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2Mobile', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2Email', 'string', 'hash'],   ## HASH\r\n",
							"                                        ['Guardian2OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BaptismDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstReconciliationDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstEucharistDate', 'date', 'no-op'],\r\n",
							"                                        ['ConfirmationDate', 'date', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'timestamp', 'no-op'], #changed 'string' to 'timestamp'\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['MainCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op']\r\n",
							"                                        ]                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_incremental_data(self.source_folder, 'student_test_file', self.schemas['student_test'], 'LastUpdateDate', 'SKStudent') # try to partition by LastUpdateDate instead of CreateDate\r\n",
							"\r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\r\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\r\n",
							"\r\n",
							"student_test = Student_test()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ZZZ_Testing_Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1f5c8798-7cd4-47f5-892b-18df2697c142"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark3p1sm')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 8,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiasoutheast"
		}
	]
}