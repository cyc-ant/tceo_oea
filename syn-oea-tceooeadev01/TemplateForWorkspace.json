{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "syn-oea-tceooeadev01"
		},
		"AFS_SchoolList_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AFS_SchoolList'"
		},
		"AFS_SeniorData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AFS_SeniorData'"
		},
		"AFS_TCEO_OEAFSDATA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AFS_TCEO_OEAFSDATA'"
		},
		"AFS_TCEO_OEAFileshare_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AFS_TCEO_OEAFileshare'"
		},
		"AzureFileStorage_AEData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureFileStorage_AEData'"
		},
		"AzureFileStorage_GeneralData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureFileStorage_GeneralData'"
		},
		"AzureFileStorage_SchoolList_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureFileStorage_SchoolList'"
		},
		"AzureFileStorage_SupportingData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureFileStorage_SupportingData'"
		},
		"LS_Azure_SQL_DB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Azure_SQL_DB'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().dbServer};Initial Catalog=@{linkedService().dbName};User ID=@{linkedService().userName}"
		},
		"LS_SQL_Serverless_OEA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_Serverless_OEA'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=syn-oea-tceooeadev01-ondemand.sql.azuresynapse.net;Initial Catalog=@{linkedService().dbName}"
		},
		"SPOnlineList_EarlyYearsResults_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'SPOnlineList_EarlyYearsResults'"
		},
		"SharePointOnlineList1_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'SharePointOnlineList1'"
		},
		"SharePointOnlineList2_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'SharePointOnlineList2'"
		},
		"linkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService1'"
		},
		"syn-oea-tceooeadev01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syn-oea-tceooeadev01-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:syn-oea-tceooeadev01.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"CeNet_DataBlend_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "CeNet-Datablend-DB"
		},
		"CeNet_ODS_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "CeNet-ODS"
		},
		"LS_ADLS_OEA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeatceooeadev01.dfs.core.windows.net"
		},
		"LS_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseURL}"
		},
		"LS_KeyVault_OEA_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-oea-tceooeadev01.vault.azure.net/"
		},
		"SPOnlineList_EarlyYearsResults_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "8a059015-4a38-48ae-bf33-d40b1e3ad0ad"
		},
		"SharePointOnlineList1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "75609f67-9701-40b5-b40f-b2ff150646af"
		},
		"SharePointOnlineList2_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "1a4f8819-1b1e-43b4-ba26-7df3963e4159"
		},
		"syn-oea-tceooeadev01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeatceooeadev01.dfs.core.windows.net"
		},
		"tmp_datablend_dev_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "temp-datablend-db"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CP_DMAEResults')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_vea",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/DM_AE/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\r\nstudent.CompassPersonId,\r\ncy.year AS ReportingYear,\r\nst.SchoolTermDesc AS Semester,\r\nyl.YearLevelSifDesc AS YearLevel,\r\nrg.RollGroupDesc AS RollGroup,\r\nstudent.Ceider,\r\nStudent.FirstName,\r\nStudent.LastName,\r\nsub.SubjectLongName AS [Subject],\r\n--a.ActivityName AS [Class],\r\ngi.GradingItem,\r\nv.ResultValue,\r\nstaff.Title + ' '+ staff.FirstName + ' ' +staff.LastName AS Teacher,\r\nSchoolId AS AGEID,\r\nc.SchoolSuburbAndName,\r\nc.CompassSchoolURL\r\nFROM  \r\ndbo.vwDMFactSemesterReporting f\r\nJOIN dbo.vwDMCampus c ON f.SKCampus = c.SKCampus\r\nJOIN dbo.vwDMSchoolTerm st ON f.SKSchoolSemester = st.SKSchoolTerm\r\nJOIN dbo.vwDMPersonDemographic student ON f.SKStudent = student.SKPerson\r\nJOIN dbo.vwDMPersonDemographic staff ON f.SKStaff = staff.SKPerson\r\nJOIN dbo.vwDMYearLevel yl ON f.SKYearLevel = yl.SKYearLevel\r\nJOIN dbo.vwDMCalendarYear cy ON f.SKReportingYear = cy.SkYear\r\nJOIN dbo.vwDMRollGroup rg ON f.SKRollGroup = rg.SKRollGroup\r\nJOIN dbo.vwDMGender g ON f.SKGenderId = g.SKGenderId\r\nJOIN dbo.vwDMSemesterReportSubject sub ON f.SKSemesterReportSubject = sub.SKSemesterReportSubject\r\nJOIN dbo.vwDMSemesterReportActivity a ON f.SKSemesterReportActivity = a.SKSemesterReportActivity\r\nJOIN dbo.vwDMSemesterReportGradingItem gi ON f.SKSemesterReportGradingItem = gi.SKSemesterReportGradingItem\r\nJOIN dbo.vwDMSemesterReportResultValue v ON f.SKSemesterReportResultValue = v.SKSemesterReportResultValue\r\nJOIN dbo.vwDMSemesterReportMeasure m ON f.SKSemesterReportMeasure = m.SKSemesterReportMeasure\r\nWHERE \r\ncy.year = 2023\r\nAND st.SchoolTermDesc = 'Semester 1'\r\nORDER BY\r\nageid,\r\nReportingYear,\r\nSemester,\r\nYearLevel,\r\nCeider,\r\nSubject,\r\ngi.GradingItem\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_DMAEResults",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset__DMAEResults",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_DMAEResults')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset__DMAEResults')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CP_DMAE_ALL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_n8x",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/DM_AE_ALL/DMAE_ALL.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\r\nSchoolId,\r\ncy.year AS Year,\r\nst.SchoolTermDesc AS Semester,\r\nyl.YearLevelSifDesc AS YearLevel,\r\nstudent.Ceider,\r\nsub.SubjectShortName AS [Subject],\r\nv.ResultValue,\r\na.SubjectCode AS SubjectCode,\r\na.ActivityName AS [ClassCode]\r\n--gi.GradingItem,\r\n--m.Name AS ResultType,\r\n\r\nFROM  \r\ndbo.vwDMFactSemesterReporting f\r\nJOIN dbo.vwDMCampus c ON f.SKCampus = c.SKCampus\r\nJOIN dbo.vwDMSchoolTerm st ON f.SKSchoolSemester = st.SKSchoolTerm\r\nJOIN dbo.vwDMPersonDemographic student ON f.SKStudent = student.SKPerson\r\nJOIN dbo.vwDMPersonDemographic staff ON f.SKStaff = staff.SKPerson\r\nJOIN dbo.vwDMYearLevel yl ON f.SKYearLevel = yl.SKYearLevel\r\nJOIN dbo.vwDMCalendarYear cy ON f.SKReportingYear = cy.SkYear\r\nJOIN dbo.vwDMRollGroup rg ON f.SKRollGroup = rg.SKRollGroup\r\nJOIN dbo.vwDMGender g ON f.SKGenderId = g.SKGenderId\r\nJOIN dbo.vwDMSemesterReportSubject sub ON f.SKSemesterReportSubject = sub.SKSemesterReportSubject\r\nJOIN dbo.vwDMSemesterReportActivity a ON f.SKSemesterReportActivity = a.SKSemesterReportActivity\r\nJOIN dbo.vwDMSemesterReportGradingItem gi ON f.SKSemesterReportGradingItem = gi.SKSemesterReportGradingItem\r\nJOIN dbo.vwDMSemesterReportResultValue v ON f.SKSemesterReportResultValue = v.SKSemesterReportResultValue\r\nJOIN dbo.vwDMSemesterReportMeasure m ON f.SKSemesterReportMeasure = m.SKSemesterReportMeasure\r\n\r\nWHERE 1=1\r\nAND (m.Name = 'QLD Overall Result' \r\n        OR m.Name = '3afc1a3d-5928-4c95-b3e3-f1857cc252bd'\r\n        OR m.Name = 'e2b5b1bd-168b-4b8c-812d-fa73abb31035'\r\n        OR m.Name = '1edbc1d1-3d1d-4234-a27f-1dfc62b469fc' )\r\n\r\n\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_DMAE_ALL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_DMAE_ALL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_DMAE_ALL')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_DMAE_ALL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CP_SemesterReport')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_sor",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_sor",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/SemesterReport/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_SemesterReport",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_SemesterReport",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMFactSemesterReporting"
								},
								"destination": {
									"fileName": "DMFactSemesterReporting.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSemesterReportActivity"
								},
								"destination": {
									"fileName": "DMSemesterReportActivity.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSemesterReportGradingItem"
								},
								"destination": {
									"fileName": "DMSemesterReportGradingItem.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSemesterReportMeasure"
								},
								"destination": {
									"fileName": "DMSemesterReportMeasure.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSemesterReportName"
								},
								"destination": {
									"fileName": "DMSemesterReportName.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSemesterReportResultValue"
								},
								"destination": {
									"fileName": "DMSemesterReportResultValue.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSemesterReportSubject"
								},
								"destination": {
									"fileName": "DMSemesterReportSubject.csv"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_SemesterReport')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_SemesterReport')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ACERNorms')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_719",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "ACER/acernorms.csv"
							},
							{
								"name": "Destination",
								"value": "stage1np/ACERNorms/acernorms.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ACERNorms",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ACERNorms",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ACERNorms')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ACERNorms')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ACER_part1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_ymt",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_ymt",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/ACER/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_ACER_part1",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_ACER_part1",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMACERStudent"
								},
								"destination": {
									"fileName": "dbovwDMACERStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMCalendarYear"
								},
								"destination": {
									"fileName": "dbovwDMCalendarYear.csv"
								}
							},
							{
								"source": {
									"table": "vwDMDate"
								},
								"destination": {
									"fileName": "dbovwDMDate.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPATResponse"
								},
								"destination": {
									"fileName": "dbovwDMFactPATResponse.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPATResults"
								},
								"destination": {
									"fileName": "dbovwDMFactPATResults.csv"
								}
							},
							{
								"source": {
									"table": "vwDMGender"
								},
								"destination": {
									"fileName": "dbovwDMGender.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPATStudentTestGrouping"
								},
								"destination": {
									"fileName": "dbovwDMPATStudentTestGrouping.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPATTest"
								},
								"destination": {
									"fileName": "dbovwDMPATTest.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPersonDemographic"
								},
								"destination": {
									"fileName": "dbovwDMPersonDemographic.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolTerm"
								},
								"destination": {
									"fileName": "dbovwDMSchoolTerm.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolTermWeek"
								},
								"destination": {
									"fileName": "dbovwDMSchoolTermWeek.csv"
								}
							},
							{
								"source": {
									"table": "vwDMYearLevel"
								},
								"destination": {
									"fileName": "dbovwDMYearLevel.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ACER_part1')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ACER_part1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ACER_part2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_2p9",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/ACER/dbovwDMCampus.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select \r\nSKCampus,\r\nBKCampusId,\r\nSchoolId,\r\nSchoolName,\r\nDioceseId,\r\nDioceseName,\r\nCongregationId,\r\nCongregationName,\r\nIsSystemic,\r\nCampusName,\r\nCampusAddressStreet,\r\nCampusAddressSuburb,\r\nCampusAddressPostCode,\r\nBKCampusAddressState,\r\nCampusAddressState,\r\ncast(CampusAddressGeoData as nvarchar),\r\nCampusAddressLongitude,\r\nCampusAddressLatitude,\r\nSocioEconomicStatus,\r\nICSEACode,\r\nCampusEmail,\r\nCampusPrincipalEmail,\r\nCampusSchoolLevelId,\r\nCampusSchoolLevelSifCode,\r\nCampusSchoolLevelSifDesc,\r\nCampusSchoolSubTypeId,\r\nCampusSchoolSubTypeDesc,\r\nCoEdStatusId,\r\nCoEdStatusSifDesc,\r\nCampusFocusCode,\r\nCampusRegion,\r\nCampusCluster,\r\nPrimarySort,\r\nSecondarySort,\r\nCreateDate,\r\nLastUpdateDate,\r\nEffectiveStartDate,\r\nEffectiveEndDate,\r\nIsCurrent,\r\nScdReason,\r\nCampusSuburbAndName,\r\nSchoolSuburbAndName,\r\nSchoolAddressStreet,\r\nSchoolAddressSuburb,\r\nSchoolAddressPostCode,\r\nSchoolAddressState,\r\ncast(SchoolAddressGeoData as nvarchar),\r\nSchoolAddressLongitude,\r\nSchoolAddressLatitude,\r\nSchoolRegion,\r\nSchoolCluster,\r\nWebsite,\r\nBoardingStatus,\r\nCohorts,\r\nCoEdStatusSifCode,\r\nCampusPhone,\r\nSchoolPhone,\r\nDateCampusOpened,\r\nDateCampusClosed,\r\nIsCampusOpen,\r\nDateSchoolOpened,\r\nDateSchoolClosed,\r\nIsSchoolOpen,\r\nCampusStateCode,\r\nStatisticalArea1,\r\nNameofStatisticalArea1,\r\nStatisticalArea2,\r\nNameofStatisticalArea2,\r\nStatisticalArea3,\r\nNameofStatisticalArea3,\r\nStatisticalArea4,\r\nNameofStatisticalArea4,\r\nABSRemotenessArea,\r\nGeolocation,\r\nSchoolURL,\r\nAcaraSchoolId,\r\nHeadCampusAcaraId,\r\nSchoolSector,\r\nCampusType,\r\nRolledReportingDescription,\r\nNESASchoolId,\r\nCompassSchoolURL,\r\nCompassSchoolName,\r\nCompassAPIKey,\r\nAncestryFlag,\r\nLocationId\r\nfrom dbo.vwDMCampus\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ACER_part2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ACER_part2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ACER_part2')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ACER_part2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_AEDC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_m3c",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.vwDMAEDCGroupingId"
							},
							{
								"name": "Destination",
								"value": "stage1np/AEDC/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_m3c",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_m3c",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_m3c')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_m3c')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_AEResultsCombined')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_o0t",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "AEResultsCombined/AEResultsCombined.csv"
							},
							{
								"name": "Destination",
								"value": "stage1np/AEResultsCombined/AEResultsCombined.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_AEResultsCombined",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_AEResultsCombined",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_AEResultsCombined')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_AEResultsCombined')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_AE_LearningTasks')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy AE_LearningTasks",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "AE_LearningTasks/"
							},
							{
								"name": "Destination",
								"value": "stage1np/_AE_ManualUpload_LearningTasks/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_AE_LearningTasks",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_AE_LearningTasks",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_AE_LearningTasks')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_AE_LearningTasks')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_AE_SemesterReports')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Semester Reports",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "AE_Semester_Reports/"
							},
							{
								"name": "Destination",
								"value": "stage1np/_AE_ManualUploadRawFiles/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_AE_SemesterReports",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_AE_SemesterReports",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_AE_SemesterReports')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_AE_SemesterReports')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ATAR')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_4by",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "ATAR/"
							},
							{
								"name": "Destination",
								"value": "stage1np/ATAR/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_4by",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ATAR",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_4by')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ATAR')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_Attendance')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_qee",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_qee",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/attendance/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_Attendance_source",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_Attendance_dest",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwAggWholeDayAttendanceBySchool"
								},
								"destination": {
									"fileName": "dbovwAggWholeDayAttendanceBySchool.csv"
								}
							},
							{
								"source": {
									"table": "vwAggWholeDayAttendanceByStudent"
								},
								"destination": {
									"fileName": "dbovwAggWholeDayAttendanceByStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactWholeDayAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactWholeDayAttendance.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_Attendance_source')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_Attendance_dest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_CompassODS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_vdz",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_vdz",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "Compass.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/CompassODS/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_CompassODS",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_CompassODS",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "ODSAcademicGroup"
								},
								"destination": {
									"fileName": "CompassODSAcademicGroup.csv"
								}
							},
							{
								"source": {
									"table": "ODSActivity"
								},
								"destination": {
									"fileName": "CompassODSActivity.csv"
								}
							},
							{
								"source": {
									"table": "ODSActivityEnrolment"
								},
								"destination": {
									"fileName": "CompassODSActivityEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "ODSActivityInstance"
								},
								"destination": {
									"fileName": "CompassODSActivityInstance.csv"
								}
							},
							{
								"source": {
									"table": "ODSActivityInstance_Current"
								},
								"destination": {
									"fileName": "CompassODSActivityInstance_Current.csv"
								}
							},
							{
								"source": {
									"table": "ODSAttendanceNotes"
								},
								"destination": {
									"fileName": "CompassODSAttendanceNotes.csv"
								}
							},
							{
								"source": {
									"table": "ODSBehaviourObservation"
								},
								"destination": {
									"fileName": "CompassODSBehaviourObservation.csv"
								}
							},
							{
								"source": {
									"table": "ODSBehaviourObservationCommunications"
								},
								"destination": {
									"fileName": "CompassODSBehaviourObservationCommunications.csv"
								}
							},
							{
								"source": {
									"table": "ODSBehaviourObservationField"
								},
								"destination": {
									"fileName": "CompassODSBehaviourObservationField.csv"
								}
							},
							{
								"source": {
									"table": "ODSBehaviourObservationStudents"
								},
								"destination": {
									"fileName": "CompassODSBehaviourObservationStudents.csv"
								}
							},
							{
								"source": {
									"table": "ODSBehaviourObservationSubEntry"
								},
								"destination": {
									"fileName": "CompassODSBehaviourObservationSubEntry.csv"
								}
							},
							{
								"source": {
									"table": "ODSBehaviourTemplate"
								},
								"destination": {
									"fileName": "CompassODSBehaviourTemplate.csv"
								}
							},
							{
								"source": {
									"table": "ODSBehaviourTemplateCommunications"
								},
								"destination": {
									"fileName": "CompassODSBehaviourTemplateCommunications.csv"
								}
							},
							{
								"source": {
									"table": "ODSBehaviourTemplateFields"
								},
								"destination": {
									"fileName": "CompassODSBehaviourTemplateFields.csv"
								}
							},
							{
								"source": {
									"table": "ODSCheckinAttendance"
								},
								"destination": {
									"fileName": "CompassODSCheckinAttendance.csv"
								}
							},
							{
								"source": {
									"table": "ODSCompassCampus"
								},
								"destination": {
									"fileName": "CompassODSCompassCampus.csv"
								}
							},
							{
								"source": {
									"table": "ODSCompassSubject"
								},
								"destination": {
									"fileName": "CompassODSCompassSubject.csv"
								}
							},
							{
								"source": {
									"table": "ODSCountryMapping"
								},
								"destination": {
									"fileName": "CompassODSCountryMapping.csv"
								}
							},
							{
								"source": {
									"table": "ODSDebtor"
								},
								"destination": {
									"fileName": "CompassODSDebtor.csv"
								}
							},
							{
								"source": {
									"table": "ODSDebtorLegacy"
								},
								"destination": {
									"fileName": "CompassODSDebtorLegacy.csv"
								}
							},
							{
								"source": {
									"table": "ODSDebtorParent"
								},
								"destination": {
									"fileName": "CompassODSDebtorParent.csv"
								}
							},
							{
								"source": {
									"table": "ODSDebtorStudent"
								},
								"destination": {
									"fileName": "CompassODSDebtorStudent.csv"
								}
							},
							{
								"source": {
									"table": "ODSDoctors"
								},
								"destination": {
									"fileName": "CompassODSDoctors.csv"
								}
							},
							{
								"source": {
									"table": "ODSEnrolmentApplicationDetail"
								},
								"destination": {
									"fileName": "CompassODSEnrolmentApplicationDetail.csv"
								}
							},
							{
								"source": {
									"table": "ODSEnrolmentGuardianDetail"
								},
								"destination": {
									"fileName": "CompassODSEnrolmentGuardianDetail.csv"
								}
							},
							{
								"source": {
									"table": "ODSEnrolmentGuardianLanguage"
								},
								"destination": {
									"fileName": "CompassODSEnrolmentGuardianLanguage.csv"
								}
							},
							{
								"source": {
									"table": "ODSEnrolmentStudentAddress"
								},
								"destination": {
									"fileName": "CompassODSEnrolmentStudentAddress.csv"
								}
							},
							{
								"source": {
									"table": "ODSEnrolmentStudentDemographic"
								},
								"destination": {
									"fileName": "CompassODSEnrolmentStudentDemographic.csv"
								}
							},
							{
								"source": {
									"table": "ODSEnrolmentStudentLanguage"
								},
								"destination": {
									"fileName": "CompassODSEnrolmentStudentLanguage.csv"
								}
							},
							{
								"source": {
									"table": "ODSExtendedStatuses"
								},
								"destination": {
									"fileName": "CompassODSExtendedStatuses.csv"
								}
							},
							{
								"source": {
									"table": "ODSLanguageMapping"
								},
								"destination": {
									"fileName": "CompassODSLanguageMapping.csv"
								}
							},
							{
								"source": {
									"table": "ODSNationalityMapping"
								},
								"destination": {
									"fileName": "CompassODSNationalityMapping.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentAdditionalNotes"
								},
								"destination": {
									"fileName": "CompassODSParentAdditionalNotes.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentAddress"
								},
								"destination": {
									"fileName": "CompassODSParentAddress.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentCustomFields"
								},
								"destination": {
									"fileName": "CompassODSParentCustomFields.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentDemographic"
								},
								"destination": {
									"fileName": "CompassODSParentDemographic.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentDoctors"
								},
								"destination": {
									"fileName": "CompassODSParentDoctors.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentIdentification"
								},
								"destination": {
									"fileName": "CompassODSParentIdentification.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentImportIdentifier"
								},
								"destination": {
									"fileName": "CompassODSParentImportIdentifier.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentLanguage"
								},
								"destination": {
									"fileName": "CompassODSParentLanguage.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentOrganisationMilestones"
								},
								"destination": {
									"fileName": "CompassODSParentOrganisationMilestones.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentRelationships"
								},
								"destination": {
									"fileName": "CompassODSParentRelationships.csv"
								}
							},
							{
								"source": {
									"table": "ODSParentSchoolHistory"
								},
								"destination": {
									"fileName": "CompassODSParentSchoolHistory.csv"
								}
							},
							{
								"source": {
									"table": "ODSPeriodStructure"
								},
								"destination": {
									"fileName": "CompassODSPeriodStructure.csv"
								}
							},
							{
								"source": {
									"table": "ODSPersonPermissions"
								},
								"destination": {
									"fileName": "CompassODSPersonPermissions.csv"
								}
							},
							{
								"source": {
									"table": "ODSPersonRoles"
								},
								"destination": {
									"fileName": "CompassODSPersonRoles.csv"
								}
							},
							{
								"source": {
									"table": "ODSReligionMapping"
								},
								"destination": {
									"fileName": "CompassODSReligionMapping.csv"
								}
							},
							{
								"source": {
									"table": "ODSResults"
								},
								"destination": {
									"fileName": "CompassODSResults.csv"
								}
							},
							{
								"source": {
									"table": "ODSSchoolCalendar"
								},
								"destination": {
									"fileName": "CompassODSSchoolCalendar.csv"
								}
							},
							{
								"source": {
									"table": "ODSSchoolTerm"
								},
								"destination": {
									"fileName": "CompassODSSchoolTerm.csv"
								}
							},
							{
								"source": {
									"table": "ODSSemesterReport"
								},
								"destination": {
									"fileName": "CompassODSSemesterReport.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffAdditionalNotes"
								},
								"destination": {
									"fileName": "CompassODSStaffAdditionalNotes.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffAddress"
								},
								"destination": {
									"fileName": "CompassODSStaffAddress.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffCustomFields"
								},
								"destination": {
									"fileName": "CompassODSStaffCustomFields.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffDemographic"
								},
								"destination": {
									"fileName": "CompassODSStaffDemographic.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffDoctors"
								},
								"destination": {
									"fileName": "CompassODSStaffDoctors.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffEmergencyContact"
								},
								"destination": {
									"fileName": "CompassODSStaffEmergencyContact.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffIdentification"
								},
								"destination": {
									"fileName": "CompassODSStaffIdentification.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffImportIdentifier"
								},
								"destination": {
									"fileName": "CompassODSStaffImportIdentifier.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffLanguage"
								},
								"destination": {
									"fileName": "CompassODSStaffLanguage.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffMedicalConditions"
								},
								"destination": {
									"fileName": "CompassODSStaffMedicalConditions.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffMedicalConditionsAttachments"
								},
								"destination": {
									"fileName": "CompassODSStaffMedicalConditionsAttachments.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffMedicalConditionsMedications"
								},
								"destination": {
									"fileName": "CompassODSStaffMedicalConditionsMedications.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffOrganisationDetails"
								},
								"destination": {
									"fileName": "CompassODSStaffOrganisationDetails.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffOrganisationMilestones"
								},
								"destination": {
									"fileName": "CompassODSStaffOrganisationMilestones.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffOrganisationTitles"
								},
								"destination": {
									"fileName": "CompassODSStaffOrganisationTitles.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffRelationships"
								},
								"destination": {
									"fileName": "CompassODSStaffRelationships.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffSchoolHistory"
								},
								"destination": {
									"fileName": "CompassODSStaffSchoolHistory.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffVehicle"
								},
								"destination": {
									"fileName": "CompassODSStaffVehicle.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentAccessRestrictions"
								},
								"destination": {
									"fileName": "CompassODSStudentAccessRestrictions.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentAdditionalNotes"
								},
								"destination": {
									"fileName": "CompassODSStudentAdditionalNotes.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentAddress"
								},
								"destination": {
									"fileName": "CompassODSStudentAddress.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentCustomFields"
								},
								"destination": {
									"fileName": "CompassODSStudentCustomFields.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentDemographic"
								},
								"destination": {
									"fileName": "CompassODSStudentDemographic.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentDoctors"
								},
								"destination": {
									"fileName": "CompassODSStudentDoctors.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentEmergencyContact"
								},
								"destination": {
									"fileName": "CompassODSStudentEmergencyContact.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentGlobalDetails"
								},
								"destination": {
									"fileName": "CompassODSStudentGlobalDetails.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentIdentification"
								},
								"destination": {
									"fileName": "CompassODSStudentIdentification.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentImmunisations"
								},
								"destination": {
									"fileName": "CompassODSStudentImmunisations.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentImportIdentifier"
								},
								"destination": {
									"fileName": "CompassODSStudentImportIdentifier.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentLanguage"
								},
								"destination": {
									"fileName": "CompassODSStudentLanguage.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentMedicalConditions"
								},
								"destination": {
									"fileName": "CompassODSStudentMedicalConditions.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentMedicalConditionsAttachments"
								},
								"destination": {
									"fileName": "CompassODSStudentMedicalConditionsAttachments.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentMedicalConditionsMedications"
								},
								"destination": {
									"fileName": "CompassODSStudentMedicalConditionsMedications.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentMedicalConsents"
								},
								"destination": {
									"fileName": "CompassODSStudentMedicalConsents.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentOrganisationDetails"
								},
								"destination": {
									"fileName": "CompassODSStudentOrganisationDetails.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentOrganisationMilestones"
								},
								"destination": {
									"fileName": "CompassODSStudentOrganisationMilestones.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentOrganisationMilestones_DM"
								},
								"destination": {
									"fileName": "CompassODSStudentOrganisationMilestones_DM.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentRelationships"
								},
								"destination": {
									"fileName": "CompassODSStudentRelationships.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentReligiousMilestones"
								},
								"destination": {
									"fileName": "CompassODSStudentReligiousMilestones.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentSchoolHistory"
								},
								"destination": {
									"fileName": "CompassODSStudentSchoolHistory.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentVehicle"
								},
								"destination": {
									"fileName": "CompassODSStudentVehicle.csv"
								}
							},
							{
								"source": {
									"table": "ODSTimeSliceAttendanceLine"
								},
								"destination": {
									"fileName": "CompassODSTimeSliceAttendanceLine.csv"
								}
							},
							{
								"source": {
									"table": "ODSTimeSliceAttendanceLineHalfDay"
								},
								"destination": {
									"fileName": "CompassODSTimeSliceAttendanceLineHalfDay.csv"
								}
							},
							{
								"source": {
									"table": "ODSTimeSliceAttendanceLinePeriod"
								},
								"destination": {
									"fileName": "CompassODSTimeSliceAttendanceLinePeriod.csv"
								}
							},
							{
								"source": {
									"table": "ODSTimeSliceAttendanceLineRealTimePeriod"
								},
								"destination": {
									"fileName": "CompassODSTimeSliceAttendanceLineRealTimePeriod.csv"
								}
							},
							{
								"source": {
									"table": "ODSTimeSliceAttendanceLineWholeDay"
								},
								"destination": {
									"fileName": "CompassODSTimeSliceAttendanceLineWholeDay.csv"
								}
							},
							{
								"source": {
									"table": "ODSTimeSliceAttendanceLineWholeDay_DM"
								},
								"destination": {
									"fileName": "CompassODSTimeSliceAttendanceLineWholeDay_DM.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_CompassODS')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_CompassODS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_DimTables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_bm6",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_bm6",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/DimensionTables/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_DimTables",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_DimTables",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMATSI"
								},
								"destination": {
									"fileName": "dbovwDMATSI.csv"
								}
							},
							{
								"source": {
									"table": "vwDMDate"
								},
								"destination": {
									"fileName": "dbovwDMDate.csv"
								}
							},
							{
								"source": {
									"table": "vwDMGender"
								},
								"destination": {
									"fileName": "dbovwDMGender.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSchools"
								},
								"destination": {
									"fileName": "dbovwDMSchools.csv"
								}
							},
							{
								"source": {
									"table": "vwDMYearLevel"
								},
								"destination": {
									"fileName": "dbovwDMYearLevel.csv"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_DimTables')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_DimTables')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_EarlyYearsAnswers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_d8d",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "EarlyYearsData/"
							},
							{
								"name": "Destination",
								"value": "stage1np/EarlyYearsAnswers/EarlyYearsAnswersYear2.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_EarlyYearsAnswers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_EarlyYearsAnswers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_EarlyYearsAnswers')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_EarlyYearsAnswers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_EarlyYearsResults')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_ntf",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_ntf",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{item().source.listName}"
										},
										{
											"name": "Destination",
											"value": "stage1np/EarlyYearsData/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SharePointOnlineListSource",
											"httpRequestTimeout": "00:05:00"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings",
												"filePattern": "setOfObjects"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"value": "@item().copyActivity.translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_EarlyYearsResults",
											"type": "DatasetReference",
											"parameters": {
												"cw_listName": "@item().source.listName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_EarlyYearsResults",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"listName": "PrepTestResultPost"
								},
								"destination": {
									"fileName": "Prep_Result_Post.json"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "Ceider",
													"type": "String"
												},
												"sink": {
													"path": "$['Ceider']"
												}
											},
											{
												"source": {
													"name": "Ques1",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques1']"
												}
											},
											{
												"source": {
													"name": "Ques2",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques2']"
												}
											},
											{
												"source": {
													"name": "Ques3",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques3']"
												}
											},
											{
												"source": {
													"name": "Ques4",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques4']"
												}
											},
											{
												"source": {
													"name": "Ques5",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques5']"
												}
											},
											{
												"source": {
													"name": "Ques6",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques6']"
												}
											},
											{
												"source": {
													"name": "Ques7",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques7']"
												}
											},
											{
												"source": {
													"name": "Ques8",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques8']"
												}
											},
											{
												"source": {
													"name": "Ques9",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques9']"
												}
											},
											{
												"source": {
													"name": "Ques10",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques10']"
												}
											},
											{
												"source": {
													"name": "Ques11",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques11']"
												}
											},
											{
												"source": {
													"name": "Ques12",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques12']"
												}
											},
											{
												"source": {
													"name": "Ques13",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques13']"
												}
											},
											{
												"source": {
													"name": "Ques14",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques14']"
												}
											},
											{
												"source": {
													"name": "Ques15",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques15']"
												}
											},
											{
												"source": {
													"name": "Ques16",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques16']"
												}
											},
											{
												"source": {
													"name": "Ques17",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques17']"
												}
											},
											{
												"source": {
													"name": "Ques18",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques18']"
												}
											},
											{
												"source": {
													"name": "Ques19",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques19']"
												}
											},
											{
												"source": {
													"name": "Ques20",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques20']"
												}
											},
											{
												"source": {
													"name": "Ques21",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques21']"
												}
											},
											{
												"source": {
													"name": "Ques22",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques22']"
												}
											},
											{
												"source": {
													"name": "Ques23",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques23']"
												}
											},
											{
												"source": {
													"name": "Ques24",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques24']"
												}
											},
											{
												"source": {
													"name": "Ques25",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques25']"
												}
											},
											{
												"source": {
													"name": "Ques26",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques26']"
												}
											},
											{
												"source": {
													"name": "Ques27",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques27']"
												}
											},
											{
												"source": {
													"name": "Ques28",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques28']"
												}
											},
											{
												"source": {
													"name": "Ques29",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques29']"
												}
											},
											{
												"source": {
													"name": "Ques30",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques30']"
												}
											},
											{
												"source": {
													"name": "Ques31",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques31']"
												}
											},
											{
												"source": {
													"name": "Ques32",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques32']"
												}
											},
											{
												"source": {
													"name": "Ques33",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques33']"
												}
											},
											{
												"source": {
													"name": "Ques34",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques34']"
												}
											},
											{
												"source": {
													"name": "Ques35",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques35']"
												}
											},
											{
												"source": {
													"name": "Ques36",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques36']"
												}
											},
											{
												"source": {
													"name": "Ques37",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques37']"
												}
											},
											{
												"source": {
													"name": "Ques38",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques38']"
												}
											},
											{
												"source": {
													"name": "Ques39",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques39']"
												}
											},
											{
												"source": {
													"name": "Ques40",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques40']"
												}
											},
											{
												"source": {
													"name": "StudentName",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentName']"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "String"
												},
												"sink": {
													"path": "$['Status']"
												}
											},
											{
												"source": {
													"name": "TeacherEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherEmailID']"
												}
											},
											{
												"source": {
													"name": "StudentEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentEmailID']"
												}
											},
											{
												"source": {
													"name": "ClassID",
													"type": "String"
												},
												"sink": {
													"path": "$['ClassID']"
												}
											},
											{
												"source": {
													"name": "TeacherName",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherName']"
												}
											},
											{
												"source": {
													"name": "YearLevel",
													"type": "String"
												},
												"sink": {
													"path": "$['YearLevel']"
												}
											},
											{
												"source": {
													"name": "CampusID",
													"type": "String"
												},
												"sink": {
													"path": "$['CampusID']"
												}
											},
											{
												"source": {
													"name": "Year",
													"type": "String"
												},
												"sink": {
													"path": "$['Year']"
												}
											}
										]
									}
								}
							},
							{
								"source": {
									"listName": "PrepTestResultPre"
								},
								"destination": {
									"fileName": "Prep_Result_Pre.json"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "Ceider",
													"type": "String"
												},
												"sink": {
													"path": "$['Ceider']"
												}
											},
											{
												"source": {
													"name": "Ques1",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques1']"
												}
											},
											{
												"source": {
													"name": "Ques2",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques2']"
												}
											},
											{
												"source": {
													"name": "Ques3",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques3']"
												}
											},
											{
												"source": {
													"name": "Ques4",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques4']"
												}
											},
											{
												"source": {
													"name": "Ques5",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques5']"
												}
											},
											{
												"source": {
													"name": "Ques6",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques6']"
												}
											},
											{
												"source": {
													"name": "Ques7",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques7']"
												}
											},
											{
												"source": {
													"name": "Ques8",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques8']"
												}
											},
											{
												"source": {
													"name": "Ques9",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques9']"
												}
											},
											{
												"source": {
													"name": "Ques10",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques10']"
												}
											},
											{
												"source": {
													"name": "Ques11",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques11']"
												}
											},
											{
												"source": {
													"name": "Ques12",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques12']"
												}
											},
											{
												"source": {
													"name": "Ques13",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques13']"
												}
											},
											{
												"source": {
													"name": "Ques14",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques14']"
												}
											},
											{
												"source": {
													"name": "Ques15",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques15']"
												}
											},
											{
												"source": {
													"name": "Ques16",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques16']"
												}
											},
											{
												"source": {
													"name": "Ques17",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques17']"
												}
											},
											{
												"source": {
													"name": "Ques18",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques18']"
												}
											},
											{
												"source": {
													"name": "Ques19",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques19']"
												}
											},
											{
												"source": {
													"name": "Ques20",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques20']"
												}
											},
											{
												"source": {
													"name": "Ques21",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques21']"
												}
											},
											{
												"source": {
													"name": "Ques22",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques22']"
												}
											},
											{
												"source": {
													"name": "Ques23",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques23']"
												}
											},
											{
												"source": {
													"name": "Ques24",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques24']"
												}
											},
											{
												"source": {
													"name": "Ques25",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques25']"
												}
											},
											{
												"source": {
													"name": "Ques26",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques26']"
												}
											},
											{
												"source": {
													"name": "Ques27",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques27']"
												}
											},
											{
												"source": {
													"name": "Ques28",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques28']"
												}
											},
											{
												"source": {
													"name": "Ques29",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques29']"
												}
											},
											{
												"source": {
													"name": "Ques30",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques30']"
												}
											},
											{
												"source": {
													"name": "Ques31",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques31']"
												}
											},
											{
												"source": {
													"name": "Ques32",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques32']"
												}
											},
											{
												"source": {
													"name": "Ques33",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques33']"
												}
											},
											{
												"source": {
													"name": "Ques34",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques34']"
												}
											},
											{
												"source": {
													"name": "Ques35",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques35']"
												}
											},
											{
												"source": {
													"name": "Ques36",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques36']"
												}
											},
											{
												"source": {
													"name": "Ques37",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques37']"
												}
											},
											{
												"source": {
													"name": "Ques38",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques38']"
												}
											},
											{
												"source": {
													"name": "Ques39",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques39']"
												}
											},
											{
												"source": {
													"name": "Ques40",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques40']"
												}
											},
											{
												"source": {
													"name": "StudentName",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentName']"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "String"
												},
												"sink": {
													"path": "$['Status']"
												}
											},
											{
												"source": {
													"name": "TeacherEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherEmailID']"
												}
											},
											{
												"source": {
													"name": "StudentEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentEmailID']"
												}
											},
											{
												"source": {
													"name": "ClassID",
													"type": "String"
												},
												"sink": {
													"path": "$['ClassID']"
												}
											},
											{
												"source": {
													"name": "TeacherName",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherName']"
												}
											},
											{
												"source": {
													"name": "YearLevel",
													"type": "String"
												},
												"sink": {
													"path": "$['YearLevel']"
												}
											},
											{
												"source": {
													"name": "CampusID",
													"type": "String"
												},
												"sink": {
													"path": "$['CampusID']"
												}
											},
											{
												"source": {
													"name": "Year",
													"type": "String"
												},
												"sink": {
													"path": "$['Year']"
												}
											}
										]
									}
								}
							},
							{
								"source": {
									"listName": "Year1TestResultPost"
								},
								"destination": {
									"fileName": "Year1_Result_Post.json"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "Ceider",
													"type": "String"
												},
												"sink": {
													"path": "$['Ceider']"
												}
											},
											{
												"source": {
													"name": "Ques1",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques1']"
												}
											},
											{
												"source": {
													"name": "Ques2",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques2']"
												}
											},
											{
												"source": {
													"name": "Ques3",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques3']"
												}
											},
											{
												"source": {
													"name": "Ques4",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques4']"
												}
											},
											{
												"source": {
													"name": "Ques5",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques5']"
												}
											},
											{
												"source": {
													"name": "Ques6",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques6']"
												}
											},
											{
												"source": {
													"name": "Ques7",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques7']"
												}
											},
											{
												"source": {
													"name": "Ques8",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques8']"
												}
											},
											{
												"source": {
													"name": "Ques9",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques9']"
												}
											},
											{
												"source": {
													"name": "Ques10",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques10']"
												}
											},
											{
												"source": {
													"name": "Ques11",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques11']"
												}
											},
											{
												"source": {
													"name": "Ques12",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques12']"
												}
											},
											{
												"source": {
													"name": "Ques13",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques13']"
												}
											},
											{
												"source": {
													"name": "Ques14",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques14']"
												}
											},
											{
												"source": {
													"name": "Ques15",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques15']"
												}
											},
											{
												"source": {
													"name": "Ques16",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques16']"
												}
											},
											{
												"source": {
													"name": "Ques17",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques17']"
												}
											},
											{
												"source": {
													"name": "Ques18",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques18']"
												}
											},
											{
												"source": {
													"name": "Ques19",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques19']"
												}
											},
											{
												"source": {
													"name": "Ques20",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques20']"
												}
											},
											{
												"source": {
													"name": "Ques21",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques21']"
												}
											},
											{
												"source": {
													"name": "Ques22",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques22']"
												}
											},
											{
												"source": {
													"name": "Ques23",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques23']"
												}
											},
											{
												"source": {
													"name": "Ques24",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques24']"
												}
											},
											{
												"source": {
													"name": "Ques25",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques25']"
												}
											},
											{
												"source": {
													"name": "Ques26",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques26']"
												}
											},
											{
												"source": {
													"name": "Ques27",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques27']"
												}
											},
											{
												"source": {
													"name": "Ques28",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques28']"
												}
											},
											{
												"source": {
													"name": "Ques29",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques29']"
												}
											},
											{
												"source": {
													"name": "Ques30",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques30']"
												}
											},
											{
												"source": {
													"name": "Ques31",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques31']"
												}
											},
											{
												"source": {
													"name": "Ques32",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques32']"
												}
											},
											{
												"source": {
													"name": "Ques33",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques33']"
												}
											},
											{
												"source": {
													"name": "Ques34",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques34']"
												}
											},
											{
												"source": {
													"name": "Ques35",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques35']"
												}
											},
											{
												"source": {
													"name": "Ques36",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques36']"
												}
											},
											{
												"source": {
													"name": "Ques37",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques37']"
												}
											},
											{
												"source": {
													"name": "Ques38",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques38']"
												}
											},
											{
												"source": {
													"name": "Ques39",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques39']"
												}
											},
											{
												"source": {
													"name": "Ques40",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques40']"
												}
											},
											{
												"source": {
													"name": "StudentName",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentName']"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "String"
												},
												"sink": {
													"path": "$['Status']"
												}
											},
											{
												"source": {
													"name": "TeacherEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherEmailID']"
												}
											},
											{
												"source": {
													"name": "StudentEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentEmailID']"
												}
											},
											{
												"source": {
													"name": "ClassID",
													"type": "String"
												},
												"sink": {
													"path": "$['ClassID']"
												}
											},
											{
												"source": {
													"name": "TeacherName",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherName']"
												}
											},
											{
												"source": {
													"name": "YearLevel",
													"type": "String"
												},
												"sink": {
													"path": "$['YearLevel']"
												}
											},
											{
												"source": {
													"name": "CampusID",
													"type": "String"
												},
												"sink": {
													"path": "$['CampusID']"
												}
											},
											{
												"source": {
													"name": "Year",
													"type": "String"
												},
												"sink": {
													"path": "$['Year']"
												}
											}
										]
									}
								}
							},
							{
								"source": {
									"listName": "Year1TestResultPre"
								},
								"destination": {
									"fileName": "Year1_Result_Pre.json"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "Ceider",
													"type": "String"
												},
												"sink": {
													"path": "$['Ceider']"
												}
											},
											{
												"source": {
													"name": "Ques1",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques1']"
												}
											},
											{
												"source": {
													"name": "Ques2",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques2']"
												}
											},
											{
												"source": {
													"name": "Ques3",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques3']"
												}
											},
											{
												"source": {
													"name": "Ques4",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques4']"
												}
											},
											{
												"source": {
													"name": "Ques5",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques5']"
												}
											},
											{
												"source": {
													"name": "Ques6",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques6']"
												}
											},
											{
												"source": {
													"name": "Ques7",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques7']"
												}
											},
											{
												"source": {
													"name": "Ques8",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques8']"
												}
											},
											{
												"source": {
													"name": "Ques9",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques9']"
												}
											},
											{
												"source": {
													"name": "Ques10",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques10']"
												}
											},
											{
												"source": {
													"name": "Ques11",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques11']"
												}
											},
											{
												"source": {
													"name": "Ques12",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques12']"
												}
											},
											{
												"source": {
													"name": "Ques13",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques13']"
												}
											},
											{
												"source": {
													"name": "Ques14",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques14']"
												}
											},
											{
												"source": {
													"name": "Ques15",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques15']"
												}
											},
											{
												"source": {
													"name": "Ques16",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques16']"
												}
											},
											{
												"source": {
													"name": "Ques17",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques17']"
												}
											},
											{
												"source": {
													"name": "Ques18",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques18']"
												}
											},
											{
												"source": {
													"name": "Ques19",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques19']"
												}
											},
											{
												"source": {
													"name": "Ques20",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques20']"
												}
											},
											{
												"source": {
													"name": "Ques21",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques21']"
												}
											},
											{
												"source": {
													"name": "Ques22",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques22']"
												}
											},
											{
												"source": {
													"name": "Ques23",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques23']"
												}
											},
											{
												"source": {
													"name": "Ques24",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques24']"
												}
											},
											{
												"source": {
													"name": "Ques25",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques25']"
												}
											},
											{
												"source": {
													"name": "Ques26",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques26']"
												}
											},
											{
												"source": {
													"name": "Ques27",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques27']"
												}
											},
											{
												"source": {
													"name": "Ques28",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques28']"
												}
											},
											{
												"source": {
													"name": "Ques29",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques29']"
												}
											},
											{
												"source": {
													"name": "Ques30",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques30']"
												}
											},
											{
												"source": {
													"name": "Ques31",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques31']"
												}
											},
											{
												"source": {
													"name": "Ques32",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques32']"
												}
											},
											{
												"source": {
													"name": "Ques33",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques33']"
												}
											},
											{
												"source": {
													"name": "Ques34",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques34']"
												}
											},
											{
												"source": {
													"name": "Ques35",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques35']"
												}
											},
											{
												"source": {
													"name": "Ques36",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques36']"
												}
											},
											{
												"source": {
													"name": "Ques37",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques37']"
												}
											},
											{
												"source": {
													"name": "Ques38",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques38']"
												}
											},
											{
												"source": {
													"name": "Ques39",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques39']"
												}
											},
											{
												"source": {
													"name": "Ques40",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques40']"
												}
											},
											{
												"source": {
													"name": "StudentName",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentName']"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "String"
												},
												"sink": {
													"path": "$['Status']"
												}
											},
											{
												"source": {
													"name": "TeacherEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherEmailID']"
												}
											},
											{
												"source": {
													"name": "StudentEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentEmailID']"
												}
											},
											{
												"source": {
													"name": "ClassID",
													"type": "String"
												},
												"sink": {
													"path": "$['ClassID']"
												}
											},
											{
												"source": {
													"name": "TeacherName",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherName']"
												}
											},
											{
												"source": {
													"name": "YearLevel",
													"type": "String"
												},
												"sink": {
													"path": "$['YearLevel']"
												}
											},
											{
												"source": {
													"name": "CampusID",
													"type": "String"
												},
												"sink": {
													"path": "$['CampusID']"
												}
											},
											{
												"source": {
													"name": "Year",
													"type": "String"
												},
												"sink": {
													"path": "$['Year']"
												}
											}
										]
									}
								}
							},
							{
								"source": {
									"listName": "Year2TestResultPost"
								},
								"destination": {
									"fileName": "Year2_Result_Post.json"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "Ceider",
													"type": "String"
												},
												"sink": {
													"path": "$['Ceider']"
												}
											},
											{
												"source": {
													"name": "Ques1",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques1']"
												}
											},
											{
												"source": {
													"name": "Ques2",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques2']"
												}
											},
											{
												"source": {
													"name": "Ques3",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques3']"
												}
											},
											{
												"source": {
													"name": "Ques4",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques4']"
												}
											},
											{
												"source": {
													"name": "Ques5",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques5']"
												}
											},
											{
												"source": {
													"name": "Ques6",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques6']"
												}
											},
											{
												"source": {
													"name": "Ques7",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques7']"
												}
											},
											{
												"source": {
													"name": "Ques8",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques8']"
												}
											},
											{
												"source": {
													"name": "Ques9",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques9']"
												}
											},
											{
												"source": {
													"name": "Ques10",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques10']"
												}
											},
											{
												"source": {
													"name": "Ques11",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques11']"
												}
											},
											{
												"source": {
													"name": "Ques12",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques12']"
												}
											},
											{
												"source": {
													"name": "Ques13",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques13']"
												}
											},
											{
												"source": {
													"name": "Ques14",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques14']"
												}
											},
											{
												"source": {
													"name": "Ques15",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques15']"
												}
											},
											{
												"source": {
													"name": "Ques16",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques16']"
												}
											},
											{
												"source": {
													"name": "Ques17",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques17']"
												}
											},
											{
												"source": {
													"name": "Ques18",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques18']"
												}
											},
											{
												"source": {
													"name": "Ques19",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques19']"
												}
											},
											{
												"source": {
													"name": "Ques20",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques20']"
												}
											},
											{
												"source": {
													"name": "Ques21",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques21']"
												}
											},
											{
												"source": {
													"name": "Ques22",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques22']"
												}
											},
											{
												"source": {
													"name": "Ques23",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques23']"
												}
											},
											{
												"source": {
													"name": "Ques24",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques24']"
												}
											},
											{
												"source": {
													"name": "Ques25",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques25']"
												}
											},
											{
												"source": {
													"name": "QuestionType",
													"type": "String"
												},
												"sink": {
													"path": "$['QuestionType']"
												}
											},
											{
												"source": {
													"name": "TeacherEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherEmailID']"
												}
											},
											{
												"source": {
													"name": "StudentEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentEmailID']"
												}
											},
											{
												"source": {
													"name": "ClassID",
													"type": "String"
												},
												"sink": {
													"path": "$['ClassID']"
												}
											},
											{
												"source": {
													"name": "TeacherName",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherName']"
												}
											},
											{
												"source": {
													"name": "YearLevel",
													"type": "String"
												},
												"sink": {
													"path": "$['YearLevel']"
												}
											},
											{
												"source": {
													"name": "CampusID",
													"type": "String"
												},
												"sink": {
													"path": "$['CampusID']"
												}
											},
											{
												"source": {
													"name": "Year",
													"type": "String"
												},
												"sink": {
													"path": "$['Year']"
												}
											},
											{
												"source": {
													"name": "StudentName",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentName']"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "String"
												},
												"sink": {
													"path": "$['Status']"
												}
											}
										]
									}
								}
							},
							{
								"source": {
									"listName": "Year2TestResultPre"
								},
								"destination": {
									"fileName": "Year2_Result_Pre.json"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "Ceider",
													"type": "String"
												},
												"sink": {
													"path": "$['Ceider']"
												}
											},
											{
												"source": {
													"name": "Ques1",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques1']"
												}
											},
											{
												"source": {
													"name": "Ques2",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques2']"
												}
											},
											{
												"source": {
													"name": "Ques3",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques3']"
												}
											},
											{
												"source": {
													"name": "Ques4",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques4']"
												}
											},
											{
												"source": {
													"name": "Ques5",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques5']"
												}
											},
											{
												"source": {
													"name": "Ques6",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques6']"
												}
											},
											{
												"source": {
													"name": "Ques7",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques7']"
												}
											},
											{
												"source": {
													"name": "Ques8",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques8']"
												}
											},
											{
												"source": {
													"name": "Ques9",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques9']"
												}
											},
											{
												"source": {
													"name": "Ques10",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques10']"
												}
											},
											{
												"source": {
													"name": "Ques11",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques11']"
												}
											},
											{
												"source": {
													"name": "Ques12",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques12']"
												}
											},
											{
												"source": {
													"name": "Ques13",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques13']"
												}
											},
											{
												"source": {
													"name": "Ques14",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques14']"
												}
											},
											{
												"source": {
													"name": "Ques15",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques15']"
												}
											},
											{
												"source": {
													"name": "Ques16",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques16']"
												}
											},
											{
												"source": {
													"name": "Ques17",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques17']"
												}
											},
											{
												"source": {
													"name": "Ques18",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques18']"
												}
											},
											{
												"source": {
													"name": "Ques19",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques19']"
												}
											},
											{
												"source": {
													"name": "Ques20",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques20']"
												}
											},
											{
												"source": {
													"name": "Ques21",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques21']"
												}
											},
											{
												"source": {
													"name": "Ques22",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques22']"
												}
											},
											{
												"source": {
													"name": "Ques23",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques23']"
												}
											},
											{
												"source": {
													"name": "Ques24",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques24']"
												}
											},
											{
												"source": {
													"name": "Ques25",
													"type": "String"
												},
												"sink": {
													"path": "$['Ques25']"
												}
											},
											{
												"source": {
													"name": "QuestionType",
													"type": "String"
												},
												"sink": {
													"path": "$['QuestionType']"
												}
											},
											{
												"source": {
													"name": "TeacherEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherEmailID']"
												}
											},
											{
												"source": {
													"name": "StudentEmailID",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentEmailID']"
												}
											},
											{
												"source": {
													"name": "ClassID",
													"type": "String"
												},
												"sink": {
													"path": "$['ClassID']"
												}
											},
											{
												"source": {
													"name": "TeacherName",
													"type": "String"
												},
												"sink": {
													"path": "$['TeacherName']"
												}
											},
											{
												"source": {
													"name": "YearLevel",
													"type": "String"
												},
												"sink": {
													"path": "$['YearLevel']"
												}
											},
											{
												"source": {
													"name": "CampusID",
													"type": "String"
												},
												"sink": {
													"path": "$['CampusID']"
												}
											},
											{
												"source": {
													"name": "Year",
													"type": "String"
												},
												"sink": {
													"path": "$['Year']"
												}
											},
											{
												"source": {
													"name": "StudentName",
													"type": "String"
												},
												"sink": {
													"path": "$['StudentName']"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "String"
												},
												"sink": {
													"path": "$['Status']"
												}
											}
										]
									}
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_EarlyYearsResults')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_EarlyYearsResults')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_EarlyYearsSubTeachers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy EYSubTeachers",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "AdditionalTeachers"
							},
							{
								"name": "Destination",
								"value": "stage1np/EarlyYearsSubTeachers/EarlyYearsSubTeachers.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SharePointOnlineListSource",
								"httpRequestTimeout": "00:05:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_EarlyYearsSubTeachers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_EarlyYearsSubTeachers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_EarlyYearsSubTeachers')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_EarlyYearsSubTeachers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_GeneralData_csv')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_bva",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "GeneralData/"
							},
							{
								"name": "Destination",
								"value": "stage1np/_GeneralData/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_bva",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_bva",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_bva')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_bva')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_GeneralData_json')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_79p",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "GeneralData_json/"
							},
							{
								"name": "Destination",
								"value": "stage1np/_GeneralData/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Flag']"
										},
										"sink": {
											"path": "$['Flag']"
										}
									},
									{
										"source": {
											"path": "$['Image']"
										},
										"sink": {
											"path": "$['Image']"
										}
									},
									{
										"source": {
											"path": "$['ATSIId']"
										},
										"sink": {
											"path": "$['ATSIId']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_79p",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_79p",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_79p')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_79p')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_GeneralData_txt')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_kev",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "GeneralData_txt/"
							},
							{
								"name": "Destination",
								"value": "stage1np/_GeneralData/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_kev",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_kev",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_kev')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_kev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_MySchools')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_3hr",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_3hr",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/MySchools/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_MySchools",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_MySchools",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMFactMySchoolsAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsAttendance.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsEnrolmentsByGrade"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsEnrolmentsByGrade.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsFinance"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsFinance.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsNAPLANResults"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResults.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsNAPLANResultsSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResultsSimilarSchools.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsProfile"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsProfile.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsSeniorOutcomes"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsSeniorOutcomes.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGain"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGain.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGainSameStartingScore"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGainSameStartingScore.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGainSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGainSimilarSchools.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsVETInSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsVETInSchools.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships.csv"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsStudentGainGroup"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsStudentGainGroup.csv"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsVETClassification"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsVETClassification.csv"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsVETStatus"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsVETStatus.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_MySchools')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_MySchools')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_NAPLAN')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_aa6",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_aa6",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{item().source.schema}.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/NAPLAN/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_NAPLAN",
											"type": "DatasetReference",
											"parameters": {
												"cw_schema": "@item().source.schema",
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_NAPLAN",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"schema": "dbo",
									"table": "NaplanNationalAverage"
								},
								"destination": {
									"fileName": "dboNaplanNationalAverage.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMySchoolsNAPLANResults"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResults.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMySchoolsNAPLANResultsSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResultsSimilarSchools.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANACARABands"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANACARABands.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANOnlineStudentItemResponse"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANOnlineStudentItemResponse.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANOnlineStudentTestResult"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANOnlineStudentTestResult.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANStudentResponse"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANStudentResponse.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNaplanStudentYearResult"
								},
								"destination": {
									"fileName": "dbovwDMFactNaplanStudentYearResult.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLAN"
								},
								"destination": {
									"fileName": "dbovwDMNAPLAN.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANACARAAggregate"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANACARAAggregate.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANAnswer"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANAnswer.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANAssessmentArea"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANAssessmentArea.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentItemResponse"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentItemResponse.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentResult"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentResult.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentTestResultId"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentTestResultId.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANStudent"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANStudent.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANStudentResponseId"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANStudentResponseId.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANTest"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANTest.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANTextResponse"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANTextResponse.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "AssessmentArea"
								},
								"destination": {
									"fileName": "NAPLANAssessmentArea.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "NAPLAN"
								},
								"destination": {
									"fileName": "NAPLANNAPLAN.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "NAPLANStudentView"
								},
								"destination": {
									"fileName": "NAPLANNAPLANStudentView.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "Student"
								},
								"destination": {
									"fileName": "NAPLANStudent.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "StudentYearResult"
								},
								"destination": {
									"fileName": "NAPLANStudentYearResult.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineTestPath"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineTestPath.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANParticipationCode"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANParticipationCode.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNaplanSourceID"
								},
								"destination": {
									"fileName": "dbovwDMNaplanSourceID.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStateTerritory"
								},
								"destination": {
									"fileName": "dbovwDMStateTerritory.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMExamBands"
								},
								"destination": {
									"fileName": "dbovwDMExamBands.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_NAPLAN')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_NAPLAN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_NAPLANProficiency')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_5sq",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_5sq",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/NAPLANProficiency/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_NAPLANProficiency",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_NAPLANProficiency",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMCalendarYear"
								},
								"destination": {
									"fileName": "DMCalendarYear.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactNAPLANProficiencyStudentItemResponse"
								},
								"destination": {
									"fileName": "DMFactNAPLANProficiencyStudentItemResponse.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactNAPLANProficiencyStudentTestResult"
								},
								"destination": {
									"fileName": "DMFactNAPLANProficiencyStudentTestResult.csv"
								}
							},
							{
								"source": {
									"table": "vwDMNAPLANAssessmentArea"
								},
								"destination": {
									"fileName": "DMNAPLANAssessmentArea.csv"
								}
							},
							{
								"source": {
									"table": "vwDMNAPLANParticipationCode"
								},
								"destination": {
									"fileName": "DMNAPLANParticipationCode.csv"
								}
							},
							{
								"source": {
									"table": "vwDMNAPLANProficiencyLevel"
								},
								"destination": {
									"fileName": "DMNAPLANProficiencyLevel.csv"
								}
							},
							{
								"source": {
									"table": "vwDMNAPLANProficiencyStudentResult"
								},
								"destination": {
									"fileName": "DMNAPLANProficiencyStudentResult.csv"
								}
							},
							{
								"source": {
									"table": "vwDMNAPLANProficiencyTest"
								},
								"destination": {
									"fileName": "DMNAPLANProficiencyTest.csv"
								}
							},
							{
								"source": {
									"table": "vwDMNAPLANProficiencyTestItem"
								},
								"destination": {
									"fileName": "DMNAPLANProficiencyTestItem.csv"
								}
							},
							{
								"source": {
									"table": "vwDMNAPLANProficiencyTestlet"
								},
								"destination": {
									"fileName": "DMNAPLANProficiencyTestlet.csv"
								}
							},
							{
								"source": {
									"table": "vwDMNAPLANProficiencyTestPath"
								},
								"destination": {
									"fileName": "DMNAPLANProficiencyTestPath.csv"
								}
							},
							{
								"source": {
									"table": "vwDMYearLevel"
								},
								"destination": {
									"fileName": "DMYearLevel.csv"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_NAPLANProficiency')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_NAPLANProficiency')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_NAPLANProficiencyMeans')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_wjq",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.vwDMFactNAPLANACARAProficiency"
							},
							{
								"name": "Destination",
								"value": "stage1np/NAPLANProficiency/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_NAPLANProficiencyMeans",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_NAPLANProficiencyMeans",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_NAPLANProficiencyMeans')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_NAPLANProficiencyMeans')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_NCCD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_mg1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_mg1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/NCCD/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_NCCD",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_NCCD",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMCensusStudentWithDisabilityId"
								},
								"destination": {
									"fileName": "dbovwDMCensusStudentWithDisabilityId.csv"
								}
							},
							{
								"source": {
									"table": "vwDMDisabilityCategoryAdjustment"
								},
								"destination": {
									"fileName": "dbovwDMDisabilityCategoryAdjustment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactCensusStudentWithDisability"
								},
								"destination": {
									"fileName": "dbovwDMFactCensusStudentWithDisability.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_NCCD')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_NCCD')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ODS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_dk4",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_dk4",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "Compass.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/_ODS/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_dk4",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_dk4",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "ODSActivity"
								},
								"destination": {
									"fileName": "CompassODSActivity.csv"
								}
							},
							{
								"source": {
									"table": "ODSActivityEnrolment"
								},
								"destination": {
									"fileName": "CompassODSActivityEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "ODSCompassSubject"
								},
								"destination": {
									"fileName": "CompassODSCompassSubject.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffDemographic"
								},
								"destination": {
									"fileName": "CompassODSStaffDemographic.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffOrganisationDetails"
								},
								"destination": {
									"fileName": "CompassODSStaffOrganisationDetails.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentOrganisationDetails"
								},
								"destination": {
									"fileName": "CompassODSStudentOrganisationDetails.csv"
								}
							},
							{
								"source": {
									"table": "ODSStudentOrganisationMilestones"
								},
								"destination": {
									"fileName": "CompassODSStudentOrganisationMilestones.csv"
								}
							},
							{
								"source": {
									"table": "ODSStaffOrganisationMilestones"
								},
								"destination": {
									"fileName": "CompassODSStaffOrganisationMilestones.csv"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_dk4')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_dk4')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ODSActivityInstance')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_6bd",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/_ODSActivityInstance/CompassODSActivityInstance.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select \r\nSKActivityInstance\r\n, BKActivityInstance\r\n, SubjectCode\r\n, ActivityCode\r\n, Start\r\n, Finish\r\n, ManagingCompassPersonId\r\n, CoveringCompassPersonId\r\n, CampusImportIdentifier\r\n, CampusId\r\n, IsCurrent\r\n, DioceseId\r\n\r\nfrom Compass.ODSActivityInstance",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ODSActivityInstance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ODSActivityInstance",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ODSActivityInstance')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ODSActivityInstance')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ODSDemoFull')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_x82",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "Compass.ODSStudentDemographic"
							},
							{
								"name": "Destination",
								"value": "stage1np/ODSStudentDemographicFull/CompassODSStudentDemographicFull"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ODSDemoFull",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ODSDemoFull",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ODSDemoFull')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ODSDemoFull')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ODSStudentDemo')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_zxg",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/_ODSStudentDemographic/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\n    SKStudent\n    , CompassPersonId \n    , FirstName\n    , LastName\n    , GovCode1\n    , IsCurrent\n    , Gender\nfrom Compass.ODSStudentDemographic",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ODSStudentDemo",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ODSStudentDemo",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ODSStudentDemo')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ODSStudentDemo')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_SchoolListCSV')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_3i5",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "SupportingData/_SchoolList.csv"
							},
							{
								"name": "Destination",
								"value": "stage1np/_SupportData/SchoolList.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_SchoolListCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_SchoolListCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_SchoolListCSV')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_SchoolListCSV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_SeniorData')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_6ft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "SeniorData/"
							},
							{
								"name": "Destination",
								"value": "stage1np/_SeniorData/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_6ft",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_6ft",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_6ft')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_6ft')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_SeniorOutcomes_FormResponses')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_rmi",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "SeniorOutcomes_FormResponses/"
							},
							{
								"name": "Destination",
								"value": "stage1np/SeniorOutcomes_FormResponses/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_SeniorOutcomes_FormResponses",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_SeniorOutcomes_FormResponses",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_SeniorOutcomes_FormResponses')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_SeniorOutcomes_FormResponses')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_class_period')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_lq2",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_lq2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/class_period/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_class_period",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_class_period",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMClass"
								},
								"destination": {
									"fileName": "dbovwDMClass.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPeriodAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactPeriodAttendance.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_class_period')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_class_period')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_daw",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_daw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/enrolment/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_enrolment",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_enrolment",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMEnrolmentStatus"
								},
								"destination": {
									"fileName": "dbovwDMEnrolmentStatus.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudentEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudentEnrolmentCounts"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolmentCounts.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactSubjectEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactSubjectEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPreEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMPreEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMActivity"
								},
								"destination": {
									"fileName": "dbovwDMActivity.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSubject"
								},
								"destination": {
									"fileName": "dbovwDMSubject.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPreEnrolmentId"
								},
								"destination": {
									"fileName": "dbovwDMPreEnrolmentId.csv"
								}
							},
							{
								"source": {
									"table": "vwDMRollGroup"
								},
								"destination": {
									"fileName": "dbovwDMRollGroup.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_enrolment')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_enrolment')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_student_object')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_61r",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_61r",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/student/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_student_profile_object",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_student_profile_object",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMDetailedStudentPreSubmission"
								},
								"destination": {
									"fileName": "dbovwDMDetailedStudentPreSubmission.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPersonMilestone"
								},
								"destination": {
									"fileName": "dbovwDMFactPersonMilestone.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudent"
								},
								"destination": {
									"fileName": "dbovwDMFactStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudentEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPersonDemographic"
								},
								"destination": {
									"fileName": "dbovwDMPersonDemographic.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentOrganisationDetails"
								},
								"destination": {
									"fileName": "dbovwDMStudentOrganisationDetails.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentSchoolHistory"
								},
								"destination": {
									"fileName": "dbovwDMStudentSchoolHistory.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentType"
								},
								"destination": {
									"fileName": "dbovwDMStudentType.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_student_profile_object')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_student_profile_object')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_student_object_2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_6wf",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/student/dbovwDMStudent.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\r\nSKStudent,\r\nBKSourceStudentId,\r\nBKPersistentStudentId,\r\nCampusId,\r\nCampusName,\r\nSchoolId,\r\nSchoolName,\r\nDioceseId,\r\nDioceseName,\r\nVisaSubClassId,\r\nVisaSubClassDesc,\r\nVisaIdentificationNumber,\r\nVisaExpiryData,\r\nVisaEndDate,\r\nCitizenshipResidencyStatusId,\r\nCitizenshipResidencyStatusDesc,\r\nBoarder,\r\nSingleNameOnly,\r\nOfficialFirstName,\r\nPreferredFirstName,\r\nOfficialSurname,\r\nPreferredSurname,\r\nDOB,\r\nGenderId,\r\nGenderSifDesc,\r\nBirthCountryId,\r\nBirthCountrySifDesc,\r\nPrimaryCitizenshipCountryId,\r\nPrimaryCitizenshipCountrySifDesc,\r\nPrimaryPassportIssueCountryId,\r\nPrimaryPassportIssueCountrySifDesc,\r\nAttendanceStatusId,\r\nAttendanceStatusSifDesc,\r\nRollGroup,\r\nFFPOS,\r\nESLYesNo,\r\nEslLanguageId,\r\nESLLanguageSifDesc,\r\nLBOTEYesNo,\r\nLBOTELanguageId,\r\nLBOTELanguageSifDesc,\r\nAtsiId,\r\nATSIDesc,\r\nReligionId,\r\nReligionDesc,\r\nSWDYesNo,\r\nSwdId,\r\nSwdSifDesc,\r\nStudentAddressStreet,\r\nStudentAddressSuburb,\r\nStudentAddressPostCode,\r\nBKStudentAddressState,\r\nStudentAddressState,\r\ncast(StudentAddressGeoData as nvarchar),\r\nStudentAddressLongitude,\r\nStudentAddressLatitude,\r\nHomePhone,\r\nHomeEmail,\r\nStudentMobile,\r\nStudentEmail,\r\nGuardian1FirstName,\r\nGuardian1Surname,\r\nGuardian1Phone,\r\nGuardian1Mobile,\r\nGuardian1Email,\r\nGuardian1OccupationalGroupId,\r\nGuardian1OccupationalGroupSifDesc,\r\nGuardian1EducationSchoolLevelId,\r\nGuardian1EducationSchoolLevelSifDesc,\r\nGuardian1EducationNonSchoolLevelId,\r\nGuardian1EducationNonSchoolLevelSifDesc,\r\nGuardian1LanguageId,\r\nGuardian1LanguageSifDesc,\r\nGuardian2FirstName,\r\nGuardian2Surname,\r\nGuardian2Phone,\r\nGuardian2Mobile,\r\nGuardian2Email,\r\nGuardian2OccupationalGroupId,\r\nGuardian2OccupationalGroupSifDesc,\r\nGuardian2EducationSchoolLevelId,\r\nGuardian2EducationSchoolLevelSifDesc,\r\nGuardian2EducationNonSchoolLevelId,\r\nGuardian2EducationNonSchoolLevelSifDesc,\r\nGuardian2LanguageId,\r\nGuardian2LanguageSifDesc,\r\nBaptismDate,\r\nFirstReconciliationDate,\r\nFirstEucharistDate,\r\nConfirmationDate,\r\nBaptismParish,\r\nCreateDate,\r\nEffectiveStartDate,\r\nEffectiveEndDate,\r\nIsCurrent,\r\nScdReason,\r\nLastUpdateDate,\r\nMainCampusId,\r\nOrganisationUserId,\r\nSKPerson,\r\nStudentReportingId,\r\nAccessRestrictions_YN,\r\nAccessRestrictionsInt\r\nfrom dbo.vwDMStudent\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_student_profile_object_2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_student_profile_object_2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_student_profile_object_2')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_student_profile_object_2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_test_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_op9",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/test_enrolment /testenroldata.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "USE DBTOW\r\n--Active  and current Enrolments\r\nSELECT \r\nSchoolID AS SchoolAGEID,\r\nLocationID AS LocationAGEID,\r\nc.CampusSuburbAndName,\r\npd.FirstName,\r\npd.LastName,\r\nyl.YearLevelSifDesc AS YearLevel,\r\nrg.RollGroupDesc AS RollGroup,\r\npd.Ceider\r\nFROM dbo.vwDMFactPersonMilestone f\r\nJOIN dbo.vwDMPersonDemographic pd ON f.SKPerson = pd.SKPerson\r\nJOIN dbo.vwDMCampus c ON f.SKCampus = c.SKCampus\r\nJOIN dbo.vwDMYearLevel yl ON f.SKYearLevel = yl.SKYearLevel\r\nJOIN dbo.vwDMRollGroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n\r\nWHERE \r\nf.IsCurrentMilestone = 1\r\nAND f.IsActiveMilestone = 1\r\nAND pd.PersonType = 'Student'\r\nORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_op9",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_op9",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_op9')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_op9')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_all_from_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get list of tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select schema_name(t.schema_id) as schema_name, t.name as table_name\nfrom sys.tables t",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set currentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDateTime",
							"value": {
								"value": "@{formatDateTime(convertTimeZone(utcnow(), 'UTC', pipeline().parameters.timezone), 'yyyy-MM-ddTHHmm_ss')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get list of tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set currentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get list of tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy_from_Azure_SQL_DB",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy_from_Azure_SQL_DB",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"dbServer": {
												"value": "@pipeline().parameters.dbServer",
												"type": "Expression"
											},
											"dbName": {
												"value": "@pipeline().parameters.dbName",
												"type": "Expression"
											},
											"userName": {
												"value": "@pipeline().parameters.userName",
												"type": "Expression"
											},
											"keyVaultSecretName": {
												"value": "@pipeline().parameters.keyVaultSecretName",
												"type": "Expression"
											},
											"query": {
												"value": "select * from @{item().schema_name}.@{item().table_name}",
												"type": "Expression"
											},
											"sinkFilesystem": {
												"value": "@pipeline().parameters.sinkFilesystem",
												"type": "Expression"
											},
											"sinkDirectory": {
												"value": "@{pipeline().parameters.sinkDirectory}/@{variables('currentDateTime')}/@{item().table_name}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "contosoisd3a.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqladmin-password"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db"
					},
					"timezone": {
						"type": "string",
						"defaultValue": "Eastern Standard Time"
					}
				},
				"variables": {
					"currentDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "External Extraction Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:07Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy from Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.query",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_parquet",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sinkDirectory",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "contosoisd3a.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqladmin-password"
					},
					"query": {
						"type": "string",
						"defaultValue": "select * from person"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db/person"
					}
				},
				"folder": {
					"name": "External Extraction Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_URL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copies data from the specified URL and lands it in the specified location in the data lake.",
				"activities": [
					{
						"name": "copy from URL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "URL",
								"value": "@pipeline().parameters.URL"
							},
							{
								"name": "sinkFilesystem",
								"value": "@pipeline().parameters.sinkFilesystem"
							},
							{
								"name": "sinkFilename",
								"value": "@pipeline().parameters.sinkFilename"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_HTTP_binary",
								"type": "DatasetReference",
								"parameters": {
									"URL": {
										"value": "@pipeline().parameters.URL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_binary_file",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.sinkFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"URL": {
						"type": "string",
						"defaultValue": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentattendance.csv"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkFilename": {
						"type": "string",
						"defaultValue": "contoso_sis/example1/studentattendance.csv"
					}
				},
				"folder": {
					"name": "External Extraction Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_HTTP_binary')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_file')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_each_URL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieves data from multiple HTTP endpoints as specified in the 'endpoints' parameter.\nThe data is landed in the data lake within a folder named with the current datetime (in the timezone specified).\n\nFor a list of timezones, see: https://docs.microsoft.com/en-us/azure/data-factory/control-flow-expression-language-functions#convertfromutc",
				"activities": [
					{
						"name": "get data for each endpoint",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set currentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.endpoints",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "Copy_from_URL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy_from_URL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"URL": {
												"value": "@item().URL",
												"type": "Expression"
											},
											"sinkFilesystem": {
												"value": "@pipeline().parameters.sinkFilesystem",
												"type": "Expression"
											},
											"sinkFilename": {
												"value": "@{item().sinkDirectory}/@{variables('currentDateTime')}/@{item().sinkFilename}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set currentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDateTime",
							"value": {
								"value": "@{formatDateTime(convertTimeZone(utcnow(), 'UTC', pipeline().parameters.timezone), 'yyyy-MM-ddTHHmm_ss')}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"endpoints": {
						"type": "array",
						"defaultValue": [
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentattendance.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentattendance/studentattendance.csv"
							},
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentdemographics.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentdemographics/studentdemographics.csv"
							},
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentsectionmark.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentsectionmark/studentsectionmark.csv"
							}
						]
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"timezone": {
						"type": "string",
						"defaultValue": "Eastern Standard Time"
					}
				},
				"variables": {
					"currentDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "External Extraction Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_URL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_LakeDB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_lake_db",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"stageNum": "3",
								"sourceDirectory": "pilot"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_lake_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_LakeDB_nohashing')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_lake_db_nohashing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"stageNum": "3",
								"sourceDirectory": "pilot"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_lake_db_nohashing')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_SQLDB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create SQL DB",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_sql_db",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"storageAccount": "stoeatceooeadev01",
								"sourceDirectory": "pilot",
								"stage": "3"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_sql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_SQLDB_nohashing')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create SQL DB",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_sql_db_nohashing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"storageAccount": "stoeatceooeadev01",
								"sourceDirectory": "pilot",
								"stage": "3"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_sql_db_nohashing')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EarlyYears Refresh Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Delete_EarlyYears",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "Copy EarlyYearsResults",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_EarlyYearsResults",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy ODS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_ODS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy ODSActivityInstance",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_ODSActivityInstance",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy ODSDemoFull",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_ODSDemoFull",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy ODSStudentDemo",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_ODSStudentDemo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingestion earlyyears",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy EarlyYearsResults",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2_earlyyears",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy EarlyYearsSubTeachers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_EarlyYearsSubTeachers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingestion eysubteachers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy EarlyYearsSubTeachers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2_eysubteachers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingestion_stage2_ods",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy ODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2_ods",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingestion_stage2_ods_activityinstance",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy ODSActivityInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2_ods_activityinstance",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingestion_stage2_ods_studentdemoFull",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy ODSDemoFull",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2_ods_studentdemoFull",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingestion_stage2_ods_studentdemo",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy ODSStudentDemo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2_ods_studentdemo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Stage3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingestion eysubteachers",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ingestion earlyyears",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ingestion_stage2_ods",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ingestion_stage2_ods_activityinstance",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ingestion_stage2_ods_studentdemoFull",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ingestion_stage2_ods_studentdemo",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ingestion_stage2_student_profile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Stage3",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CopyPipeline_student_object",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_student_object",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingestion_stage2_student_profile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyPipeline_student_object",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2_student_profile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Delete_EarlyYears')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_EarlyYearsResults')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_ODS')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_ODSActivityInstance')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_ODSDemoFull')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_ODSStudentDemo')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_earlyyears')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_EarlyYearsSubTeachers')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_eysubteachers')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_ods')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_ods_activityinstance')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_ods_studentdemoFull')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_ods_studentdemo')]",
				"[concat(variables('workspaceId'), '/pipelines/Stage3')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_student_object')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_student_profile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ingestion_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MCopy_EYAnswers_9f9_BottomLevel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).folderPath}/@{json(item().SourceObjectSettings).fileName}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureFileStorageReadSettings",
																	"recursive": {
																		"value": "@json(item().CopySourceSettings).recursive",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": {
																		"value": "@json(item().CopySourceSettings).enablePartitionDiscovery",
																		"type": "Expression"
																	}
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings",
																	"skipLineCount": {
																		"value": "@json(item().CopySourceSettings).skipLineCount",
																		"type": "Expression"
																	}
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": {
																		"value": "@json(item().CopySinkSettings).quoteAllText",
																		"type": "Expression"
																	},
																	"fileExtension": {
																		"value": "@json(item().CopySinkSettings).fileExtension",
																		"type": "Expression"
																	}
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MCopy_EYAnswers_9f9_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_columnDelimiter": {
																		"value": "@json(item().SourceObjectSettings).columnDelimiter",
																		"type": "Expression"
																	},
																	"cw_escapeChar": {
																		"value": "@json(item().SourceObjectSettings).escapeChar",
																		"type": "Expression"
																	},
																	"cw_quoteChar": {
																		"value": "@json(item().SourceObjectSettings).quoteChar",
																		"type": "Expression"
																	},
																	"cw_firstRowAsHeader": {
																		"value": "@json(item().SourceObjectSettings).firstRowAsHeader",
																		"type": "Expression"
																	},
																	"cw_fileName": {
																		"value": "@json(item().SourceObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SourceObjectSettings).folderPath",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MCopy_EYAnswers_9f9_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_columnDelimiter": {
																		"value": "@json(item().SinkObjectSettings).columnDelimiter",
																		"type": "Expression"
																	},
																	"cw_escapeChar": {
																		"value": "@json(item().SinkObjectSettings).escapeChar",
																		"type": "Expression"
																	},
																	"cw_quoteChar": {
																		"value": "@json(item().SinkObjectSettings).quoteChar",
																		"type": "Expression"
																	},
																	"cw_firstRowAsHeader": {
																		"value": "@json(item().SinkObjectSettings).firstRowAsHeader",
																		"type": "Expression"
																	},
																	"cw_fileName": {
																		"value": "@json(item().SinkObjectSettings).fileName",
																		"type": "Expression"
																	},
																	"cw_folderPath": {
																		"value": "@json(item().SinkObjectSettings).folderPath",
																		"type": "Expression"
																	},
																	"cw_fileSystem": {
																		"value": "@json(item().SinkObjectSettings).fileSystem",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).folderPath}/@{json(item().SourceObjectSettings).fileName}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).fileSystem}/@{json(item().SinkObjectSettings).folderPath}/@{json(item().SinkObjectSettings).fileName}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureFileStorageReadSettings",
															"recursive": {
																"value": "@json(item().CopySourceSettings).recursive",
																"type": "Expression"
															},
															"enablePartitionDiscovery": {
																"value": "@json(item().CopySourceSettings).enablePartitionDiscovery",
																"type": "Expression"
															}
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"skipLineCount": {
																"value": "@json(item().CopySourceSettings).skipLineCount",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": {
																"value": "@json(item().CopySinkSettings).quoteAllText",
																"type": "Expression"
															},
															"fileExtension": {
																"value": "@json(item().CopySinkSettings).fileExtension",
																"type": "Expression"
															}
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MCopy_EYAnswers_9f9_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_columnDelimiter": {
																"value": "@json(item().SourceObjectSettings).columnDelimiter",
																"type": "Expression"
															},
															"cw_escapeChar": {
																"value": "@json(item().SourceObjectSettings).escapeChar",
																"type": "Expression"
															},
															"cw_quoteChar": {
																"value": "@json(item().SourceObjectSettings).quoteChar",
																"type": "Expression"
															},
															"cw_firstRowAsHeader": {
																"value": "@json(item().SourceObjectSettings).firstRowAsHeader",
																"type": "Expression"
															},
															"cw_fileName": {
																"value": "@json(item().SourceObjectSettings).fileName",
																"type": "Expression"
															},
															"cw_folderPath": {
																"value": "@json(item().SourceObjectSettings).folderPath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MCopy_EYAnswers_9f9_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_columnDelimiter": {
																"value": "@json(item().SinkObjectSettings).columnDelimiter",
																"type": "Expression"
															},
															"cw_escapeChar": {
																"value": "@json(item().SinkObjectSettings).escapeChar",
																"type": "Expression"
															},
															"cw_quoteChar": {
																"value": "@json(item().SinkObjectSettings).quoteChar",
																"type": "Expression"
															},
															"cw_firstRowAsHeader": {
																"value": "@json(item().SinkObjectSettings).firstRowAsHeader",
																"type": "Expression"
															},
															"cw_fileName": {
																"value": "@json(item().SinkObjectSettings).fileName",
																"type": "Expression"
															},
															"cw_folderPath": {
																"value": "@json(item().SinkObjectSettings).folderPath",
																"type": "Expression"
															},
															"cw_fileSystem": {
																"value": "@json(item().SinkObjectSettings).fileSystem",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "MCopy_EYAnswers_9f9_20230413"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MCopy_EYAnswers_9f9_SourceDS')]",
				"[concat(variables('workspaceId'), '/datasets/MCopy_EYAnswers_9f9_DestinationDS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MCopy_EYAnswers_9f9_MiddleLevel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MCopy_EYAnswers_9f9_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MCopy_EYAnswers_9f9_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MCopy_EYAnswers_9f9_20230413"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MCopy_EYAnswers_9f9_ControlDS')]",
				"[concat(variables('workspaceId'), '/pipelines/MCopy_EYAnswers_9f9_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MCopy_EYAnswers_9f9_TopLevel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MCopy_EYAnswers_9f9_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MCopy_EYAnswers_9f9_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "dbo.ControlTable"
					}
				},
				"folder": {
					"name": "MCopy_EYAnswers_9f9_20230413"
				},
				"annotations": [
					"MetadataDrivenSolution"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MCopy_EYAnswers_9f9_ControlDS')]",
				"[concat(variables('workspaceId'), '/pipelines/MCopy_EYAnswers_9f9_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Main Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Data to Stage1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Stage1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Move Data to Stage2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Data to Stage1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Stage2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Transformations and Stage3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Move Data to Stage2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Stage3",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Stage1')]",
				"[concat(variables('workspaceId'), '/pipelines/Stage2')]",
				"[concat(variables('workspaceId'), '/pipelines/Stage3')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PreProcessing_AESemesterReports')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "AE_Semester PreProcessing",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AE_SemesterReports_Preprocessing",
								"type": "DataFlowReference",
								"parameters": {
									"dataflow_file": {
										"value": "'@{\"/default\"}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AESemesterReports": {},
									"AESemesterReportsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/AE_SemesterReports_Preprocessing')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PreProcessing_AESemesterReports_filename')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get File Name",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DestinationDataset_AE_SemesterReports",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "For Each File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File Name').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "AE_SemesterReports_Preprocessing",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "AE_SemesterReports_Preprocessing",
											"type": "DataFlowReference",
											"parameters": {
												"dataflow_file": {
													"value": "'@{item().name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"AESemesterReports": {},
												"AESemesterReportsSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_AE_SemesterReports')]",
				"[concat(variables('workspaceId'), '/dataflows/AE_SemesterReports_Preprocessing')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stage1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "If Acer",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.acer",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy ACER part1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_ACER_part1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {}
									}
								},
								{
									"name": "Copy ACER part2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy ACER part1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_ACER_part2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If attendance",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.attendance",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline Attendance",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_Attendance",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Class-Period",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.class_period",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline class_period",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_class_period",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Enrolment",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.enrolment",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline enrolment",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_enrolment",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If MySchools",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.myschools",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline MySchools",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_MySchools",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Naplan",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.naplan",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline NAPLAN",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_NAPLAN",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If NCCD",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.nccd",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline NCCD",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_NCCD",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Student",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.student",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyPipeline student_object",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_student_object",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "CopyPipeline student_object_2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "CopyPipeline student_object",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_student_object_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"acer": {
						"type": "bool",
						"defaultValue": true
					},
					"attendance": {
						"type": "bool",
						"defaultValue": false
					},
					"class_period": {
						"type": "bool",
						"defaultValue": false
					},
					"enrolment": {
						"type": "bool",
						"defaultValue": true
					},
					"myschools": {
						"type": "bool",
						"defaultValue": false
					},
					"naplan": {
						"type": "bool",
						"defaultValue": false
					},
					"nccd": {
						"type": "bool",
						"defaultValue": false
					},
					"student": {
						"type": "bool",
						"defaultValue": true
					},
					"supportingdata": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_ACER_part1')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_ACER_part2')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_Attendance')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_class_period')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_enrolment')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_MySchools')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_NAPLAN')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_NCCD')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_student_object')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_student_object_2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stage2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "If acer",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.acer",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_acer",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_acer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If AE",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.ae",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_ae",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_ae",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If attendance",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.attendance",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_attendance",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_attendance",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Class-period",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.class_period",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_class_period",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_class_period",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If enrolment",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.enrolment",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_enrolment",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_enrolment",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If MySchools",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.myschools",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_myschools",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_myschools",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Naplan",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.naplan",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_naplan",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_naplan",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If NCCD",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.nccd",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_nccd",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_nccd",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Student",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.student",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_student_profile",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_student_profile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If AE Manual",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.ae_manual",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_ae_manual",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_ae_manual",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If SupportingData",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.supportingdata",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_supportingdata",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_supportingdata",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"acer": {
						"type": "bool",
						"defaultValue": true
					},
					"ae": {
						"type": "bool",
						"defaultValue": false
					},
					"attendance": {
						"type": "bool",
						"defaultValue": false
					},
					"class_period": {
						"type": "bool",
						"defaultValue": false
					},
					"enrolment": {
						"type": "bool",
						"defaultValue": true
					},
					"myschools": {
						"type": "bool",
						"defaultValue": false
					},
					"naplan": {
						"type": "bool",
						"defaultValue": false
					},
					"nccd": {
						"type": "bool",
						"defaultValue": false
					},
					"student": {
						"type": "bool",
						"defaultValue": true
					},
					"ae_manual": {
						"type": "bool",
						"defaultValue": true
					},
					"supportingdata": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_acer')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_ae')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_attendance')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_class_period')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_enrolment')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_myschools')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_naplan')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_nccd')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_student_profile')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_ae_manual')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_supportingdata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stage3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Transform and Move to Stage3",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Transforms_Connector",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					},
					{
						"name": "If create_sql_db",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Transform and Move to Stage3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.create_sql_db",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Create_SQLDB_nohashing",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create_SQLDB_nohashing",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If create_lake_db",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Transform and Move to Stage3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.create_lake_db",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Create_LakeDB_nohashing",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create_LakeDB_nohashing",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"create_sql_db": {
						"type": "bool",
						"defaultValue": true
					},
					"create_lake_db": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Transforms_Connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]",
				"[concat(variables('workspaceId'), '/pipelines/Create_SQLDB_nohashing')]",
				"[concat(variables('workspaceId'), '/pipelines/Create_LakeDB_nohashing')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_lake_db')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create_lake_db",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "kwargs",
								"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':@{pipeline().parameters.sourceDirectory}"
							}
						],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "oea",
									"type": "string"
								},
								"method_name": {
									"value": "create_lake_db",
									"type": "string"
								},
								"kwargs": {
									"value": {
										"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':'@{pipeline().parameters.sourceDirectory}'}",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"stageNum": {
						"type": "string",
						"defaultValue": "3"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "pilot"
					}
				},
				"folder": {
					"name": "Data Lake Ingestion Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_lake_db_nohashing')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create_lake_db_nohashing",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "kwargs",
								"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':@{pipeline().parameters.sourceDirectory}"
							}
						],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "oea",
									"type": "string"
								},
								"method_name": {
									"value": "create_lake_db_nohashing",
									"type": "string"
								},
								"kwargs": {
									"value": {
										"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':'@{pipeline().parameters.sourceDirectory}'}",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"stageNum": {
						"type": "string",
						"defaultValue": "3"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "pilot"
					}
				},
				"folder": {
					"name": "Data Lake Ingestion Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_sql_db')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "set sqlDBName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "sqlDBName",
							"value": {
								"value": "sqls@{pipeline().parameters.stage}_@{pipeline().parameters.sourceDirectory}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "set sqlDBName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_executesql]",
							"storedProcedureParameters": {
								"command": {
									"value": {
										"value": "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '@{variables('sqlDBName')}') \nBEGIN\n  CREATE DATABASE @{variables('sqlDBName')}; \nEND;",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_Serverless_OEA",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "master"
							}
						}
					},
					{
						"name": "get folders in stageXp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}p",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for pseduonymized tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "get folders in stageXnp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}np",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXnp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXnp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for lookup tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}np/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeatceooeadev01"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "pilot"
					},
					"stage": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"variables": {
					"sqlDBName": {
						"type": "String",
						"defaultValue": "sqls2_dev"
					}
				},
				"folder": {
					"name": "Data Lake Ingestion Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_Serverless_OEA')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_sql_db_nohashing')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "set sqlDBName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "sqlDBName",
							"value": {
								"value": "sqls@{pipeline().parameters.stage}_@{pipeline().parameters.sourceDirectory}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "set sqlDBName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_executesql]",
							"storedProcedureParameters": {
								"command": {
									"value": {
										"value": "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '@{variables('sqlDBName')}') \nBEGIN\n  CREATE DATABASE @{variables('sqlDBName')}; \nEND;",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_Serverless_OEA",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "master"
							}
						}
					},
					{
						"name": "get folders in stageXp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}p",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for pseduonymized tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeatceooeadev01"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "pilot"
					},
					"stage": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"variables": {
					"sqlDBName": {
						"type": "String",
						"defaultValue": "sqls2_dev"
					}
				},
				"folder": {
					"name": "Data Lake Ingestion Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_Serverless_OEA')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "acer",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage2np"
					}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_ATAR')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_ATAR",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "atar_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "ATAR",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_ATAR')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_DIMTables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest Acer to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_DIMTables",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "dimtables_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "DimensionTables",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_DIMTables')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_acer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest Acer to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Acer",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "acer_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "ACER",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Acer')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_acerNorms')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest AcerNorms to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_AcerNorms",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "acerNorms_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "ACERNorms",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_AcerNorms')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_ae')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_AE",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "ae_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "AE",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_AE')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_ae_manual')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2 AE Manual 1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_AE_Manual",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "ae_sr_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "_AE_ManualUploadRawFiles",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					},
					{
						"name": "Ingest to Stage2 AE Manual 2",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Ingest to Stage2 AE Manual 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_AE_Manual_2",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "ae_lt_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "_AE_ManualUploadRawFiles",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_AE_Manual')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]",
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_AE_Manual_2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_aedc')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest AEDC to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_AEDC",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "aedc_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "AEDC",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_AEDC')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_aeresultcombined')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_AEResultsCombined",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "aeresultscombined_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "AEResultsCombined",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_AEResultsCombined')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_attendance')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Attendance",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "attendance_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "attendance",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Attendance')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_class_period')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Class_Period",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "class_period_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "class_period",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Class_Period')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_earlyyears')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_EarlyYears",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "EarlyYearsResults_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "EarlyYearsResults",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_EarlyYears')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Enrolment",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "enrolment_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "enrolment",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Enrolment')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_eyanswers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_EYAnswers",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "EarlyYearsAnswers_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "EarlyYearsAnswers",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_EYAnswers')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_eyquestions')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_EYQuestions",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "EarlyYearsQuestions_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "EarlyYearsQuestions",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_EYQuestions')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_eysubteachers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_EYSubTeachers",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "EarlyYearsSubTeachers_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "EarlyYearsSubTeachers",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_EYSubTeachers')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_generaldata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2 - GeneralData",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_GeneralData",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "generaldata_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "GeneralData",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_GeneralData')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_myschools')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_MySchools",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "myschools_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "MySchools",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_MySchools')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_naplan')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_NAPLAN",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "naplan_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "NAPLAN",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_NAPLAN')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_naplanproficiency')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_NAPLANProficiency",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "naplanproficiency_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "NAPLANProficiency",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_NAPLANProficiency')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_nccd')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_NCCD",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "nccd_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "NCCD",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_NCCD')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_ods')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest Acer to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_ODS",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "ods_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "ODS",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_ODS')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_ods_activityinstance')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest ODS activity instance to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_ODSActivityInstance",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "ods_activityinstance_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "ODSActivityInstance",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_ODSActivityInstance')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_ods_studentdemo')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest ODS Studentdmo to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_ODSStudentDemo",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "ods_StudentDemo_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "ODSStudentDemographic",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_ODSStudentDemo')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_ods_studentdemoFull')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest ODS Studentdmo to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_ODSStudentDemoFull",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "ods_StudentDemoFull_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "ODSStudentDemographicFull",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_ODSStudentDemoFull')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_seniordata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2 - SeniorData",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_SeniorData",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "seniordata_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "_SeniorData",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_SeniorData')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_student_profile')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Student_Profile",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "student_profile",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "student",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Student_Profile')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_subjectexclusionlist')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_SubjectExclusionList",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "subjectexclusionlist_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "SubjectExclusionList",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_SubjectExclusionList')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_supportingdata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2 - SupportingData",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_SupportingData",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "supportingdata_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "_SupportData",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_SupportingData')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reset_all_for_source')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Deletes the ingestion for the specified system and table - in order to start over when testing during implementation.",
				"activities": [
					{
						"name": "delete source system dir from stage1np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2np",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2p",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sourceSystem": {
						"type": "string",
						"defaultValue": "contoso_sis"
					}
				},
				"folder": {
					"name": "Data Reset Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:20:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reset_ingestion_of_table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Deletes the ingestion for the specified system and table - in order to start over when testing during implementation.",
				"activities": [
					{
						"name": "delete _checkpoints_p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}/_checkpoints_p",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete _checkpoints_np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}/_checkpoints_np",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2p",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sourceSystem": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "studentattendance"
					}
				},
				"folder": {
					"name": "Data Reset Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:20:24Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AggWholeDayAttendanceBySchool')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAggWholeDayAttendanceBySchool",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKCampus",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKAttendanceDate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKGender",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKATSI",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKYearLevel",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalSchoolMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalMinutesMissed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MinutesArrivedLate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MinutesDepartedEarly",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnmarkedMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnscheduledMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ArrivedLate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DepartedEarly",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WholeDayAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PartialAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NoAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CountAttended",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "Disability",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwAggWholeDayAttendanceBySchool"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_binary_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used for landing data in the data lake.\nDefaults to landing data in stage1np.\nNote that you can specify a full path in the filename param (eg, to land a file in a specific folder filename param can be 'contoso_sis/students/students.csv').\n",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_binary_folder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used for landing data in the data lake as in parquet format.\nDefaults to landing data in stage1np.\nNote that you cannot specify a filename because with parquet the filename should be auto-generated.\n",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SQL_DB",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbServer": {
							"value": "@dataset().dbServer",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						},
						"userName": {
							"value": "@dataset().userName",
							"type": "Expression"
						},
						"keyVaultSecretName": {
							"value": "@dataset().keyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "myserver.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "testdb"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqlAdmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqlAdminPwd"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "student"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_HTTP_binary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieves data from an http endpoint.\nThe data can be in any format - the binary dataset allows us to pull any payload without affecting it.",
				"linkedServiceName": {
					"referenceName": "LS_HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"baseURL": {
							"value": "@dataset().URL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"URL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_45g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student2",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_4cb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "AEDC",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_6ft')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_SeniorData",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_79p')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_GeneralData",
						"fileSystem": "stage1np"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACER')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "ACER",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACERAEStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "students/acer",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACERNorms')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "acernorms.csv",
						"folderPath": "ACERNorms",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACER_part1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "ACER",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACER_part2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbovwDMCampus.csv",
						"folderPath": "ACER",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_AE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "AE",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_AEResultsCombined')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AEResultsCombined.csv",
						"folderPath": "AEResultsCombined",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_AE_LearningTasks')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_AE_ManualUploadRawFiles",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_AE_SemesterReports')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_AE_ManualUpload_SemesterReports",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "@",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ATAR')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ATAR",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Acer02')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AcerStudent",
						"folderPath": "students/acer2",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_All_schools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "schools_all",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_All_student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Attendance_dest')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "attendance",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Bit_Test')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbovwDMAttendanceStatus.csv",
						"folderPath": "test_bit",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_CompassODS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "CompassODS",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_DMAE_ALL')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DMAE_ALL.csv",
						"folderPath": "DM_AE_ALL",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_DimTables')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "DimensionTables",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_EarlyYearsAnswers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EarlyYearsAnswersYear2.csv",
						"folderPath": "EarlyYearsAnswers",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_EarlyYearsResults')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "EarlyYearsData",
						"fileSystem": "stage1np"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_EarlyYearsSubTeachers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "EarlyYearsSubTeachers.csv",
						"folderPath": "EarlyYearsSubTeachers",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_MySchools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "MySchools",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_NAPLAN')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "NAPLAN",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_NAPLANProficiency')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "NAPLANProficiency",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_NAPLANProficiencyMeans')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "NAPLANProficiency",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_NCCD')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "NCCD",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ODSActivityInstance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CompassODSActivityInstance.csv",
						"folderPath": "ODSActivityInstance",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ODSDemoFull')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CompassODSStudentDemographicFull.csv",
						"folderPath": "ODSStudentDemographicFull",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ODSStudentDemo')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CompassODSStudentDemographic.csv",
						"folderPath": "ODSStudentDemographic",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_SchoolList')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_SupportData",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_SchoolListCSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SchoolList.csv",
						"folderPath": "_SupportData",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_SemesterReport')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "SemesterReport",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_SeniorData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_SeniorData",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_SeniorOutcomes_FormResponses')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "SeniorOutcomes_FormResponses",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_SupportingSchoolsData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "_SchoolList.csv",
						"folderPath": "_SupportingData",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset__DMAEResults')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "DM_AE",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_attendance_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "attendance",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_b43')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_GeneralData",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_bva')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_GeneralData",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_class_period')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "class_period",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_cxs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "student3",
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_d0j')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "aestudents.csv",
						"folderPath": "student4",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_dk4')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "ODS",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "enrolment",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_j06')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_kev')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_GeneralData",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_m3c')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "AEDC",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_op9')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "testenroldata.csv",
						"folderPath": "test_enrolment ",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_qkk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "_AE_ManualUploadRawFiles",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_profile_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_profile_object_2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbovwDMStudent.csv",
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_test_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "student_test",
						"folderPath": "students/student_test_file",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_vwDMStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "student_test",
						"folderPath": "students",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_zhs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "testclass.csv",
						"folderPath": "testclass",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dim_ACER_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tmp_datablend_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKACERStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKACERStudent",
						"type": "nvarchar"
					},
					{
						"name": "SystemId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FamilyName",
						"type": "nvarchar"
					},
					{
						"name": "GivenName",
						"type": "nvarchar"
					},
					{
						"name": "DateOfBirth",
						"type": "date"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Username",
						"type": "nvarchar"
					},
					{
						"name": "Password",
						"type": "nvarchar"
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					},
					{
						"name": "SCDReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMACERStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/tmp_datablend_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MCopy_EYAnswers_9f9_ControlDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MCopy_EYAnswers_9f9_20230413"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "ControlTable"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MCopy_EYAnswers_9f9_DestinationDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_escapeChar": {
						"type": "String"
					},
					"cw_quoteChar": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool"
					},
					"cw_fileName": {
						"type": "String"
					},
					"cw_folderPath": {
						"type": "String"
					},
					"cw_fileSystem": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MCopy_EYAnswers_9f9_20230413"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().cw_escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@dataset().cw_firstRowAsHeader",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().cw_quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MCopy_EYAnswers_9f9_SourceDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AFS_TCEO_OEAFileshare",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_escapeChar": {
						"type": "String"
					},
					"cw_quoteChar": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool"
					},
					"cw_fileName": {
						"type": "String"
					},
					"cw_folderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MCopy_EYAnswers_9f9_20230413"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().cw_escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@dataset().cw_firstRowAsHeader",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().cw_quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AFS_TCEO_OEAFileshare')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Naplan_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tmp_datablend_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "BKSourceStudentId",
						"type": "nvarchar"
					},
					{
						"name": "BKPersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OfficialFirstName",
						"type": "nvarchar"
					},
					{
						"name": "OfficialSurname",
						"type": "nvarchar"
					},
					{
						"name": "PreferredFirstName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredSurname",
						"type": "nvarchar"
					},
					{
						"name": "SingleNameOnly",
						"type": "bit"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DOB",
						"type": "date"
					},
					{
						"name": "AttendanceStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StudentAddressStreet",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressSuburb",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressState",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressPostCode",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressLatitude",
						"type": "decimal",
						"precision": 9,
						"scale": 6
					},
					{
						"name": "StudentAddressLongitude",
						"type": "decimal",
						"precision": 9,
						"scale": 6
					},
					{
						"name": "HomePhone",
						"type": "nvarchar"
					},
					{
						"name": "HomeEmail",
						"type": "nvarchar"
					},
					{
						"name": "StudentMobile",
						"type": "nvarchar"
					},
					{
						"name": "StudentEmail",
						"type": "nvarchar"
					},
					{
						"name": "BirthCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CitizenshipResidencyStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryCitizenshipCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryPassportIssueCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Boarder",
						"type": "bit"
					},
					{
						"name": "VisaSubClassId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VisaSubClassDesc",
						"type": "nvarchar"
					},
					{
						"name": "VisaExpiryData",
						"type": "date"
					},
					{
						"name": "VisaEndDate",
						"type": "date"
					},
					{
						"name": "AtsiId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ATSIDesc",
						"type": "nvarchar"
					},
					{
						"name": "ESLYesNo",
						"type": "bit"
					},
					{
						"name": "EslLanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LBOTEYesNo",
						"type": "bit"
					},
					{
						"name": "LBOTELanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FFPOS",
						"type": "bit"
					},
					{
						"name": "SWDYesNo",
						"type": "bit"
					},
					{
						"name": "SwdSifDesc",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1FirstName",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Surname",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1LanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1Email",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Phone",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Mobile",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1OccupationalGroupId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1EducationSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1EducationNonSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2FirstName",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Surname",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2LanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2Email",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Phone",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Mobile",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2OccupationalGroupId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2EducationSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2EducationNonSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReligionId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BaptismDate",
						"type": "date"
					},
					{
						"name": "BaptismParish",
						"type": "nvarchar"
					},
					{
						"name": "ConfirmationDate",
						"type": "date"
					},
					{
						"name": "FirstEucharistDate",
						"type": "date"
					},
					{
						"name": "FirstReconciliationDate",
						"type": "date"
					},
					{
						"name": "RollGroup",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "NAPLAN",
					"table": "Student"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/tmp_datablend_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_45g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_4by')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_GeneralData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "ATAR"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "LUI",
						"type": "String"
					},
					{
						"name": "Given Name",
						"type": "String"
					},
					{
						"name": "Family Name",
						"type": "String"
					},
					{
						"name": "ATAR",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_GeneralData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_4cb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAEDCGroupingId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKAEDCGroupingId",
						"type": "nvarchar"
					},
					{
						"name": "CalendarYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAEDCGroupingId"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_6ft')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AFS_SeniorData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "SeniorData"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					},
					{
						"name": "Prop_3",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					},
					{
						"name": "Prop_9",
						"type": "String"
					},
					{
						"name": "Prop_10",
						"type": "String"
					},
					{
						"name": "Prop_11",
						"type": "String"
					},
					{
						"name": "Prop_12",
						"type": "String"
					},
					{
						"name": "Prop_13",
						"type": "String"
					},
					{
						"name": "Prop_14",
						"type": "String"
					},
					{
						"name": "Prop_15",
						"type": "String"
					},
					{
						"name": "Prop_16",
						"type": "String"
					},
					{
						"name": "Prop_17",
						"type": "String"
					},
					{
						"name": "Prop_18",
						"type": "String"
					},
					{
						"name": "Prop_19",
						"type": "String"
					},
					{
						"name": "Prop_20",
						"type": "String"
					},
					{
						"name": "Prop_21",
						"type": "String"
					},
					{
						"name": "Prop_22",
						"type": "String"
					},
					{
						"name": "Prop_23",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AFS_SeniorData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_79p')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_GeneralData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "GeneralData_json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Flag": {
							"type": "string"
						},
						"Image": {
							"type": "string"
						},
						"ATSIId": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_GeneralData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACER')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACERAEStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACERNorms')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AFS_SchoolList",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "acernorms.csv",
						"folderPath": "ACER"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SKID",
						"type": "String"
					},
					{
						"name": "SKPATTest",
						"type": "String"
					},
					{
						"name": "SummaryGroups",
						"type": "String"
					},
					{
						"name": "SKYearLevel",
						"type": "String"
					},
					{
						"name": "SKYear",
						"type": "String"
					},
					{
						"name": "MeanScore",
						"type": "String"
					},
					{
						"name": "StdDev",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AFS_SchoolList')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACER_part1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACER_part2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_AE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_AEResultsCombined')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AFS_SchoolList",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "AEResultsCombined.csv",
						"folderPath": "AEResultsCombined"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SchoolNameAndArea",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Semester",
						"type": "String"
					},
					{
						"name": "GovtCode1",
						"type": "String"
					},
					{
						"name": "Subject",
						"type": "String"
					},
					{
						"name": "Result",
						"type": "String"
					},
					{
						"name": "SKID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AFS_SchoolList')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_AE_LearningTasks')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_AEData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "AE_LearningTasks"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SubjectName",
						"type": "String"
					},
					{
						"name": "Code",
						"type": "String"
					},
					{
						"name": "TeacherImportIdentifier",
						"type": "String"
					},
					{
						"name": "TaskId",
						"type": "String"
					},
					{
						"name": "IsSubjectWide",
						"type": "String"
					},
					{
						"name": "TaskName",
						"type": "String"
					},
					{
						"name": "StudentCode",
						"type": "String"
					},
					{
						"name": "GovtCode1",
						"type": "String"
					},
					{
						"name": "StudentLastName",
						"type": "String"
					},
					{
						"name": "StudentFirstName",
						"type": "String"
					},
					{
						"name": "YearLevel",
						"type": "String"
					},
					{
						"name": "ResultType",
						"type": "String"
					},
					{
						"name": "PrimaryGrade",
						"type": "String"
					},
					{
						"name": "CommentTimestamp",
						"type": "String"
					},
					{
						"name": "CommentPosterCode",
						"type": "String"
					},
					{
						"name": "CommentPosterName",
						"type": "String"
					},
					{
						"name": "Result",
						"type": "String"
					},
					{
						"name": "ComponentName",
						"type": "String"
					},
					{
						"name": "ComponentType",
						"type": "String"
					},
					{
						"name": "IsIncludedInReport",
						"type": "String"
					},
					{
						"name": "ReportCycleName",
						"type": "String"
					},
					{
						"name": "DueDate",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "SubmissionStatus",
						"type": "String"
					},
					{
						"name": "ReceiptTime",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_AEData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_AE_SemesterReports')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_AEData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "AE_Semester_Reports"
					},
					"columnDelimiter": ",",
					"escapeChar": "@",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "StudentFirstName",
						"type": "String"
					},
					{
						"name": "StudentLastName",
						"type": "String"
					},
					{
						"name": "StudentCode",
						"type": "String"
					},
					{
						"name": "GovtCode1",
						"type": "String"
					},
					{
						"name": "StudentYearLevel",
						"type": "String"
					},
					{
						"name": "StudentFormGroup",
						"type": "String"
					},
					{
						"name": "StudentHouseGroup",
						"type": "String"
					},
					{
						"name": "Subject",
						"type": "String"
					},
					{
						"name": "ClassCode",
						"type": "String"
					},
					{
						"name": "Teacher",
						"type": "String"
					},
					{
						"name": "AssessmentType",
						"type": "String"
					},
					{
						"name": "AssessmentArea",
						"type": "String"
					},
					{
						"name": "Result",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_AEData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Acer02')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKACERStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKACERStudent",
						"type": "nvarchar"
					},
					{
						"name": "SystemId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FamilyName",
						"type": "nvarchar"
					},
					{
						"name": "GivenName",
						"type": "nvarchar"
					},
					{
						"name": "DateOfBirth",
						"type": "date"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Username",
						"type": "nvarchar"
					},
					{
						"name": "Password",
						"type": "nvarchar"
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					},
					{
						"name": "SCDReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMACERStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_All_schools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_All_student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Attendance_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Bit_Test')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAttendanceStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKAttendanceStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AttendanceStatusSifCode",
						"type": "nvarchar"
					},
					{
						"name": "AttendanceStatusSifDesc",
						"type": "nvarchar"
					},
					{
						"name": "PrimarySort",
						"type": "decimal",
						"precision": 18,
						"scale": 5
					},
					{
						"name": "SecondarySort",
						"type": "decimal",
						"precision": 18,
						"scale": 5
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "ScdReason",
						"type": "nvarchar"
					},
					{
						"name": "BusinessDesc",
						"type": "nvarchar"
					},
					{
						"name": "AttendanceStatusGroup",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAttendanceStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_CompassODS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_ODS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "Compass",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_ODS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_DMAEResults')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_DMAE_ALL')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_DimTables')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_EarlyYearsAnswers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AFS_TCEO_OEAFileshare",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "EarlyYearsData"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Question",
						"type": "String"
					},
					{
						"name": "Numeracy",
						"type": "String"
					},
					{
						"name": "Literacy",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AFS_TCEO_OEAFileshare')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_EarlyYearsResults')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SPOnlineList_EarlyYearsResults",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_listName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SharePointOnlineListResource",
				"schema": [],
				"typeProperties": {
					"listName": {
						"value": "@dataset().cw_listName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SPOnlineList_EarlyYearsResults')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_EarlyYearsSubTeachers')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SPOnlineList_EarlyYearsResults",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SharePointOnlineListResource",
				"schema": [],
				"typeProperties": {
					"listName": "AdditionalTeachers"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SPOnlineList_EarlyYearsResults')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_MySchools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_NAPLAN')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_NAPLANProficiency')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_NAPLANProficiencyMeans')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKNAPLANACARAProficiency",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKNAPLANACARAProficiency",
						"type": "nvarchar"
					},
					{
						"name": "SKYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKStateTerritory",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKYearLevel",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKNaplanAssessmentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKNAPLANProficiencyLevel",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AverageAge",
						"type": "nvarchar"
					},
					{
						"name": "YearsOfSchooling",
						"type": "varchar"
					},
					{
						"name": "Participation%",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "Exempt%",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "Non-attempt%",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "Absent%",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "Withdrawn%",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "NationalMinimumStandard",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "NationalMinimumStandardCI",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "MeanScale",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "MeanScaleCI",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "NotStatedPercentage",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "ProficiencyPercentage",
						"type": "decimal",
						"precision": 10,
						"scale": 6
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "SCDReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMFactNAPLANACARAProficiency"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_NCCD')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ODSActivityInstance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_ODS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_ODS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ODSDemoFull')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_ODS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKStudent",
						"type": "nvarchar"
					},
					{
						"name": "CompassPersonId",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredFirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredLastName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "SecondMiddleName",
						"type": "nvarchar"
					},
					{
						"name": "FormerFirstName",
						"type": "nvarchar"
					},
					{
						"name": "FormerLastName",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "AdminNotes",
						"type": "nvarchar"
					},
					{
						"name": "UsualTransport",
						"type": "nvarchar"
					},
					{
						"name": "HomePhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "MobileNumber",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "DateOfDeath",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DateOfBirth",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "InterpreterRequired",
						"type": "bit"
					},
					{
						"name": "IndigenousType",
						"type": "nvarchar"
					},
					{
						"name": "Nationality",
						"type": "nvarchar"
					},
					{
						"name": "ArrivalDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "VisaSubClassCode",
						"type": "nvarchar"
					},
					{
						"name": "VisaSubClassName",
						"type": "nvarchar"
					},
					{
						"name": "VisaExpiryDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "YouthAllowance",
						"type": "bit"
					},
					{
						"name": "GovernmentFunded",
						"type": "bit"
					},
					{
						"name": "GovCode1",
						"type": "nvarchar"
					},
					{
						"name": "GovCode2",
						"type": "nvarchar"
					},
					{
						"name": "Disability",
						"type": "bit"
					},
					{
						"name": "DisabilityFunded",
						"type": "bit"
					},
					{
						"name": "LivingArrangements",
						"type": "nvarchar"
					},
					{
						"name": "ResidentialStatus",
						"type": "nvarchar"
					},
					{
						"name": "RefugeeStatus",
						"type": "bit"
					},
					{
						"name": "Religion",
						"type": "nvarchar"
					},
					{
						"name": "ReligionNotes",
						"type": "nvarchar"
					},
					{
						"name": "SchoolHistory",
						"type": "nvarchar"
					},
					{
						"name": "AmbulanceSubscriber",
						"type": "bit"
					},
					{
						"name": "Occupation",
						"type": "nvarchar"
					},
					{
						"name": "SchoolEducation",
						"type": "nvarchar"
					},
					{
						"name": "NonSchoolEducation",
						"type": "nvarchar"
					},
					{
						"name": "BirthCountry",
						"type": "nvarchar"
					},
					{
						"name": "UserName",
						"type": "nvarchar"
					},
					{
						"name": "Contactable",
						"type": "bit"
					},
					{
						"name": "EmailAllowed",
						"type": "bit"
					},
					{
						"name": "SMSAllowed",
						"type": "bit"
					},
					{
						"name": "PublishPhotoToMedia",
						"type": "bit"
					},
					{
						"name": "PublishPhotoToInternal",
						"type": "bit"
					},
					{
						"name": "AuthenticationMode",
						"type": "nvarchar"
					},
					{
						"name": "FeeMode",
						"type": "nvarchar"
					},
					{
						"name": "ImportMode",
						"type": "nvarchar"
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					},
					{
						"name": "SCDReason",
						"type": "nvarchar"
					},
					{
						"name": "ReceivesESL",
						"type": "bit"
					},
					{
						"name": "RequiresESL",
						"type": "bit"
					},
					{
						"name": "LBOTE",
						"type": "bit"
					},
					{
						"name": "BirthCountryCode",
						"type": "nvarchar"
					},
					{
						"name": "GenderCode",
						"type": "nvarchar"
					},
					{
						"name": "IndigenousTypeCode",
						"type": "nvarchar"
					},
					{
						"name": "RelgionCode",
						"type": "nvarchar"
					},
					{
						"name": "NonSchoolEducationCode",
						"type": "nvarchar"
					},
					{
						"name": "NationalityCode",
						"type": "nvarchar"
					},
					{
						"name": "OccupationGroup",
						"type": "nvarchar"
					},
					{
						"name": "Employer",
						"type": "nvarchar"
					},
					{
						"name": "OrganisationName",
						"type": "nvarchar"
					},
					{
						"name": "SchoolEducationCode",
						"type": "nvarchar"
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CommunicationPreference",
						"type": "nvarchar"
					},
					{
						"name": "TownOfBirth",
						"type": "nvarchar"
					},
					{
						"name": "ReligiousOrLay",
						"type": "nvarchar"
					},
					{
						"name": "Parish",
						"type": "nvarchar"
					},
					{
						"name": "ImmunisationRecordSighted",
						"type": "bit"
					},
					{
						"name": "HomeTown",
						"type": "nvarchar"
					},
					{
						"name": "HeadLiceCheckAllowed",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "Compass",
					"table": "ODSStudentDemographic"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_ODS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ODSStudentDemo')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_ODS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_ODS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_SchoolList')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_SchoolList",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "School List",
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "_SchoolList.xlsx",
						"folderPath": "SupportingData"
					}
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_SchoolList')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_SchoolListCSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AFS_SchoolList",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "_SchoolList.csv",
						"folderPath": "SupportingData"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "SchoolId",
						"type": "String"
					},
					{
						"name": "SchoolName",
						"type": "String"
					},
					{
						"name": "Area",
						"type": "String"
					},
					{
						"name": "Location",
						"type": "String"
					},
					{
						"name": "Team",
						"type": "String"
					},
					{
						"name": "SchoolType",
						"type": "String"
					},
					{
						"name": "Boarding",
						"type": "String"
					},
					{
						"name": "SMYL",
						"type": "String"
					},
					{
						"name": "LastICSEA",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AFS_SchoolList')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_SemesterReport')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_SeniorData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AFS_SeniorData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "SeniorData"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\r",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PK\u0003\u0004\u0014\u0000\u0006\u0000\b\u0000\u0000\u0000!\u0000b�h^\u0001\u0000\u0000�\u0004\u0000\u0000\u0013\u0000\b\u0002[Content_Types].xml �\u0004\u0002(�\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000���N�0\u0010E�H�C�-Jܲ@\b5��\u0012*Q>�ēƪc[�ii����\u0010B�\u0015j7�\u0012��{2��h�nm���ƻR\f����U^\u001b7/���%�\u0017\u0019�rZY�\u0014\u001b@1\u0019__�f�\u0000�q��R4D�AJ�\u001ah\u0015\u0016>����V\u0011�ƹ\f�Z�9����NV�\u00118ʩ�\u0010��\u0013�ji){^��-I\u0004�\"{�\u0016v^�P!XS)bR�r��K�s(�3�`c\u0002�0���\u000e���\u0006��7\u001eM4\u001a����ZƐk+�|\\|z�(���P��6\u0015h_-[�@�!���\u0000Pk��\u0016�2n�}�?\u0015�L��� ��%�\u0013\u001c��\u001bd����dN\u0018\"m",
						"type": "String"
					},
					{
						"name": "�ǞDO97*�~��ɸ8�O�c\u001c|n��\u0007�\u0004E��\u0014�\u0011���B\u0010��!$}�����;{���[����2�\u0006\u0000\u0000��\u0003\u0000PK\u0003\u0004\u0014\u0000\u0006\u0000\b\u0000\u0000\u0000!\u0000�U0#�\u0000\u0000\u0000L\u0002\u0000\u0000\u000b\u0000\b\u0002_rels/.rels �\u0004\u0002(�\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��MO�0\f��H�����ݐ\u0010BKwAH�!T~�I�\u000f���$\u001bݿ'\u001c\u0010T\u001a�\u0003G�~����<���!��4��\u0012\u0014;#�w����qu\u0007*&r�Fq���\u0011v�����GJy(v��*����K��#F��D�\u0010�.W\u001a\t\u0013�\u001c�\u0016=��Z�MY�b��\u0001�BS����7��ϛז��",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AFS_SeniorData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_SeniorOutcomes_FormResponses')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_GeneralData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "SeniorOutcomes_FormResponses"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_GeneralData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_SupportingSchoolsData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_SupportingData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "School List",
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "_SchoolList.xlsx",
						"folderPath": "SupportingData"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					},
					{
						"name": "Prop_3",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_SupportingData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_attendance_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_b43')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_GeneralData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "GeneralDataTest"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Flag",
						"type": "String"
					},
					{
						"name": "Image",
						"type": "String"
					},
					{
						"name": "ATSIId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_GeneralData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_bva')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_GeneralData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "GeneralData"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Selection",
						"type": "String"
					},
					{
						"name": "NAPLAN",
						"type": "String"
					},
					{
						"name": "ACER",
						"type": "String"
					},
					{
						"name": "AE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_GeneralData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_class_period')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_cxs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAEStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKSourceStudentId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StudentFirstName",
						"type": "nvarchar"
					},
					{
						"name": "StudentSurname",
						"type": "nvarchar"
					},
					{
						"name": "DOB",
						"type": "date"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ATSIId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LBOTELanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WholeDaysAbsent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PartialDaysAbsent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "ScdReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAEStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_d0j')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAEStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_dk4')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_ODS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "Compass",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_ODS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_j06')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_kev')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_GeneralData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "GeneralData_txt"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Flag",
						"type": "String"
					},
					{
						"name": "Image",
						"type": "String"
					},
					{
						"name": "ATSIId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_GeneralData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_m3c')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAEDCGroupingId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKAEDCGroupingId",
						"type": "nvarchar"
					},
					{
						"name": "CalendarYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAEDCGroupingId"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_op9')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_qkk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureFileStorage_AEData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"folderPath": "AECompassData"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "StudentFirstName",
						"type": "String"
					},
					{
						"name": "StudentLastName",
						"type": "String"
					},
					{
						"name": "StudentCode",
						"type": "String"
					},
					{
						"name": "GovtCode1",
						"type": "String"
					},
					{
						"name": "StudentYearLevel",
						"type": "String"
					},
					{
						"name": "StudentFormGroup",
						"type": "String"
					},
					{
						"name": "StudentHouseGroup",
						"type": "String"
					},
					{
						"name": "Subject",
						"type": "String"
					},
					{
						"name": "ClassCode",
						"type": "String"
					},
					{
						"name": "Teacher",
						"type": "String"
					},
					{
						"name": "AssessmentType",
						"type": "String"
					},
					{
						"name": "AssessmentArea",
						"type": "String"
					},
					{
						"name": "Result",
						"type": "String"
					},
					{
						"name": "School Name",
						"type": "String"
					},
					{
						"name": "Area",
						"type": "String"
					},
					{
						"name": "Semester",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureFileStorage_AEData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_profile_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_profile_object_2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_test_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_vwDMStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_zhs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKActivity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKActivity",
						"type": "nvarchar"
					},
					{
						"name": "ActivityCode",
						"type": "nvarchar"
					},
					{
						"name": "ActivityName",
						"type": "nvarchar"
					},
					{
						"name": "AcamademicYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Status",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubjectCode",
						"type": "nvarchar"
					},
					{
						"name": "StartDateTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EndDateTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ManagingCompassPersonId",
						"type": "nvarchar"
					},
					{
						"name": "DefaultLocation",
						"type": "nvarchar"
					},
					{
						"name": "ActivityType",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ActivityTypeDescription",
						"type": "nvarchar"
					},
					{
						"name": "AttendanceMode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AttendanceModeDescription",
						"type": "nvarchar"
					},
					{
						"name": "RunningStatus",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RunningStatusDescription",
						"type": "nvarchar"
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "ScdReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMActivity"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AFS_SchoolList')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "School list",
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AFS_SchoolList_connectionString')]",
					"fileShare": "fs-oea-dev"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AFS_SeniorData')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AFS_SeniorData_connectionString')]",
					"fileShare": "fs-oea-dev"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AFS_TCEO_OEAFSDATA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Azure File Share containing the manually uploaded files into the OEA",
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AFS_TCEO_OEAFSDATA_connectionString')]",
					"fileShare": "fs-oea-dev"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AFS_TCEO_OEAFileshare')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "An Azure file share that contains all manually uploaded data files into OEA",
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AFS_TCEO_OEAFileshare_connectionString')]",
					"fileShare": "fs-oea-dev"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureFileStorage_AEData')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "AE Data",
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureFileStorage_AEData_connectionString')]",
					"fileShare": "fs-oea-dev"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureFileStorage_GeneralData')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "General Data",
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureFileStorage_GeneralData_connectionString')]",
					"fileShare": "fs-oea-dev"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureFileStorage_SchoolList')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "School List",
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureFileStorage_SchoolList_connectionString')]",
					"fileShare": "fs-oea-dev"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureFileStorage_SupportingData')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Supporting Datasets",
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureFileStorage_SupportingData_connectionString')]",
					"fileShare": "fs-oea-dev"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CeNet_DataBlend')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('CeNet_DataBlend_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CeNet_ODS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "CeNet ODS",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('CeNet_ODS_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_ADLS_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to the OEA data lake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_OEA_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Allows for connecting to an Azure SQL database using SQL authentication and retrieving the user password from the key vault.",
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "myserver.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "testdb"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqlAdmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqlAdminPwd"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_Azure_SQL_DB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().keyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_HTTP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to an HTTP endpoint.\nThe baseURL parameter must be passed in from the dataset that utilizes this linked service.",
				"parameters": {
					"baseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_KeyVault_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_KeyVault_OEA_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_SQL_Serverless_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "master"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_Serverless_OEA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SPOnlineList_EarlyYearsResults')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This SharePoint Online List contains the Early Years testing results",
				"annotations": [],
				"type": "SharePointOnlineList",
				"typeProperties": {
					"siteUrl": "https://tsvcatholicedu.sharepoint.com/sites/EarlyYearsTesting",
					"tenantId": "e89c1f9e-cbca-4651-8fb0-17fffa6fd009",
					"servicePrincipalId": "[parameters('SPOnlineList_EarlyYearsResults_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('SPOnlineList_EarlyYearsResults_servicePrincipalKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointOnlineList1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SharePointOnlineList",
				"typeProperties": {
					"siteUrl": "https://tsvcatholicedu.sharepoint.com/sites/ManualData/General/Forms/AllItems.aspx",
					"tenantId": "e89c1f9e-cbca-4651-8fb0-17fffa6fd009",
					"servicePrincipalId": "[parameters('SharePointOnlineList1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('SharePointOnlineList1_servicePrincipalKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointOnlineList2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SharePointOnlineList",
				"typeProperties": {
					"siteUrl": "https://tsvcatholicedu.sharepoint.com/sites/ManualData",
					"tenantId": "e89c1f9e-cbca-4651-8fb0-17fffa6fd009",
					"servicePrincipalId": "[parameters('SharePointOnlineList2_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('SharePointOnlineList2_servicePrincipalKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/linkedService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('linkedService1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-tceooeadev01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syn-oea-tceooeadev01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-tceooeadev01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('syn-oea-tceooeadev01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tmp_datablend_dev')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('tmp_datablend_dev_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EarlyYears_Pipeline_Trigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "EarlyYears Refresh Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-07-26T12:21:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/EarlyYears Refresh Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SelfHostedIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"description": "TCEO Private network access to Data Blend",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AE_SemesterReports_Preprocessing')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_OEA",
								"type": "LinkedServiceReference"
							},
							"name": "AESemesterReports"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_OEA",
								"type": "LinkedServiceReference"
							},
							"name": "AESemesterReportsSink"
						}
					],
					"transformations": [
						{
							"name": "ResultsFilter"
						},
						{
							"name": "Schema",
							"description": "Creates an explicit mapping for each drifted column"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dataflow_file as string",
						"}",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'stage1np',",
						"     columnDelimiter: ',',",
						"     escapeChar: '@',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     dateFormats: ['dd/MM/yyyy'],",
						"     timestampFormats: ['dd/MM/yyyy'],",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'double',",
						"     booleanFormat: ['True', 'False'],",
						"     wildcardPaths:['_AE_ManualUpload_SemesterReports/*'],",
						"     partitionBy('hash', 1)) ~> AESemesterReports",
						"Schema filter(AssessmentType==\"QLD Overall Result\"||AssessmentType==\"QLD Subject Result\") ~> ResultsFilter",
						"AESemesterReports derive(StudentFirstName = toString(byName('StudentFirstName')),",
						"          StudentLastName = toString(byName('StudentLastName')),",
						"          StudentCode = toString(byName('StudentCode')),",
						"          GovtCode1 = toString(byName('GovtCode1')),",
						"          StudentYearLevel = toString(byName('StudentYearLevel')),",
						"          StudentFormGroup = toString(byName('StudentFormGroup')),",
						"          StudentHouseGroup = toString(byName('StudentHouseGroup')),",
						"          Subject = toString(byName('Subject')),",
						"          ClassCode = toString(byName('ClassCode')),",
						"          Teacher = toString(byName('Teacher')),",
						"          AssessmentType = toString(byName('AssessmentType')),",
						"          AssessmentArea = toString(byName('AssessmentArea')),",
						"          Result = toString(byName('Result'))) ~> Schema",
						"ResultsFilter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'stage1np',",
						"     folderPath: '_AE_ManualUploadRawFiles/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[($dataflow_file)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     partitionBy('hash', 1)) ~> AESemesterReportsSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Compass Student Demographic FULL')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select COUNT(*)\nfrom dbo.CompassODSStudentDemographicFull_pseudo",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sqls3_pilot",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select *\nfrom CompassODSStudentDemographicFull_pseudo",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sqls3_pilot",
						"poolName": "Built-in"
					},
					"resultLimit": -1
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AEDC_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "94bccd50-95dd-47ca-94e1-1b0d3ff2135d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class AEDC_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='AEDC', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMAEDCGroupingId'] = [\r\n",
							"                                        ['SKAEDCGroupingId', 'integer', 'no-op'],\r\n",
							"                                        ['BKAEDCGroupingId', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op']              \r\n",
							"                                        ]\r\n",
							"                           \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAEDCGroupingId', self.schemas['DMAEDCGroupingId'], 'LastUpdateDate', 'SKAEDCGroupingId')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"aedc_object = AEDC_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AEResultsCombined_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e7104ada-2266-4d2a-bf12-b3e8aee1de2d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class AEResultsCombined_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='AEResultsCombined', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['AEResultsCombined'] = [\r\n",
							"                                        ['SchoolNameAndArea', 'string', 'no-op'],\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['Semester', 'integer', 'no-op'],\r\n",
							"                                        ['StudentYearLevel', 'string', 'no-op'],\r\n",
							"                                        ['GovtCode1', 'integer', 'no-op'],\r\n",
							"                                        ['Subject', 'string', 'no-op'],\r\n",
							"                                        ['Result', 'string', 'no-op'],\r\n",
							"                                        ['SubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['ClassCode', 'string', 'no-op'],\r\n",
							"                                        ['SKID', 'string', 'no-op']                                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        \r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'AEResultsCombined', self.schemas['AEResultsCombined'], None, 'SKID')\r\n",
							"        \r\n",
							"        # empty tables \r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMFACTAEDCStrengths', self.schemas['DMFACTAEDCStrengths'], 'LastUpdateDate', 'SKAEDCStrengths')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMFactStudentAEResult', self.schemas['DMFactStudentAEResult'], 'LastUpdateDate', 'SKFactStudentAEResultId')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"aeresultscombined_object = AEResultsCombined_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AE_ManualCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "697052ac-4b7b-491f-be85-382c6014c5d0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lit, monotonically_increasing_id, trim\r\n",
							"from pyspark.sql import DataFrame\r\n",
							"from functools import reduce"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class AEManualCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"        \r\n",
							"    def mergeAll(self):\r\n",
							"\r\n",
							"        root_dir = f'{self.stage1np}' #\"/_AE_ManualUploadRawFiles\"\r\n",
							"        primaryreport_list = []\r\n",
							"        learningreport_list = []\r\n",
							"        \r\n",
							"        # for each file location in this manual upload directory..\r\n",
							"        file_list = mssparkutils.fs.ls(root_dir)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"                \r\n",
							"            # .. we need to dissect the filename to get the school name, area, semester number and year\r\n",
							"            tokens = file.name.split(\"-\")\r\n",
							"            school_name = tokens[0].strip()\r\n",
							"            school_area = tokens[1].strip()\r\n",
							"\r\n",
							"            semester = tokens[2].split(\" \")[2].strip()\r\n",
							"\r\n",
							"            #print(semester_tokens[1])\r\n",
							"\r\n",
							"            year = tokens[2].split(\" \")[3].strip()\r\n",
							"            report_type = tokens[2].split(\" \")[4].strip()\r\n",
							"\r\n",
							"            filename = f'{self.stage1np}/{file.name}'\r\n",
							"\r\n",
							"            # if the file is not a primary semester or learning task results report, then skip the file\r\n",
							"            if (report_type == 'Primary'):\r\n",
							"                df = self._addReportDetails(filename, school_name, school_area, semester, year)\r\n",
							"                \r\n",
							"                # add the data frame to the list of dataframes\r\n",
							"                primaryreport_list.append(df)\r\n",
							"\r\n",
							"                # add the new df to the list \r\n",
							"            elif (report_type == 'Learning'):\r\n",
							"                df = self._addReportDetails(filename, school_name, school_area, semester, year)\r\n",
							"                \r\n",
							"                # add the data frame to the list of dataframes\r\n",
							"                learningreport_list.append(df)\r\n",
							"\r\n",
							"            else:\r\n",
							"                continue #skip files that are not 'primary' or 'learning' reports\r\n",
							"                \r\n",
							"\r\n",
							"        # once we have all of the files converted to dataframes with the extra columns, we can combined them back to one file\r\n",
							"        if primaryreport_list:\r\n",
							"            primary_combined_df =  reduce(DataFrame.unionAll, primaryreport_list)\r\n",
							"            # add an index to the combined tables \r\n",
							"            primary_indexed_df = primary_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"            # save the csv files\r\n",
							"            primary_indexed_df.coalesce(1).write.option(\"header\", True).csv(f'{self.stage1np}/AE_ManualSemesterReports')\r\n",
							"        \r\n",
							"        if learningreport_list:\r\n",
							"            learning_combined_df = reduce(DataFrame.unionAll, learningreport_list)\r\n",
							"            learning_indexed_df = learning_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())      \r\n",
							"            learning_indexed_df.write.option(\"header\", True).csv(f'{self.stage1np}/AE_ManualLearningTasks')\r\n",
							"\r\n",
							"\r\n",
							"    def _addReportDetailsPrimary(self, file, school_name, school_area, semester, year):\r\n",
							"\r\n",
							"        # schema of the Primary Semester Reports\r\n",
							"        schema = StructType() \\\r\n",
							"                .add(\"StudentFirstName\", StringType(),True) \\\r\n",
							"                .add(\"StudentLastName\", StringType(),True) \\\r\n",
							"                .add(\"StudentCode\", StringType(),True) \\\r\n",
							"                .add(\"GovtCode1\", StringType(),True) \\\r\n",
							"                .add(\"StudentYearLevel\", StringType(),True) \\\r\n",
							"                .add(\"StudentFormGroup\", StringType(),True) \\\r\n",
							"                .add(\"StudentHouseGroup\", StringType(),True) \\\r\n",
							"                .add(\"Subject\", StringType(),True) \\\r\n",
							"                .add(\"ClassCode\", StringType(),True) \\\r\n",
							"                .add(\"Teacher\", StringType(),True) \\\r\n",
							"                .add(\"AssessmentType\", StringType(),True) \\\r\n",
							"                .add(\"AssessmentArea\", StringType(),True) \\\r\n",
							"                .add(\"Result\", StringType(),True) \r\n",
							"\r\n",
							"        df_with_schema = spark.read.format(\"csv\") \\\r\n",
							"                        .option(\"header\", True) \\\r\n",
							"                        .schema(schema) \\\r\n",
							"                        .load(file)\r\n",
							"\r\n",
							"        #df = spark.read.options(header='True').csv(file)\r\n",
							"\r\n",
							"        # add the new columns and the value for each column\r\n",
							"        final_df = df_with_schema.withColumn('School Name', lit(school_name)) \\\r\n",
							"                        .withColumn('Area', lit(school_area)) \\\r\n",
							"                        .withColumn('Semester', lit(semester)) \\\r\n",
							"                        .withColumn('Year', lit(year))\r\n",
							"\r\n",
							"        return final_df\r\n",
							"\r\n",
							"\r\n",
							"    def _addReportDetails(self, file, school_name, school_area, semester, year):\r\n",
							"        df = spark.read.options(header='True').csv(file)\r\n",
							"\r\n",
							"        # add the new columns and the value for each column\r\n",
							"        final_df = df.withColumn('School Name', lit(school_name)) \\\r\n",
							"                        .withColumn('Area', lit(school_area)) \\\r\n",
							"                        .withColumn('Semester', lit(semester)) \\\r\n",
							"                        .withColumn('Year', lit(year))\r\n",
							"\r\n",
							"        return final_df\r\n",
							"\r\n",
							"\r\n",
							"source_folder = \"/_AE_ManualUploadRawFiles\"\r\n",
							"\r\n",
							"# instantiate the AE Manual Data Copy with a source folder that contains all the ingested data files \r\n",
							"aecopy = AEManualCopy(source_folder)\r\n",
							"\r\n",
							"aecopy.mergeAll()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 27
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AE_lt_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ed01dc63-7141-4878-8fcd-422a6eea92eb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class AE_manual_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='_AE_ManualUploadRawFiles', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['AE_ManualLearningTasks'] = [\r\n",
							"                                        ['SubjectName', 'string', 'no-op'],\r\n",
							"                                        ['Code', 'string', 'no-op'],\r\n",
							"                                        ['TeacherImportIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['TaskId', 'integer', 'no-op'],\r\n",
							"                                        ['IsSubjectWide', 'string', 'no-op'],\r\n",
							"                                        ['TaskName', 'string', 'no-op'],\r\n",
							"                                        ['StudentCode', 'string', 'no-op'],\r\n",
							"                                        ['GovtCode1', 'integer', 'no-op'],\r\n",
							"                                        ['StudentLastName', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['YearLevel', 'string', 'no-op'],\r\n",
							"                                        ['ResultType', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryGrade', 'string', 'no-op'],\r\n",
							"                                        ['CommentTimestamp', 'string', 'no-op'],\r\n",
							"                                        ['CommentPosterCode', 'string', 'no-op'],\r\n",
							"                                        ['CommentPosterName', 'string', 'no-op'],\r\n",
							"                                        ['Result', 'string', 'no-op'],\r\n",
							"                                        ['ComponentName', 'string', 'no-op'],\r\n",
							"                                        ['ComponentType', 'string', 'no-op'],\r\n",
							"                                        ['IsIncludedInReport', 'string', 'no-op'],\r\n",
							"                                        ['ReportCycleName', 'string', 'no-op'],\r\n",
							"                                        ['DueDate', 'string', 'no-op'],\r\n",
							"                                        ['Category', 'string', 'no-op'],\r\n",
							"                                        ['SubmissionStatus', 'string', 'no-op'],\r\n",
							"                                        ['ReceiptTime', 'string', 'no-op'],\r\n",
							"                                        ['School Name', 'string', 'no-op'],\r\n",
							"                                        ['Area', 'string', 'no-op'],\r\n",
							"                                        ['Semester', 'integer', 'no-op'],\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['BKID', 'integer', 'no-op']                                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'AE_ManualLearningTasks', self.schemas['AE_ManualLearningTasks'], None, 'BKID')\r\n",
							"\r\n",
							"\r\n",
							"ae_lt_object = AE_manual_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AE_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5efbc363-7762-4194-9619-8a2e25ea9909"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class AE_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='AE', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMAEStudent'] = [\r\n",
							"                                        ['SKAEStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIId', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDaysAbsent', 'integer', 'no-op'],\r\n",
							"                                        ['PartialDaysAbsent', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                    \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMAEStudentDescription'] = [\r\n",
							"                                        ['SKAEStudentDescriptionId', 'integer', 'no-op'],\r\n",
							"                                        ['BKAEStudentDescriptionId', 'string', 'no-op'],\r\n",
							"                                        ['AESubjectComment', 'string', 'no-op'],\r\n",
							"                                        ['AESubAreaComment', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMAEStudentResultId'] = [\r\n",
							"                                        ['SKAEStudentResultId', 'integer', 'no-op'],\r\n",
							"                                        ['BKAEStudentResultId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMAESubjectCourse'] = [\r\n",
							"                                        ['SKAESubjectCourseId', 'integer', 'no-op'],\r\n",
							"                                        ['BKAESubjectCourseId', 'string', 'no-op'],\r\n",
							"                                        ['AESubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['AESubjectName', 'string', 'no-op'],\r\n",
							"                                        ['AECourseCode', 'string', 'no-op'],\r\n",
							"                                        ['AECourseName', 'string', 'no-op'],\r\n",
							"                                        ['AESubCourseCode', 'string', 'no-op'],\r\n",
							"                                        ['AESubCourseName', 'string', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder3', 'double', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                                                   \r\n",
							"                                        ]\r\n",
							"            \r\n",
							"        self.schemas['DMFACTAEDC'] = [\r\n",
							"                                        ['SKAEDC', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEDCGroupingId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['TotalStudents', 'integer', 'no-op'],\r\n",
							"                                        ['AverageAge', 'string', 'no-op'],\r\n",
							"                                        ['Males', 'integer', 'no-op'],\r\n",
							"                                        ['Females', 'integer', 'no-op'],\r\n",
							"                                        ['Indigenous', 'integer', 'no-op'],\r\n",
							"                                        ['ESL', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEEnglishProficient', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTENotEnglishProficient', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCare', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareDaycare', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCarePreschool', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareFamilyDaycare', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareGrandparent', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareOtherRelative', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareNanny', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareOther', 'integer', 'no-op'],\r\n",
							"                                        ['ChildAdaptingToSchoolVeryTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildAdaptingToSchoolVerySomewhatTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildAdaptingToSchoolNotTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildAdaptingToSchoolDontKnow', 'integer', 'no-op'],\r\n",
							"                                        ['ParentsActivelyEngagedWithschoolVeryTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ParentsActivelyEngagedWithschoolSomewhatTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ParentsActivelyEngagedWithschoolNotTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ParentsActivelyEngagedWithschoolDontKnow', 'integer', 'no-op'],\r\n",
							"                                        ['ChildRegularlyReadToAtHomeVerytrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildRegularlyReadToAtHomeSomewhatTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildRegularlyReadToAtHomeNottrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildRegularlyReadToAtHomeDontKnow', 'integer', 'no-op'],\r\n",
							"                                        ['ChildrenWithSpecialNeeds', 'integer', 'no-op'],\r\n",
							"                                        ['ChildrenWithFurtherInvestigationRequired', 'integer', 'no-op'],\r\n",
							"                                        ['ChildrenAttendedEarlyInterventionProgram', 'integer', 'no-op'],\r\n",
							"                                        ['DaysAbsentSinceStartOfYear0to1Days', 'integer', 'no-op'],\r\n",
							"                                        ['DaysAbsentSinceStartOfYear2to5Days', 'integer', 'no-op'],\r\n",
							"                                        ['DaysAbsentSinceStartOfYear6to10Days', 'integer', 'no-op'],\r\n",
							"                                        ['DaysAbsentSinceStartOfYear10DaysPlus', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingTotal', 'integer', 'no-op'],\r\n",
							"                                        ['SocialCompetenceTotal', 'integer', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityTotal', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsTotal', 'integer', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeTotal', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['SocialCompetenceOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['SocialCompetenceOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['SocialCompetenceAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['SocialCompetenceAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['SocialCompetenceVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['SocialCompetenceVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableOneDomainTotalwithResults', 'integer', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableOneDomainNum', 'integer', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableOneDomainPer', 'double', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableTwoDomain2TotalwithResults', 'integer', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableTwoDomainsNum', 'integer', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableTwoDomainsPer', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFACTAEDCStrengths'] = [\r\n",
							"                                        ['SKAEDCStrengths', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEDCStrengthsBK', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['HighlyDeveloped', 'integer', 'no-op'],\r\n",
							"                                        ['WellDeveloped', 'integer', 'no-op'],\r\n",
							"                                        ['Emerging', 'integer', 'no-op'],\r\n",
							"                                        ['Total', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentAEResult'] = [\r\n",
							"                                        ['SKFactStudentAEResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEStudentResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKReportingPeriod', 'integer', 'no-op'],\r\n",
							"                                        ['SKAECourse', 'integer', 'no-op'],\r\n",
							"                                        ['SKAESubCourse', 'integer', 'no-op'],\r\n",
							"                                        ['SKAECourseGrade', 'integer', 'no-op'],\r\n",
							"                                        ['SKAESubCourseGrade', 'integer', 'no-op'],\r\n",
							"                                        ['SKAECourseEffort', 'integer', 'no-op'],\r\n",
							"                                        ['SKAESubCourseEffort', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentClass', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEStudentDescription', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadcount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAEStudent', self.schemas['DMAEStudent'], 'LastUpdateDate', 'SKAEStudentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAEStudentDescription', self.schemas['DMAEStudentDescription'], 'LastUpdateDate', 'SKAEStudentDescriptionId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAEStudentResultId', self.schemas['DMAEStudentResultId'], 'LastUpdateDate', 'SKAEStudentResultId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAESubjectCourse', self.schemas['DMAESubjectCourse'], 'LastUpdateDate', 'SKAESubjectCourseId')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFACTAEDC', self.schemas['DMFACTAEDC'], 'LastUpdateDate', 'SKAEDC')\r\n",
							"        \r\n",
							"        # empty tables \r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMFACTAEDCStrengths', self.schemas['DMFACTAEDCStrengths'], 'LastUpdateDate', 'SKAEDCStrengths')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMFactStudentAEResult', self.schemas['DMFactStudentAEResult'], 'LastUpdateDate', 'SKFactStudentAEResultId')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"ae_object = AE_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AE_sr_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9e25fc2f-f23c-4700-b1aa-a18d97637a1a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class AE_manual_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='_AE_ManualUploadRawFiles', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['AE_ManualSemesterReports'] = [\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentLastName', 'string', 'no-op'],\r\n",
							"                                        ['StudentCode', 'string', 'no-op'],\r\n",
							"                                        ['GovtCode1', 'integer', 'no-op'],\r\n",
							"                                        ['StudentYearLevel', 'string', 'no-op'],\r\n",
							"                                        ['StudentFormGroup', 'string', 'no-op'],\r\n",
							"                                        ['StudentHouseGroup', 'string', 'no-op'],\r\n",
							"                                        ['Subject', 'string', 'no-op'],\r\n",
							"                                        ['ClassCode', 'string', 'no-op'],\r\n",
							"                                        ['Teacher', 'string', 'no-op'],\r\n",
							"                                        ['AssessmentType', 'string', 'no-op'],\r\n",
							"                                        ['AssessmentArea', 'string', 'no-op'],\r\n",
							"                                        ['Result', 'string', 'no-op'],\r\n",
							"                                        ['School Name', 'string', 'no-op'],\r\n",
							"                                        ['Area', 'string', 'no-op'],\r\n",
							"                                        ['Semester', 'integer', 'no-op'],\r\n",
							"                                        ['Year', 'integer', 'no-op'],  \r\n",
							"                                        ['BKID', 'integer', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"                                \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'AE_ManualSemesterReports', self.schemas['AE_ManualSemesterReports'], None, 'BKID')\r\n",
							"\r\n",
							"ae_sr_object = AE_manual_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ATARDataCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "068b5d2b-0a72-4978-bec6-25cb368fa60c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lit, monotonically_increasing_id, trim\r\n",
							"from pyspark.sql import DataFrame\r\n",
							"from functools import reduce"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"class ATARDataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"        \r\n",
							"    def mergeAll(self):\r\n",
							"\r\n",
							"        root_dir = f'{self.stage1np}' #\"/ATAR\"\r\n",
							"        atar_list = []\r\n",
							"        \r\n",
							"        # for each file location in this manual upload directory..\r\n",
							"        file_list = mssparkutils.fs.ls(root_dir)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"                \r\n",
							"            # .. we need to dissect the filename to get the school id, name and year\r\n",
							"            tokens = file.name.split(\"-\")\r\n",
							"            SchoolID = tokens[0].strip()\r\n",
							"\r\n",
							"            filename = f'{self.stage1np}/{file.name}'\r\n",
							"\r\n",
							"            # add the school id to the data\r\n",
							"            df = self._addReportDetails(filename, SchoolID)\r\n",
							"            \r\n",
							"            atar_list.append(df)\r\n",
							"\r\n",
							"        \r\n",
							"        # combine the list of dataframes loaded \r\n",
							"        atar_combined_df = reduce(DataFrame.unionAll, atar_list)\r\n",
							"\r\n",
							"        # add a unique index to the combined table\r\n",
							"        atar_indexed_df = atar_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"\r\n",
							"        # save the file\r\n",
							"        atar_indexed_df.coalesce(1).write.option(\"header\", True).csv(f'{self.stage1np}/ATAR')\r\n",
							"        #atar_indexed_df.write.option(\"header\", True).csv(f'{self.stage1np}/ATAR')\r\n",
							"\r\n",
							"\r\n",
							"    def _addReportDetails(self, file, schoolID):\r\n",
							"\r\n",
							"        df = spark.read.options(header='True', ignoreLeadingWhiteSpace='True', ignoreTrailingWhiteSpace='True').csv(file)\r\n",
							"\r\n",
							"        df = df.na.drop(\"all\")\r\n",
							"\r\n",
							"        # add the new columns and the value for each column\r\n",
							"        final_df = df.withColumn('SchoolId', lit(schoolID))\r\n",
							"\r\n",
							"        return final_df\r\n",
							"\r\n",
							"\r\n",
							"source_folder = \"/ATAR\"\r\n",
							"\r\n",
							"# instantiate the AE Manual Data Copy with a source folder that contains all the ingested data files \r\n",
							"atarcopy = ATARDataCopy(source_folder)\r\n",
							"\r\n",
							"atarcopy.mergeAll()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 27
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ATAR_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "481870de-983b-4788-9d0e-fb582f442665"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class ATAR_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='ATAR', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['ATAR'] = [                                \r\n",
							"                                ['Year', 'integer', 'no-op'],\r\n",
							"                                ['LUI', 'string', 'no-op'],\r\n",
							"                                ['Given Name', 'string', 'no-op'],\r\n",
							"                                ['Family Name', 'string', 'no-op'],\r\n",
							"                                ['ATAR', 'string', 'no-op'],\r\n",
							"                                ['SchoolId', 'string', 'no-op'],\r\n",
							"                                ['BKID', 'integer', 'no-op']\r\n",
							"                                ]\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'ATAR', self.schemas['ATAR'], None, 'BKID')\r\n",
							"\r\n",
							"atar_object = ATAR_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AcerNorms_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7b7fa655-5cce-4de4-b79c-3f75447c049a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class AcerNorms_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='ACERNorms', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['ACERNorms'] = [\r\n",
							"                                        ['SKID', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATTest', 'integer', 'no-op'],\r\n",
							"                                        ['SummaryGroups', 'string', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['MeanScore', 'double', 'no-op'],\r\n",
							"                                        ['StdDev', 'double', 'no-op']                                                                 \r\n",
							"                                    ]\r\n",
							"\r\n",
							"        \r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'ACERNorms', self.schemas['ACERNorms'], None, 'SKID')\r\n",
							"\r\n",
							"acerNorms_object = AcerNorms_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Acer_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fcfb5761-8e45-42d3-9880-aa50a35a2402"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Acer_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='ACER', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMACERStanine'] = [\r\n",
							"                                        ['SKACERStanine', 'integer', 'no-op'],\r\n",
							"                                        ['BKACERStanine', 'integer', 'no-op'],\r\n",
							"                                        ['StanineNumber', 'integer', 'no-op'],\r\n",
							"                                        ['StanineNumberDescription', 'string', 'no-op'],\r\n",
							"                                        ['StanineAchievementDescriptor', 'string', 'no-op'],\r\n",
							"                                        ['PercentileRank', 'string', 'no-op'],\r\n",
							"                                        ['PercentageOfStudents', 'double', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                    \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMACERStudent'] = [\r\n",
							"                                        ['SKACERStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKACERStudent', 'string', 'no-op'],\r\n",
							"                                        ['SystemId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['FamilyName', 'string', 'no-op'],\r\n",
							"                                        ['GivenName', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'date', 'no-op'],\r\n",
							"                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['Username', 'string', 'no-op'],\r\n",
							"                                        ['Password', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactPATResponse'] = [\r\n",
							"                                        ['SKPATResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATStudentResponseGrouping', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKACERStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATTest', 'integer', 'no-op'],\r\n",
							"                                        ['SKCorrectAnswer', 'integer', 'no-op'],\r\n",
							"                                        ['StudentResponse', 'string', 'no-op'],\r\n",
							"                                        ['AnswerCorrect', 'integer', 'no-op'],\r\n",
							"                                        ['CampusPercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['DiocesePercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactPATResults'] = [\r\n",
							"                                        ['SKPATResults', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATStudentTestGrouping', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKACERStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATTest', 'integer', 'no-op'],\r\n",
							"                                        ['SKACERStanine', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['RawScore', 'integer', 'no-op'],\r\n",
							"                                        ['ScaleScore', 'double', 'no-op'],\r\n",
							"                                        ['RecentTest', 'integer', 'no-op'],\r\n",
							"                                        ['ErrorMargin', 'double', 'no-op'],\r\n",
							"                                        ['Stanine', 'integer', 'no-op'],\r\n",
							"                                        ['Percentile', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear1', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear1', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear2', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear2', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear3', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear3', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear4', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear4', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear5', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear5', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear6', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear6', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear7', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear7', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear8', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear8', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear9', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear9', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear10', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear10', 'integer', 'no-op'],\r\n",
							"                                        ['StudentTestHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['NORMMeanScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['NORMStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['PreviousYearNORMMeanScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['NextYearNORMMeanScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['TestLevelNormMeanScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['MatchedYearLevelTestLevel', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMPersonDemographic'] = [\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['BKPerson', 'string', 'no-op'],\r\n",
							"                                        ['PersonType', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Title', 'string', 'no-op'],\r\n",
							"                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['LastName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['SecondMiddleName', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddress', 'string', 'no-op'],\r\n",
							"                                        ['UsualTransport', 'string', 'no-op'],\r\n",
							"                                        ['HomePhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['MobileNumber', 'string', 'no-op'],\r\n",
							"                                        ['DateOfDeath', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'string', 'no-op'],\r\n",
							"                                        ['RecievesESL', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['InterpreterRequired', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['ATSIId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountryDesc', 'string', 'no-op'],\r\n",
							"                                        ['NationalityId', 'integer', 'no-op'],\r\n",
							"                                        ['NationalityDesc', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassName', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryDate', 'string', 'no-op'],\r\n",
							"                                        ['YouthAllowance', 'string', 'no-op'],\r\n",
							"                                        ['GovernmentFunded', 'string', 'no-op'],\r\n",
							"                                        ['GovCode2', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded', 'string', 'no-op'],\r\n",
							"                                        ['LivingArrangements', 'string', 'no-op'],\r\n",
							"                                        ['ResidentialStatus', 'string', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['AmbulanceSubscriber', 'string', 'no-op'],\r\n",
							"                                        ['UserName', 'string', 'no-op'],\r\n",
							"                                        ['Occupation', 'string', 'no-op'],\r\n",
							"                                        ['OccupationGroup', 'string', 'no-op'],\r\n",
							"                                        ['Employer', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesBH', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesAH', 'string', 'no-op'],\r\n",
							"                                        ['EarliestMilestoneDate', 'string', 'no-op'],\r\n",
							"                                        ['Contactable', 'string', 'no-op'],\r\n",
							"                                        ['EmailAllowed', 'string', 'no-op'],\r\n",
							"                                        ['SMSAllowed', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToMedia', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToInternal', 'string', 'no-op'],\r\n",
							"                                        ['AuthenticationMode', 'string', 'no-op'],\r\n",
							"                                        ['FeeMode', 'string', 'no-op'],\r\n",
							"                                        ['ImportMode', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['RequiresESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityFundedInt', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE_YN', 'string', 'no-op'],\r\n",
							"                                        ['Disability_YN', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded_YN', 'string', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['CommunicationPreference', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op'],\r\n",
							"                                        ['ProgramCode', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligiousOrLay', 'string', 'no-op'],\r\n",
							"                                        ['Parish', 'string', 'no-op'],\r\n",
							"                                        ['ImmunisationRecordSighted', 'string', 'no-op'],\r\n",
							"                                        ['HomeTown', 'string', 'no-op'],\r\n",
							"                                        ['HeadLiceCheckAllowed', 'string', 'no-op'],\r\n",
							"                                        ['TownOfBirth', 'string', 'no-op']                                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMPATStudentTestGrouping'] = [\r\n",
							"                                        ['SKPATStudentTestGrouping', 'integer', 'no-op'],\r\n",
							"                                        ['BKPATStudentTestGrouping', 'string', 'no-op'],\r\n",
							"                                        ['SystemId', 'string', 'no-op'],\r\n",
							"                                        ['DateComplete', 'date', 'no-op'],\r\n",
							"                                        ['TimeComplete', 'string', 'no-op'],  # converted time type to string\r\n",
							"                                        ['TestName', 'string', 'no-op'],\r\n",
							"                                        ['TestLevel', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMPATTest'] = [\r\n",
							"                                        ['SKPATTest', 'integer', 'no-op'],\r\n",
							"                                        ['BKPATTest', 'string', 'no-op'],\r\n",
							"                                        ['PATTestName', 'string', 'no-op'],\r\n",
							"                                        ['PATTestLevel', 'string', 'no-op'],\r\n",
							"                                        ['PATTestLevelNumber', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['PATTestGroup', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMCampus'] = [\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['BKCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseName', 'string', 'no-op'],\r\n",
							"                                        ['CongregationId', 'integer', 'no-op'],\r\n",
							"                                        ['CongregationName', 'string', 'no-op'],\r\n",
							"                                        ['IsSystemic', 'string', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressStreet', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressPostCode', 'string', 'no-op'],\r\n",
							"                                        ['BKCampusAddressState', 'integer', 'no-op'],\r\n",
							"                                        ['CampusAddressState', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressGeoData', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressLongitude', 'double', 'no-op'],\r\n",
							"                                        ['CampusAddressLatitude', 'double', 'no-op'],\r\n",
							"                                        ['SocioEconomicStatus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['CampusEmail', 'string', 'no-op'],\r\n",
							"                                        ['CampusPrincipalEmail', 'string', 'no-op'],\r\n",
							"                                        ['CampusSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CampusSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CampusSchoolSubTypeId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusSchoolSubTypeDesc', 'string', 'no-op'],\r\n",
							"                                        ['CoEdStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['CoEdStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CampusFocusCode', 'integer', 'no-op'],\r\n",
							"                                        ['CampusRegion', 'string', 'no-op'],\r\n",
							"                                        ['CampusCluster', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['CampusSuburbAndName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolSuburbAndName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressStreet', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressPostCode', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressState', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressGeoData', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressLongitude', 'double', 'no-op'],\r\n",
							"                                        ['SchoolAddressLatitude', 'double', 'no-op'],\r\n",
							"                                        ['SchoolRegion', 'string', 'no-op'],\r\n",
							"                                        ['SchoolCluster', 'string', 'no-op'],\r\n",
							"                                        ['Website', 'string', 'no-op'],\r\n",
							"                                        ['BoardingStatus', 'string', 'no-op'],\r\n",
							"                                        ['Cohorts', 'string', 'no-op'],\r\n",
							"                                        ['CoEdStatusSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CampusPhone', 'string', 'no-op'],\r\n",
							"                                        ['SchoolPhone', 'string', 'no-op'],\r\n",
							"                                        ['DateCampusOpened', 'date', 'no-op'],\r\n",
							"                                        ['DateCampusClosed', 'date', 'no-op'],\r\n",
							"                                        ['IsCampusOpen', 'string', 'no-op'],\r\n",
							"                                        ['DateSchoolOpened', 'date', 'no-op'],\r\n",
							"                                        ['DateSchoolClosed', 'date', 'no-op'],\r\n",
							"                                        ['IsSchoolOpen', 'string', 'no-op'],\r\n",
							"                                        ['CampusStateCode', 'integer', 'no-op'],\r\n",
							"                                        ['StatisticalArea1', 'integer', 'no-op'], #updated bigint to integer\r\n",
							"                                        ['NameofStatisticalArea1', 'string', 'no-op'],\r\n",
							"                                        ['StatisticalArea2', 'integer', 'no-op'], #updated bigint to integer\r\n",
							"                                        ['NameofStatisticalArea2', 'string', 'no-op'],\r\n",
							"                                        ['StatisticalArea3', 'integer', 'no-op'], #updated bigint to integer\r\n",
							"                                        ['NameofStatisticalArea3', 'string', 'no-op'],\r\n",
							"                                        ['StatisticalArea4', 'integer', 'no-op'], #updated bigint to integer\r\n",
							"                                        ['NameofStatisticalArea4', 'string', 'no-op'],\r\n",
							"                                        ['ABSRemotenessArea', 'string', 'no-op'],\r\n",
							"                                        ['Geolocation', 'string', 'no-op'],\r\n",
							"                                        ['SchoolURL', 'string', 'no-op'],\r\n",
							"                                        ['AcaraSchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['HeadCampusAcaraId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolSector', 'string', 'no-op'],\r\n",
							"                                        ['CampusType', 'string', 'no-op'],\r\n",
							"                                        ['RolledReportingDescription', 'string', 'no-op'],\r\n",
							"                                        ['NESASchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['CompassSchoolURL', 'string', 'no-op'],\r\n",
							"                                        ['CompassSchoolName', 'string', 'no-op'],\r\n",
							"                                        ['CompassAPIKey', 'string', 'no-op'],\r\n",
							"                                        ['AncestryFlag', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMCalendarYear'] = [\r\n",
							"                                        ['SkYear', 'integer', 'no-op'],\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['ShortYear', 'string', 'no-op'],\r\n",
							"                                        ['YearName', 'string', 'no-op'],\r\n",
							"                                        ['prevyear', 'integer', 'no-op'],\r\n",
							"                                        ['nextyear', 'integer', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['FirstDayOfYear', 'date', 'no-op'],\r\n",
							"                                        ['LastDayOfYear', 'date', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMGender'] = [\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['BKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSifCode', 'string', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['GenderGroup', 'string', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMYearLevel'] = [\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['SchoolGroup', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMDate'] = [\r\n",
							"                                        ['SKDate', 'integer', 'no-op'],\r\n",
							"                                        ['BKDate', 'integer', 'no-op'],\r\n",
							"                                        ['Date', 'date', 'no-op'],\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['ShortYear', 'string', 'no-op'],\r\n",
							"                                        ['YearName', 'string', 'no-op'],\r\n",
							"                                        ['MonthNumberOfYear', 'integer', 'no-op'],\r\n",
							"                                        ['YearMonthConcatValue', 'integer', 'no-op'],\r\n",
							"                                        ['MonthLongName', 'string', 'no-op'],\r\n",
							"                                        ['MonthShortName', 'string', 'no-op'],\r\n",
							"                                        ['DayNumberOfMonth', 'integer', 'no-op'],\r\n",
							"                                        ['LastDayOfMonth', 'integer', 'no-op'],\r\n",
							"                                        ['LastDateOfMonth', 'date', 'no-op'],\r\n",
							"                                        ['LastDateOfMonthKey', 'integer', 'no-op'],\r\n",
							"                                        ['LastDayInMonthYesNo', 'string', 'no-op'],\r\n",
							"                                        ['DateLastYear', 'date', 'no-op'],\r\n",
							"                                        ['DateLastYearKey', 'integer', 'no-op'],\r\n",
							"                                        ['DateNextYear', 'date', 'no-op'],\r\n",
							"                                        ['DateNextYearKey', 'integer', 'no-op'],\r\n",
							"                                        ['DayLongName', 'string', 'no-op'],\r\n",
							"                                        ['DayShortName', 'string', 'no-op'],\r\n",
							"                                        ['DayNumberOfWeekSunday', 'integer', 'no-op'],\r\n",
							"                                        ['DayNumberOfWeekMonday', 'integer', 'no-op'],\r\n",
							"                                        ['FirstDateOfWeekSunday', 'date', 'no-op'],\r\n",
							"                                        ['FirstDateOfWeekMonday', 'date', 'no-op'],\r\n",
							"                                        ['FirstDateOfWeekSundayKey', 'integer', 'no-op'],\r\n",
							"                                        ['FirstDateOfWeekMondayKey', 'integer', 'no-op'],\r\n",
							"                                        ['DayNumberOfYear', 'integer', 'no-op'],\r\n",
							"                                        ['WeekNumberOfYearSunday', 'integer', 'no-op'],\r\n",
							"                                        ['WeekShortNameOfYearSunday', 'string', 'no-op'],\r\n",
							"                                        ['WeekNameOfYearSunday_Year', 'string', 'no-op'],\r\n",
							"                                        ['WeekNumberOfYearMonday', 'integer', 'no-op'],\r\n",
							"                                        ['WeekShortNameOfYearMonday', 'string', 'no-op'],\r\n",
							"                                        ['WeekNameOfYearMonday_Year', 'string', 'no-op'],\r\n",
							"                                        ['WeekNumberOfTermNSW', 'integer', 'no-op'],\r\n",
							"                                        ['WeekNumberOfTermQLD', 'integer', 'no-op'],\r\n",
							"                                        ['WeekNumberOfTermACT', 'integer', 'no-op'],\r\n",
							"                                        ['TermNumberNsw', 'integer', 'no-op'],\r\n",
							"                                        ['TermNumberQLD', 'integer', 'no-op'],\r\n",
							"                                        ['TermNumberACT', 'integer', 'no-op'],\r\n",
							"                                        ['SemesterNumberNSW', 'integer', 'no-op'],\r\n",
							"                                        ['SemesterNumberQLD', 'integer', 'no-op'],\r\n",
							"                                        ['SemesterNumberACT', 'integer', 'no-op'],\r\n",
							"                                        ['CYQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['CYQuarterShortName', 'string', 'no-op'],\r\n",
							"                                        ['CYQuarterLongName', 'string', 'no-op'],\r\n",
							"                                        ['CYQuarter_ShortYear', 'string', 'no-op'],\r\n",
							"                                        ['CYQuarter_LongYear', 'string', 'no-op'],\r\n",
							"                                        ['CYQuarterLongName1', 'string', 'no-op'],\r\n",
							"                                        ['CYHalfNumber', 'integer', 'no-op'],\r\n",
							"                                        ['CYHalfName', 'string', 'no-op'],\r\n",
							"                                        ['FYHalf_Year', 'string', 'no-op'],\r\n",
							"                                        ['FYQuarter_Year', 'string', 'no-op'],\r\n",
							"                                        ['FYHalf', 'integer', 'no-op'],\r\n",
							"                                        ['FYQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['FYMonth', 'integer', 'no-op'],\r\n",
							"                                        ['FYLongName', 'string', 'no-op'],\r\n",
							"                                        ['FYShortName', 'string', 'no-op'],\r\n",
							"                                        ['FYYear', 'string', 'no-op'],\r\n",
							"                                        ['WeekDayM_F_YesNo', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayYesNoNational', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayNationalDescription', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayYesNoNSW', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayNSWDesc', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayYesNoQLD', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayQLDDesc', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayYesNoACT', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayACTDesc', 'string', 'no-op'],\r\n",
							"                                        ['SchoolHolidaySessionNumberNSW', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolHolidaySessionNumberQLD', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolHolidaySessionNumberACT', 'integer', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMSchoolTermWeek'] = [\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['BKSchoolTermWeek', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['Date', 'date', 'no-op'],\r\n",
							"                                        ['DayOfWeek', 'string', 'no-op'],\r\n",
							"                                        ['TermName', 'string', 'no-op'],\r\n",
							"                                        ['TermNumber', 'integer', 'no-op'],\r\n",
							"                                        ['WeekName', 'string', 'no-op'],\r\n",
							"                                        ['WeekNumber', 'integer', 'no-op'],\r\n",
							"                                        ['TermStartDate', 'string', 'no-op'],\r\n",
							"                                        ['TermFinishDate', 'string', 'no-op'],\r\n",
							"                                        ['IsPublicHoliday', 'string', 'no-op'],\r\n",
							"                                        ['IsTeachingDay', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"        \r\n",
							"        self.schemas['DMSchoolTerm'] = [\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"                                        ['BKSchoolTerm', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['TermName', 'string', 'no-op'],\t\r\n",
							"                                        ['TermNumber', 'integer', 'no-op'],\r\n",
							"                                        ['TermStartDate', 'string', 'no-op'],\r\n",
							"                                        ['TermFinishDate', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        \r\n",
							"        \r\n",
							"        \"\"\"\r\n",
							"        self.schemas['PATData'] = [\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['UserKey', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Surname', 'string', 'no-op'],\r\n",
							"                                        ['School', 'string', 'no-op'],\r\n",
							"                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                        ['YearLevel', 'string', 'no-op'],\r\n",
							"                                        ['YearSize', 'integer', 'no-op'],\r\n",
							"                                        ['Ceider', 'string', 'no-op'],\r\n",
							"                                        ['Test', 'string', 'no-op'],\r\n",
							"                                        ['TestLevel', 'string', 'no-op'],\r\n",
							"                                        ['YearCompleted', 'integer', 'no-op'],\r\n",
							"                                        ['DateComplete', 'date', 'no-op'],\r\n",
							"                                        ['TimeComplete', 'string', 'no-op'],\r\n",
							"                                        ['RawScore', 'integer', 'no-op'],\r\n",
							"                                        ['ScaleScore', 'double', 'no-op'],\r\n",
							"                                        ['Percentile', 'integer', 'no-op'],\r\n",
							"                                        ['Stanine', 'integer', 'no-op']                                                           \r\n",
							"                                        ]\r\n",
							"        \"\"\"\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMACERStanine', self.schemas['DMACERStanine'], 'LastUpdateDate', 'SKACERStanine')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMACERStudent', self.schemas['DMACERStudent'], 'LastUpdateDate', 'SKACERStudent')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactPATResponse', self.schemas['DMFactPATResponse'], 'LastUpdateDate', 'SKPATResponse')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactPATResults', self.schemas['DMFactPATResults'], 'LastUpdateDate', 'SKPATResults')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPersonDemographic', self.schemas['DMPersonDemographic'], 'LastUpdateDate', 'SKPerson')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPATStudentTestGrouping', self.schemas['DMPATStudentTestGrouping'], 'LastUpdateDate', 'SKPATStudentTestGrouping')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPATTest', self.schemas['DMPATTest'], 'LastUpdateDate', 'SKPATTest')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMCampus', self.schemas['DMCampus'], 'LastUpdateDate', 'SKCampus')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMCalendarYear', self.schemas['DMCalendarYear'], 'LastUpdateDate', 'SkYear')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMGender', self.schemas['DMGender'], 'LastUpdateDate', 'SKGenderId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMYearLevel', self.schemas['DMYearLevel'], 'LastUpdateDate', 'SKYearLevel')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMDate', self.schemas['DMDate'], 'LastUpdateDate', 'SKDate')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMSchoolTermWeek', self.schemas['DMSchoolTermWeek'], 'LastUpdateDate', 'SKSchoolTermWeek')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMSchoolTerm', self.schemas['DMSchoolTerm'], 'LastUpdateDate', 'SKSchoolTerm')\r\n",
							"\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'PATData', self.schemas['PATData'], None, 'CompassPersonId')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"acer_object = Acer_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Antares_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fd5221bc-ab99-44e5-824a-a6ce99872345"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### This notebook contains Antares helper functions to be used for the OEA"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import Row, SparkSession\r\n",
							"from pyspark.sql.functions import when, col, sum, percent_rank, substring, trim, regexp_replace, length, lower, concat_ws, lit, avg, stddev, upper, mean, expr\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def addRow(existing_df, newRow):\r\n",
							"    new_df = spark.createDataFrame([newRow], existing_df.schema)\r\n",
							"\r\n",
							"    return existing_df.union(new_df)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def standardiseString(string, case=\"upper\"):\r\n",
							"    \"\"\"Function to standardise a string to upper or lower case and remove all spaces. Can be used when creating SK's from data \"\"\"\r\n",
							"    if case == \"upper\":\r\n",
							"        return upper(regexp_replace(string, \" \", \"\"))\r\n",
							"    \r\n",
							"    return lower(regexp_replace(string, \" \", \"\"))\r\n",
							"    \r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def unpivot_dataframe(df, id_vars, value_vars):\r\n",
							"    \"\"\"\r\n",
							"    Unpivot a DataFrame from wide to long format.\r\n",
							"    \r\n",
							"    Parameters:\r\n",
							"    - df: The DataFrame to unpivot.\r\n",
							"    - id_vars: A list of columns to use as identifier variables.\r\n",
							"    - value_vars: A list of columns to unpivot.\r\n",
							"    \r\n",
							"    Returns:\r\n",
							"    A DataFrame in long format.\r\n",
							"    \"\"\"\r\n",
							"    # Create a Spark session if not already created\r\n",
							"    spark = SparkSession.builder.getOrCreate()\r\n",
							"    \r\n",
							"    # Create an array of columns for the stack function\r\n",
							"    select_expr = \", \".join([f\"'{col}', {col}\" for col in value_vars])\r\n",
							"    \r\n",
							"    # Create the SQL expression for the stack function\r\n",
							"    stack_expr = f\"stack({len(value_vars)}, {select_expr}) as (Variable, Value)\"\r\n",
							"    \r\n",
							"    # Construct the select expression including id_vars\r\n",
							"    select_cols = \", \".join(id_vars) + \", \" + stack_expr\r\n",
							"    \r\n",
							"    # Apply the stack expression to unpivot the DataFrame\r\n",
							"    unpivoted_df = df.selectExpr(select_cols)\r\n",
							"    \r\n",
							"    return unpivoted_df\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### this is my new change"
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Attendance_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1e7502a8-240d-4b53-b2c9-954913c1401c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Attendance_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='attendance', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['AggWholeDayAttendanceBySchool'] = [\r\n",
							"                                        ['SKAggWholeDayAttendanceBySchool', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['CountAttended', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                                                     \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['AggWholeDayAttendanceByStudent'] = [\r\n",
							"                                        ['SKAggWholeDayAttendanceByStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['CountAttended', 'integer', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceCode'] = [\r\n",
							"        #                                 ['SKAttendanceCode', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKattendanceCode', 'string', 'no-op'],\r\n",
							"        #                                 ['ExtendedStatusGUId', 'string', 'no-op'],\r\n",
							"        #                                 ['CountAbscence', 'string', 'no-op'],\r\n",
							"        #                                 ['StatusDescription', 'string', 'no-op'],\r\n",
							"        #                                 ['StatusName', 'string', 'no-op'],\r\n",
							"        #                                 ['SchoolSystemExportIdentifier', 'string', 'no-op'],\r\n",
							"        #                                 ['ShortCode', 'string', 'no-op'],\r\n",
							"        #                                 ['ShortName', 'string', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['SCDReason', 'string', 'no-op']                                \r\n",
							"        #                                 ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceNote'] = [\r\n",
							"        #                                 ['SKAttendanceNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKAttendanceNote', 'string', 'no-op'],\r\n",
							"        #                                 ['CompassPersonId', 'string', 'no-op'],\r\n",
							"        #                                 ['CalendarYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['NoteStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LengthOfNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['Details', 'string', 'no-op'],\r\n",
							"        #                                 ['DateNoteEntered', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteAttendanceCodeDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteAttendanceCode', 'string', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['ScdReason', 'string', 'no-op']                                \r\n",
							"        #                                 ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceStatus'] = [\r\n",
							"        #                                 ['SKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusSifCode', 'string', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusSifDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['PrimarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['SecondarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['ScdReason', 'string', 'no-op'],\r\n",
							"        #                                 ['BusinessDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusGroup', 'string', 'no-op']                                                                                                             \r\n",
							"        #                                 ]\r\n",
							"        \r\n",
							"\r\n",
							"        # self.schemas['DMFactAttendanceCheckin'] = [\r\n",
							"        #                                 ['SKAttendanceCheckIn', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentID', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['CheckInTime', 'time', 'no-op'],\r\n",
							"        #                                 ['CheckInType', 'integer', 'no-op'],\r\n",
							"        #                                 ['CheckInCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op']                                                                      \r\n",
							"        #                                 ]    \r\n",
							"\r\n",
							"        # self.schemas['DMFactAttendanceRealTime'] = [\r\n",
							"        #                                 ['SKAttendanceRealTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentType', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['ArrivedLate', 'string', 'no-op'],\r\n",
							"        #                                 ['DepartedEarly', 'string', 'no-op'],\r\n",
							"        #                                 ['HasNote', 'string', 'no-op'],\r\n",
							"        #                                 ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['SliceCode', 'string', 'no-op']                                \r\n",
							"        #                             ]  \r\n",
							"\r\n",
							"\r\n",
							"        # self.schemas['dbo.vwDMFactHalfDayAttendance'] = [ \r\n",
							"        #                                 ['SKHalfDayAttendance', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentType', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['ArrivedLate', 'string', 'no-op'],\r\n",
							"        #                                 ['DepartedEarly', 'string', 'no-op'],\r\n",
							"        #                                 ['HasNote', 'string', 'no-op'],\r\n",
							"        #                                 ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['Iscurrent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKTimeSliceAMPM', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentOrganisationDetails', 'integer', 'no-op']                               \r\n",
							"        #                             ] \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        # self.schemas['DMFactPeriodAttendance'] = [ \r\n",
							"        #                                 ['SKPeriodAttendance', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentType', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['ArrivedLate', 'string', 'no-op'],\r\n",
							"        #                                 ['DepartedEarly', 'string', 'no-op'],\r\n",
							"        #                                 ['HasNote', 'string', 'no-op'],\r\n",
							"        #                                 ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['Iscurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['SKStudentOrganisationDetails', 'integer', 'no-op']                              \r\n",
							"        #                             ]   \r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactWholeDayAttendance'] = [ \r\n",
							"                                        ['SKWholeDayAttendance', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"                                        ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentType', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'string', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'string', 'no-op'],\r\n",
							"                                        ['HasNote', 'string', 'no-op'],\r\n",
							"                                        ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                \r\n",
							"                                    ]   \r\n",
							"                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'AggWholeDayAttendanceBySchool', self.schemas['AggWholeDayAttendanceBySchool'], None, 'SKAggWholeDayAttendanceBySchool')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'AggWholeDayAttendanceByStudent', self.schemas['AggWholeDayAttendanceByStudent'], None, 'SKAggWholeDayAttendanceByStudent')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceCode'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceNote'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceStatus'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactAttendanceCheckin'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactAttendanceRealTime'], '<partition>', '<key>')\r\n",
							"\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactAttendanceRealTime'], '<partition>', '<key>')\r\n",
							"\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactMySchoolsAttendance'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactWholeDayAttendance', self.schemas['DMFactWholeDayAttendance'], None, 'SKWholeDayAttendance')\r\n",
							"\r\n",
							"\r\n",
							"        \r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student_test_file', self.schemas['student_test'], 'LastUpdateDate', 'SKStudent') # try to partition by LastUpdateDate instead of CreateDate\r\n",
							"\r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\r\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\r\n",
							"\r\n",
							"attendance_object = Attendance_object()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CYC Testing')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "34ac1bdf-0b07-4523-86ee-31dd68420223"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %%pyspark\r\n",
							"\r\n",
							"# sourcep = oea.stage2p\r\n",
							"# df1 = spark.read.load(sourcep + \"/ACER/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"# df1.createOrReplaceTempView('vw_df_dmfactpatresults_pseudo')"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- select count(*) from vw_df_dmfactpatresults_pseudo;"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %%pyspark\r\n",
							"\r\n",
							"# sourcep = oea.stage2p\r\n",
							"# df2 = spark.read.load(sourcep + \"/ACER/DMPATStudentTestGrouping_pseudo\", format='delta')\r\n",
							"\r\n",
							"# df2.createOrReplaceTempView('vw_df_dmpatstudenttestgrouping')"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- select count(*) from vw_df_dmpatstudenttestgrouping;"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- -- select max(combineddatetime) from (\r\n",
							"-- -- select datecomplete, timecomplete, right(left(timecomplete, 10), 8), concat(datecomplete, ' ', right(left(timecomplete, 10), 8)) as combineddatetime from vw_df_dmpatstudenttestgrouping \r\n",
							"-- -- --limit 10 \r\n",
							"-- -- order by datecomplete desc, timecomplete desc\r\n",
							"-- -- ) innerquery;\r\n",
							"\r\n",
							"-- select min(combineddatetime) from (\r\n",
							"-- select datecomplete, timecomplete, right(left(timecomplete, 10), 8), concat(datecomplete, ' ', right(left(timecomplete, 10), 8)) as combineddatetime from vw_df_dmpatstudenttestgrouping \r\n",
							"-- --limit 10 \r\n",
							"-- order by datecomplete asc, timecomplete asc\r\n",
							"-- ) innerquery;\r\n",
							"\r\n",
							"\r\n",
							"-- --select min(datecomplete), max(datecomplete) from vw_df_dmpatstudenttestgrouping ;\r\n",
							"-- --select min(timecomplete), max(timecomplete) from vw_df_dmpatstudenttestgrouping ;\r\n",
							""
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- --concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8))\r\n",
							"\r\n",
							"-- select \r\n",
							"-- a.*, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime\r\n",
							"-- from vw_df_dmfactpatresults_pseudo a\r\n",
							"-- left join vw_df_dmpatstudenttestgrouping b\r\n",
							"-- on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping\r\n",
							"\r\n",
							"-- inner join \r\n",
							"\r\n",
							"-- (\r\n",
							"-- select skyear, skacerstudent, skpattest, skcampus, scalescore, datecomplete, timecomplete, combineddatetime, max(skpatresults) as maxskpatresults\r\n",
							"-- from\r\n",
							"-- (\r\n",
							"-- select a.skpatresults, a.skyear, a.skacerstudent, a.skpattest, a.skcampus,  a.ScaleScore,  b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime\r\n",
							"-- from vw_df_dmfactpatresults_pseudo a\r\n",
							"-- left join vw_df_dmpatstudenttestgrouping b\r\n",
							"-- on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping\r\n",
							"\r\n",
							"\r\n",
							"-- inner join \r\n",
							"-- (\r\n",
							"-- select skyear, skacerstudent, skpattest, skcampus, combineddatetime, max(scalescore) as maxscalescore\r\n",
							"-- from\r\n",
							"-- (\r\n",
							"-- select a.skyear, a.skacerstudent, a.skpattest, a.skcampus,  a.ScaleScore,  b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime\r\n",
							"-- from vw_df_dmfactpatresults_pseudo a\r\n",
							"-- left join vw_df_dmpatstudenttestgrouping b\r\n",
							"-- on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping\r\n",
							"\r\n",
							"-- inner join\r\n",
							"-- (select \r\n",
							"-- \t\t\tskyear, skacerstudent, skpattest, skcampus, \r\n",
							"-- \t\t\tmax(concat(datecomplete, ' ', right(left(timecomplete, 10), 8))) as latestdate\r\n",
							"-- \t\t\tfrom\r\n",
							"-- \t\t\t\t(\r\n",
							"-- \t\t\t\tselect a.*, orig.skpatstudenttestgrouping, orig.skacerstanine, ScaleScore, skpatresults\r\n",
							"-- \t\t\t\t, b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime\r\n",
							"-- \t\t\t\t\tfrom (\r\n",
							"-- \t\t\t\t\tselect skyear, skacerstudent, skpattest, skcampus, count(*) as counttotal \r\n",
							"-- \t\t\t\t\tfrom vw_df_dmfactpatresults_pseudo\r\n",
							"-- \t\t\t\t\twhere skpattest not in (43, 54, 65, 66, 76, 79, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112)\r\n",
							"-- \t\t\t\t\tgroup by skyear, skacerstudent, skpattest, skcampus\r\n",
							"-- \t\t\t\t\t--having count(*) = 1\r\n",
							"-- \t\t\t\t\t) a\r\n",
							"-- \t\t\t\tleft join vw_df_dmfactpatresults_pseudo orig\r\n",
							"-- \t\t\t\ton a.skyear = orig.skyear and a.skacerstudent = orig.skacerstudent and a.skpattest = orig.skpattest and a.skcampus = orig.skcampus\r\n",
							"-- \t\t\t\tleft join vw_df_dmpatstudenttestgrouping b\r\n",
							"-- \t\t\t\ton orig.skpatstudenttestgrouping = b.skpatstudenttestgrouping\r\n",
							"-- \t\t\t\t) total\r\n",
							"-- \t\t\tgroup by skyear, skacerstudent, skpattest, skcampus\r\n",
							"-- \t\t\t) inner1\r\n",
							"\r\n",
							"-- on a.skyear = inner1.skyear\r\n",
							"-- and a.skacerstudent = inner1.SKACERStudent\r\n",
							"-- and a.SKPATTest = inner1.SKPATTest\r\n",
							"-- and a.SKCampus = inner1.SKCampus\r\n",
							"-- and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner1.latestdate\r\n",
							"-- ) inner2\r\n",
							"-- group by skyear, skacerstudent, skpattest, skcampus, combineddatetime\r\n",
							"-- ) inner3\r\n",
							"-- on a.skyear = inner3.skyear\r\n",
							"-- and a.skacerstudent = inner3.SKACERStudent\r\n",
							"-- and a.SKPATTest = inner3.SKPATTest\r\n",
							"-- and a.SKCampus = inner3.SKCampus\r\n",
							"-- and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner3.combineddatetime\r\n",
							"-- ) inner4\r\n",
							"-- group by skyear, skacerstudent, skpattest, skcampus, scalescore, datecomplete, timecomplete, combineddatetime\r\n",
							"-- ) inner5\r\n",
							"-- on a.skyear = inner5.skyear\r\n",
							"-- and a.skacerstudent = inner5.SKACERStudent\r\n",
							"-- and a.SKPATTest = inner5.SKPATTest\r\n",
							"-- and a.SKCampus = inner5.SKCampus\r\n",
							"-- and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner5.combineddatetime\r\n",
							"-- and a.SKPATResults = inner5.maxskpatresults;\r\n",
							""
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"#dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"#dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"#dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3\r\n",
							"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for naplan and acer participation view\r\n",
							"factstudentenrolmentcounts_df = spark.read.load(sourcep + \"/enrolment/DMFactStudentEnrolmentCounts_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"# stage 3 naplan and acer participation view\r\n",
							"factnaplanstudentyearresult_df = spark.read.load(source3p + \"/pilot/DMFactNaplanStudentYearResult_pseudo\", format='delta')\r\n",
							"factpatresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Learning Task\r\n",
							"ae_manuallearningtasks_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Semester Report\r\n",
							"ae_manualsemesterreports_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for ODS tables (+ dmcampus_df already added above)\r\n",
							"odsactivity_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
							"odsactivityenrolment_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
							"odscompasssubject_df = spark.read.load(sourcep + \"/_ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
							"odsstaffdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
							"odsstudentdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstafforganisationdetails_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffOrganisationDetails_pseudo\", format='delta')\r\n",
							"odsstudentorganisationdetails_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentOrganisationDetails_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstudentorganisationmilestones_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentOrganisationMilestones_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"\r\n",
							"factstudentenrolmentcounts_df.createOrReplaceTempView('vw_factstudentenrolmentcounts')\r\n",
							"factnaplanstudentyearresult_df.createOrReplaceTempView('vw_factnaplanstudentyearresult')\r\n",
							"factpatresults_df.createOrReplaceTempView('vw_factpatresults_df')\r\n",
							"\r\n",
							"ae_manuallearningtasks_df.createOrReplaceTempView('vw_aemanuallearningtasks')\r\n",
							"ae_manualsemesterreports_df.createOrReplaceTempView('vw_aemanualsemesterreports')\r\n",
							"\r\n",
							"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \r\n",
							"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \r\n",
							"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \r\n",
							"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \r\n",
							"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') \r\n",
							"\r\n",
							"odsstafforganisationdetails_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationDetails') \r\n",
							"odsstudentorganisationdetails_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationDetails') \r\n",
							"\r\n",
							"odsstudentorganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationMilestones') "
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_activestudent"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select calendaryear, count(*) from\r\n",
							"(\r\n",
							"select\r\n",
							"distinct ms.CompassPersonId as MS_CompassPersonID\r\n",
							",demo.CompassPersonId as DEMO_CompassPersonID\r\n",
							",ms.yearlevel\r\n",
							",ms.isactive \r\n",
							",ms.iscurrentmilestone \r\n",
							",ms.studenttype \r\n",
							",ms.dioceseId\r\n",
							",ms.campusid \r\n",
							",camp.skcampus\r\n",
							",camp.BKCampusId\r\n",
							",camp.SchoolName\r\n",
							",ms.iscurrent\r\n",
							",demo.firstname\r\n",
							",demo.lastname \r\n",
							",demo.gender \r\n",
							",demo.govcode1 as ceider -- need to select where this is not null?\r\n",
							",demo.disability \r\n",
							",demo.LBOTE \r\n",
							",demo.indigenoustypecode \r\n",
							"--,s.AcademicYear\r\n",
							"--,ae.CompassPersonId\r\n",
							",ms.milestonetimestamp\r\n",
							"--,case when ms.milestonetimestamp is not null then (year(ms.milestonetimestamp)+1) else (year(CURRENT_TIMESTAMP)+1) end as yearcolumn\r\n",
							"--,year(DATEADD(HOUR, 10, cast(MilestoneTimestamp as datetime2))) as calendaryear\r\n",
							",year(MilestoneTimestamp + INTERVAL 10 HOURS) AS calendaryear\r\n",
							"from vw_CompassODSStudentOrganisationMilestones ms\r\n",
							"left join vw_CompassODSStudentDemographic demo on ms.CompassPersonId = demo.CompassPersonId --need this for details like name, disability, LBOTE, etc\r\n",
							"\tand demo.Iscurrent = 'True'\r\n",
							"left join vw_dmcampus camp on ms.campusid = camp.BKCampusId\r\n",
							"\r\n",
							"where \r\n",
							"ms.iscurrent = 'True'\r\n",
							"and ms.isactive = 'True'\r\n",
							"--and ms.iscurrentmilestone  = 'True' --this is just for 2023 (current year)\r\n",
							"--and ms.CompassPersonId = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504'\r\n",
							"--and demo.GovCode1 is not null\r\n",
							"and year(MilestoneTimestamp + INTERVAL 10 HOURS) in (2021, 2022, 2023)\r\n",
							") innerquery\r\n",
							"\r\n",
							"group by calendaryear"
						],
						"outputs": [],
						"execution_count": 68
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_studentstable_original\r\n",
							"as\r\n",
							"\r\n",
							"select year\r\n",
							", yearlevel\r\n",
							", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote, count(*) as groupingcount from\r\n",
							"\r\n",
							"(\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yearlevel.yearlevel as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails \r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"left join (SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"              ) yearlevel \r\n",
							"        on d.CompassPersonId = yearlevel.compasspersonid\r\n",
							"        and yearlevel.milestoneyear = s.academicyear\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where \r\n",
							"year is not null\r\n",
							") wholequery\r\n",
							"\r\n",
							"where yearlevel is not null\r\n",
							"\r\n",
							"group by year\r\n",
							", yearlevel\r\n",
							", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_studentstable_original"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select year, count(*) from vw_ods_studentstable_original\r\n",
							"group by year\r\n",
							"order by year"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_studentstable_2022"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_studentstable_2023\r\n",
							"as\r\n",
							"\r\n",
							"select year\r\n",
							", yearlevel\r\n",
							", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote, count(*) as groupingcount from\r\n",
							"\r\n",
							"(\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yearlevel.yearlevel as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(utcactivityenrolmentstartdate) = 2023 ---------------------------------------------------------------added this \r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails \r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"left join (SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"              ) yearlevel \r\n",
							"        on d.CompassPersonId = yearlevel.compasspersonid\r\n",
							"        and yearlevel.milestoneyear = s.academicyear\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where \r\n",
							"year is not null\r\n",
							"and year = 2023\r\n",
							") wholequery\r\n",
							"\r\n",
							"where yearlevel is not null\r\n",
							"\r\n",
							"group by year\r\n",
							", yearlevel\r\n",
							", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_studentstable_2023"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_studentstable_2022"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_studentstable --39418\r\n",
							"--where year = 2023   --13245\r\n",
							"--where year = 2022   --11486\r\n",
							"--where year = 2021   --8591\r\n",
							"--where year = 2020   --2375\r\n",
							"--where year = 2019   --2435\r\n",
							"--where year = 2018   --983\r\n",
							"--where year = 2017   --303\r\n",
							"--where year = 2016   --0\r\n",
							"--where year = 2015   --0\r\n",
							"--where year = 2014   --0\r\n",
							"--where year = 2013   --0\r\n",
							"--where year = 2012   --0"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_aemanuallearningtasks\r\n",
							"where result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
						],
						"outputs": [],
						"execution_count": 79
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_aemanualsemesterreports --639988\r\n",
							"where bkid is null --621494\r\n",
							"-- where result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') --112780\r\n",
							"--where bkid is not null --18494\r\n",
							"--where bkid is null --621494"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_aemanualsemesterreports\r\n",
							"where \r\n",
							"school_name = \"St Joseph's Catholic School\"\r\n",
							"    and area = 'The Strand'\r\n",
							"        and semester = 2\r\n",
							"        and year = 2022"
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_aemanuallearningtasks\r\n",
							"where \r\n",
							"school_name = \"St Anthony's Catholic College\"\r\n",
							"    and area = 'Deeragun'\r\n",
							"        and semester = 2\r\n",
							"        and year = 2022"
						],
						"outputs": [],
						"execution_count": 65
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_aemanualsemesterreports\r\n",
							"where studentfirstname = 'Isla' \r\n",
							"    and studentlastname = 'Hildebrandt'"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ae_manual_semesterreports; --112780"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_semesterreports\r\n",
							"limit 3"
						],
						"outputs": [],
						"execution_count": 77
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ae_manual_learningtasks\r\n",
							""
						],
						"outputs": [],
						"execution_count": 78
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_semesterreports\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"m.* \r\n",
							", innerquery.ceider\r\n",
							", innerquery.schoolid\r\n",
							", innerquery.skcampus\r\n",
							"from vw_aemanualsemesterreports m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype\r\n",
							"    ,b.skcampus\r\n",
							"    ,c.schoolname, c.area, c.schoolid\r\n",
							"    ,b.skyearlevel \r\n",
							"    ,d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"         and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = trim(lower(innerquery.firstname))\r\n",
							"and lower(m.studentlastname) = trim(lower(innerquery.lastname))\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and lower(m.area) = lower(innerquery.area)\r\n",
							"and trim(lower(m.studentyearlevel)) = trim(lower(innerquery.yearlevelsifdesc))\r\n",
							"\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_semesterreports \r\n",
							"--where bkid is not null\r\n",
							"--where year is null;"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_learningtasks\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"m.School_Name\r\n",
							",m.Area\r\n",
							",m.Semester\r\n",
							",m.Year\r\n",
							",m.SubjectName\r\n",
							",m.Code\r\n",
							",m.TeacherImportIdentifier\r\n",
							",m.TaskId\r\n",
							",m.IsSubjectWide\r\n",
							",m.TaskName\r\n",
							",m.StudentCode\r\n",
							",m.GovtCode1\r\n",
							",m.StudentLastName\r\n",
							",m.StudentFirstName\r\n",
							",m.YearLevel\r\n",
							"--,case when m.YearLevel is null then m.YearLevel else concat('Year ' , cast(m.YearLevel as string)) end\r\n",
							",m.ResultType\r\n",
							",m.PrimaryGrade\r\n",
							",m.CommentTimestamp\r\n",
							",m.CommentPosterCode\r\n",
							",m.CommentPosterName\r\n",
							",m.Result\r\n",
							",m.ComponentName\r\n",
							",m.ComponentType\r\n",
							",m.IsIncludedInReport\r\n",
							",m.ReportCycleName\r\n",
							",m.DueDate\r\n",
							",m.Category\r\n",
							",m.SubmissionStatus\r\n",
							",m.ReceiptTime\r\n",
							",m.BKID\r\n",
							",innerquery.ceider\r\n",
							",innerquery.schoolid\r\n",
							",innerquery.skcampus\r\n",
							"from vw_aemanuallearningtasks m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, b.skyearlevel,  c.schoolname, c.area, c.schoolid, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"        and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"--and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
							"and trim(case when m.YearLevel is null then -1 else m.YearLevel end) = trim(innerquery.yearlevelsifcode)\r\n",
							"and lower(m.area) = lower(innerquery.area)\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Redo query"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_ods_studentstable_2023\r\n",
							"-- as\r\n",
							"\r\n",
							"-- select year\r\n",
							"-- , yearlevel\r\n",
							"-- , campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote, count(*) as groupingcount from\r\n",
							"\r\n",
							"-- (\r\n",
							"\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yearlevel.yearlevel as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(utcactivityenrolmentstartdate) = 2023 ---------------------------------------------------------------added this \r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails \r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"left join (SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"              ) yearlevel \r\n",
							"        on d.CompassPersonId = yearlevel.compasspersonid\r\n",
							"        and yearlevel.milestoneyear = s.academicyear\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where \r\n",
							"year is not null\r\n",
							"and year = 2023\r\n",
							"-- ) wholequery\r\n",
							"\r\n",
							"-- where yearlevel is not null\r\n",
							"\r\n",
							"-- group by year\r\n",
							"-- , yearlevel\r\n",
							"-- , campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from\r\n",
							"(\r\n",
							"SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"\r\n",
							") innerquery\r\n",
							"--where milestoneyear = 2023 --13407\r\n",
							"--where milestoneyear = 2022 --14217\r\n",
							"--where milestoneyear = 2021 --13414\r\n",
							"--where milestoneyear = 2020 --12102\r\n",
							"--where milestoneyear = 2019 --29191"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_studentclass\r\n",
							"as\r\n",
							"\r\n",
							"SELECT distinct\r\n",
							"d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							",s.SubjectLongName\r\n",
							",a.SubjectCode\r\n",
							",a.ActivityName\r\n",
							",a.ActivityTypeDescription\r\n",
							",a.ManagingCompassPersonId\r\n",
							",staff.firstname\r\n",
							",staff.lastname\r\n",
							",ae.ActivityEnrolmentStartDate\r\n",
							",ae.ActivityEnrolmentEndDate\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
							",a.CampusId AS AGEID\r\n",
							",c.CampusSuburbAndName\r\n",
							"--,c.CompassSchoolURL\r\n",
							",s.AcademicYear\r\n",
							",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
							",a.IsCurrent as IsCurrent_Activity\r\n",
							",s.IsCurrent as IsCurrent_Subject\r\n",
							",staff.iscurrent as IsCurrent_Staff\r\n",
							",d.iscurrent as IsCurrent_Student\r\n",
							"\r\n",
							"\r\n",
							"FROM \r\n",
							"vw_CompassODSStudentDemographic d \r\n",
							"\r\n",
							"JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"\r\n",
							"JOIN vw_CompassODSActivity a \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"\r\n",
							"LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"\r\n",
							"JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\r\n",
							"WHERE \r\n",
							"d.iscurrent is True\r\n",
							"AND a.ActivityTypeDescription = 'Standard Class'"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_studentclass\r\n",
							"limit 5"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_studentclass_without_grade\r\n",
							"as\r\n",
							"\r\n",
							"SELECT distinct\r\n",
							"d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							",d.disability\r\n",
							",d.indigenoustype\r\n",
							",d.indigenoustypecode\r\n",
							",d.LBOTE\r\n",
							",d.gendercode\r\n",
							",d.campusid\r\n",
							"-- ,s.SubjectLongName\r\n",
							"-- ,a.SubjectCode\r\n",
							"-- ,a.ActivityName\r\n",
							"-- ,a.ActivityTypeDescription\r\n",
							"-- ,a.ManagingCompassPersonId\r\n",
							"-- ,staff.firstname\r\n",
							"-- ,staff.lastname\r\n",
							"-- ,ae.ActivityEnrolmentStartDate\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							"-- ,concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,c.CampusSuburbAndName\r\n",
							",c.Schoolname\r\n",
							",c.Area\r\n",
							"-- --,c.CompassSchoolURL\r\n",
							",s.AcademicYear\r\n",
							"--,yearlevel.yearlevel\r\n",
							",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
							"-- ,a.IsCurrent as IsCurrent_Activity\r\n",
							",s.IsCurrent as IsCurrent_Subject\r\n",
							"-- ,staff.iscurrent as IsCurrent_Staff\r\n",
							",d.iscurrent as IsCurrent_Student\r\n",
							"\r\n",
							"\r\n",
							"FROM \r\n",
							"vw_CompassODSStudentDemographic d \r\n",
							"\r\n",
							"JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"and ae.iscurrent is True \r\n",
							"\r\n",
							"-- JOIN vw_CompassODSActivity a \r\n",
							"-- ON ae.ActivityCode = a.ActivityCode\r\n",
							"-- AND ae.CampusId = a.CampusId\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"--AND a.CampusId = s.CampusId\r\n",
							"AND d.CampusId = s.CampusId\r\n",
							"and s.iscurrent is True\r\n",
							"\r\n",
							"-- LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"-- ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"\r\n",
							"JOIN vw_dmcampus c ON d.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"-- left join (SELECT CompassPersonId,\r\n",
							"--            CampusId,\r\n",
							"--         --    case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"--            YearLevel,\r\n",
							"--            GroupA,\r\n",
							"--            GroupB,\r\n",
							"--            GroupC,\r\n",
							"--            GroupD,\r\n",
							"--            GroupE,\r\n",
							"--            IsActive,\r\n",
							"--            IsCurrentMilestone,\r\n",
							"--            year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"--            MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"--            COALESCE(\r\n",
							"--                        LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"--                                                                             OVER (PARTITION BY CompassPersonId,\r\n",
							"--                                                                                       OrganisationName\r\n",
							"--                                                                          ORDER BY MilestoneTimestamp,\r\n",
							"--                                                                                   HomeCampusGuid\r\n",
							"--                                                                         ),\r\n",
							"--                        make_date(9999, 12, 31)\r\n",
							"--                    ) AS MilestoneFinishDate,\r\n",
							"--            OrganisationName\r\n",
							"--     FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"--      WHERE IsCurrent is True\r\n",
							"--           AND DioceseId = 12\r\n",
							"--           and yearlevel is not null\r\n",
							"--               ) yearlevel \r\n",
							"--         on d.CompassPersonId = yearlevel.compasspersonid\r\n",
							"--         and yearlevel.milestoneyear = s.academicyear\r\n",
							"\r\n",
							"\r\n",
							"WHERE \r\n",
							"d.iscurrent is True\r\n",
							"--AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"-- and d.firstname = 'Georgia'\r\n",
							"-- and d.lastname = 'Carland'\r\n",
							"and s.AcademicYear is not null\r\n",
							"--and yearlevel.yearlevel is not null\r\n",
							"\r\n",
							"order by s.AcademicYear"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select academicyear, count(*) from vw_ods_studentclass_without_grade\r\n",
							"group by academicyear\r\n",
							"order by academicyear"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_ods_studentclass_check_counts\r\n",
							"-- as\r\n",
							"\r\n",
							"SELECT distinct\r\n",
							"d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							",d.disability\r\n",
							",d.indigenoustype\r\n",
							",d.indigenoustypecode\r\n",
							",d.LBOTE\r\n",
							",d.gendercode\r\n",
							",d.campusid\r\n",
							"-- ,s.SubjectLongName\r\n",
							"-- ,a.SubjectCode\r\n",
							"-- ,a.ActivityName\r\n",
							"-- ,a.ActivityTypeDescription\r\n",
							"-- ,a.ManagingCompassPersonId\r\n",
							"-- ,staff.firstname\r\n",
							"-- ,staff.lastname\r\n",
							"-- ,ae.ActivityEnrolmentStartDate\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							"-- ,concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,c.CampusSuburbAndName\r\n",
							",c.Schoolname\r\n",
							",c.Area\r\n",
							"-- --,c.CompassSchoolURL\r\n",
							",s.AcademicYear\r\n",
							",yearlevel.yearlevel\r\n",
							",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
							"-- ,a.IsCurrent as IsCurrent_Activity\r\n",
							",s.IsCurrent as IsCurrent_Subject\r\n",
							"-- ,staff.iscurrent as IsCurrent_Staff\r\n",
							",d.iscurrent as IsCurrent_Student\r\n",
							"\r\n",
							"\r\n",
							"FROM \r\n",
							"vw_CompassODSStudentDemographic d \r\n",
							"\r\n",
							"JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"and ae.iscurrent is True \r\n",
							"\r\n",
							"-- JOIN vw_CompassODSActivity a \r\n",
							"-- ON ae.ActivityCode = a.ActivityCode\r\n",
							"-- AND ae.CampusId = a.CampusId\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"--AND a.CampusId = s.CampusId\r\n",
							"AND d.CampusId = s.CampusId\r\n",
							"and s.iscurrent is True\r\n",
							"\r\n",
							"-- LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"-- ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"\r\n",
							"JOIN vw_dmcampus c ON d.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"left join (SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"        --    case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"              ) yearlevel \r\n",
							"        on d.CompassPersonId = yearlevel.compasspersonid\r\n",
							"        and yearlevel.milestoneyear = s.academicyear\r\n",
							"\r\n",
							"\r\n",
							"WHERE \r\n",
							"d.iscurrent is True\r\n",
							"--AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"-- and d.firstname = 'Georgia'\r\n",
							"-- and d.lastname = 'Carland'\r\n",
							"and s.AcademicYear is not null\r\n",
							"and yearlevel.yearlevel is not null\r\n",
							"\r\n",
							"order by s.AcademicYear"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_studentclass_check_counts"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select academicyear, count(*) from vw_ods_studentclass_check_counts\r\n",
							"group by academicyear\r\n",
							"order by academicyear"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_studentclass_check_counts\r\n",
							"where studentfirstname = 'Allira'\r\n",
							"    and studentlastname = 'Ackers'"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_studentclass_check_counts\r\n",
							"where studentfirstname = 'Adaline'\r\n",
							"    and studentlastname = 'Airey'"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_studentclass_check_counts\r\n",
							"where studentfirstname = 'Piper'\r\n",
							"    and studentlastname = 'Dawes'"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_studentclass_check_counts_2\r\n",
							"as\r\n",
							"\r\n",
							"SELECT distinct\r\n",
							"d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							",d.disability\r\n",
							",d.indigenoustype\r\n",
							",d.indigenoustypecode\r\n",
							",d.LBOTE\r\n",
							",d.gendercode\r\n",
							",d.campusid\r\n",
							"-- ,s.SubjectLongName\r\n",
							"-- ,a.SubjectCode\r\n",
							"-- ,a.ActivityName\r\n",
							"-- ,a.ActivityTypeDescription\r\n",
							"-- ,a.ManagingCompassPersonId\r\n",
							"-- ,staff.firstname\r\n",
							"-- ,staff.lastname\r\n",
							"-- ,ae.ActivityEnrolmentStartDate\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							"-- ,concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,c.CampusSuburbAndName\r\n",
							",c.Schoolname\r\n",
							",c.Area\r\n",
							"-- --,c.CompassSchoolURL\r\n",
							",s.AcademicYear\r\n",
							",yearlevel.yearlevel\r\n",
							",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
							"-- ,a.IsCurrent as IsCurrent_Activity\r\n",
							",s.IsCurrent as IsCurrent_Subject\r\n",
							"-- ,staff.iscurrent as IsCurrent_Staff\r\n",
							",d.iscurrent as IsCurrent_Student\r\n",
							"\r\n",
							"\r\n",
							"FROM \r\n",
							"vw_CompassODSStudentDemographic d \r\n",
							"\r\n",
							"JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"and ae.iscurrent is True \r\n",
							"\r\n",
							"-- JOIN vw_CompassODSActivity a \r\n",
							"-- ON ae.ActivityCode = a.ActivityCode\r\n",
							"-- AND ae.CampusId = a.CampusId\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"--AND a.CampusId = s.CampusId\r\n",
							"AND d.CampusId = s.CampusId\r\n",
							"and s.iscurrent is True\r\n",
							"\r\n",
							"-- LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"-- ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"\r\n",
							"JOIN vw_dmcampus c ON d.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"left join (SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"        --    case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"              ) yearlevel \r\n",
							"        on d.CompassPersonId = yearlevel.compasspersonid\r\n",
							"        and yearlevel.milestoneyear = s.academicyear\r\n",
							"\r\n",
							"\r\n",
							"WHERE \r\n",
							"d.iscurrent is True\r\n",
							"--AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"-- and d.firstname = 'Georgia'\r\n",
							"-- and d.lastname = 'Carland'\r\n",
							"and s.AcademicYear is not null\r\n",
							"--and yearlevel.yearlevel is not null\r\n",
							"\r\n",
							"order by s.AcademicYear"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select academicyear, count(*) from vw_ods_studentclass_check_counts_2\r\n",
							"group by academicyear\r\n",
							"order by academicyear"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"        --    case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"          and compasspersonid = 'f9ddec91-8a3a-4f31-9934-e6c305606b4f'"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmcampus"
						],
						"outputs": [],
						"execution_count": 70
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSCompassSubject \r\n",
							"limit 3"
						],
						"outputs": [],
						"execution_count": 63
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSActivityEnrolment\r\n",
							"limit 5"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStudentDemographic\r\n",
							"limit 3"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_earlyyearsstudents"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"-- select \r\n",
							"-- year\r\n",
							"-- , YearLevel\r\n",
							"-- , CampusID\r\n",
							"-- , SchoolName\r\n",
							"-- , TeacherID\r\n",
							"-- , TeacherName\r\n",
							"-- , StudentID \r\n",
							"-- , StudentName\r\n",
							"-- , ClassName\r\n",
							"-- , ClassID\r\n",
							"-- , StaffEmail\r\n",
							"-- , StudentEmail\r\n",
							"-- , ceider\r\n",
							"-- -- , staff_login_email\r\n",
							"-- -- , student_login_email\r\n",
							"\r\n",
							"-- from \r\n",
							"-- (\r\n",
							"\r\n",
							"-- select \r\n",
							"\r\n",
							"-- year\r\n",
							"-- , YearLevel\r\n",
							"-- , CampusID\r\n",
							"-- , SchoolName\r\n",
							"-- , TeacherID\r\n",
							"-- , TeacherName\r\n",
							"-- , StudentID \r\n",
							"-- , StudentName\r\n",
							"-- , max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							"-- , ClassName\r\n",
							"-- , ClassID\r\n",
							"-- , StaffEmail\r\n",
							"-- , StudentEmail\r\n",
							"-- , ceider\r\n",
							"-- -- , staff_login_email\r\n",
							"-- -- , student_login_email\r\n",
							"\r\n",
							"--  from \r\n",
							"-- (\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(ae.utcactivityenrolmentstartdate) = year(current_date)\r\n",
							"\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"--and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"-- where \r\n",
							"--     staff.iscurrent is True\r\n",
							"-- ) innerquery\r\n",
							"\r\n",
							"-- where \r\n",
							"-- --innerquery.Year >= 2021 and ------------------------------this filters out the three schools - 550, 661, 17253\r\n",
							"-- innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"-- group by\r\n",
							"-- year\r\n",
							"-- , YearLevel\r\n",
							"-- , CampusID\r\n",
							"-- , SchoolName\r\n",
							"-- , TeacherID\r\n",
							"-- , TeacherName\r\n",
							"-- , StudentID \r\n",
							"-- , StudentName\r\n",
							"-- , ClassName\r\n",
							"-- , ClassID\r\n",
							"-- , StaffEmail\r\n",
							"-- , StudentEmail\r\n",
							"-- , ceider\r\n",
							"-- -- , staff_login_email\r\n",
							"-- -- , student_login_email\r\n",
							"\r\n",
							"-- ) mainquery\r\n",
							"\r\n",
							"-- where \r\n",
							"-- --year = year(CURRENT_DATE) and --------- filters out all three\r\n",
							"-- classname like '%Generalist%' --------filters out 550 and 17253 (but can see 661)\r\n",
							"-- -- )"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct schoolname, campusid from vw_ods_earlyyearsstudents\r\n",
							"order by campusid"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents \r\n",
							"where teachername = 'Vicky Merry'"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select iscurrent, * from vw_CompassODSStaffDemographic \r\n",
							"where firstname = 'Vicky' and lastname = 'Merry' --c4415235-4282-481d-a13e-a82b012af89c"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select iscurrent, * from vw_CompassODSStaffOrganisationDetails \r\n",
							"where compasspersonid = 'c4415235-4282-481d-a13e-a82b012af89c' --Vicky Merry\r\n",
							"and iscurrent = 'True'"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_2\r\n",
							"as\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(ae.utcactivityenrolmentstartdate) = year(current_date)\r\n",
							"\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct schoolname, campusid from vw_ods_earlyyearsstudents_2\r\n",
							"order by campusid"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT\r\n",
							"-- s.academicyear as Year \r\n",
							"-- ,yl.yearlevelsifcode as YearLevel\r\n",
							"-- --,staff.campusid as CampusID\r\n",
							"-- ,staffemails.campusid as CampusID\r\n",
							"-- ,c.schoolname as SchoolName\r\n",
							"-- ,\r\n",
							"distinct staff.campusid\r\n",
							"-- ,staff.compasspersonid as TeacherID\r\n",
							"-- ,concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							"-- ,d.compasspersonid as StudentID\r\n",
							"-- ,concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							"-- ,ae.ActivityEnrolmentStartDate \r\n",
							"-- ,s.subjectshortname as ClassName\r\n",
							"-- ,a.SubjectCode as ClassID\r\n",
							"-- -- ,staff.emailaddress as StaffEmail\r\n",
							"-- -- ,d.emailaddress as StudentEmail\r\n",
							"-- ,d.govcode1 as ceider\r\n",
							"-- ,staffemails.organisationuseremail as StaffEmail\r\n",
							"-- ,studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(ae.utcactivityenrolmentstartdate) = year(current_date)\r\n",
							"\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							"    order by campusid"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_earlyyearsstudents_3"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_3\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(ae.utcactivityenrolmentstartdate) = year(current_date)\r\n",
							"\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"--and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = year(CURRENT_DATE)\r\n",
							"and classname like '%Generalist%'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct schoolname, campusid from vw_ods_earlyyearsstudents_3\r\n",
							"order by campusid"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT\r\n",
							"distinct staffemails.campusid as CampusID\r\n",
							"\r\n",
							"-- s.academicyear as Year \r\n",
							"-- ,yl.yearlevelsifcode as YearLevel\r\n",
							"-- --,staff.campusid as CampusID\r\n",
							"-- ,staffemails.campusid as CampusID\r\n",
							"-- ,c.schoolname as SchoolName\r\n",
							"-- ,staff.compasspersonid as TeacherID\r\n",
							"-- ,concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							"-- ,d.compasspersonid as StudentID\r\n",
							"-- ,concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							"-- ,ae.ActivityEnrolmentStartDate \r\n",
							"-- ,s.subjectshortname as ClassName\r\n",
							"-- ,a.SubjectCode as ClassID\r\n",
							"-- -- ,staff.emailaddress as StaffEmail\r\n",
							"-- -- ,d.emailaddress as StudentEmail\r\n",
							"-- ,d.govcode1 as ceider\r\n",
							"-- ,staffemails.organisationuseremail as StaffEmail\r\n",
							"-- ,studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(ae.utcactivityenrolmentstartdate) = year(current_date)\r\n",
							"\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"--and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							""
						],
						"outputs": [],
						"execution_count": 28
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Class_period_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2657bd02-dcdf-4610-9dd2-cbdc7058b3b9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Class_period_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='class_period', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMFactPeriodAttendance'] = [\r\n",
							"                                        ['SKPeriodAttendance', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"                                        ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentType', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'string', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'string', 'no-op'],\r\n",
							"                                        ['HasNote', 'string', 'no-op'],\r\n",
							"                                        ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op']                                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMClass'] = [\r\n",
							"                                        ['SKClass', 'integer', 'no-op'],\r\n",
							"                                        ['BKClassId', 'integer', 'no-op'],\r\n",
							"                                        ['ClassSifCode', 'string', 'no-op'],\r\n",
							"                                        ['ClassSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['ClassGroup', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactPeriodAttendance', self.schemas['DMFactPeriodAttendance'], 'LastUpdateDate', 'SKPeriodAttendance')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMClass', self.schemas['DMClass'], 'LastUpdateDate', 'SKClass')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"class_period_object = Class_period_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DIMTables_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8a2b468b-b522-444e-a493-cb4de20150da"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class DimTables_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='DimensionTables', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        \r\n",
							"        self.schemas['DMATSI'] = [\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['BKAtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['AtsiSifId', 'string', 'no-op'],\r\n",
							"                                        ['ATSISifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AtsiGroup', 'string', 'no-op'],\r\n",
							"                                        ['AtsiShortDesc', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['ATSIBinaryStatus', 'integer', 'no-op']                                                           \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                         \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMATSI', self.schemas['DMATSI'], None, 'BKAtsiId')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"dimtables_object = DimTables_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataCopy_ODS_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "550d3005-5c60-43bb-abfb-d1a1f4d4cae4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class DataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"    def createFoldersForAll(self):\r\n",
							"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"                \r\n",
							"            # if the filename is preceded by 'dbovw', remove it and use the rest of the file name as the directory\r\n",
							"            if file.name.find('dbovw') == 0:\r\n",
							"                destination = file.name.replace('dbovw', '')\r\n",
							"            elif file.name.find('dbo.vw') == 0:\r\n",
							"                destination = file.name.replace('dbo.vw', '')\r\n",
							"            elif file.name.find('dbo.') == 0:\r\n",
							"                destination = file.name.replace('dbo.', '')\r\n",
							"            elif file.name.find('dbo') == 0:\r\n",
							"                destination = file.name.replace('dbo', '')\r\n",
							"            else:\r\n",
							"                destination = file.name\r\n",
							"            \r\n",
							"            # copy the file to the created folder\r\n",
							"            self._copyToFolder(file, destination)\r\n",
							"\r\n",
							"\r\n",
							"    def _copyToFolder(self, file, destination):\r\n",
							"        \"\"\" Moves the file to a folder that is based on the filename without its file extension\"\"\"\r\n",
							"        tokens = destination.split(\".\")\r\n",
							"        target = self.stage1np + '/' + tokens[0] +'/' + file.name\r\n",
							"        mssparkutils.fs.mv(file.path, target, True) # will create the new dir and move file into it\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
							"datacopy = DataCopy(source_folder)\r\n",
							"\r\n",
							"datacopy.createFoldersForAll()\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "070cf2d9-c734-4da0-ba68-b833b2e0ae65"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class DataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"    def createFoldersForAll(self):\r\n",
							"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"                \r\n",
							"            # if the filename is preceded by 'dbovw', remove it and use the rest of the file name as the directory\r\n",
							"            if file.name.find('dbovw') == 0:\r\n",
							"                destination = file.name.replace('dbovw', '')\r\n",
							"            elif file.name.find('dbo.vw') == 0:\r\n",
							"                destination = file.name.replace('dbo.vw', '')\r\n",
							"            elif file.name.find('dbo.') == 0:\r\n",
							"                destination = file.name.replace('dbo.', '')\r\n",
							"            elif file.name.find('dbo') == 0:\r\n",
							"                destination = file.name.replace('dbo', '')\r\n",
							"            else:\r\n",
							"                destination = file.name\r\n",
							"            \r\n",
							"            # copy the file to the created folder\r\n",
							"            self._copyToFolder(file, destination)\r\n",
							"\r\n",
							"\r\n",
							"    def _copyToFolder(self, file, destination):\r\n",
							"        \"\"\" Moves the file to a folder that is based on the filename without its file extension\"\"\"\r\n",
							"        tokens = destination.split(\".\")\r\n",
							"        target = self.stage1np + '/' + tokens[0] +'/' + file.name\r\n",
							"        mssparkutils.fs.mv(file.path, target, True) # will create the new dir and move file into it\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
							"datacopy = DataCopy(source_folder)\r\n",
							"\r\n",
							"datacopy.createFoldersForAll()\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delete_EarlyYears')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Pre-Landing"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c9be4cbe-dca0-4cfb-910f-b52518e63adb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# remove Early years and ODS data from Stage 1\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage1np}/EarlyYearsData'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage1np}/EarlyYearsData', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage1np}/EarlyYearsSubTeachers'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage1np}/EarlyYearsSubTeachers', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage1np}/ODS'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage1np}/ODS', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage1np}/ODSActivityInstance'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage1np}/ODSActivityInstance', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage1np}/ODSStudentDemographic'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage1np}/ODSStudentDemographic', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage1np}/ODSStudentDemographicFull'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage1np}/ODSStudentDemographicFull', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage1np}/student'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage1np}/student', True)\r\n",
							"\r\n",
							"\r\n",
							"# remove Early years and ODS data from Stage 2\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage2p}/EarlyYearsData'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage2p}/EarlyYearsData', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage2p}/EarlyYearsSubTeachers'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage2p}/EarlyYearsSubTeachers', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage2p}/ODS'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage2p}/ODS', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage2p}/ODSActivityInstance'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage2p}/ODSActivityInstance', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage2p}/ODSStudentDemographic'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage2p}/ODSStudentDemographic', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage2p}/ODSStudentDemographicFull'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage2p}/ODSStudentDemographicFull', True)\r\n",
							"\r\n",
							"if mssparkutils.fs.exists(f'{oea.stage2p}/student'):\r\n",
							"    mssparkutils.fs.rm(f'{oea.stage2p}/student', True)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EarlyYearsAnswers_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a68b8dd8-f5ae-41b2-994a-fae7c7536e15"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class EarlyYearsAnswers(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='EarlyYearsAnswers', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"      \r\n",
							"        self.schemas['EarlyYearsAnswers'] = [\r\n",
							"                                    ['SKID', 'string', 'no-op'],\r\n",
							"                                    ['Year', 'integer', 'no-op'],\r\n",
							"                                    ['Question', 'integer', 'no-op'],\r\n",
							"                                    ['Numeracy', 'string', 'no-op'],\r\n",
							"                                    ['Literacy', 'string', 'no-op']\r\n",
							"                                    ]\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'EarlyYearsAnswers', self.schemas['EarlyYearsAnswers'], None, 'SKID')\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsAnswers_object = EarlyYearsAnswers()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EarlyYearsDataCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d6ccafe3-7327-4e59-b6e4-0643c84dbc3d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lit, monotonically_increasing_id, trim, when \r\n",
							"from pyspark.sql import DataFrame\r\n",
							"from functools import reduce"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"class EarlyYearsDataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"        \r\n",
							"    def mergeAll(self):\r\n",
							"\r\n",
							"        root_dir = f'{self.stage1np}' #\"/EarlyYearsData\"\r\n",
							"        year1_prep_result_list = []\r\n",
							"        year2_result_list = []\r\n",
							"        question_list = []\r\n",
							"        year2_question_list = []\r\n",
							"        \r\n",
							"        # for each file location in this manual upload directory..\r\n",
							"        file_list = mssparkutils.fs.ls(root_dir)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"                \r\n",
							"            # .. we need to dissect the filename to get grade and pre/ post test\r\n",
							"\r\n",
							"            # remove the file extension\r\n",
							"            tokens = file.name.split(\".\")\r\n",
							"\r\n",
							"            filename = tokens[0].strip()\r\n",
							"\r\n",
							"            filename_tokens = filename.split(\"_\")\r\n",
							"\r\n",
							"            grade = filename_tokens[0].strip() # consists of Prep, Year1 and Year2\r\n",
							"            filetype = filename_tokens[1].strip() # consists of 'Questions' and 'Result'\r\n",
							"            testlevel = ''\r\n",
							"\r\n",
							"            if filetype == 'Result':\r\n",
							"                testlevel = filename_tokens[2].strip()\r\n",
							"\r\n",
							"            filelocation = f'{self.stage1np}/{file.name}'\r\n",
							"\r\n",
							"            # if test level is empty then it is a questions file\r\n",
							"            if (testlevel == '') & (grade != 'Year2'):\r\n",
							"                df = self._convertJSON(filelocation)\r\n",
							"                question_list.append(df)\r\n",
							"            elif (testlevel == '') & (grade == 'Year2'): #year2 questions are are different format\r\n",
							"                df = self._convertJSON(filelocation)\r\n",
							"                year2_question_list.append(df)\r\n",
							"            elif grade == 'Year2':  #year 2 data is different to prep and year 1\r\n",
							"                df = self._convertJSONAndAddDetails(filelocation, testlevel)\r\n",
							"                year2_result_list.append(df)\r\n",
							"            else:\r\n",
							"                df = self._convertJSONAndAddDetails(filelocation, testlevel)\r\n",
							"                year1_prep_result_list.append(df)\r\n",
							"\r\n",
							"        \r\n",
							"        # combine the list of dataframes loaded \r\n",
							"        result_combined_df = reduce(DataFrame.unionAll, year1_prep_result_list)\r\n",
							"        year2_combined_df = reduce(DataFrame.unionAll, year2_result_list)\r\n",
							"\r\n",
							"        # add a unique index to the combined table\r\n",
							"        result_indexed_df = result_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"        year2_indexed_df = year2_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"\r\n",
							"        # save the file\r\n",
							"        result_indexed_df.coalesce(1).write.option(\"header\", True).csv(f'{self.stage1np}/EarlyYearsResults')\r\n",
							"        year2_indexed_df.coalesce(1).write.option(\"header\", True).csv(f'{self.stage1np}/EarlyYearsResultsYear2')\r\n",
							"\r\n",
							"        # remove the _SUCCESS file\r\n",
							"        if mssparkutils.fs.exists(f'{self.stage1np}/EarlyYearsResults/_SUCCESS'):\r\n",
							"            mssparkutils.fs.rm(f'{self.stage1np}/EarlyYearsResults/_SUCCESS')\r\n",
							"\r\n",
							"        if mssparkutils.fs.exists(f'{self.stage1np}/EarlyYearsResultsYear2/_SUCCESS'):\r\n",
							"            mssparkutils.fs.rm(f'{self.stage1np}/EarlyYearsResultsYear2/_SUCCESS')\r\n",
							"     \r\n",
							"\r\n",
							"    def _convertJSON(self, file):\r\n",
							"        df = spark.read.json(file)\r\n",
							"\r\n",
							"        return df\r\n",
							"\r\n",
							"\r\n",
							"    def _convertJSONAndAddDetails(self, file, testlevel):\r\n",
							"        df = self._convertJSON(file)\r\n",
							"        final_df = df.withColumn('TestLevel', lit(testlevel))\r\n",
							"        return final_df\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"source_folder = \"/EarlyYearsData\"\r\n",
							"\r\n",
							"# instantiate the AE Manual Data Copy with a source folder that contains all the ingested data files \r\n",
							"eydatacopy = EarlyYearsDataCopy(source_folder)\r\n",
							"\r\n",
							"eydatacopy.mergeAll()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EarlyYearsQuestions_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c2de56e4-ad1e-47ca-887a-88fa15bf20fe"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class EarlyYearsQuestions(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='EarlyYearsQuestions', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"      \r\n",
							"        self.schemas['EarlyYearsQuestions'] = [\r\n",
							"                                    ['SKID', 'string', 'no-op'],\r\n",
							"                                    ['Year', 'integer', 'no-op'],\r\n",
							"                                    ['YearLevel', 'string', 'no-op'],\r\n",
							"                                    ['QuestionNumber', 'integer', 'no-op'],\r\n",
							"                                    ['Group', 'string', 'no-op'],\r\n",
							"                                    ['Sub-Group', 'string', 'no-op'],\r\n",
							"                                    ['Description', 'string', 'no-op'],\r\n",
							"                                    ['Numbered_Description', 'string', 'no-op'],\r\n",
							"                                    ['QuestionString', 'string', 'no-op']\r\n",
							"                                    ]\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'EarlyYearsQuestions', self.schemas['EarlyYearsQuestions'], None, 'SKID')\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsQuestions_object = EarlyYearsQuestions()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EarlyYearsResults_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a8a96c32-a85f-4426-b20d-880064c5ed69"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class EarlyYearsResults(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='EarlyYearsData', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['EarlyYearsData_Results'] = [\r\n",
							"                                ['CampusID', 'integer', 'no-op'],\r\n",
							"                                ['Ceider', 'integer', 'no-op'],\r\n",
							"                                ['ClassID', 'string', 'no-op'],\r\n",
							"                                ['Ques1', 'string', 'no-op'],\r\n",
							"                                ['Ques10', 'string', 'no-op'],\r\n",
							"                                ['Ques11', 'string', 'no-op'],\r\n",
							"                                ['Ques12', 'string', 'no-op'],\r\n",
							"                                ['Ques13', 'string', 'no-op'],\r\n",
							"                                ['Ques14', 'string', 'no-op'],\r\n",
							"                                ['Ques15', 'string', 'no-op'],\r\n",
							"                                ['Ques16', 'string', 'no-op'],\r\n",
							"                                ['Ques17', 'string', 'no-op'],\r\n",
							"                                ['Ques18', 'string', 'no-op'],\r\n",
							"                                ['Ques19', 'string', 'no-op'],\r\n",
							"                                ['Ques2', 'string', 'no-op'],\r\n",
							"                                ['Ques20', 'string', 'no-op'],\r\n",
							"                                ['Ques21', 'string', 'no-op'],\r\n",
							"                                ['Ques22', 'string', 'no-op'],\r\n",
							"                                ['Ques23', 'string', 'no-op'],\r\n",
							"                                ['Ques24', 'string', 'no-op'],\r\n",
							"                                ['Ques25', 'string', 'no-op'],\r\n",
							"                                ['Ques26', 'string', 'no-op'],\r\n",
							"                                ['Ques27', 'string', 'no-op'],\r\n",
							"                                ['Ques28', 'string', 'no-op'],\r\n",
							"                                ['Ques29', 'string', 'no-op'],\r\n",
							"                                ['Ques3', 'string', 'no-op'],\r\n",
							"                                ['Ques30', 'string', 'no-op'],\r\n",
							"                                ['Ques31', 'string', 'no-op'],\r\n",
							"                                ['Ques32', 'string', 'no-op'],\r\n",
							"                                ['Ques33', 'string', 'no-op'],\r\n",
							"                                ['Ques34', 'string', 'no-op'],\r\n",
							"                                ['Ques35', 'string', 'no-op'],\r\n",
							"                                ['Ques36', 'string', 'no-op'],\r\n",
							"                                ['Ques37', 'string', 'no-op'],\r\n",
							"                                ['Ques38', 'string', 'no-op'],\r\n",
							"                                ['Ques39', 'string', 'no-op'],\r\n",
							"                                ['Ques4', 'string', 'no-op'],\r\n",
							"                                ['Ques40', 'string', 'no-op'],\r\n",
							"                                ['Ques5', 'string', 'no-op'],\r\n",
							"                                ['Ques6', 'string', 'no-op'],\r\n",
							"                                ['Ques7', 'string', 'no-op'],\r\n",
							"                                ['Ques8', 'string', 'no-op'],\r\n",
							"                                ['Ques9', 'string', 'no-op'],\r\n",
							"                                ['Status', 'string', 'no-op'],\r\n",
							"                                ['StudentEmailID', 'string', 'no-op'],\r\n",
							"                                ['StudentName', 'string', 'no-op'],\r\n",
							"                                ['TeacherEmailID', 'string', 'no-op'],\r\n",
							"                                ['TeacherName', 'string', 'no-op'],\r\n",
							"                                ['Year', 'integer', 'no-op'],\r\n",
							"                                ['YearLevel', 'string', 'no-op'],\r\n",
							"                                ['TestLevel', 'string', 'no-op'],\r\n",
							"                                ['BKID', 'integer', 'no-op']                         \r\n",
							"                                ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['EarlyYearsData_Y2Results'] = [\r\n",
							"                                    ['CampusID', 'integer', 'no-op'],\r\n",
							"                                    ['Ceider', 'integer', 'no-op'],\r\n",
							"                                    ['ClassID', 'string', 'no-op'],\r\n",
							"                                    ['Ques1', 'string', 'no-op'],\r\n",
							"                                    ['Ques10', 'string', 'no-op'],\r\n",
							"                                    ['Ques11', 'string', 'no-op'],\r\n",
							"                                    ['Ques12', 'string', 'no-op'],\r\n",
							"                                    ['Ques13', 'string', 'no-op'],\r\n",
							"                                    ['Ques14', 'string', 'no-op'],\r\n",
							"                                    ['Ques15', 'string', 'no-op'],\r\n",
							"                                    ['Ques16', 'string', 'no-op'],\r\n",
							"                                    ['Ques17', 'string', 'no-op'],\r\n",
							"                                    ['Ques18', 'string', 'no-op'],\r\n",
							"                                    ['Ques19', 'string', 'no-op'],\r\n",
							"                                    ['Ques2', 'string', 'no-op'],\r\n",
							"                                    ['Ques20', 'string', 'no-op'],\r\n",
							"                                    ['Ques21', 'string', 'no-op'],\r\n",
							"                                    ['Ques22', 'string', 'no-op'],\r\n",
							"                                    ['Ques23', 'string', 'no-op'],\r\n",
							"                                    ['Ques24', 'string', 'no-op'],\r\n",
							"                                    ['Ques25', 'string', 'no-op'],\r\n",
							"                                    ['Ques3', 'string', 'no-op'],\r\n",
							"                                    ['Ques4', 'string', 'no-op'],\r\n",
							"                                    ['Ques5', 'string', 'no-op'],\r\n",
							"                                    ['Ques6', 'string', 'no-op'],\r\n",
							"                                    ['Ques7', 'string', 'no-op'],\r\n",
							"                                    ['Ques8', 'string', 'no-op'],\r\n",
							"                                    ['Ques9', 'string', 'no-op'],\r\n",
							"                                    ['QuestionType', 'string', 'no-op'],\r\n",
							"                                    ['Status', 'string', 'no-op'],\r\n",
							"                                    ['StudentEmailID', 'string', 'no-op'],\r\n",
							"                                    ['StudentName', 'string', 'no-op'],\r\n",
							"                                    ['TeacherEmailID', 'string', 'no-op'],\r\n",
							"                                    ['TeacherName', 'string', 'no-op'],\r\n",
							"                                    ['Year', 'integer', 'no-op'],\r\n",
							"                                    ['YearLevel', 'string', 'no-op'],\r\n",
							"                                    ['TestLevel', 'string', 'no-op'],\r\n",
							"                                    ['BKID', 'integer', 'no-op']                         \r\n",
							"                                    ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'EarlyYearsResults', self.schemas['EarlyYearsData_Results'], None, 'BKID')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'EarlyYearsResultsYear2', self.schemas['EarlyYearsData_Y2Results'], None, 'BKID')\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsResults_object = EarlyYearsResults()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EarlyYearsSubTeachersDataCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8e034e72-ca07-41b8-9367-b92c1b07cfe5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lit, monotonically_increasing_id, trim, when, col\r\n",
							"from pyspark.sql import DataFrame\r\n",
							"from functools import reduce"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class EarlyYearsSubTeachersDataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"    def createFoldersForAll(self):\r\n",
							"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"\r\n",
							"            # get the file\r\n",
							"            filename = f'{self.stage1np}/{file.name}'\r\n",
							"            #load the file into a spark dataframe\r\n",
							"            df = spark.read.options(header='True', ignoreLeadingWhiteSpace='True', ignoreTrailingWhiteSpace='True').csv(filename)\r\n",
							"            # clean empty (NULL) rows\r\n",
							"            df = df.na.drop(\"all\")\r\n",
							"\r\n",
							"            # add a unique index to the combined table\r\n",
							"            df = df.select(col(\"Title\"), col(\"AdditionalTeacherEmail\"), col(\"Id\"))\r\n",
							"\r\n",
							"            # save the file\r\n",
							"            df.coalesce(1).write.option(\"header\", True).csv(f'{self.stage1np}/{source_folder}')\r\n",
							"\r\n",
							"            # delete the _SUCCESS file\r\n",
							"            if mssparkutils.fs.exists(f'{self.stage1np}/{source_folder}/_SUCCESS'):\r\n",
							"                mssparkutils.fs.rm(f'{self.stage1np}/{source_folder}/_SUCCESS')\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
							"earlyyearssubteachersdatacopy = EarlyYearsSubTeachersDataCopy(source_folder)\r\n",
							"\r\n",
							"earlyyearssubteachersdatacopy.createFoldersForAll()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EarlyYearsSubTeachers_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5ae3f9cb-7948-4b97-9ee9-541230ca60a2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class EarlyYearsSubTeachers(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='EarlyYearsSubTeachers', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"      \r\n",
							"        self.schemas['EarlyYearsSubTeachers'] = [\r\n",
							"                                    ['Title', 'string', 'no-op'],\r\n",
							"                                    ['AdditionalTeacherEmail', 'string', 'no-op'],\r\n",
							"                                    ['Id', 'integer', 'no-op']\r\n",
							"                                    ]\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'EarlyYearsSubTeachers', self.schemas['EarlyYearsSubTeachers'], None, 'Id')\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsSubTeachers_object = EarlyYearsSubTeachers()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Enrolment_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f6e4bfde-0094-4e15-a144-54d994d3776b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Enrolment_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='enrolment', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMEnrolmentStatus'] = [\r\n",
							"                                        ['SKEnrolmentStatus', 'integer', 'no-op'],\r\n",
							"                                        ['BKEnrolmentStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentStatusDesc', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentActive', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentActiveYesNo', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentGroup', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op']                                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentEnrolment'] = [\r\n",
							"                                        ['UIDEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentSubmitted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentStarted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentEnded', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['EslYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LboteYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['SwdYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentFTE', 'double', 'no-op'],\r\n",
							"                                        ['SKMainCampus', 'integer', 'no-op']                                                           \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentEnrolmentCounts'] = [\r\n",
							"                                        ['SKStudentEnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTE_Int', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTE_YesNo', 'string', 'no-op'], #converted varchar to string\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKDate', 'integer', 'no-op'],\r\n",
							"                                        ['StudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ReceivesESL_Int', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESL_YesNo', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL_Int', 'integer', 'no-op'],\r\n",
							"                                        ['RequiresESL_YesNo', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactSubjectEnrolment'] = [\r\n",
							"                                        ['SKFactSubjectEnrolment', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKStaff', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKSubject', 'integer', 'no-op'],\r\n",
							"                                        ['SKActivity', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentStartDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentEndDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op']                                                                                                 \r\n",
							"                                        ]\r\n",
							"            \r\n",
							"\r\n",
							"      \r\n",
							"\r\n",
							"        self.schemas['DMPreEnrolment'] = [\r\n",
							"                                        ['SKEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentYear', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceEnrolmentId', 'string', 'no-op'],\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['BKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['DateEnrolmentSubmitted', 'date', 'no-op'],\r\n",
							"                                        ['DateEnrolmentStarted', 'date', 'no-op'],\r\n",
							"                                        ['DateEnrolmentEnded', 'date', 'no-op'],\r\n",
							"                                        ['EnrolmentStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['EslYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LboteYesNo', 'string', 'no-op'],\r\n",
							"                                        ['AtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['SwdYesNo', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentFTE', 'double', 'no-op'],\r\n",
							"                                        ['MainCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceStatus', 'integer', 'no-op']                                                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMPreEnrolmentId'] = [\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceEnrolmentId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMActivity'] = [\r\n",
							"                                        ['SKActivity', 'integer', 'no-op'],\r\n",
							"                                        ['BKActivity', 'string', 'no-op'],\r\n",
							"                                        ['ActivityCode', 'string', 'no-op'],\r\n",
							"                                        ['ActivityName', 'string', 'no-op'],\r\n",
							"                                        ['AcamademicYear', 'integer', 'no-op'],\r\n",
							"                                        ['Status', 'integer', 'no-op'],\r\n",
							"                                        ['SubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['StartDateTime', 'string', 'no-op'],\r\n",
							"                                        ['EndDateTime', 'string', 'no-op'],\r\n",
							"                                        ['ManagingCompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['DefaultLocation', 'string', 'no-op'],\r\n",
							"                                        ['ActivityType', 'integer', 'no-op'],\r\n",
							"                                        ['ActivityTypeDescription', 'string', 'no-op'],\r\n",
							"                                        ['AttendanceMode', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceModeDescription', 'string', 'no-op'],\r\n",
							"                                        ['RunningStatus', 'integer', 'no-op'],\r\n",
							"                                        ['RunningStatusDescription', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMSubject'] = [\r\n",
							"                                        ['SKSubject', 'integer', 'no-op'],\r\n",
							"                                        ['BKSubject', 'string', 'no-op'],\r\n",
							"                                        ['AcademicYear', 'integer', 'no-op'],\r\n",
							"                                        ['AcademicYearName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectLongName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectShortName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectImportIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['Status', 'string', 'no-op'],\r\n",
							"                                        ['SubjectYearLevel', 'string', 'no-op'],\r\n",
							"                                        ['FacultyImportIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['FacultyLongName', 'string', 'no-op'],\r\n",
							"                                        ['FacultyShortName', 'string', 'no-op'],\r\n",
							"                                        ['FacultyStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMRollGroup'] = [\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['BKRollGroup', 'string', 'no-op'],\r\n",
							"                                        ['RollGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"                             \r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMEnrolmentStatus', self.schemas['DMEnrolmentStatus'], 'LastUpdateDate', 'SKEnrolmentStatus')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactStudentEnrolment', self.schemas['DMFactStudentEnrolment'], 'LastUpdateDate', 'UIDEnrolmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactStudentEnrolmentCounts', self.schemas['DMFactStudentEnrolmentCounts'], None, 'SKStudentEnrolmentCount')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactSubjectEnrolment', self.schemas['DMFactSubjectEnrolment'], 'LastUpdateDate', 'SKFactSubjectEnrolment')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPreEnrolment', self.schemas['DMPreEnrolment'], 'LastUpdateDate', 'SKEnrolmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPreEnrolmentId', self.schemas['DMPreEnrolmentId'], 'LastUpdateDate', 'SKPreEnrolmentId')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMActivity', self.schemas['DMActivity'], 'LastUpdateDate', 'SKActivity')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMSubject', self.schemas['DMSubject'], 'LastUpdateDate', 'SKSubject')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMRollGroup', self.schemas['DMRollGroup'], 'LastUpdateDate', 'SKRollGroup')\r\n",
							"\r\n",
							"\r\n",
							"enrolment_object = Enrolment_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GeneralDataCopyAddBKID_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9b8cbc68-c118-48a7-bd1e-ede11f78605e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lit, monotonically_increasing_id, trim, when \r\n",
							"from pyspark.sql import DataFrame\r\n",
							"from functools import reduce"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class GeneralDataCopyAddBKID(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"    def createFoldersForAll(self):\r\n",
							"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"\r\n",
							"            # get the file\r\n",
							"            filename = f'{self.stage1np}/{file.name}'\r\n",
							"            #load the file into a spark dataframe\r\n",
							"            df = spark.read.options(header='True', ignoreLeadingWhiteSpace='True', ignoreTrailingWhiteSpace='True').csv(filename)\r\n",
							"            # clean empty (NULL) rows\r\n",
							"            df = df.na.drop(\"all\")\r\n",
							"\r\n",
							"            # add a unique index to the combined table\r\n",
							"            df = df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"\r\n",
							"            # save the file\r\n",
							"            df.coalesce(1).write.option(\"header\", True).csv(f'{self.stage1np}/{source_folder}')\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
							"generaldatacopyaddbkid = GeneralDataCopyAddBKID(source_folder)\r\n",
							"\r\n",
							"generaldatacopyaddbkid.createFoldersForAll()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GeneralDataCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "af697b23-a5a6-48db-aa1d-53b651bad007"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class GeneralDataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"    def createFoldersForAll(self):\r\n",
							"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"\r\n",
							"            destination = file.name\r\n",
							"            \r\n",
							"            # copy the file to the created folder\r\n",
							"            self._copyToFolder(file, destination)\r\n",
							"\r\n",
							"\r\n",
							"    def _copyToFolder(self, file, destination):\r\n",
							"        \"\"\" Moves the file to a folder that is based on the filename without its file extension\"\"\"\r\n",
							"        tokens = destination.split(\".\")\r\n",
							"        target = self.stage1np + '/' + tokens[0] +'/' + file.name\r\n",
							"        mssparkutils.fs.mv(file.path, target, True) # will create the new dir and move file into it\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
							"generaldatacopy = GeneralDataCopy(source_folder)\r\n",
							"\r\n",
							"generaldatacopy.createFoldersForAll()"
						],
						"outputs": [],
						"execution_count": 28
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GeneralData_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d318fe30-5880-41a9-9a36-f04b974b6721"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class GeneralData_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='General', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['GeneralSchoolList'] = [\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolNameAndArea', 'string', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['Area', 'string', 'no-op'],\r\n",
							"                                        ['Location', 'string', 'no-op'],\r\n",
							"                                        ['Cluster', 'string', 'no-op'],\r\n",
							"                                        ['Team', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolType', 'string', 'no-op'],\r\n",
							"                                        ['Boarding', 'integer', 'no-op'],\r\n",
							"                                        ['SMYL', 'integer', 'no-op'],\r\n",
							"                                        ['LastICSEA', 'integer', 'no-op'],\r\n",
							"                                        ['Image', 'string', 'no-op']                                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['GeneralICSEA'] = [\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['School Name', 'string', 'no-op'],\r\n",
							"                                        ['Area', 'string', 'no-op'],\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEA', 'integer', 'no-op'],                                                         \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['GeneralGenderImageData'] = [\r\n",
							"                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                        ['Image', 'string', 'no-op']                                                       \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['GeneralDomainSelection'] = [\r\n",
							"                                        ['DomainId', 'integer', 'no-op'],\r\n",
							"                                        ['Selection', 'string', 'no-op'],\r\n",
							"                                        ['NAPLAN', 'string', 'no-op'],\r\n",
							"                                        ['ACER', 'string', 'no-op'],\r\n",
							"                                        ['AE', 'string', 'no-op']                                                       \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['GeneralFlagImageData'] = [\r\n",
							"                                        ['Flag', 'string', 'no-op'],\r\n",
							"                                        ['Image', 'string', 'no-op'],\r\n",
							"                                        ['ATSIId', 'string', 'no-op']                                                       \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['GeneralLBOTEImageData'] = [\r\n",
							"                                        ['Description', 'string', 'no-op'],\r\n",
							"                                        ['Image', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op']                                                       \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['GeneralNCCDImageData'] = [\r\n",
							"                                        ['Description', 'string', 'no-op'],\r\n",
							"                                        ['Image', 'string', 'no-op'],\r\n",
							"                                        ['NCCD', 'string', 'no-op']                                                       \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'GeneralSchoolList', self.schemas['GeneralSchoolList'], None, 'SchoolId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'GeneralICSEA', self.schemas['GeneralICSEA'], None, 'SchoolId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'GeneralGenderImageData', self.schemas['GeneralGenderImageData'], None, 'Gender')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'GeneralLBOTEImageData', self.schemas['GeneralLBOTEImageData'], None, 'Description')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'GeneralNCCDImageData', self.schemas['GeneralNCCDImageData'], None, 'Description')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'GeneralDomainSelection', self.schemas['GeneralDomainSelection'], None, 'DomainId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'GeneralFlagImageData', self.schemas['GeneralFlagImageData'], None, 'Flag')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"generaldata_object = GeneralData_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MySchools_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2a587bcf-2163-4ef0-9cfc-a61e5aa92db4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class MySchools_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='MySchools', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsAttendance'] = [\r\n",
							"                                        ['SKMySchoolsAttendance', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsAttendance', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceRate', 'double', 'no-op'],\r\n",
							"                                        ['IndigenousAttendanceRate', 'double', 'no-op'],\r\n",
							"                                        ['NonIndigenousAttendanceRate', 'double', 'no-op'],\r\n",
							"                                        ['AttendanceLevel', 'double', 'no-op'],\r\n",
							"                                        ['IndigenousAttendanceLevel', 'double', 'no-op'],\r\n",
							"                                        ['NonIndigenousAttendanceLevel', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                           \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsEnrolmentsByGrade'] = [\r\n",
							"                                        ['SKMySchoolsEnrolmentsByGrade', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsEnrolmentsByGrade', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                          \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsFinance'] = [\r\n",
							"                                        ['SKMySchoolsFinance', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsFinance', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['IncomeAustralianGovernmentRecurrentFunding', 'double', 'no-op'],\r\n",
							"                                        ['IncomeStateTerritoryGovernmentRecurrentFunding', 'double', 'no-op'],\r\n",
							"                                        ['IncomeFeesChargesandParentalContributions', 'double', 'no-op'],\r\n",
							"                                        ['IncomeOtherPrivateSources', 'double', 'no-op'],\r\n",
							"                                        ['TotalGrossIncome', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoCurrentCapitalProjects', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoFutureCapitalProjects', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoDebtServicing', 'double', 'no-op'],\r\n",
							"                                        ['TotalDeductions', 'double', 'no-op'],\r\n",
							"                                        ['TotalNetRecurrentIncome', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureAustralianGovernment', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureState/TerritoryGovernment', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureNewSchoolLoans', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureIncomeAllocatedtoCurrentCapitalProjects', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureOtherPrivateSources', 'double', 'no-op'],\r\n",
							"                                        ['TotalCapitalExpenditure', 'double', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalentFundedEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['IncomeAustralianGovernmentRecurrentFundingPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['IncomeStateTerritoryGovernmentRecurrentFundingPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['IncomeFeesChargesandParentalContributionsPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['IncomeOtherPrivateSourcesPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['TotalGrossIncomePerStudent', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoCurrentCapitalProjectsPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoFutureCapitalProjectsPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoDebtServicingPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['TotalDeductionsPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['TotalNetRecurrentIncomePerStudent', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                         \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsNAPLANResults'] = [\r\n",
							"                                        ['SKMySchoolsNAPLANResults', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsNAPLANResults', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['MeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanMarginLower', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanMarginUpper', 'double', 'no-op'],\r\n",
							"                                        ['Band1Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band2Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band3Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band4Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band5Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band6Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band7Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band8Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band9Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band10Percentage', 'double', 'no-op'],\r\n",
							"                                        ['ParticipationRate', 'double', 'no-op'],\r\n",
							"                                        ['AssessedPercentage', 'double', 'no-op'],\r\n",
							"                                        ['ExemptPercentage', 'double', 'no-op'],\r\n",
							"                                        ['AbsentPercentage', 'double', 'no-op'],\r\n",
							"                                        ['WithdrawnPercentage', 'double', 'no-op'],\r\n",
							"                                        ['NationalMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['ColourComparisontoNationalMean', 'string', 'no-op'],\r\n",
							"                                        ['ComparisontoNationalMeanDescription', 'string', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['ColourComparisontoSimilarSchoolsMean', 'string', 'no-op'],\r\n",
							"                                        ['ComparisontoSimilarSchoolsMeanDescription', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['StudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsNAPLANResultsSimilarSchools'] = [\r\n",
							"                                        ['SKMySchoolsNAPLANResultsSimilarSchools', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsNAPLANResultsSimilarSchools', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsSchoolMeanMarginLower', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsSchoolMeanMarginUpper', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand1Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand2Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand3Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand4Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand5Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand6Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand7Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand8Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand9Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand10Percentage', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsProfile'] = [\r\n",
							"                                        ['SKMySchoolsProfile', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsProfile', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['BottomSEA Quarter', 'integer', 'no-op'],\r\n",
							"                                        ['LowerMiddleSEAQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['UpperMiddleSEAQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['TopSEAQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['TeachingStaff', 'integer', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalentTeachingStaff', 'double', 'no-op'],\r\n",
							"                                        ['NonTeachingStaff', 'integer', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalentNonTeaching Staff', 'double', 'no-op'],\r\n",
							"                                        ['TotalEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['GirlsEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['BoysEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalentEnrolments', 'double', 'no-op'],\r\n",
							"                                        ['IndigenousEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageBackgroundOtherThanEnglish', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsSeniorOutcomes'] = [\r\n",
							"                                        ['SKMySchoolsSeniorOutcomes', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsSeniorOutcomes', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SeniorSecondaryCertificatesAwarded', 'integer', 'no-op'],\r\n",
							"                                        ['CompletedSeniorSecondarySchool', 'integer', 'no-op'],\r\n",
							"                                        ['StudentsatUniversity', 'integer', 'no-op'],\r\n",
							"                                        ['StudentsatTAFE', 'integer', 'no-op'],\r\n",
							"                                        ['StudentsinEmployment', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                         \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsStudentGain'] = [\r\n",
							"                                        ['SKMySchoolsStudentGain', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsStudentGain', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentGainGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMedianNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMedianLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMedianUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['MatchedStudentPercentage', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                       \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsStudentGainSameStartingScore'] = [\r\n",
							"                                        ['SKMySchoolsStudentGainSameStartingScore', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsStudentGainSameStartingScore', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentGainGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMeanLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMeanUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMedianNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMedianLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMedianUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsStudentGainSimilarSchools'] = [\r\n",
							"                                        ['SKMySchoolsStudentGainSimilarSchools', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsStudentGainSimilarSchools', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentGainGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMedianNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMedianLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMedianUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsVETInSchools'] = [\r\n",
							"                                        ['SKMySchoolsVETInSchools', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsVETInSchools', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKVETStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SKVETClassification', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['ClassificationTotal', 'integer', 'no-op'],\r\n",
							"                                        ['CertificateI', 'integer', 'no-op'],\r\n",
							"                                        ['CertificateII', 'integer', 'no-op'],\r\n",
							"                                        ['CertificateIII', 'integer', 'no-op'],\r\n",
							"                                        ['CertificateIV', 'integer', 'no-op'],\r\n",
							"                                        ['DiplomaorHigher', 'integer', 'no-op'],\r\n",
							"                                        ['Other', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships'] = [\r\n",
							"                                        ['SKMySchoolsVETSchoolBasedApprenticeshipsTraineeships', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsVETSchoolBasedApprenticeshipsTraineeships', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadcount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                         \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMMySchoolsStudentGainGroup'] = [\r\n",
							"                                        ['SKStudentGainGroup', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentGainGroup', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYearRange', 'string', 'no-op'],\r\n",
							"                                        ['StudentGradeLevelRange', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDescription', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                        \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMMySchoolsVETClassification'] = [\r\n",
							"                                        ['SKVETClassification', 'integer', 'no-op'],\r\n",
							"                                        ['BKVETClassification', 'string', 'no-op'],\r\n",
							"                                        ['HeadClassificationDesc', 'string', 'no-op'],\r\n",
							"                                        ['SubClassificationDesc', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDescription', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMMySchoolsVETStatus'] = [\r\n",
							"                                        ['SKVETStatus', 'integer', 'no-op'],\r\n",
							"                                        ['BKVETStatus', 'string', 'no-op'],\r\n",
							"                                        ['VETStatus', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDescription', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsAttendance', self.schemas['DMFactMySchoolsAttendance'], 'LastUpdateDate', 'SKMySchoolsAttendance')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsEnrolmentsByGrade', self.schemas['DMFactMySchoolsEnrolmentsByGrade'], 'LastUpdateDate', 'SKMySchoolsEnrolmentsByGrade')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsFinance', self.schemas['DMFactMySchoolsFinance'], 'LastUpdateDate', 'SKMySchoolsFinance')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsNAPLANResults', self.schemas['DMFactMySchoolsNAPLANResults'], 'LastUpdateDate', 'SKMySchoolsNAPLANResults')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsNAPLANResultsSimilarSchools', self.schemas['DMFactMySchoolsNAPLANResultsSimilarSchools'], 'LastUpdateDate', 'SKMySchoolsNAPLANResultsSimilarSchools')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsProfile', self.schemas['DMFactMySchoolsProfile'], 'LastUpdateDate', 'SKMySchoolsProfile')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsSeniorOutcomes', self.schemas['DMFactMySchoolsSeniorOutcomes'], 'LastUpdateDate', 'SKMySchoolsSeniorOutcomes')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsStudentGain', self.schemas['DMFactMySchoolsStudentGain'], 'LastUpdateDate', 'SKMySchoolsStudentGain')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsStudentGainSameStartingScore', self.schemas['DMFactMySchoolsStudentGainSameStartingScore'], 'LastUpdateDate', 'SKMySchoolsStudentGainSameStartingScore')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsStudentGainSimilarSchools', self.schemas['DMFactMySchoolsStudentGainSimilarSchools'], 'LastUpdateDate', 'SKMySchoolsStudentGainSimilarSchools')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsVETInSchools', self.schemas['DMFactMySchoolsVETInSchools'], 'LastUpdateDate', 'SKMySchoolsVETInSchools')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships', self.schemas['DMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships'], 'LastUpdateDate', 'SKMySchoolsVETSchoolBasedApprenticeshipsTraineeships')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMMySchoolsStudentGainGroup', self.schemas['DMMySchoolsStudentGainGroup'], 'LastUpdateDate', 'SKStudentGainGroup')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMMySchoolsVETClassification', self.schemas['DMMySchoolsVETClassification'], 'LastUpdateDate', 'SKVETClassification')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMMySchoolsVETStatus', self.schemas['DMMySchoolsVETStatus'], 'LastUpdateDate', 'SKVETStatus')\r\n",
							"        \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"myschools_object = MySchools_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NAPLANProficiency_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "304dea7d-eb44-4420-ab31-85a1081ac610"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class NAPLANProficiency_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='NAPLANProficiency', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"                \r\n",
							"\r\n",
							"        self.schemas['DMNAPLANAssessmentArea'] = [\r\n",
							"                                        ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNaplanAssesmentArea', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaDesc', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaShortDesc', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaBusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANProficiencyStudentTestResult'] = [\r\n",
							"                                        ['SKFactNAPLANProficiencyStudentTestResult', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyStudentTestResultId', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyStudentResult', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyTestPath', 'string', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessmentId', 'string', 'no-op'],\r\n",
							"                                        ['SKCampus', 'string', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'string', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANParticipationCode', 'string', 'no-op'],\r\n",
							"                                        ['StudentDomainBand', 'string', 'no-op'],\r\n",
							"                                        ['RawScore', 'string', 'no-op'],\r\n",
							"                                        ['ScaledScoreValue', 'string', 'no-op'],\r\n",
							"                                        ['ScaledScoreLogitValue', 'string', 'no-op'],\r\n",
							"                                        ['ScaledScoreStandardError', 'string', 'no-op'],\r\n",
							"                                        ['ScaledScoreLogitStandardError', 'string', 'no-op'],\r\n",
							"                                        ['DomainNationalAverage', 'string', 'no-op'],\r\n",
							"                                        ['DomainSchoolAverage', 'string', 'no-op'],\r\n",
							"                                        ['DomainJurisdictionAverage', 'string', 'no-op'],\r\n",
							"                                        ['DomainStateAverage', 'string', 'no-op'],\r\n",
							"                                        ['DomainTopNational60Percent', 'string', 'no-op'],\r\n",
							"                                        ['DomainBottomNational60Percent', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ActualStudentGrowth', 'string', 'no-op'],\r\n",
							"                                        ['ExpectedStudentGrowth', 'string', 'no-op'],\r\n",
							"                                        ['ActualStateGrowth', 'string', 'no-op'],\r\n",
							"                                        ['ActualNationalGrowth', 'string', 'no-op'],\r\n",
							"                                        ['DomainNationalStandardDeviation', 'string', 'no-op'],\r\n",
							"                                        ['DomainStateStandardDeviation', 'string', 'no-op'],\r\n",
							"                                        ['DomainJurisdictionStandardDeviation', 'string', 'no-op'],\r\n",
							"                                        ['DomainSchoolStandardDeviation', 'string', 'no-op'],\r\n",
							"                                        ['ElapsedTimeSecs', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANTest', 'string', 'no-op'],\r\n",
							"                                        ['StatisticallySimilarSchoolsCEnetGroupAverage', 'string', 'no-op'],\r\n",
							"                                        ['BKFactNAPLANProficiencyStudentResult', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyLevel', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANProficiencyStudentItemResponse'] = [\r\n",
							"                                        ['BKFactNAPLANProficiencyStudentItemResponse', 'string', 'no-op'],\r\n",
							"                                        ['SKFactNAPLANProficiencyStudentItemResponse', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyStudentItemResponse', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyStudentResult', 'string', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessmentId', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyTest', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyTestPath', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyTestlet', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyTestItem', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANParticipationCode', 'string', 'no-op'],\r\n",
							"                                        ['SkYear', 'string', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'string', 'no-op'],\r\n",
							"                                        ['SKCampus', 'string', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'string', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyLevel', 'string', 'no-op'],\r\n",
							"                                        ['PersistentIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessBit', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessInt', 'string', 'no-op'],\r\n",
							"                                        ['LapsedTimeItemSeconds', 'string', 'no-op'],\r\n",
							"                                        ['SequenceNumber', 'string', 'no-op'],\r\n",
							"                                        ['ItemWeight', 'string', 'no-op'],\r\n",
							"                                        ['TestletSubScore', 'string', 'no-op'],\r\n",
							"                                        ['DomainScaledScore', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANParticipationCode'] = [\r\n",
							"                                        ['SKNAPLANParticipationCode', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANParticipationCode', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANParticipationText', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANProficiencyLevel'] = [\r\n",
							"                                        ['SKNAPLANProficiencyLevel', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANProficiencyLevel', 'string', 'no-op'],\r\n",
							"                                        ['ProficiencyLevel', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'string', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'string', 'no-op'],\r\n",
							"                                        ['ProficiencyLevelGroup', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANProficiencyStudentResult'] = [ \r\n",
							"                                        ['SKNAPLANProficiencyStudentResult', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANProficiencyStudentResult', 'string', 'no-op'],\r\n",
							"                                        ['LocalId', 'string', 'no-op'],\r\n",
							"                                        ['StateProvinceId', 'string', 'no-op'],\r\n",
							"                                        ['AcceptableUsePolicy', 'string', 'no-op'],\r\n",
							"                                        ['EducationSupport', 'string', 'no-op'],\r\n",
							"                                        ['HomeSchooledStudent', 'string', 'no-op'],\r\n",
							"                                        ['Sensitive', 'string', 'no-op'],\r\n",
							"                                        ['OfflineDelivery', 'string', 'no-op'],\r\n",
							"                                        ['AlertMessages', 'string', 'no-op'],\r\n",
							"                                        ['MedicalAlertMessages', 'string', 'no-op'],\r\n",
							"                                        ['NameType', 'string', 'no-op'],\r\n",
							"                                        ['FamilyName', 'string', 'no-op'],\r\n",
							"                                        ['GivenName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredGivenName', 'string', 'no-op'],\r\n",
							"                                        ['BKAtsiId', 'string', 'no-op'],\r\n",
							"                                        ['ATSISifDesc', 'string', 'no-op'],\r\n",
							"                                        ['GenderSifCode', 'string', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthDate', 'string', 'no-op'],\r\n",
							"                                        ['TestYear', 'string', 'no-op'],\r\n",
							"                                        ['PlatformStudentIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['PersistentIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['ScoreReading', 'string', 'no-op'],\r\n",
							"                                        ['BandReading', 'string', 'no-op'],\r\n",
							"                                        ['ScoreWriting', 'string', 'no-op'],\r\n",
							"                                        ['BandWriting', 'string', 'no-op'],\r\n",
							"                                        ['ScoreSpelling', 'string', 'no-op'],\r\n",
							"                                        ['BandSpelling', 'string', 'no-op'],\r\n",
							"                                        ['ScoreGrammarPunctuation', 'string', 'no-op'],\r\n",
							"                                        ['BandGrammarPunctuation', 'string', 'no-op'],\r\n",
							"                                        ['ScoreNumeracy', 'string', 'no-op'],\r\n",
							"                                        ['BandNumeracy', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CitizenShipStatusSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CitizenShipStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['EnglishProficiencyCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassSifCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['VisaStatisticalCode', 'string', 'no-op'],\r\n",
							"                                        ['DwellingArrangementCode', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResident', 'string', 'no-op'],\r\n",
							"                                        ['SchoolLocalId', 'string', 'no-op'],\r\n",
							"                                        ['HomeroomLocalId', 'string', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['FTE', 'string', 'no-op'],\r\n",
							"                                        ['Parent1LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EmploymentTypeSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EmploymentTypeSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EmploymentTypeSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EmploymentTypeSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationNonSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationNonSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LocalCampusId', 'string', 'no-op'],\r\n",
							"                                        ['SchoolACARAId', 'string', 'no-op'],\r\n",
							"                                        ['Homegroup', 'string', 'no-op'],\r\n",
							"                                        ['ClassCode', 'string', 'no-op'],\r\n",
							"                                        ['MembershipType', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['ReportingSchoolId', 'string', 'no-op'],\r\n",
							"                                        ['OtherEnrollmentSchoolACARAId', 'string', 'no-op'],\r\n",
							"                                        ['AddressType', 'string', 'no-op'],\r\n",
							"                                        ['AddressRole', 'string', 'no-op'],\r\n",
							"                                        ['AddressStreetLine1', 'string', 'no-op'],\r\n",
							"                                        ['AddressStreetLine2', 'string', 'no-op'],\r\n",
							"                                        ['AddressCity', 'string', 'no-op'],\r\n",
							"                                        ['AddressStateProvince', 'string', 'no-op'],\r\n",
							"                                        ['AddressPostalCode', 'string', 'no-op'],\r\n",
							"                                        ['AddressCountry', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfCitizenshipSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfCitizenshipSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfResidencySifCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfResidencySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddressType', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddressValue', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumberType', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumberListedStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreReading', 'string', 'no-op'],\r\n",
							"                                        ['PreviousBandReading', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreWriting', 'string', 'no-op'],\r\n",
							"                                        ['PreviousBandWriting', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreSpelling', 'string', 'no-op'],\r\n",
							"                                        ['PreviousBandSpelling', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreGrammarPunctuation', 'string', 'no-op'],\r\n",
							"                                        ['PreviousBandGrammarPunctuation', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreNumeracy', 'string', 'no-op'],\r\n",
							"                                        ['PreviousBandNumeracy', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEDescription', 'string', 'no-op'],\r\n",
							"                                        ['IsOnlineDesc', 'string', 'no-op'],\r\n",
							"                                        ['ConcatenatedName', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstLastName', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstLastNameCEIDER', 'string', 'no-op'],\r\n",
							"                                        ['StudentLastFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentLastFirstNameCEIDER', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANProficiencyTest'] = [  \r\n",
							"                                        ['SKNAPLANProficiencyTest', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANProficiencyTest', 'string', 'no-op'],\r\n",
							"                                        ['TestYear', 'string', 'no-op'],\r\n",
							"                                        ['NAPTestLocalId', 'string', 'no-op'],\r\n",
							"                                        ['TestName', 'string', 'no-op'],\r\n",
							"                                        ['TestLevelCode', 'string', 'no-op'],\r\n",
							"                                        ['TestType', 'string', 'no-op'],\r\n",
							"                                        ['StagesCount', 'string', 'no-op'],\r\n",
							"                                        ['Domain', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op'],\r\n",
							"                                        ['IsOnlineDesc', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc2', 'string', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'string', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['TestRefId', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANProficiencyTestItem'] = [  \r\n",
							"                                        ['SKNAPLANProficiencyTestItem', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANProficiencyTestItem', 'string', 'no-op'],\r\n",
							"                                        ['TestItemLocalId', 'string', 'no-op'],\r\n",
							"                                        ['ItemName', 'string', 'no-op'],\r\n",
							"                                        ['ItemType', 'string', 'no-op'],\r\n",
							"                                        ['Domain', 'string', 'no-op'],\r\n",
							"                                        ['Subdomain', 'string', 'no-op'],\r\n",
							"                                        ['WritingGenre', 'string', 'no-op'],\r\n",
							"                                        ['ItemDescriptor', 'string', 'no-op'],\r\n",
							"                                        ['ReleasedStatus', 'string', 'no-op'],\r\n",
							"                                        ['ReleasedStatusBoolean', 'string', 'no-op'],\r\n",
							"                                        ['CorrectAnswer', 'string', 'no-op'],\r\n",
							"                                        ['MaximumScore', 'string', 'no-op'],\r\n",
							"                                        ['ItemDifficulty', 'string', 'no-op'],\r\n",
							"                                        ['ItemDifficultyLogit', 'string', 'no-op'],\r\n",
							"                                        ['ItemDifficultyLogit5', 'string', 'no-op'],\r\n",
							"                                        ['ItemDifficultyLogit62', 'string', 'no-op'],\r\n",
							"                                        ['ItemDifficultyLogit5SE', 'string', 'no-op'],\r\n",
							"                                        ['ItemDifficultyLogit62SE', 'string', 'no-op'],\r\n",
							"                                        ['ItemProficiencyBand', 'string', 'no-op'],\r\n",
							"                                        ['ItemProficiencyLevel', 'string', 'no-op'],\r\n",
							"                                        ['ExemplarURL', 'string', 'no-op'],\r\n",
							"                                        ['MarkingType', 'string', 'no-op'],\r\n",
							"                                        ['MultipleChoiceOptionCount', 'string', 'no-op'],\r\n",
							"                                        ['ContentDescriptionValue', 'string', 'no-op'],\r\n",
							"                                        ['SyllabusCode', 'string', 'no-op'],\r\n",
							"                                        ['SyllabusOutcome', 'string', 'no-op'],\r\n",
							"                                        ['TeachingStrategy', 'string', 'no-op'],\r\n",
							"                                        ['NumberExposedCEnet', 'string', 'no-op'],\r\n",
							"                                        ['PercentExposedCEnet', 'string', 'no-op'],\r\n",
							"                                        ['NumberAttemptedCEnet', 'string', 'no-op'],\r\n",
							"                                        ['PercentAttemptedCEnet', 'string', 'no-op'],\r\n",
							"                                        ['NumberNotAttemptedCEnet', 'string', 'no-op'],\r\n",
							"                                        ['PercentNotAttemptedCEnet', 'string', 'no-op'],\r\n",
							"                                        ['NumberCorrectCEnet', 'string', 'no-op'],\r\n",
							"                                        ['PercentCorrectCEnet', 'string', 'no-op'],\r\n",
							"                                        ['NumberIncorrectCEnet', 'string', 'no-op'],\r\n",
							"                                        ['PercentIncorrectCEnet', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['ItemTypeDescription', 'string', 'no-op'],\r\n",
							"                                        ['ContentDescriptionCode', 'string', 'no-op'],\r\n",
							"                                        ['DomainExamTypeCode', 'string', 'no-op'],\r\n",
							"                                        ['DomainExamTypeDesc', 'string', 'no-op'],\r\n",
							"                                        ['ContentDescriptionSubStrand', 'string', 'no-op'],\r\n",
							"                                        ['ContentDescriptionText', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANProficiencyTestlet'] = [ \r\n",
							"                                        ['SKNAPLANProficiencyTestlet', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANProficiencyTestlet', 'string', 'no-op'],\r\n",
							"                                        ['TestRefId', 'string', 'no-op'],\r\n",
							"                                        ['TestLocalId', 'string', 'no-op'],\r\n",
							"                                        ['TestletLocalId', 'string', 'no-op'],\r\n",
							"                                        ['TestletName', 'string', 'no-op'],\r\n",
							"                                        ['TestletType', 'string', 'no-op'],\r\n",
							"                                        ['TestletNode', 'string', 'no-op'],\r\n",
							"                                        ['LocationInStage', 'string', 'no-op'],\r\n",
							"                                        ['TestletSubScore', 'string', 'no-op'],\r\n",
							"                                        ['TestletMaximumScore', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['DomainExamTypeCode', 'string', 'no-op'],\r\n",
							"                                        ['DomainExamTypeDesc', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANProficiencyTestPath'] = [    \r\n",
							"                                        ['SKNAPLANProficiencyTestPath', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANProficiencyTestPath', 'string', 'no-op'],\r\n",
							"                                        ['NAPTestLocalId', 'string', 'no-op'],\r\n",
							"                                        ['TestName', 'string', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['TestType', 'string', 'no-op'],\r\n",
							"                                        ['StagesCount', 'string', 'no-op'],\r\n",
							"                                        ['BKNaplanAssesmentArea', 'string', 'no-op'],\r\n",
							"                                        ['TestYear', 'string', 'no-op'],\r\n",
							"                                        ['PathTakenForDomain', 'string', 'no-op'],\r\n",
							"                                        ['ParallelTest', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand1Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand1Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand2Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand2Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand3Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand3Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand4Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand4Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand5Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand5Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand6Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand6Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand7Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand7Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand8Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand8Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand9Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand9Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand10Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand10Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel1Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel1Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel2Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel2Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel3Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel3Upper', 'string', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel4Lower', 'string', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel4Upper', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping1', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping2', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping3', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANACARAProficiency'] = [\r\n",
							"                                        ['SKNAPLANACARAProficiency', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANACARAProficiency', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKStateTerritory', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANProficiencyLevel', 'integer', 'no-op'],\r\n",
							"                                        ['AverageAge', 'string', 'no-op'],\r\n",
							"                                        ['YearsOfSchooling', 'string', 'no-op'],\r\n",
							"                                        ['Participation%', 'string', 'no-op'],\r\n",
							"                                        ['Exempt%', 'string', 'no-op'],\r\n",
							"                                        ['Non-attempt%', 'string', 'no-op'],\r\n",
							"                                        ['Absent%', 'string', 'no-op'],\r\n",
							"                                        ['Withdrawn%', 'string', 'no-op'],\r\n",
							"                                        ['NationalMinimumStandard', 'string', 'no-op'],\r\n",
							"                                        ['NationalMinimumStandardCI', 'string', 'no-op'],\r\n",
							"                                        ['MeanScale', 'string', 'no-op'],\r\n",
							"                                        ['MeanScaleCI', 'string', 'no-op'],\r\n",
							"                                        ['NotStatedPercentage', 'string', 'no-op'],\r\n",
							"                                        ['ProficiencyPercentage', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'integer', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANAssessmentArea', self.schemas['DMNAPLANAssessmentArea'], None, 'SKNaplanAssessmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANProficiencyStudentTestResult', self.schemas['DMFactNAPLANProficiencyStudentTestResult'], None, 'SKFactNAPLANProficiencyStudentTestResult')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANProficiencyStudentItemResponse', self.schemas['DMFactNAPLANProficiencyStudentItemResponse'], None, 'SKFactNAPLANProficiencyStudentItemResponse')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANParticipationCode', self.schemas['DMNAPLANParticipationCode'], None, 'SKNAPLANParticipationCode')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANProficiencyLevel', self.schemas['DMNAPLANProficiencyLevel'], None, 'SKNAPLANProficiencyLevel')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANProficiencyStudentResult', self.schemas['DMNAPLANProficiencyStudentResult'], None, 'SKNAPLANProficiencyStudentResult')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANProficiencyTest', self.schemas['DMNAPLANProficiencyTest'], None, 'SKNAPLANProficiencyTest')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANProficiencyTestItem', self.schemas['DMNAPLANProficiencyTestItem'], None, 'SKNAPLANProficiencyTestItem')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANProficiencyTestlet', self.schemas['DMNAPLANProficiencyTestlet'], None, 'SKNAPLANProficiencyTestlet')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANProficiencyTestPath', self.schemas['DMNAPLANProficiencyTestPath'], None, 'SKNAPLANProficiencyTestPath')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANACARAProficiency', self.schemas['DMFactNAPLANACARAProficiency'], None, 'SKNAPLANACARAProficiency')\r\n",
							"\r\n",
							"        \r\n",
							"naplanproficiency_object = NAPLANProficiency_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NAPLAN_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e2c8144d-ae22-4abb-ac5a-c6d9e10e3a8a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class NAPLAN_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='NAPLAN', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['NaplanData'] = [\r\n",
							"                                        ['SkPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['Test', 'string', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBand', 'integer', 'no-op'],\r\n",
							"                                        ['Band', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NaplanNational'] = [\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['Test', 'string', 'no-op'],\r\n",
							"                                        ['AverageScoreNational', 'double', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NaplanNationalAverage'] = [\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['Year Level', 'string', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],   #changed float to double\r\n",
							"                                        ['Test', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsNAPLANResults'] = [\r\n",
							"                                        ['SKMySchoolsNAPLANResults', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsNAPLANResults', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['MeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanMarginLower', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanMarginUpper', 'double', 'no-op'],\r\n",
							"                                        ['Band1Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band2Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band3Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band4Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band5Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band6Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band7Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band8Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band9Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band10Percentage', 'double', 'no-op'],\r\n",
							"                                        ['ParticipationRate', 'double', 'no-op'],\r\n",
							"                                        ['AssessedPercentage', 'double', 'no-op'],\r\n",
							"                                        ['ExemptPercentage', 'double', 'no-op'],\r\n",
							"                                        ['AbsentPercentage', 'double', 'no-op'],\r\n",
							"                                        ['WithdrawnPercentage', 'double', 'no-op'],\r\n",
							"                                        ['NationalMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['ColourComparisontoNationalMean', 'string', 'no-op'],\r\n",
							"                                        ['ComparisontoNationalMeanDescription', 'string', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['ColourComparisontoSimilarSchoolsMean', 'string', 'no-op'],\r\n",
							"                                        ['ComparisontoSimilarSchoolsMeanDescription', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['StudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsNAPLANResultsSimilarSchools'] = [\r\n",
							"                                        ['SKMySchoolsNAPLANResultsSimilarSchools', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsNAPLANResultsSimilarSchools', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsSchoolMeanMarginLower', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsSchoolMeanMarginUpper', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand1Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand2Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand3Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand4Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand5Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand6Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand7Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand8Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand9Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand10Percentage', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANACARABands'] = [\r\n",
							"                                        ['SKNaplanAcaraBands', 'integer', 'no-op'],\r\n",
							"                                        ['BKNaplanAcaraBandsId', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKStateTerritory', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssesmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['AverageAge', 'string', 'no-op'],\r\n",
							"                                        ['YearsOfSchooling', 'string', 'no-op'],\r\n",
							"                                        ['ParticipationRate', 'double', 'no-op'],\r\n",
							"                                        ['Exempt', 'double', 'no-op'],\r\n",
							"                                        ['BandPercentage', 'double', 'no-op'],\r\n",
							"                                        ['NationalMinimumStandard', 'double', 'no-op'],\r\n",
							"                                        ['NationalMinimumStandardCI', 'double', 'no-op'],\r\n",
							"                                        ['MeanScale', 'double', 'no-op'],\r\n",
							"                                        ['MeanScaleCI', 'double', 'no-op'],\r\n",
							"                                        ['NotStatedPercentage', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANOnlineStudentItemResponse'] = [\r\n",
							"                                        ['SKFactNAPLANOnlineStudentItemResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineStudentItemResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineStudentResult', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANTest', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineTestPath', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineTestlet', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineTestItem', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANParticipationCode', 'integer', 'no-op'],\r\n",
							"                                        ['SkYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['PersistentIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessBit', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessInt', 'integer', 'no-op'],\r\n",
							"                                        ['LapsedTimeItemSeconds', 'double', 'no-op'],\r\n",
							"                                        ['SequenceNumber', 'integer', 'no-op'],\r\n",
							"                                        ['ItemWeight', 'integer', 'no-op'],\r\n",
							"                                        ['TestletSubScore', 'integer', 'no-op'],\r\n",
							"                                        ['DomainScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANOnlineStudentTestResult'] = [\r\n",
							"                                        ['SKFactNAPLANOnlineStudentTestResult', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineStudentTestResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineStudentResult', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineTestPath', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANParticipationCode', 'integer', 'no-op'],\r\n",
							"                                        ['StudentDomainBand', 'integer', 'no-op'],\r\n",
							"                                        ['RawScore', 'double', 'no-op'],\r\n",
							"                                        ['ScaledScoreValue', 'double', 'no-op'],\r\n",
							"                                        ['ScaledScoreLogitValue', 'double', 'no-op'],\r\n",
							"                                        ['ScaledScoreStandardError', 'double', 'no-op'],\r\n",
							"                                        ['ScaledScoreLogitStandardError', 'double', 'no-op'],\r\n",
							"                                        ['DomainNationalAverage', 'double', 'no-op'],\r\n",
							"                                        ['DomainSchoolAverage', 'double', 'no-op'],\r\n",
							"                                        ['DomainJurisdictionAverage', 'double', 'no-op'],\r\n",
							"                                        ['DomainStateAverage', 'double', 'no-op'],\r\n",
							"                                        ['DomainTopNational60Percent', 'double', 'no-op'],\r\n",
							"                                        ['DomainBottomNational60Percent', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ActualStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ExpectedStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualStateGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualNationalGrowth', 'double', 'no-op'],\r\n",
							"                                        ['DomainNationalStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['DomainStateStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['DomainJurisdictionStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['DomainSchoolStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['ElapsedTimeSecs', 'double', 'no-op'],\r\n",
							"                                        ['SKNAPLANTest', 'integer', 'no-op'],\r\n",
							"                                        ['StatisticallySimilarSchoolsCEnetGroupAverage', 'double', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANStudentResponse'] = [\r\n",
							"                                        ['SKFactNAPLANStudentResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANStudentResponseId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANQuestionId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCorrectAnswer', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANTextResponse', 'integer', 'no-op'],\r\n",
							"                                        ['IsCorrectAnswer', 'string', 'no-op'],\r\n",
							"                                        ['SchoolPercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['DiocesePercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['StatePercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCampus', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreSchool', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreDiocese', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreNational', 'double', 'no-op'],\r\n",
							"                                        ['PercentCorrectNSW', 'double', 'no-op'],\r\n",
							"                                        ['PercentCorrectQLD', 'double', 'no-op'],\r\n",
							"                                        ['PercentCorrectNational', 'double', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNaplanStudentYearResult'] = [\r\n",
							"                                        ['UId', 'integer', 'no-op'],\r\n",
							"                                        ['SkStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SkPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SkYear', 'integer', 'no-op'],\r\n",
							"                                        ['SkNaplanStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SkExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['SkNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkNAPLANACARAAggregateId', 'integer', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCampus', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreSchool', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreDiocese', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreNational', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCenetState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCenetNational', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKNaplanResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanSourceId', 'integer', 'no-op'],\r\n",
							"                                        ['StandardDeviationState', 'double', 'no-op'],\r\n",
							"                                        ['StandardDeviationNational', 'double', 'no-op'],\r\n",
							"                                        ['ActualStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ExpectedStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualStateGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualNationalGrowth', 'double', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLAN'] = [\r\n",
							"                                        ['SKNaplanResultId', 'integer', 'no-op'],\r\n",
							"                                        ['uidNaplanResult', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['LocalSchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['LocalStudentId', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['Indigenous', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['ScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['BandReading', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['BandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['BandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['BandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['BandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandReading', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentDisplayId', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op']                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANACARAAggregate'] = [\r\n",
							"                                        ['SkNAPLANACARAAggregateId', 'integer', 'no-op'],\r\n",
							"                                        ['BkNAPLANACARAAggregateId', 'string', 'no-op'],\r\n",
							"                                        ['BkYear', 'integer', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['BkNaplanAssessmentArea', 'string', 'no-op'],\r\n",
							"                                        ['ACT', 'double', 'no-op'],\r\n",
							"                                        ['ACTFemale', 'double', 'no-op'],\r\n",
							"                                        ['ACTIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['ACTLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['ACTMale', 'double', 'no-op'],\r\n",
							"                                        ['ACTNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['ACTNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['Aust', 'double', 'no-op'],\r\n",
							"                                        ['AustFemale', 'double', 'no-op'],\r\n",
							"                                        ['AustIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['AustLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['AustMale', 'double', 'no-op'],\r\n",
							"                                        ['AustNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['AustNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['NSW', 'double', 'no-op'],\r\n",
							"                                        ['NSWFemale', 'double', 'no-op'],\r\n",
							"                                        ['NSWIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['NSWLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['NSWMale', 'double', 'no-op'],\r\n",
							"                                        ['NSWNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['NSWNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['NT', 'double', 'no-op'],\r\n",
							"                                        ['NTFemale', 'double', 'no-op'],\r\n",
							"                                        ['NTIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['NTLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['NTMale', 'double', 'no-op'],\r\n",
							"                                        ['NTNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['NTNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['Qld', 'double', 'no-op'],\r\n",
							"                                        ['QldFemale', 'double', 'no-op'],\r\n",
							"                                        ['QldIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['QldLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['QldMale', 'double', 'no-op'],\r\n",
							"                                        ['QldNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['QldNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['SA', 'double', 'no-op'],\r\n",
							"                                        ['SAFemale', 'double', 'no-op'],\r\n",
							"                                        ['SAIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['SALBOTE', 'double', 'no-op'],\r\n",
							"                                        ['SAMale', 'double', 'no-op'],\r\n",
							"                                        ['SANonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['SANonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['Tas', 'double', 'no-op'],\r\n",
							"                                        ['TasFemale', 'double', 'no-op'],\r\n",
							"                                        ['TasIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['TasLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['TasMale', 'double', 'no-op'],\r\n",
							"                                        ['TasNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['TasNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['Vic', 'double', 'no-op'],\r\n",
							"                                        ['VicFemale', 'double', 'no-op'],\r\n",
							"                                        ['VicIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['VicLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['VicMale', 'double', 'no-op'],\r\n",
							"                                        ['VicNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['VicNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['WA', 'double', 'no-op'],\r\n",
							"                                        ['WAFemale', 'double', 'no-op'],\r\n",
							"                                        ['WAIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['WALBOTE', 'double', 'no-op'],\r\n",
							"                                        ['WAMale', 'double', 'no-op'],\r\n",
							"                                        ['WANonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['WANonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANAnswer'] = [\r\n",
							"                                        ['SKNAPLANAnswerId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANAnswerId', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANQuestionId', 'string', 'no-op'],\r\n",
							"                                        ['Answer', 'string', 'no-op'],\r\n",
							"                                        ['IsCorrectAnswer', 'string', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder3', 'double', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                    \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANAssessmentArea'] = [\r\n",
							"                                        ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNaplanAssesmentArea', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaDesc', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaShortDesc', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaBusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANOnlineStudentItemResponse'] = [\r\n",
							"                                        ['SKNAPLANOnlineStudentItemResponse', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANOnlineStudentItemResponse', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANTestId', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANOnlineTestletResponseId', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANOnlineTestItemId', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANOnlineTestItemLocalId', 'string', 'no-op'],\r\n",
							"                                        ['Response', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectness', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessBit', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessInt', 'integer', 'no-op'],\r\n",
							"                                        ['Score', 'integer', 'no-op'],\r\n",
							"                                        ['LapsedTimeItemDisplay', 'string', 'no-op'],\r\n",
							"                                        ['LapsedTimeSeconds', 'double', 'no-op'],\r\n",
							"                                        ['Script', 'string', 'no-op'],\r\n",
							"                                        ['SequenceNumber', 'integer', 'no-op'],\r\n",
							"                                        ['ItemWeight', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                    \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANOnlineStudentResult'] = [\r\n",
							"                                        ['SKNAPLANOnlineStudentResult', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANOnlineStudentResult', 'string', 'no-op'],\r\n",
							"                                        ['LocalId', 'string', 'no-op'],\r\n",
							"                                        ['StateProvinceId', 'string', 'no-op'],\r\n",
							"                                        ['AcceptableUsePolicy', 'string', 'no-op'],\r\n",
							"                                        ['EducationSupport', 'string', 'no-op'],\r\n",
							"                                        ['HomeSchooledStudent', 'string', 'no-op'],\r\n",
							"                                        ['Sensitive', 'string', 'no-op'],\r\n",
							"                                        ['OfflineDelivery', 'string', 'no-op'],\r\n",
							"                                        ['AlertMessages', 'string', 'no-op'],\r\n",
							"                                        ['MedicalAlertMessages', 'string', 'no-op'],\r\n",
							"                                        ['NameType', 'string', 'no-op'],\r\n",
							"                                        ['FamilyName', 'string', 'no-op'],\r\n",
							"                                        ['GivenName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredGivenName', 'string', 'no-op'],\r\n",
							"                                        ['BKAtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSISifDesc', 'string', 'no-op'],\r\n",
							"                                        ['GenderSifCode', 'string', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthDate', 'string', 'no-op'],   #replaced datetime with string\r\n",
							"                                        ['TestYear', 'integer', 'no-op'],\r\n",
							"                                        ['PlatformStudentIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['PersistentIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['BandReading', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['BandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['BandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['BandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['BandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['CountryOfBirthCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CitizenShipStatusSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CitizenShipStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['EnglishProficiencyCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassSifCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['VisaStatisticalCode', 'string', 'no-op'],\r\n",
							"                                        ['DwellingArrangementCode', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResident', 'string', 'no-op'],\r\n",
							"                                        ['SchoolLocalId', 'string', 'no-op'],\r\n",
							"                                        ['HomeroomLocalId', 'string', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['FTE', 'string', 'no-op'],\r\n",
							"                                        ['Parent1LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EmploymentTypeSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EmploymentTypeSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EmploymentTypeSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EmploymentTypeSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationNonSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationNonSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LocalCampusId', 'string', 'no-op'],\r\n",
							"                                        ['SchoolACARAId', 'string', 'no-op'],\r\n",
							"                                        ['Homegroup', 'string', 'no-op'],\r\n",
							"                                        ['ClassCode', 'string', 'no-op'],\r\n",
							"                                        ['MembershipType', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['ReportingSchoolId', 'string', 'no-op'],\r\n",
							"                                        ['OtherEnrollmentSchoolACARAId', 'string', 'no-op'],\r\n",
							"                                        ['AddressType', 'string', 'no-op'],\r\n",
							"                                        ['AddressRole', 'string', 'no-op'],\r\n",
							"                                        ['AddressStreetLine1', 'string', 'no-op'],\r\n",
							"                                        ['AddressStreetLine2', 'string', 'no-op'],\r\n",
							"                                        ['AddressCity', 'string', 'no-op'],\r\n",
							"                                        ['AddressStateProvince', 'string', 'no-op'],\r\n",
							"                                        ['AddressPostalCode', 'string', 'no-op'],\r\n",
							"                                        ['AddressCountry', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfCitizenshipSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfCitizenshipSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfResidencySifCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfResidencySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddressType', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddressValue', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumberType', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumberListedStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandReading', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEDescription', 'string', 'no-op'],\r\n",
							"                                        ['IsOnlineDesc', 'string', 'no-op'],\r\n",
							"                                        ['ConcatenatedName', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANOnlineStudentTestResultId'] = [\r\n",
							"                                        ['SKNAPLANOnlineStudentTestResultId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANOnlineStudentTestResultId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANStudent'] = [\r\n",
							"                                        ['SkNaplanStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['uidNaplanResult', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['LocalSchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['LocalStudentId', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['Indigenous', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['GenderGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentDisplayId', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANStudentResponseId'] = [\r\n",
							"                                        ['SKNAPLANStudentResponseId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANStudentResponseId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANTest'] = [\r\n",
							"                                        ['SKNAPLANTest', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANTest', 'string', 'no-op'],\r\n",
							"                                        ['TestYear', 'integer', 'no-op'],\r\n",
							"                                        ['NAPTestLocalId', 'string', 'no-op'],\r\n",
							"                                        ['TestName', 'string', 'no-op'],\r\n",
							"                                        ['TestLevelCode', 'integer', 'no-op'],\r\n",
							"                                        ['TestType', 'string', 'no-op'],\r\n",
							"                                        ['StagesCount', 'string', 'no-op'],\r\n",
							"                                        ['Domain', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op'],\r\n",
							"                                        ['IsOnlineDesc', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc2', 'string', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['TestRefId', 'string', 'no-op']                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANTextResponse'] = [\r\n",
							"                                        ['SKNAPLANTextResponse', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANTextResponse', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANQuestionId', 'string', 'no-op'],\r\n",
							"                                        ['TextResponse', 'string', 'no-op'],\r\n",
							"                                        ['IsCorrectAnswer', 'integer', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder3', 'double', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCode', 'string', 'no-op'],\r\n",
							"                                        ['ResponseDescription', 'string', 'no-op']                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        # self.schemas['NAPLANAssessmentArea'] = [\r\n",
							"        #                                 ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKNaplanAssesmentArea', 'string', 'no-op'],\r\n",
							"        #                                 ['NaplanAssesmentAreaDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['NaplanAssesmentAreaShortDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['NaplanAssesmentAreaBusinessDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['PrimarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['SecondarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['ScdReason', 'string', 'no-op']                                               \r\n",
							"        #                                 ]\r\n",
							"\r\n",
							"        self.schemas['DMExamBands'] = [\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['BKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Band', 'string', 'no-op'],\r\n",
							"                                        ['BandDescription', 'string', 'no-op'],\r\n",
							"                                        ['BandGroup', 'string', 'no-op'],\r\n",
							"                                        ['ExamGroup', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['BusinessGroup1', 'string', 'no-op'],\r\n",
							"                                        ['BusinessGroup2', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op']                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NAPLANNAPLAN'] = [\r\n",
							"                                        ['SKNaplanResultId', 'integer', 'no-op'],\r\n",
							"                                        ['uidNaplanResult', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['LocalSchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['LocalStudentId', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['Indigenous', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['ScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['BandReading', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['BandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['BandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['BandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['BandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandReading', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentDisplayId', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NAPLANNAPLANStudentView'] = [\r\n",
							"                                        ['SkNaplanStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['uidNaplanResult', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['LocalSchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['LocalStudentId', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['Indigenous', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTE', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['GenderGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentDisplayId', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NAPLANStudent'] = [\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['BKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['OfficialFirstName', 'string', 'no-op'],\r\n",
							"                                        ['OfficialSurname', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredSurname', 'string', 'no-op'],\r\n",
							"                                        ['SingleNameOnly', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['AttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentAddressStreet', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressState', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressPostCode', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLatitude', 'double', 'no-op'],\r\n",
							"                                        ['StudentAddressLongitude', 'double', 'no-op'],\r\n",
							"                                        ['HomePhone', 'string', 'no-op'],\r\n",
							"                                        ['HomeEmail', 'string', 'no-op'],\r\n",
							"                                        ['StudentMobile', 'string', 'no-op'],\r\n",
							"                                        ['StudentEmail', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['CitizenshipResidencyStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassId', 'integer', 'no-op'],\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryData', 'date', 'no-op'],\r\n",
							"                                        ['VisaEndDate', 'date', 'no-op'],\r\n",
							"                                        ['AtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ESLYesNo', 'string', 'no-op'],\r\n",
							"                                        ['EslLanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['SWDYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SwdSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1Email', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Phone', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Mobile', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2Email', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Phone', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Mobile', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['BaptismDate', 'date', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['ConfirmationDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstEucharistDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstReconciliationDate', 'date', 'no-op'],\r\n",
							"                                        ['RollGroup', 'string', 'no-op']                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NAPLANStudentYearResult'] = [\r\n",
							"                                        ['UId', 'integer', 'no-op'],\r\n",
							"                                        ['SkStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SkPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SkYear', 'integer', 'no-op'],\r\n",
							"                                        ['SkNaplanStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SkExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['SkNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkNAPLANACARAAggregateId', 'integer', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCampus', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreSchool', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreDiocese', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreNational', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCenetState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCenetNational', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKNaplanResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanSourceId', 'integer', 'no-op'],\r\n",
							"                                        ['StandardDeviationState', 'double', 'no-op'],\r\n",
							"                                        ['StandardDeviationNational', 'double', 'no-op'],\r\n",
							"                                        ['ActualStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ExpectedStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualStateGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualNationalGrowth', 'double', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANOnlineTestPath'] = [\r\n",
							"                                        ['SKNAPLANOnlineTestPath', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANOnlineTestPath', 'string', 'no-op'],\r\n",
							"                                        ['NAPTestLocalId', 'string', 'no-op'],\r\n",
							"                                        ['TestName', 'string', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['TestType', 'string', 'no-op'],\r\n",
							"                                        ['StagesCount', 'string', 'no-op'],\r\n",
							"                                        ['BKNaplanAssesmentArea', 'string', 'no-op'],\r\n",
							"                                        ['TestYear', 'string', 'no-op'],\r\n",
							"                                        ['PathTakenForDomain', 'string', 'no-op'],\r\n",
							"                                        ['ParallelTest', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand1Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand1Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand2Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand2Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand3Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand3Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand4Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand4Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand5Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand5Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand6Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand6Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand7Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand7Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand8Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand8Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand9Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand9Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand10Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand10Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel1Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel1Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel2Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel2Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel3Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel3Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel4Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel4Upper', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping1', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping2', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping3', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANParticipationCode'] = [\r\n",
							"                                        ['SKNAPLANParticipationCode', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANParticipationCode', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANParticipationText', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNaplanSourceID'] = [\r\n",
							"                                        ['SKNaplanSourceId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNaplanSourceId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMStateTerritory'] = [\r\n",
							"                                        ['SKStateTerritory', 'integer', 'no-op'],\r\n",
							"                                        ['BKStateTerritoryId', 'integer', 'no-op'],\r\n",
							"                                        ['StateTerritorySIFCode', 'string', 'no-op'],\r\n",
							"                                        ['StateTerritorySIFName', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NaplanData', self.schemas['NaplanData'], None, 'SkPersistentStudentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NaplanNational', self.schemas['NaplanNational'], None, 'CalendarYear')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NaplanNationalAverage', self.schemas['NaplanNationalAverage'], None, 'Year')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsNAPLANResults', self.schemas['DMFactMySchoolsNAPLANResults'], 'LastUpdateDate', 'SKMySchoolsNAPLANResults')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsNAPLANResultsSimilarSchools', self.schemas['DMFactMySchoolsNAPLANResultsSimilarSchools'], 'LastUpdateDate', 'SKMySchoolsNAPLANResultsSimilarSchools')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANACARABands', self.schemas['DMFactNAPLANACARABands'], 'LastUpdateDate', 'SKNaplanAcaraBands')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANOnlineStudentItemResponse', self.schemas['DMFactNAPLANOnlineStudentItemResponse'], 'LastUpdateDate', 'SKFactNAPLANOnlineStudentItemResponse')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANOnlineStudentTestResult', self.schemas['DMFactNAPLANOnlineStudentTestResult'], 'LastUpdateDate', 'SKFactNAPLANOnlineStudentTestResult')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANStudentResponse', self.schemas['DMFactNAPLANStudentResponse'], 'LastUpdateDate', 'SKFactNAPLANStudentResponse')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNaplanStudentYearResult', self.schemas['DMFactNaplanStudentYearResult'], 'LastUpdateDate', 'UId')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLAN', self.schemas['DMNAPLAN'], 'LastUpdateDate', 'SKNaplanResultId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANACARAAggregate', self.schemas['DMNAPLANACARAAggregate'], 'LastUpdateDate', 'SkNAPLANACARAAggregateId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANAnswer', self.schemas['DMNAPLANAnswer'], 'LastUpdateDate', 'SKNAPLANAnswerId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANAssessmentArea', self.schemas['DMNAPLANAssessmentArea'], 'LastUpdateDate', 'SKNaplanAssessmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANOnlineStudentItemResponse', self.schemas['DMNAPLANOnlineStudentItemResponse'], 'LastUpdateDate', 'SKNAPLANOnlineStudentItemResponse')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANOnlineStudentResult', self.schemas['DMNAPLANOnlineStudentResult'], 'LastUpdateDate', 'SKNAPLANOnlineStudentResult')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANOnlineStudentTestResultId', self.schemas['DMNAPLANOnlineStudentTestResultId'], 'LastUpdateDate', 'SKNAPLANOnlineStudentTestResultId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANStudent', self.schemas['DMNAPLANStudent'], 'LastUpdateDate', 'SkNaplanStudentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANStudentResponseId', self.schemas['DMNAPLANStudentResponseId'], 'LastUpdateDate', 'SKNAPLANStudentResponseId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANTest', self.schemas['DMNAPLANTest'], 'LastUpdateDate', 'SKNAPLANTest')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANTextResponse', self.schemas['DMNAPLANTextResponse'], 'LastUpdateDate', 'SKNAPLANTextResponse')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'NAPLANAssessmentArea', self.schemas['NAPLANAssessmentArea'], 'LastUpdateDate', 'SKNaplanAssessmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMExamBands', self.schemas['DMExamBands'], 'LastUpdateDate', 'SKExamBandId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NAPLANNAPLAN', self.schemas['NAPLANNAPLAN'], 'LastUpdateDate', 'SKNaplanResultId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NAPLANNAPLANStudentView', self.schemas['NAPLANNAPLANStudentView'], 'LastUpdateDate', 'SkNaplanStudentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NAPLANStudent', self.schemas['NAPLANStudent'], None, 'BKSourceStudentId')\r\n",
							"        \r\n",
							"        # empty table - investigate possible issue \r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'NAPLANStudentYearResult', self.schemas['NAPLANStudentYearResult'], 'LastUpdateDate', 'UId')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANOnlineTestPath', self.schemas['DMNAPLANOnlineTestPath'], 'LastUpdateDate', 'SKNAPLANOnlineTestPath')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANParticipationCode', self.schemas['DMNAPLANParticipationCode'], 'LastUpdateDate', 'SKNAPLANParticipationCode')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNaplanSourceID', self.schemas['DMNaplanSourceID'], 'LastUpdateDate', 'SKNaplanSourceId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStateTerritory', self.schemas['DMStateTerritory'], 'LastUpdateDate', 'SKStateTerritory')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"naplan_object = NAPLAN_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NCCD_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "165b89a1-0a56-4cea-9a39-518599805848"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class NCCD_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='NCCD', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMCensusStudentWithDisabilityId'] = [\r\n",
							"                                        ['SKCensusStudentWithDisabilityId', 'integer', 'no-op'],\r\n",
							"                                        ['BKCensusStudentWithDisabilityId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMDisabilityCategoryAdjustment'] = [\r\n",
							"                                        ['SKDisabilityCategoryAdjustment', 'integer', 'no-op'],\r\n",
							"                                        ['BKDisabilityCategoryAdjustment', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityCategory', 'string', 'no-op'],\r\n",
							"                                        ['LevelOfAdjustment', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactCensusStudentWithDisability'] = [\r\n",
							"                                        ['SKFactCensusStudentWithDisability', 'integer', 'no-op'],\r\n",
							"                                        ['SKCensusStudentWithDisabilityId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKDisabilityCategoryAdjustment', 'integer', 'no-op'],\r\n",
							"                                        ['NumberOfStudents', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMCensusStudentWithDisabilityId', self.schemas['DMCensusStudentWithDisabilityId'], 'LastUpdateDate', 'SKCensusStudentWithDisabilityId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMDisabilityCategoryAdjustment', self.schemas['DMDisabilityCategoryAdjustment'], 'LastUpdateDate', 'SKDisabilityCategoryAdjustment')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactCensusStudentWithDisability', self.schemas['DMFactCensusStudentWithDisability'], 'LastUpdateDate', 'SKFactCensusStudentWithDisability')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"nccd_object = NCCD_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ODS_ActivityInstance_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b4577efd-bd64-4a47-8701-0e90dd2e42d6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Ods_ActivityInstance_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='ODSActivityInstance', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        \r\n",
							"        self.schemas['CompassODSActivityInstance'] = [\r\n",
							"                                        ['SKActivityInstance', 'string', 'no-op'],\r\n",
							"                                        ['BKActivityInstance', 'string', 'no-op'],\r\n",
							"                                        ['SubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['ActivityCode', 'string', 'no-op'],\r\n",
							"                                        ['Start', 'string', 'no-op'],\r\n",
							"                                        ['Finish', 'string', 'no-op'],\r\n",
							"                                        ['ManagingCompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['CoveringCompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['CampusImportIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'string', 'no-op']\r\n",
							"        ]\r\n",
							"                                           \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSActivityInstance', self.schemas['CompassODSActivityInstance'], None, 'SKActivityInstance')\r\n",
							"\r\n",
							"\r\n",
							"ods_activityinstance_object = Ods_ActivityInstance_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ODS_StudentDemoFull_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4acf097d-3c3f-4493-9a55-f4cf0b3450e5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Ods_StudentDemoFull_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='ODSStudentDemographicFull', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        \r\n",
							"        self.schemas['CompassODSStudentDemographicFull'] = [\r\n",
							"                                                        ['SKStudent', 'string', 'no-op'],\r\n",
							"                                                        ['BKStudent', 'string', 'no-op'],\r\n",
							"                                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                                        ['Title', 'string', 'no-op'],\r\n",
							"                                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                                        ['LastName', 'string', 'no-op'],\r\n",
							"                                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                                        ['SecondMiddleName', 'string', 'no-op'],\r\n",
							"                                                        ['FormerFirstName', 'string', 'no-op'],\r\n",
							"                                                        ['FormerLastName', 'string', 'no-op'],\r\n",
							"                                                        ['EmailAddress', 'string', 'no-op'],\r\n",
							"                                                        ['AdminNotes', 'string', 'no-op'],\r\n",
							"                                                        ['UsualTransport', 'string', 'no-op'],\r\n",
							"                                                        ['HomePhoneNumber', 'string', 'no-op'],\r\n",
							"                                                        ['MobileNumber', 'string', 'no-op'],\r\n",
							"                                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                                        ['DateOfDeath', 'string', 'no-op'],\r\n",
							"                                                        ['DateOfBirth', 'string', 'no-op'],\r\n",
							"                                                        ['InterpreterRequired', 'string', 'no-op'],\r\n",
							"                                                        ['IndigenousType', 'string', 'no-op'],\r\n",
							"                                                        ['Nationality', 'string', 'no-op'],\r\n",
							"                                                        ['ArrivalDate', 'string', 'no-op'],\r\n",
							"                                                        ['VisaSubClassCode', 'string', 'no-op'],\r\n",
							"                                                        ['VisaSubClassName', 'string', 'no-op'],\r\n",
							"                                                        ['VisaExpiryDate', 'string', 'no-op'],\r\n",
							"                                                        ['YouthAllowance', 'string', 'no-op'],\r\n",
							"                                                        ['GovernmentFunded', 'string', 'no-op'],\r\n",
							"                                                        ['GovCode1', 'string', 'no-op'],\r\n",
							"                                                        ['GovCode2', 'string', 'no-op'],\r\n",
							"                                                        ['Disability', 'string', 'no-op'],\r\n",
							"                                                        ['DisabilityFunded', 'string', 'no-op'],\r\n",
							"                                                        ['LivingArrangements', 'string', 'no-op'],\r\n",
							"                                                        ['ResidentialStatus', 'string', 'no-op'],\r\n",
							"                                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                                        ['Religion', 'string', 'no-op'],\r\n",
							"                                                        ['ReligionNotes', 'string', 'no-op'],\r\n",
							"                                                        ['SchoolHistory', 'string', 'no-op'],\r\n",
							"                                                        ['AmbulanceSubscriber', 'string', 'no-op'],\r\n",
							"                                                        ['Occupation', 'string', 'no-op'],\r\n",
							"                                                        ['SchoolEducation', 'string', 'no-op'],\r\n",
							"                                                        ['NonSchoolEducation', 'string', 'no-op'],\r\n",
							"                                                        ['BirthCountry', 'string', 'no-op'],\r\n",
							"                                                        ['UserName', 'string', 'no-op'],\r\n",
							"                                                        ['Contactable', 'string', 'no-op'],\r\n",
							"                                                        ['EmailAllowed', 'string', 'no-op'],\r\n",
							"                                                        ['SMSAllowed', 'string', 'no-op'],\r\n",
							"                                                        ['PublishPhotoToMedia', 'string', 'no-op'],\r\n",
							"                                                        ['PublishPhotoToInternal', 'string', 'no-op'],\r\n",
							"                                                        ['AuthenticationMode', 'string', 'no-op'],\r\n",
							"                                                        ['FeeMode', 'string', 'no-op'],\r\n",
							"                                                        ['ImportMode', 'string', 'no-op'],\r\n",
							"                                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                                        ['ReceivesESL', 'string', 'no-op'],\r\n",
							"                                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                                        ['BirthCountryCode', 'string', 'no-op'],\r\n",
							"                                                        ['GenderCode', 'string', 'no-op'],\r\n",
							"                                                        ['IndigenousTypeCode', 'string', 'no-op'],\r\n",
							"                                                        ['RelgionCode', 'string', 'no-op'],\r\n",
							"                                                        ['NonSchoolEducationCode', 'string', 'no-op'],\r\n",
							"                                                        ['NationalityCode', 'string', 'no-op'],\r\n",
							"                                                        ['OccupationGroup', 'string', 'no-op'],\r\n",
							"                                                        ['Employer', 'string', 'no-op'],\r\n",
							"                                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                                        ['SchoolEducationCode', 'string', 'no-op'],\r\n",
							"                                                        ['CampusId', 'string', 'no-op'],\r\n",
							"                                                        ['CommunicationPreference', 'string', 'no-op'],\r\n",
							"                                                        ['TownOfBirth', 'string', 'no-op'],\r\n",
							"                                                        ['ReligiousOrLay', 'string', 'no-op'],\r\n",
							"                                                        ['Parish', 'string', 'no-op'],\r\n",
							"                                                        ['ImmunisationRecordSighted', 'string', 'no-op'],\r\n",
							"                                                        ['HomeTown', 'string', 'no-op'],\r\n",
							"                                                        ['HeadLiceCheckAllowed', 'string', 'no-op']\r\n",
							"                                                    ]\r\n",
							"\r\n",
							"\r\n",
							"                                           \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        \r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSStudentDemographicFull', self.schemas['CompassODSStudentDemographicFull'], None, 'SKStudent')\r\n",
							"\r\n",
							"       \r\n",
							"\r\n",
							"ods_StudentDemoFull_object = Ods_StudentDemoFull_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ODS_StudentDemo_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e9cd6451-77ac-4213-82e7-481ecfc05c91"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Ods_StudentDemo_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='ODSStudentDemographic', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        \r\n",
							"        self.schemas['CompassODSStudentDemographic'] = [\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                        ['LastName', 'string', 'no-op'],\r\n",
							"                                        ['GovCode1', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],                                                       \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                           \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        \r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSStudentDemographic', self.schemas['CompassODSStudentDemographic'], 'LastUpdateDate', 'SKStudent')\r\n",
							"\r\n",
							"       \r\n",
							"\r\n",
							"ods_StudentDemo_object = Ods_StudentDemo_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ODS_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "aab0abe5-490d-4867-a27f-25f2dd72b2ae"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Ods_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='ODS', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['CompassODSActivity'] = [\r\n",
							"                                        ['SKActivity', 'integer', 'no-op'],\r\n",
							"                                        ['BKActivity', 'string', 'no-op'],\r\n",
							"                                        ['ActivityCode', 'string', 'no-op'],\r\n",
							"                                        ['ActivityName', 'string', 'no-op'],\r\n",
							"                                        ['Status', 'integer', 'no-op'],\r\n",
							"                                        ['SubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['UTCStartDateTime', 'string', 'no-op'],\r\n",
							"                                        ['UTCEndDateTime', 'string', 'no-op'],\r\n",
							"                                        ['StartDateTime', 'string', 'no-op'],\r\n",
							"                                        ['EndDateTime', 'string', 'no-op'],\r\n",
							"                                        ['ManagingCompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['DefaultLocation', 'string', 'no-op'],\r\n",
							"                                        ['ActivityType', 'integer', 'no-op'],\r\n",
							"                                        ['ActivityTypeDescription', 'string', 'no-op'],\r\n",
							"                                        ['AttendanceMode', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceModeDescription', 'string', 'no-op'],\r\n",
							"                                        ['RunningStatus', 'integer', 'no-op'],\r\n",
							"                                        ['RunningStatusDescription', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['ActivityId', 'string', 'no-op']\r\n",
							"                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['CompassODSActivityEnrolment'] = [\r\n",
							"                                        ['SKActivityEnrolment', 'integer', 'no-op'],\r\n",
							"                                        ['BKActivityEnrolment', 'string', 'no-op'],\r\n",
							"                                        ['ActivityCode', 'string', 'no-op'],\r\n",
							"                                        ['ActivityName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Role', 'integer', 'no-op'],\r\n",
							"                                        ['RoleDescription', 'string', 'no-op'],\r\n",
							"                                        ['UTCActivityEnrolmentStartDate', 'string', 'no-op'],\r\n",
							"                                        ['UTCActivityEnrolmentEndDate', 'string', 'no-op'],\r\n",
							"                                        ['ActivityEnrolmentStartDate', 'string', 'no-op'],\r\n",
							"                                        ['ActivityEnrolmentEndDate', 'string', 'no-op'],\r\n",
							"                                        ['CampusID', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['ExtendedStatusSystemIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['ExtendedStatusShortCode', 'string', 'no-op'],\r\n",
							"                                        ['CurrentlyEnrolled', 'string', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['CompassODSCompassSubject'] = [\r\n",
							"                                        ['SKCompassSubject', 'integer', 'no-op'],\r\n",
							"                                        ['BKCompassSubject', 'string', 'no-op'],\r\n",
							"                                        ['AcademicYear', 'integer', 'no-op'],\r\n",
							"                                        ['SubjectLongName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectShortName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectImportIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['Status', 'string', 'no-op'],\r\n",
							"                                        ['SubjectYearLevel', 'string', 'no-op'],\r\n",
							"                                        ['FacultyImportIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['FacultyLongName', 'string', 'no-op'],\r\n",
							"                                        ['FacultyShortName', 'string', 'no-op'],\r\n",
							"                                        ['FacultyStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['Campusid', 'integer', 'no-op'],\r\n",
							"                                        ['AcademicYearName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectId', 'string', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                              \r\n",
							"\r\n",
							"        self.schemas['CompassODSStaffDemographic'] = [\r\n",
							"                                        ['SKStaff', 'integer', 'no-op'],\r\n",
							"                                        ['BKStaff', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Title', 'string', 'no-op'],\r\n",
							"                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['LastName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['SecondMiddleName', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddress', 'string', 'no-op'],\r\n",
							"                                        ['AdminNotes', 'string', 'no-op'],\r\n",
							"                                        ['UsualTransport', 'string', 'no-op'],\r\n",
							"                                        ['HomePhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['MobileNumber', 'string', 'no-op'],\r\n",
							"                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                        ['DateOfDeath', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'string', 'no-op'],\r\n",
							"                                        ['InterpreterRequired', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousType', 'string', 'no-op'],\r\n",
							"                                        ['Nationality', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassName', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryDate', 'string', 'no-op'],\r\n",
							"                                        ['YouthAllowance', 'string', 'no-op'],\r\n",
							"                                        ['GovernmentFunded', 'string', 'no-op'],\r\n",
							"                                        ['GovCode1', 'string', 'no-op'],\r\n",
							"                                        ['GovCode2', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded', 'string', 'no-op'],\r\n",
							"                                        ['LivingArrangements', 'string', 'no-op'],\r\n",
							"                                        ['ResidentialStatus', 'string', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['Religion', 'string', 'no-op'],\r\n",
							"                                        ['SchoolHistory', 'string', 'no-op'],\r\n",
							"                                        ['AmbulanceSubscriber', 'string', 'no-op'],\r\n",
							"                                        ['Occupation', 'string', 'no-op'],\r\n",
							"                                        ['OccupationGroup', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountry', 'string', 'no-op'],\r\n",
							"                                        ['Employer', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['UserName', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['ReceivesESL', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryCode', 'string', 'no-op'],\r\n",
							"                                        ['GenderCode', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousTypeCode', 'string', 'no-op'],\r\n",
							"                                        ['RelgionCode', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducationCode', 'string', 'no-op'],\r\n",
							"                                        ['NationalityCode', 'string', 'no-op'],\r\n",
							"                                        ['Contactable', 'string', 'no-op'],\r\n",
							"                                        ['SMSAllowed', 'string', 'no-op'],\r\n",
							"                                        ['EmailAllowed', 'string', 'no-op'],\r\n",
							"                                        ['FeeMode', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesBH', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesAH', 'string', 'no-op'],\r\n",
							"                                        ['AuthenticationMode', 'string', 'no-op'],\r\n",
							"                                        ['ReligiousOrLay', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['FormerFirstName', 'string', 'no-op'],\r\n",
							"                                        ['FormerLastName', 'string', 'no-op'],\r\n",
							"                                        ['ImportMode', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToInternal', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToMedia', 'string', 'no-op'],\r\n",
							"                                        ['ReligionNotes', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducationCode', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CommunicationPreference', 'string', 'no-op']                                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['CompassODSStudentDemographic'] = [\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudent', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Title', 'string', 'no-op'],\r\n",
							"                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['LastName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['SecondMiddleName', 'string', 'no-op'],\r\n",
							"                                        ['FormerFirstName', 'string', 'no-op'],\r\n",
							"                                        ['FormerLastName', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddress', 'string', 'no-op'],\r\n",
							"                                        ['AdminNotes', 'string', 'no-op'],\r\n",
							"                                        ['UsualTransport', 'string', 'no-op'],\r\n",
							"                                        ['HomePhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['MobileNumber', 'string', 'no-op'],\r\n",
							"                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                        ['DateOfDeath', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'string', 'no-op'],\r\n",
							"                                        ['InterpreterRequired', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousType', 'string', 'no-op'],\r\n",
							"                                        ['Nationality', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassName', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryDate', 'string', 'no-op'],\r\n",
							"                                        ['YouthAllowance', 'string', 'no-op'],\r\n",
							"                                        ['GovernmentFunded', 'string', 'no-op'],\r\n",
							"                                        ['GovCode1', 'string', 'no-op'],\r\n",
							"                                        ['GovCode2', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded', 'string', 'no-op'],\r\n",
							"                                        ['LivingArrangements', 'string', 'no-op'],\r\n",
							"                                        ['ResidentialStatus', 'string', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['Religion', 'string', 'no-op'],\r\n",
							"                                        ['ReligionNotes', 'string', 'no-op'],\r\n",
							"                                        ['SchoolHistory', 'string', 'no-op'],\r\n",
							"                                        ['AmbulanceSubscriber', 'string', 'no-op'],\r\n",
							"                                        ['Occupation', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountry', 'string', 'no-op'],\r\n",
							"                                        ['UserName', 'string', 'no-op'],\r\n",
							"                                        ['Contactable', 'string', 'no-op'],\r\n",
							"                                        ['EmailAllowed', 'string', 'no-op'],\r\n",
							"                                        ['SMSAllowed', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToMedia', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToInternal', 'string', 'no-op'],\r\n",
							"                                        ['AuthenticationMode', 'string', 'no-op'],\r\n",
							"                                        ['FeeMode', 'string', 'no-op'],\r\n",
							"                                        ['ImportMode', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['ReceivesESL', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryCode', 'string', 'no-op'],\r\n",
							"                                        ['GenderCode', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousTypeCode', 'string', 'no-op'],\r\n",
							"                                        ['RelgionCode', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducationCode', 'string', 'no-op'],\r\n",
							"                                        ['NationalityCode', 'string', 'no-op'],\r\n",
							"                                        ['OccupationGroup', 'string', 'no-op'],\r\n",
							"                                        ['Employer', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducationCode', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CommunicationPreference', 'string', 'no-op'],\r\n",
							"                                        ['TownOfBirth', 'string', 'no-op'],\r\n",
							"                                        ['ReligiousOrLay', 'string', 'no-op'],\r\n",
							"                                        ['Parish', 'string', 'no-op'],\r\n",
							"                                        ['ImmunisationRecordSighted', 'string', 'no-op'],\r\n",
							"                                        ['HomeTown', 'string', 'no-op'],\r\n",
							"                                        ['HeadLiceCheckAllowed', 'string', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['CompassODSStaffOrganisationDetails'] = [\r\n",
							"                                        ['SKStaffOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['BKStaffOrganisationDetails', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserEmail', 'string', 'no-op'],\r\n",
							"                                        ['PayrollClassification', 'string', 'no-op'],\r\n",
							"                                        ['RoleInSchool', 'string', 'no-op'],\r\n",
							"                                        ['Room', 'string', 'no-op'],\r\n",
							"                                        ['IsTeachingStaff', 'string', 'no-op'],\r\n",
							"                                        ['HumanResourcesSystemId', 'string', 'no-op'],\r\n",
							"                                        ['OfficeLocation', 'string', 'no-op'],\r\n",
							"                                        ['EmploymentStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['PhoneExtension', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['Status', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationTitle', 'string', 'no-op'],\r\n",
							"                                        ['SourceCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['Agency', 'string', 'no-op'],\r\n",
							"                                        ['BackgroundCheckCompleted', 'string', 'no-op'],\r\n",
							"                                        ['BackgroundCheckCompletedBy', 'string', 'no-op'],\r\n",
							"                                        ['BackgroundCheckCompletedDate', 'string', 'no-op'],\r\n",
							"                                        ['IncludedInCensus', 'string', 'no-op'],\r\n",
							"                                        ['VettingInformation', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['CompassODSStudentOrganisationDetails'] = [\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentOrganisationDetails', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserEmail', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['DateAppliedFor', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentConditions', 'string', 'no-op'],\r\n",
							"                                        ['TransportDetails', 'string', 'no-op'],\r\n",
							"                                        ['IntendedFutureSchool', 'string', 'no-op'],\r\n",
							"                                        ['LockerDetails', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['IctPolicyReceived', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['Status', 'string', 'no-op'],\r\n",
							"                                        ['GetPersonPhotoURL', 'string', 'no-op'],\r\n",
							"                                        ['BoarderType', 'string', 'no-op'],\r\n",
							"                                        ['CensusStartDate', 'string', 'no-op'],\r\n",
							"                                        ['SourceCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['DateNotifiedOfLeaving', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentWithdrawalReason', 'string', 'no-op'],\r\n",
							"                                        ['ExternalScholarship', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['CompassODSStudentOrganisationMilestones'] = [\r\n",
							"                                        ['SKStudentOrganisationMilestones', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentOrganisationMilestones', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['YearLevel', 'string', 'no-op'],\r\n",
							"                                        ['GroupA', 'string', 'no-op'],\r\n",
							"                                        ['GroupB', 'string', 'no-op'],\r\n",
							"                                        ['GroupC', 'string', 'no-op'],\r\n",
							"                                        ['GroupD', 'string', 'no-op'],\r\n",
							"                                        ['GroupE', 'string', 'no-op'],\r\n",
							"                                        ['IsActive', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrentMilestone', 'string', 'no-op'],\r\n",
							"                                        ['HomeCampusGuid', 'string', 'no-op'],\r\n",
							"                                        ['MilestoneTimestamp', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['StudentType', 'integer', 'no-op'],\r\n",
							"                                        ['StudentTypeDesc', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['TimeAllocation', 'double', 'no-op'],\r\n",
							"                                        ['BaseRole', 'integer', 'no-op'],\r\n",
							"                                        ['SourceCampusId', 'integer', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['CompassODSStaffOrganisationMilestones'] = [\r\n",
							"                                        ['SKStaffOrganisationMilestones', 'integer', 'no-op'],\r\n",
							"                                        ['BKStaffOrganisationMilestones', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['YearLevel', 'string', 'no-op'],\r\n",
							"                                        ['GroupA', 'string', 'no-op'],\r\n",
							"                                        ['GroupB', 'string', 'no-op'],\r\n",
							"                                        ['GroupC', 'string', 'no-op'],\r\n",
							"                                        ['GroupD', 'string', 'no-op'],\r\n",
							"                                        ['GroupE', 'string', 'no-op'],\r\n",
							"                                        ['IsActive', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrentMilestone', 'string', 'no-op'],\r\n",
							"                                        ['HomeCampusGuid', 'string', 'no-op'],\r\n",
							"                                        ['MilestoneTimestamp', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['TimeAllocation', 'double', 'no-op'],\r\n",
							"                                        ['BaseRole', 'integer', 'no-op'],\r\n",
							"                                        ['StudentTypeDesc', 'string', 'no-op'],\r\n",
							"                                        ['StudentType', 'integer', 'no-op'],\r\n",
							"                                        ['SourceCampusId', 'integer', 'no-op']\r\n",
							"                                        ]\r\n",
							"                                    \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSActivity', self.schemas['CompassODSActivity'], 'LastUpdateDate', 'SKActivity')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSActivityEnrolment', self.schemas['CompassODSActivityEnrolment'], 'LastUpdateDate', 'SKActivityEnrolment')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSCompassSubject', self.schemas['CompassODSCompassSubject'], 'LastUpdateDate', 'SKCompassSubject')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSStaffDemographic', self.schemas['CompassODSStaffDemographic'], 'LastUpdateDate', 'SKStaff')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'CompassODSStudentDemographic', self.schemas['CompassODSStudentDemographic'], 'LastUpdateDate', 'SKStudent')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSStaffOrganisationDetails', self.schemas['CompassODSStaffOrganisationDetails'], 'LastUpdateDate', 'SKStaffOrganisationDetails')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSStudentOrganisationDetails', self.schemas['CompassODSStudentOrganisationDetails'], 'LastUpdateDate', 'SKStudentOrganisationDetails')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSStudentOrganisationMilestones', self.schemas['CompassODSStudentOrganisationMilestones'], 'LastUpdateDate', 'SKStudentOrganisationMilestones')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'CompassODSStaffOrganisationMilestones', self.schemas['CompassODSStaffOrganisationMilestones'], 'LastUpdateDate', 'SKStaffOrganisationMilestones')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"ods_object = Ods_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "695da1d7-9611-4120-9a7f-4d68c66a108c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"\r\n",
							"# use as the source for ingested files to be moved into individual folders using DataCopy\r\n",
							"source_folder = ''\r\n",
							"\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /Acer_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_AE')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1661f434-f0e0-4806-95cb-a166e39c14ce"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /AE_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_AEDC')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "237f8779-a464-4c59-9941-78f71aff9f57"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /AEDC_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_AEResultsCombined')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d5a9ba32-8c39-408e-9d43-a013b193955d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /AEResultsCombined_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_AE_Manual')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a75a75d6-a6ac-4c23-ad16-b8408ba82083"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage1/AE_ManualCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /AE_sr_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_AE_Manual_2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2225727b-e1e7-4d05-a211-860b61ffe25d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /AE_lt_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_ATAR')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "237f7d7c-a666-4c52-b5af-694b4ed1c014"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage1/ATARDataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run Data Objects/ATAR_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Acer')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5ecc3942-817a-4fa8-9c0e-c00b6fd28876"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Acer_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_AcerNorms')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c23dd1cd-1206-4dc7-ba42-dd5818f5caf3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /AcerNorms_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Attendance')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "819620a4-2f12-4b37-8d29-ccd220f84d6b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Attendance_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Class_Period')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "73e2f3b1-030c-403f-ac37-3589da43c547"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Class_period_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_DIMTables')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "473590a3-de5a-4183-b21c-9fab0fcdfd4e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /DIMTables_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_EYAnswers')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2b089c02-3e6d-4ec5-9c30-e9e6108fbd73"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Data Objects/EarlyYearsAnswers_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_EYQuestions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "502a6df3-7bb8-4f63-ad27-c8f0fbcf909d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Data Objects/EarlyYearsQuestions_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_EYSubTeachers')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "667cc7f5-2b8c-4008-9882-b604f37c2366"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = 'EarlyYearsSubTeachers_object'\r\n",
							"method_name = 'ingest'\r\n",
							"source_folder = 'EarlyYearsSubTeachers'\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage1/EarlyYearsSubTeachersDataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Data Objects/EarlyYearsSubTeachers_py"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_EarlyYears')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7620b2ec-19f9-4df7-8b21-9c679b0d8acc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage1/EarlyYearsDataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Data Objects/EarlyYearsResults_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Enrolment')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5a6fd298-c48c-4cd8-a085-2e96dbbeb0fc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Enrolment_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_GeneralData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4dbc6e72-47b5-4a21-88e6-2d23b2fbc3c9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /GeneralData_py"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_MySchools')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d988cc9d-e5a9-400b-b4e9-55dc2e56ad43"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /MySchools_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_NAPLAN')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "89f4139f-91c0-44c5-90b6-e2d7ff054d63"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /NAPLAN_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_NAPLANProficiency')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5f4c0900-04dd-4c8c-94d2-5b95804a9d18"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /GeneralDataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /NAPLANProficiency_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_NCCD')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c25f5ecd-0140-4ab3-aa42-643d84b2dfe4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /NCCD_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_ODS')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5f4e2960-8bdb-43bd-bce4-316a23f91bc8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /ODS_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_ODSActivityInstance')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6d4cdbbe-0781-4fbc-9846-798d4a569386"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run Data Objects/ODS_ActivityInstance_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_ODSStudentDemo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "48fd75d4-908e-4c8a-898f-2f8883fe4a83"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run Data Objects/ODS_StudentDemo_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_ODSStudentDemoFull')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "cb552c4e-e9c1-4611-954e-fab0f3101282"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run Data Objects/ODS_StudentDemoFull_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_SeniorData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "401b470f-da85-4f25-bbe7-4e2aa97c1860"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %run /SeniorOutcomesManualCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /SeniorData_py"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Student_Profile')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ed6ecf81-a647-4108-b214-62ba2f0f9314"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Student_profile_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_SubjectExclusionList')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "29b15707-771a-4c1b-8ce0-c5736973684a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /GeneralDataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /SubjectExclusionList_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_SupportingData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f3ab8f4d-fc0a-471a-a1d1-3541a8d0d7fa"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /SupportingDataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /SupportingData_py"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "27b938df-7b10-45e1-bcd3-384ce12ea1d2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"from delta.tables import DeltaTable\n",
							"from notebookutils import mssparkutils\n",
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, ArrayType, TimestampType, BooleanType, ShortType, DateType\n",
							"from pyspark.sql import functions as F\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.utils import AnalysisException\n",
							"import pandas as pd\n",
							"import sys\n",
							"import re\n",
							"import json\n",
							"import datetime\n",
							"import pytz\n",
							"import random\n",
							"import io\n",
							"import logging\n",
							"\n",
							"logger = logging.getLogger('OEA')\n",
							"\n",
							"class OEA:\n",
							"    def __init__(self, storage_account='', instrumentation_key=None, salt='', logging_level=logging.DEBUG):\n",
							"        if storage_account:\n",
							"            self.storage_account = storage_account\n",
							"        else:\n",
							"            oea_id = mssparkutils.env.getWorkspaceName()[8:] # extracts the OEA id for this OEA instance from the synapse workspace name (based on OEA naming convention)\n",
							"            self.storage_account = 'stoea' + oea_id # sets the name of the storage account based on OEA naming convention\n",
							"            self.keyvault = 'kv-oea-' + oea_id\n",
							"        self.keyvault_linked_service = 'LS_KeyVault_OEA'\n",
							"        self.serverless_sql_endpoint = mssparkutils.env.getWorkspaceName() + '-ondemand.sql.azuresynapse.net'\n",
							"        self._initialize_logger(instrumentation_key, logging_level)\n",
							"        self.salt = salt\n",
							"        self.timezone = 'EST'\n",
							"        self.stage1np = 'abfss://stage1np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage2np = 'abfss://stage2np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage2p = 'abfss://stage2p@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage3np = 'abfss://stage3np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage3p = 'abfss://stage3p@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.framework_path = 'abfss://oea-framework@' + self.storage_account + '.dfs.core.windows.net'\n",
							"\n",
							"        # Initialize framework db\n",
							"        spark.sql(f\"CREATE DATABASE IF NOT EXISTS oea\")\n",
							"        spark.sql(f\"CREATE TABLE IF NOT EXISTS oea.env (name string not null, value string not null, description string) USING DELTA LOCATION '{self.framework_path}/db/env'\")\n",
							"        df = spark.sql(\"select value from oea.env where name='storage_account'\")\n",
							"        if df.first(): spark.sql(f\"UPDATE oea.env set value='{self.storage_account}' where name='storage_account'\")\n",
							"        else: spark.sql(f\"INSERT INTO oea.env VALUES ('storage_account', '{self.storage_account}', 'The name of the data lake storage account for this OEA instance.')\")\n",
							"        spark.sql(f\"CREATE TABLE IF NOT EXISTS OEA.watermark (source string not null, entity string not null, watermark timestamp not null) USING DELTA LOCATION '{self.framework_path}/db/watermark'\")\n",
							"\n",
							"        logger.debug(\"OEA initialized.\")\n",
							"    \n",
							"    def path(self, container_name, directory_path=None):\n",
							"        if directory_path:\n",
							"            return f'abfss://{container_name}@{self.storage_account}.dfs.core.windows.net/{directory_path}'\n",
							"        else:\n",
							"            return f'abfss://{container_name}@{self.storage_account}.dfs.core.windows.net'\n",
							"\n",
							"    def convert_path(self, path):\n",
							"        \"\"\" Converts the given path into a valid url.\n",
							"            eg, convert_path('stage1np/contoso_sis/student/*') # returns abfss://stage1np@storageaccount.dfs.core.windows.net/contoso_sis/student/*\n",
							"        \"\"\"\n",
							"        path_args = path.split('/')\n",
							"        stage = path_args.pop(0)\n",
							"        return self.path(stage, '/'.join(path_args))            \n",
							"\n",
							"    def _initialize_logger(self, instrumentation_key, logging_level):\n",
							"        logging.lastResort = None\n",
							"        # the logger will print an error like \"ValueError: I/O operation on closed file\" because we're trying to have log messages also print to stdout\n",
							"        # and apparently this causes issues on some of the spark executor nodes. The bottom line is that we don't want these logging errors to get printed in the notebook output.\n",
							"        logging.raiseExceptions = False\n",
							"        logger.setLevel(logging_level)\n",
							"\n",
							"        handler = logging.StreamHandler(sys.stdout)\n",
							"        handler.setLevel(logging_level)\n",
							"        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
							"        handler.setFormatter(formatter)\n",
							"        logger.addHandler(handler)\n",
							"\n",
							"    def get_value_from_db(self, query):\n",
							"        df = spark.sql(query)\n",
							"        if df.first(): return df.first()[0]\n",
							"        else: return None\n",
							"\n",
							"    def get_last_watermark(self, source, entity):\n",
							"        return self.get_value_from_db(f\"select w.watermark from oea.watermark w where w.source='{source}' and w.entity='{entity}' order by w.watermark desc\")\n",
							"\n",
							"    def insert_watermark(self, source, entity, watermark_datetime):\n",
							"        spark.sql(f\"insert into oea.watermark values ('{source}', '{entity}', '{watermark_datetime}')\")\n",
							"\n",
							"    def get_secret(self, secret_name):\n",
							"        \"\"\" Retrieves the specified secret from the keyvault.\n",
							"            This method assumes that the keyvault linked service has been setup and is accessible.\n",
							"        \"\"\"\n",
							"        sc = SparkSession.builder.getOrCreate()\n",
							"        token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
							"        value = token_library.getSecret(self.keyvault, secret_name, self.keyvault_linked_service)        \n",
							"        return value\n",
							"\n",
							"    def delete(self, path):\n",
							"        oea.rm_if_exists(self.convert_path(path))\n",
							"\n",
							"    def land(self, data_source, entity, df, partition_label='', format_str='csv', header=True, mode='overwrite'):\n",
							"        \"\"\" Lands data in stage1np. If partition label is not provided, the current datetime is used with the label of 'batchdate'.\n",
							"            eg, land('contoso_isd', 'student', data, 'school_year=2021')\n",
							"        \"\"\"\n",
							"        tz = pytz.timezone(self.timezone)\n",
							"        datetime_str = datetime.datetime.now(tz).replace(microsecond=0).isoformat()\n",
							"        datetime_str = datetime_str.replace(':', '') # Path names can't have a colon - https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/site/markdown/filesystem/introduction.md#path-names\n",
							"        df.write.format(format_str).save(self.path('stage1np', f'{data_source}/{entity}/{partition_label}/batchdate={datetime_str}'), header=header, mode=mode)\n",
							"\n",
							"    def load(self, folder, table, stage=None, data_format='delta'):\n",
							"        \"\"\" Loads a dataframe based on the path specified in the given args \"\"\"\n",
							"        if stage is None: stage = self.stage2p\n",
							"        path = f\"{stage}/{folder}/{table}\"\n",
							"        try:\n",
							"            df = spark.read.load(f\"{stage}/{folder}/{table}\", format=data_format)\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(\"Failed to load. Are you sure you have the right path?\\nMore info below:\\n\" + str(e)) \n",
							"\n",
							"    def load_csv(self, path, header=True):\n",
							"        \"\"\" Loads a dataframe based on the path specified \n",
							"            eg, df = load_csv('stage1np/example/student/*')\n",
							"        \"\"\"\n",
							"        url_path = self.convert_path(path)\n",
							"        try:\n",
							"            df = spark.read.load(url_path, format='csv', header=header)\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(f\"Failed to load from: {url_path}. Are you sure you have the right path?\\nMore info below:\\n\" + str(e))\n",
							"\n",
							"    def load_delta(self, path):\n",
							"        \"\"\" Loads a dataframe based on the path specified \n",
							"            eg, df = load_delta('stage2np/example/student/*')\n",
							"        \"\"\"\n",
							"        url_path = self.convert_path(path)\n",
							"        try:\n",
							"            df = spark.read.load(url_path, format='delta')\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(f\"Failed to load from: {url_path}. Are you sure you have the right path?\\nMore info below:\\n\" + str(e))\n",
							"\n",
							"    def load_from_stage1(self, path_and_filename, data_format='csv', header=True):\n",
							"        \"\"\" Loads a dataframe with data from stage1, based on the path specified in the given args \"\"\"\n",
							"        path = f\"{self.stage1np}/{path_and_filename}\"\n",
							"        df = spark.read.load(path, format=data_format, header=header)\n",
							"        return df        \n",
							"\n",
							"    def load_sample_from_csv_file(self, path_and_filename, header=True, stage=None):\n",
							"        \"\"\" Loads a sample from the specified csv file and returns a pandas dataframe.\n",
							"            Ex: print(load_sample_from_csv_file('/student_data/students.csv'))\n",
							"        \"\"\"\n",
							"        if stage is None: stage = self.stage1np\n",
							"        csv_str = mssparkutils.fs.head(f\"{stage}/{path_and_filename}\") # https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python#preview-file-content\n",
							"        complete_lines = re.match(r\".*\\n\", csv_str, re.DOTALL).group(0)\n",
							"        if header: header = 0 # for info on why this is needed: https://pandas.pydata.org/pandas-docs/dev/reference/api/pandas.read_csv.html\n",
							"        else: header = None\n",
							"        pdf = pd.read_csv(io.StringIO(complete_lines), sep=',', header=header)\n",
							"        return pdf\n",
							"\n",
							"    def print_stage(self, path):\n",
							"        \"\"\" Prints out the highlevel contents of the specified stage.\"\"\"\n",
							"        msg = path + \"\\n\"\n",
							"        folders = self.get_folders(path)\n",
							"        for folder_name in folders:\n",
							"            entities = self.get_folders(path + '/' + folder_name)\n",
							"            msg += f\"{folder_name}: {entities}\\n\"\n",
							"        print(msg)            \n",
							"\n",
							"    def fix_column_names(self, df):\n",
							"        \"\"\" Fix column names to satisfy the Parquet naming requirements by substituting invalid characters with an underscore. \"\"\"\n",
							"        df_with_valid_column_names = df.select([F.col(col).alias(re.sub(\"[ ,;{}()\\n\\t=]+\", \"_\", col)) for col in df.columns])\n",
							"        return df_with_valid_column_names\n",
							"\n",
							"    def to_spark_schema(self, schema):#: list[list[str]]):\n",
							"        \"\"\" Creates a spark schema from a schema specified in the OEA schema format. \n",
							"            Example:\n",
							"            schemas['Person'] = [['Id','string','hash'],\n",
							"                                    ['CreateDate','timestamp','no-op'],\n",
							"                                    ['LastModifiedDate','timestamp','no-op']]\n",
							"            to_spark_schema(schemas['Person'])\n",
							"        \"\"\"\n",
							"        fields = []\n",
							"        for col_name, dtype, op in schema:\n",
							"            fields.append(StructField(col_name, globals()[dtype.lower().capitalize() + \"Type\"](), True))\n",
							"        spark_schema = StructType(fields)\n",
							"        return spark_schema\n",
							"\n",
							"    def ingest_incremental_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes incremental batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing incremental data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.readStream.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        #df = spark.read.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        #display(df)\n",
							"        #df = df.withColumn('batchdate', F.to_timestamp(df.batchdate, \"yyyy-MM-dd'T'HHmmssZ\"))\n",
							"        df = df.dropDuplicates([primary_key]) # drop duplicates across batches. More info: https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#streaming-deduplication\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:        \n",
							"            query = df_pseudo.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", source_path + '/_checkpoints/incremental_p').partitionBy(partition_by)\n",
							"            query = query.start(p_destination_path)\n",
							"            query.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"            logger.info(query.lastProgress)\n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            query2 = df_lookup.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", source_path + '/_checkpoints/incremental_np').partitionBy(partition_by)\n",
							"            query2 = query2.start(np_destination_path)\n",
							"            query2.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"            logger.info(query2.lastProgress)        \n",
							"\n",
							"    def _merge_into_table(self, df, destination_path, checkpoints_path, condition):\n",
							"        \"\"\" Merges data from the given dataframe into the delta table at the specified destination_path, based on the given condition.\n",
							"            If not delta table exists at the specified destination_path, a new delta table is created and the data from the given dataframe is inserted.\n",
							"            eg, merge_into_table(df_lookup, np_destination_path, source_path + '/_checkpoints/delta_np', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"        \"\"\"\n",
							"        if DeltaTable.isDeltaTable(spark, destination_path):      \n",
							"            dt = DeltaTable.forPath(spark, destination_path)\n",
							"            def upsert(batch_df, batchId):\n",
							"                dt.alias(\"current\").merge(batch_df.alias(\"updates\"), condition).whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()                \n",
							"            query = df.writeStream.format(\"delta\").foreachBatch(upsert).outputMode(\"update\").trigger(once=True).option(\"checkpointLocation\", checkpoints_path)\n",
							"        else:\n",
							"            logger.info(f'Delta table does not yet exist at {destination_path} - creating one now and inserting initial data.')\n",
							"            query = df.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", checkpoints_path)\n",
							"        query = query.start(destination_path)\n",
							"        query.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"        logger.info(query.lastProgress)    \n",
							"\n",
							"    def ingest_delta_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes delta batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing delta data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.readStream.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:\n",
							"            self._merge_into_table(df_pseudo, p_destination_path, source_path + '/_checkpoints/delta_p', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            self._merge_into_table(df_lookup, np_destination_path, source_path + '/_checkpoints/delta_np', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"\n",
							"    def ingest_snapshot_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes snapshot batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        latest_batch = self.get_latest_folder(source_path)\n",
							"        source_path = source_path + '/' + latest_batch\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing snapshot data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.read.load(source_path, format=data_format, header=header_flag, schema=spark_schema)\n",
							"        df = df.dropDuplicates([primary_key]) # More info: https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#streaming-deduplication\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:\n",
							"            df_pseudo.write.save(p_destination_path, format='delta', mode='overwrite', partitionBy=partition_by) \n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            df_lookup.write.save(np_destination_path, format='delta', mode='overwrite', partitionBy=partition_by) \n",
							"\n",
							"    def pseudonymize(self, df, schema): #: list[list[str]]):\n",
							"        \"\"\" Performs pseudonymization of the given dataframe based on the provided schema.\n",
							"            For example, if the given df is for an entity called person, \n",
							"            2 dataframes will be returned, one called person that has hashed ids and masked fields, \n",
							"            and one called person_lookup that contains the original person_id, person_id_pseudo,\n",
							"            and the non-masked values for columns marked to be masked.\"\"\"\n",
							"        \n",
							"        df_pseudo = df_lookup = df\n",
							"\n",
							"        for col_name, dtype, op in schema:\n",
							"            if op == \"hash-no-lookup\" or op == \"hnl\":\n",
							"                # This means that the lookup can be performed against a different table so no lookup is needed.\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256)).withColumnRenamed(col_name, col_name + \"_pseudonym\")\n",
							"                df_lookup = df_lookup.drop(col_name)           \n",
							"            elif op == \"hash\" or op == 'h':\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256)).withColumnRenamed(col_name, col_name + \"_pseudonym\")\n",
							"                df_lookup = df_lookup.withColumn(col_name + \"_pseudonym\", F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256))\n",
							"            elif op == \"mask\" or op == 'm':\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.lit('*'))\n",
							"            elif op == \"partition-by\":\n",
							"                pass # make no changes for this column so that it will be in both dataframes and can be used for partitioning\n",
							"            elif op == \"no-op\" or op == 'x':\n",
							"                df_lookup = df_lookup.drop(col_name)\n",
							"\n",
							"        df_pseudo = self.fix_column_names(df_pseudo)\n",
							"        df_lookup = self.fix_column_names(df_lookup)\n",
							"\n",
							"        return (df_pseudo, df_lookup)\n",
							"\n",
							"    # Returns true if the path exists\n",
							"    def path_exists(self, path):\n",
							"        tableExists = False\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            tableExists = True\n",
							"        except Exception as e:\n",
							"            # This Exception comes as a generic Py4JJavaError that occurs when the path specified is not found.\n",
							"            pass\n",
							"        return tableExists\n",
							"\n",
							"    def ls(self, path):\n",
							"        if not path.startswith(\"abfss:\"):\n",
							"            path = self.convert_path(path)\n",
							"        folders = []\n",
							"        files = []\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            for item in items:\n",
							"                if item.isFile:\n",
							"                    files.append(item.name)\n",
							"                elif item.isDir:\n",
							"                    folders.append(item.name)\n",
							"        except Exception as e:\n",
							"            logger.warning(\"[OEA] Could not peform ls on specified path: \" + path + \"\\nThis may be because the path does not exist.\")\n",
							"        return (folders, files)\n",
							"\n",
							"    def print_stage(self, path):\n",
							"        print(path)\n",
							"        folders = self.get_folders(path)\n",
							"        for folder_name in folders:\n",
							"            entities = self.get_folders(path + '/' + folder_name)\n",
							"            print(f\"{folder_name}: {entities}\")\n",
							"\n",
							"    # Return the list of folders found in the given path.\n",
							"    def get_folders(self, path):\n",
							"        dirs = []\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            for item in items:\n",
							"                #print(item.name, item.isDir, item.isFile, item.path, item.size)\n",
							"                if item.isDir:\n",
							"                    dirs.append(item.name)\n",
							"        except Exception as e:\n",
							"            logger.warning(\"[OEA] Could not get list of folders in specified path: \" + path + \"\\nThis may be because the path does not exist.\")\n",
							"        return dirs\n",
							"\n",
							"    def get_latest_folder(self, path):\n",
							"        folders = self.get_folders(path)\n",
							"        if len(folders) > 0: return folders[-1]\n",
							"        else: return None\n",
							"\n",
							"    # Remove a folder if it exists (defaults to use of recursive removal).\n",
							"    def rm_if_exists(self, path, recursive_remove=True):\n",
							"        try:\n",
							"            mssparkutils.fs.rm(path, recursive_remove)\n",
							"        except Exception as e:\n",
							"            pass\n",
							"\n",
							"    def pop_from_path(self, path):\n",
							"        \"\"\" Pops the last arg in a path and returns the path and the last arg as a tuple.\n",
							"            pop_from_path('abfss://stage2@xyz.dfs.core.windows.net/ms_insights/test.csv') # returns ('abfss://stage2@xyz.dfs.core.windows.net/ms_insights', 'test.csv')\n",
							"        \"\"\"\n",
							"        m = re.match(r\"(.*)\\/([^/]+)\", path)\n",
							"        return (m.group(1), m.group(2))\n",
							"\n",
							"    def parse_source_path(self, path):\n",
							"        \"\"\" Parses a path that looks like this: abfss://stage2p@stoeacisd3ggimpl3.dfs.core.windows.net/ms_insights\n",
							"            and returns a dictionary like this: {'stage_num': '2', 'ss': 'ms_insights'}\n",
							"            Note that it will also return a 'stage_num' of 2 if the path is stage2p or stage2np - this is by design because the spark db with the s2 prefix will be used for data in stage2 and stage2p.\n",
							"        \"\"\"\n",
							"        m = re.match(r\".*:\\/\\/stage(?P<stage_num>\\d+)[n]?[p]?@[^/]+\\/(?P<ss>[^/]+)\", path)\n",
							"        return m.groupdict()\n",
							"    \n",
							"    def create_lake_db(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Creates a spark db that points to data in the given stage under the specified source directory (assumes that every folder in the source_dir is a table).\n",
							"            Example: create_lake_db(2, 'contoso_sis')\n",
							"            Note that a spark db that points to source data in the delta format can't be queried via SQL serverless pool. More info here: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql/resources-self-help-sql-on-demand#delta-lake\n",
							"        \"\"\"\n",
							"        db_name = f's{stage_num}_{source_dir}'\n",
							"        spark.sql(f'CREATE DATABASE IF NOT EXISTS {db_name}')\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}np', source_dir), source_format)\n",
							"        result = \"Database created: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result       \n",
							"\n",
							"    def create_lake_db_nohashing(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Creates the lake db as above but ingores the np folder (for no hashing) \"\"\"\n",
							"        \n",
							"        db_name = f's{stage_num}_{source_dir}'\n",
							"        spark.sql(f'CREATE DATABASE IF NOT EXISTS {db_name}')\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        result = \"Database created: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result        \n",
							"\n",
							"    def create_lake_views(self, db_name, source_path, source_format):\n",
							"        dirs = self.get_folders(source_path)\n",
							"        for table_name in dirs:\n",
							"            spark.sql(f\"create table if not exists {db_name}.{table_name} using {source_format} location '{source_path}/{table_name}'\")\n",
							"\n",
							"    def drop_lake_db(self, db_name):\n",
							"        spark.sql(f'DROP DATABASE IF EXISTS {db_name} CASCADE')\n",
							"        result = \"Database dropped: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result       \n",
							"\n",
							"    def create_sql_db(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Prints out the sql script needed for creating a sql serverless db and set of views. \"\"\"\n",
							"        db_name = f'sqls{stage_num}_{source_dir}'\n",
							"        cmd += '-- Create a new sql script then execute the following in it:'\n",
							"        cmd += f\"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '{db_name}')\\nBEGIN\\n  CREATE DATABASE {db_name};\\nEND;\\nGO\\n\"\n",
							"        cmd += f\"USE {db_name};\\nGO\\n\\n\"\n",
							"        cmd += self.create_sql_views(self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        cmd += self.create_sql_views(self.path(f'stage{stage_num}np', source_dir), source_format)\n",
							"        print(cmd)\n",
							"\n",
							"    def create_sql_views(self, source_path, source_format):\n",
							"        cmd = ''      \n",
							"        dirs = self.get_folders(source_path)\n",
							"        for table_name in dirs:\n",
							"            cmd += f\"CREATE OR ALTER VIEW {table_name} AS\\n  SELECT * FROM OPENROWSET(BULK '{source_path}/{table_name}', FORMAT='{source_format}') AS [r];\\nGO\\n\"\n",
							"        return cmd\n",
							"\n",
							"    def drop_sql_db(self, db_name):\n",
							"        print('Click on the menu next to the SQL db and select \"Delete\"')\n",
							"\n",
							"    # List installed packages\n",
							"    def list_packages(self):\n",
							"        import pkg_resources\n",
							"        for d in pkg_resources.working_set:\n",
							"            print(d)\n",
							"\n",
							"    def print_schema_starter(self, entity_name, df):\n",
							"        \"\"\" Prints a starter schema that can be modified as needed when developing the oea schema for a new module. \"\"\"\n",
							"        st = f\"self.schemas['{entity_name}'] = [\"\n",
							"        for col in df.schema:\n",
							"            st += f\"['{col.name}', '{str(col.dataType)[:-4].lower()}', 'no-op'],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\"\n",
							"        return st[:-11] + ']'\n",
							"\n",
							"    def write_rows_as_csv(data, folder, filename, container=None):\n",
							"        \"\"\" Writes a dictionary as a csv to the specified location. This is helpful when creating test data sets and landing them in stage1np.\n",
							"            data = [{'id':'1','fname':'John'}, {'id':'1','fname':'Jane'}]\n",
							"        \"\"\"\n",
							"        if container == None: container = self.stage1np\n",
							"        pdf = pd.DataFrame(data)\n",
							"        mssparkutils.fs.put(f\"{container}/{folder}/{filename}\", pdf.to_csv(index=False), True) # True indicates overwrite mode  \n",
							"\n",
							"    def write_rowset_as_csv(data, folder, container=None):\n",
							"        \"\"\" Writes out as csv rows the passed in data. The inbound data should be in a format like this:\n",
							"            data = { 'students':[{'id':'1','fname':'John'}], 'courses':[{'id':'31', 'name':'Math'}] }\n",
							"        \"\"\"\n",
							"        if container == None: container = self.stage1np\n",
							"        for entity_name, value in data.items():\n",
							"            pdf = pd.DataFrame(value)\n",
							"            mssparkutils.fs.put(f\"{container}/{folder}/{entity_name}.csv\", pdf.to_csv(index=False), True) # True indicates overwrite mode         \n",
							"\n",
							"    def create_empty_dataframe(self, schema):\n",
							"        \"\"\" Creates an empty dataframe based on the given schema which is specified as an array of column names and sql types.\n",
							"            eg, schema = [['data_source','string'], ['entity','string'], ['watermark','timestamp']]\n",
							"        \"\"\"\n",
							"        fields = []\n",
							"        for col_name, col_type in schema:\n",
							"            fields.append(StructField(col_name, globals()[col_type.lower().capitalize() + \"Type\"](), True))\n",
							"        spark_schema = StructType(fields)\n",
							"        df = spark.createDataFrame(spark.sparkContext.emptyRDD(), spark_schema)\n",
							"        return df\n",
							"\n",
							"    def delete_data_source(self, data_source):\n",
							"        self.rm_if_exists(self.convert_path(f'stage1np/{data_source}'))\n",
							"        self.rm_if_exists(self.convert_path(f'stage2np/{data_source}'))\n",
							"        self.rm_if_exists(self.convert_path(f'stage2p/{data_source}'))\n",
							"\n",
							"class BaseOEAModule:\n",
							"    \"\"\" Provides data processing methods for Contoso SIS data (the student information system for the fictional Contoso school district).  \"\"\"\n",
							"    def __init__(self, source_folder, pseudonymize = True):\n",
							"        self.source_folder = source_folder\n",
							"        self.pseudonymize = pseudonymize\n",
							"        self.stage1np = f\"{oea.stage1np}/{source_folder}\"\n",
							"        self.stage2np = f\"{oea.stage2np}/{source_folder}\"\n",
							"        self.stage2p = f\"{oea.stage2p}/{source_folder}\"\n",
							"        self.stage3np = f\"{oea.stage3np}/{source_folder}\"\n",
							"        self.stage3p = f\"{oea.stage3p}/{source_folder}\"\n",
							"        self.module_path = f\"{oea.framework_path}/modules/{source_folder}\"\n",
							"        self.schemas = {}\n",
							"\n",
							"    def _process_entity_from_stage1(self, path, entity_name, format='csv', write_mode='overwrite', header='true'):\n",
							"        spark_schema = oea.to_spark_schema(self.schemas[entity_name])\n",
							"        df = spark.read.format(format).load(f\"{self.stage1np}/{path}/{entity_name}\", header=header, schema=spark_schema)\n",
							"\n",
							"        if self.pseudonymize:\n",
							"            df_pseudo, df_lookup = oea.pseudonymize(df, self.schemas[entity_name])\n",
							"            df_pseudo.write.format('delta').mode(write_mode).save(f\"{self.stage2p}/{entity_name}\")\n",
							"            if len(df_lookup.columns) > 0:\n",
							"                df_lookup.write.format('delta').mode(write_mode).save(f\"{self.stage2np}/{entity_name}_lookup\")\n",
							"        else:\n",
							"            df = oea.fix_column_names(df)   \n",
							"            df.write.format('delta').mode(write_mode).save(f\"{self.stage2np}/{entity_name}\")\n",
							"\n",
							"    def delete_stage1(self):\n",
							"        oea.rm_if_exists(self.stage1np)\n",
							"\n",
							"    def delete_stage2(self):\n",
							"        oea.rm_if_exists(self.stage2np)\n",
							"        oea.rm_if_exists(self.stage2p)\n",
							"\n",
							"    def delete_stage3(self):\n",
							"        oea.rm_if_exists(self.stage3np)\n",
							"        oea.rm_if_exists(self.stage3p)                \n",
							"\n",
							"    def delete_all_stages(self):\n",
							"        self.delete_stage1()\n",
							"        self.delete_stage2()\n",
							"        self.delete_stage3()\n",
							"\n",
							"    def create_stage2_lake_db(self, format='DELTA'):\n",
							"        oea.create_lake_db(self.stage2p, format)\n",
							"        oea.create_lake_db(self.stage2np, format)\n",
							"\n",
							"    def create_stage3_lake_db(self, format='DELTA'):\n",
							"        oea.create_lake_db(self.stage3p, format)\n",
							"        oea.create_lake_db(self.stage3np, format)\n",
							"\n",
							"    def copy_test_data_to_stage1(self):\n",
							"        mssparkutils.fs.cp(self.module_path + '/test_data', self.stage1np, True)   \n",
							"\n",
							"class DataLakeWriter:\n",
							"    def __init__(self, root_destination):\n",
							"        self.root_destination = root_destination\n",
							"\n",
							"    def write(self, path_and_filename, data_str, format='csv'):\n",
							"        mssparkutils.fs.append(f\"{self.root_destination}/{path_and_filename}\", data_str, True) # Set the last parameter as True to create the file if it does not exist\n",
							"\n",
							"oea = OEA()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PySpark_Transforms')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a571b479-99c6-4990-b83c-bee2412959b0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## This note book contains data transformations using Python (PySpark)\r\n",
							"\r\n",
							"This notebook should not be run on its own, rather it is run as part of the Transforms_Connector notebook"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Load all required libraries"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import when, col, sum, percent_rank, substring, trim, regexp_replace, length, lower, concat, concat_ws, lit, avg, stddev, upper, mean, to_date, split, date_format, max, coalesce, expr\r\n",
							"from pyspark.sql import Row\r\n",
							"from pyspark.sql.window import Window\r\n",
							"import databricks.koalas as ks"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Antares_py"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"source_p = oea.stage2p \r\n",
							"source_np = oea.stage2np\r\n",
							"\r\n",
							"# stage3 locations defined in OEA\r\n",
							"destination_p = oea.stage3p\r\n",
							"destination_np = oea.stage3np\r\n",
							"\r\n",
							"# stage3 version (eg. pilot)\r\n",
							"version = 'pilot'"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Load all tables from stage 2 and stage 3"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# source tables from Stage2\r\n",
							"DMPersonDemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"EYAnswers_df = spark.read.load(sourcep + \"/EarlyYearsAnswers/EarlyYearsAnswers_pseudo\", format='delta')\r\n",
							"#EarlyYearsSubTeachers_df = spark.read.load(sourcep + \"/EarlyYearsSubTeachers/EarlyYearsSubTeachers_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# source tables from Stage3\r\n",
							"# General Tables\r\n",
							"CompassODSStudentDemoFull = spark.read.load(source3p + \"/pilot/CompassODSStudentDemographicFull_pseudo\", format='delta')\r\n",
							"\r\n",
							"# Early Years\r\n",
							"#EarlyYearsResultsWide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResults_pseudo\", format='delta')\r\n",
							"#EYResultsYear2Wide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResultsYear2_pseudo\", format='delta')\r\n",
							"\r\n",
							"EarlyYearsStudents_df = spark.read.load(source3p + \"/pilot/_FACTODSEarlyYearsStudents\", format='delta')\r\n",
							"\r\n",
							"EarlyYearsStudents_ClassIDCleaned_df = spark.read.load(source3p + \"/pilot/_FACTODSEarlyYearsStudents_ClassIDCleaned\", format='delta')\r\n",
							"\r\n",
							"EarlyYearsResultsYear2_df = spark.read.load(source3p + \"/pilot/_FACTEarlyYearsResultsYear2\", format='delta')\r\n",
							"\r\n",
							"EarlyYearsResults_df = spark.read.load(source3p + \"/pilot/_FACTEarlyYearsResults\", format='delta')\r\n",
							"\r\n",
							"#Senior Outcomes\r\n",
							"SeniorOutcomes_df = spark.read.load(source3p + \"/pilot/StudentLevel_pseudo\", format='delta')\r\n",
							"\r\n",
							"# For Correlation visual \r\n",
							"#NAPLAN\r\n",
							"naplanonlinestudenttest_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANOnlineStudentTestResult_pseudo\", format='delta')\r\n",
							"naplanonlinestudentresult_df = spark.read.load(source3p + \"/pilot/DMNAPLANOnlineStudentResult_pseudo\", format='delta')\r\n",
							"naplantest_df = spark.read.load(source3p + \"/pilot/DMNAPLANTest_pseudo\", format='delta')\r\n",
							"\r\n",
							"DIMNAPLANCombinedResultsLatestStudentsActive_df = spark.read.load(source3p + \"/pilot/_DIMNAPLANCombinedResultsLatestStudentsActive\", format='delta')\r\n",
							"\r\n",
							"#ACER\r\n",
							"patresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"pattest_df = spark.read.load(source3p + \"/pilot/DMPATTest_pseudo\", format='delta')\r\n",
							"acerstudent_df = spark.read.load(source3p + \"/pilot/DMACERStudent_pseudo\", format='delta')\r\n",
							"ACERNorms_df = spark.read.load(sourcep + \"/ACERNorms/ACERNorms_pseudo\", format='delta')\r\n",
							"\r\n",
							"#AE\r\n",
							"aeresults_df = spark.read.load(source3p + \"/pilot/AEResultsCombined_pseudo\", format='delta')\r\n",
							"\r\n",
							"#Active Students\r\n",
							"activestudents_df = spark.read.load(source3p + \"/pilot/_FACTActiveStudent\", format='delta')"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### GET latest AE Results"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"activeae_df = activestudents_df.join(aeresults_df, [col('GovtCode1') == col('Ceider')], how='left')\r\n",
							"\r\n",
							"aelatest_df = activeae_df.groupby('Subject', 'GovtCode1').agg(max('YearSemesterValue').alias('YearSemesterValue'))\r\n",
							"\r\n",
							"# join back to the original table to get results\r\n",
							"finalae_df = aelatest_df.join(activeae_df, on=['Subject', 'GovtCode1', 'YearSemesterValue'], how='left')\r\n",
							"\r\n",
							"finalae_df = finalae_df.select('Subject', 'Ceider', 'Result', 'SKYearLevel', 'YearSemesterDescription')"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### GET Latest ACER Results"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# join the active students with the acer student table\r\n",
							"activeacer_df = activestudents_df.join(acerstudent_df, [col('Ceider') == col('PersistentStudentId')], how='left')\r\n",
							"\r\n",
							"active_patresults_df = activeacer_df.join(patresults_df, on='SKACERStudent', how='inner')\r\n",
							"\r\n",
							"# join the PATTest table (PAT Test types) so we can group the results into the 2 main categories (Maths / Reading)\r\n",
							"test_groups_df = active_patresults_df.join(pattest_df, on='SKPATTest', how='inner') #inner join to take only valid tests \r\n",
							"\r\n",
							"display(test_groups_df)\r\n",
							"\r\n",
							"acerlatest_df = test_groups_df.groupby('SummaryGroups', 'Ceider').agg(max('SKYear').alias('SKYear'))\r\n",
							"\r\n",
							"# remove the 'other' category (we only needs maths and reading)\r\n",
							"acerlatest_reduced_df = acerlatest_df.filter(acerlatest_df.SummaryGroups != \"Other\")\r\n",
							"\r\n",
							"# also get the previous result..\r\n",
							"# to do that, we take away the latest results from the whole set then calculate the latest results from the remainder \r\n",
							"\r\n",
							"previous_df = test_groups_df.join(acerlatest_df, on=['SummaryGroups', 'Ceider', 'SKYear'], how='left_anti')\r\n",
							"\r\n",
							"acerprevious_df = previous_df.groupby('SummaryGroups', 'Ceider').agg(max('SKYear').alias('SKYear'))\r\n",
							"\r\n",
							"# again remove the 'other' category as we only want math and reading\r\n",
							"acerprevious_reduced_df = acerprevious_df.filter(acerprevious_df.SummaryGroups != \"Other\")\r\n",
							"\r\n",
							"# join the results tables back to original table \r\n",
							"finalpat_df = acerlatest_df.join(test_groups_df, on=['SummaryGroups', 'Ceider', 'SKYear'], how='left')\r\n",
							"previous_finalpat_df = acerprevious_df.join(test_groups_df, on=['SummaryGroups', 'Ceider', 'SKYear'], how='left')\r\n",
							"\r\n",
							"# remove \"Other\" category\r\n",
							"finalpat_df = finalpat_df.filter(finalpat_df.SummaryGroups != \"Other\")\r\n",
							"previous_finalpat_df = previous_finalpat_df.filter(previous_finalpat_df.SummaryGroups != \"Other\")\r\n",
							"\r\n",
							"# get the previous score, norm and stddev \r\n",
							"previous_finalpat_df = previous_finalpat_df.select('SKPATTest', 'SummaryGroups', 'Ceider', col('ScaleScore').alias('PrevScaleScore'), col('NORMMeanScaledScore').alias('PrevNORMMeanScaledScore'), col('NORMStandardDeviation').alias('PrevNORMStandardDeviation'))\r\n",
							"\r\n",
							"# join with the manual acer norms uploaded data (at the moment this only replaces 2022 data norm and stddev data)\r\n",
							"newnorms_df = finalpat_df.join(ACERNorms_df, on=['SKPATTest', 'SKYear', 'SKYearLevel'], how='left')\r\n",
							"\r\n",
							"# replace the existing columns values for Norm and Standard deviation \r\n",
							"replaced_df = newnorms_df.withColumn('newNorm', coalesce(ACERNorms_df['MeanScore'], finalpat_df['NORMMeanScaledScore'] )) \\\r\n",
							"                            .withColumn('newStdDev', coalesce(ACERNorms_df['StdDev'], finalpat_df['NORMStandardDeviation'] ))\r\n",
							"\r\n",
							"# join the previous score values to the latest \r\n",
							"combined_df = replaced_df.join(previous_finalpat_df, on=['SummaryGroups', 'Ceider'], how='left')\r\n",
							"\r\n",
							"finalpat_df = combined_df.select(finalpat_df['SummaryGroups'], finalpat_df['SKPATTest'], 'Ceider', col('SKYear').alias('ACERSKYear'), 'PrevScaleScore', 'ScaleScore', 'Stanine', col('newNorm').alias('ACERNormScore'), col('newStdDev').alias('ACERNORMStandardDeviation'))\r\n",
							"\r\n",
							"#display(finalpat_df)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### GET Latest NAPLAN Results (REMOVE)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# join the active students with the naplan student results\r\n",
							"activenaplan_df = activestudents_df.join(naplanonlinestudentresult_df, [col('Ceider') == col('PersistentIdentifier')], how='left')\r\n",
							"\r\n",
							"# now join to the test result\r\n",
							"active_naplanresults_df = activenaplan_df.join(naplanonlinestudenttest_df, on='SKNAPLANOnlineStudentResult', how='inner')\r\n",
							"\r\n",
							"naplanlatest_df = active_naplanresults_df.groupby('SKNaplanAssessmentId', 'Ceider').agg(max('SKYear').alias('SKYear'))\r\n",
							"\r\n",
							"# join groupings back to the original table\r\n",
							"finalnaplan_df = naplanlatest_df.join(active_naplanresults_df, on=['SKNaplanAssessmentId', 'Ceider', 'SKYear'], how='left')\r\n",
							"\r\n",
							"#finalnaplan_df = finalnaplan_df.select('SKNAPLANTest', 'Ceider', col('SKYear').alias('NaplanSKYear'), 'ScaledScoreValue', col('DomainNationalAverage').alias('NAPLANDomainNationalAverage'))\r\n",
							"\r\n",
							"#finalnaplan_df = finalnaplan_df.select('SKNaplanAssessmentId', 'Ceider', col('SKYear').alias('NaplanSKYear'), 'NaplanScaledScoreValue', col('DomainNationalAverage').alias('NAPLANDomainNationalAverage'))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Combine all results"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# join acer and naplan tables\r\n",
							"naplanacer_df = DIMNAPLANCombinedResultsLatestStudentsActive_df.join(finalpat_df, on='Ceider', how='inner')\r\n",
							"\r\n",
							"# join AE to table\r\n",
							"combinedresults_df = naplanacer_df.join(finalae_df, on='Ceider', how='inner')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Split the DMPersonDemographic into DMStudentDemographic and DMStaffDemographic"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Clean up the table and remove null and unnecessary columns\r\n",
							"\r\n",
							"df = DMPersonDemographic_df.filter(DMPersonDemographic_df.Ceider != -1) \\\r\n",
							"                .drop(\"UsualTransport\") \\\r\n",
							"                .drop(\"ContactNotesBH\") \\\r\n",
							"                .drop(\"ContactNotesAH\") \\\r\n",
							"                .drop(\"OrganisationUserId\") \\\r\n",
							"                .drop(\"ProgramCode\") \\\r\n",
							"                .drop(\"Disability_YN\") \\\r\n",
							"                .drop(\"DisabilityFundedInt\") \\\r\n",
							"                .drop(\"ReceivesESL_YN\") \\\r\n",
							"                .drop(\"ReceivesESLInt\") \\\r\n",
							"                .drop(\"RequiresESL_YN\") \\\r\n",
							"                .drop(\"RequresESLInt\") \\\r\n",
							"                .drop(\"LBOTE_YN\") \\\r\n",
							"                .drop(\"LBOTEInt\") \\\r\n",
							"                .drop(\"AccessRestrictions_YN\")\r\n",
							"\r\n",
							"cleaned_df = df.withColumn(\"ATSIId\", when(df.ATSIId > 4, 4).when(df.ATSIId < 1, 4).otherwise(df.ATSIId))\r\n",
							"\r\n",
							"# now split the demographic information into two tables \r\n",
							"DMStudentDemographic_df = cleaned_df.filter((cleaned_df.PersonType == \"Student\"))\r\n",
							"DMStaffDemographic_df = cleaned_df.filter((cleaned_df.PersonType == \"Staff\"))\r\n",
							"\r\n",
							"# clean up the data of birth column\r\n",
							"DMStudentDemographic_df = DMStudentDemographic_df.withColumn(\"DOB_YearFirstFormat\", to_date(col(\"DateOfBirth\")))\r\n",
							"\r\n",
							"DMStudentDemographic_df = DMStudentDemographic_df.withColumn(\"DOB\", date_format(\"DOB_YearFirstFormat\", \"dd/MM/yyyy\"))\r\n",
							"\r\n",
							"# create a SK ID column \r\n",
							"DMStudentDemographic_df = DMStudentDemographic_df.withColumn(\"SKLongID\", upper(concat_ws(\"-\", split(\"LastName\", \" \").getItem(0), split(\"FirstName\", \" \").getItem(0), \"DOB\")))\r\n",
							"\r\n",
							"# remove columns we don't need\r\n",
							"DMStudentDemographic_df = DMStudentDemographic_df.drop(\"DOB_YearFirstFormat\", \"DOB\")"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Create a duplicate student table based on the sklongid from CompassODSStudentDemographics\r\n",
							"# this is to be used in the exceptions report\r\n",
							"\r\n",
							"not_duplicate = CompassODSStudentDemoFull.groupBy(\"SKLongID\").count().where('count = 1').drop('count')\r\n",
							"\r\n",
							"CompassODSStudentDemoFull_duplicates = CompassODSStudentDemoFull.join(not_duplicate, on='SKLongID', how='left_anti')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Clean up the classID's (Join to clean classID table)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# # remove the test rows from the year 2 data\r\n",
							"# EYResultsYear2Wide_df = EYResultsYear2Wide_df.filter(EYResultsYear2Wide_df.Ceider != 12345)\r\n",
							"# EYResultsYear2Wide_df = EYResultsYear2Wide_df.filter(EYResultsYear2Wide_df.Ceider != 111111)\r\n",
							"\r\n",
							"# # assign the correct class ID from the latest students list (Year 2)\r\n",
							"\r\n",
							"# EYResultsYear2_ClassUpdated_df = EYResultsYear2Wide_df.withColumnRenamed(\"Ceider\", \"xCeider\")\\\r\n",
							"#                                                         .withColumnRenamed(\"Year\", \"xYear\")\\\r\n",
							"#                                                         .withColumnRenamed(\"ClassID\", \"xClassID\")\r\n",
							"\r\n",
							"# EYResultsYear2_ClassUpdated_df = EYResultsYear2_ClassUpdated_df.join(EarlyYearsStudents_ClassIDCleaned_df,\r\n",
							"#                                                                             [col('Year') == col('xYear'),\r\n",
							"#                                                                                 col('Ceider') == col('xCeider')],\r\n",
							"#                                                                                 how='left'  #inner will also remove students that have sat the test but has since left the class/school \r\n",
							"#                                                                             )\r\n",
							"\r\n",
							"# EYResultsYear2_df = EYResultsYear2_ClassUpdated_df.drop(\"xCeider\").drop(\"xClassID\").drop(\"xYear\")"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# EYResultsYear2Wide_df = EYResultsYear2Wide_df.filter(EYResultsYear2Wide_df.Ceider != 12345)\r\n",
							"# EYResultsYear2Wide_df = EYResultsYear2Wide_df.filter(EYResultsYear2Wide_df.Ceider != 111111)\r\n",
							"\r\n",
							"# EYResultsYear2_ClassUpdated_df = EYResultsYear2Wide_df.join(EarlyYearsStudents_ClassIDCleaned_df, on=['Year', 'Ceider'], how='left')\r\n",
							"\r\n",
							"# EYResultsYear2_ClassUpdated_df = EYResultsYear2_ClassUpdated_df.select('Year', 'Ceider')"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# # assign the correct class ID based on the early years students list (Prep and Year 1)\r\n",
							"\r\n",
							"# EarlyYearsResults_ClassUpdated_df = EarlyYearsResultsWide_df.withColumnRenamed(\"Ceider\", \"xCeider\")\\\r\n",
							"#                                                         .withColumnRenamed(\"Year\", \"xYear\")\\\r\n",
							"#                                                         .withColumnRenamed(\"ClassID\", \"xClassID\")\r\n",
							"\r\n",
							"# EarlyYearsResults_ClassUpdated_df = EarlyYearsResults_ClassUpdated_df.join(EarlyYearsStudents_ClassIDCleaned_df,  \r\n",
							"#                                                                                 [col('Year') == col('xYear'),\r\n",
							"#                                                                                 col('Ceider') == col('xCeider')],\r\n",
							"#                                                                                 how='inner' # remove the students with unknown classes\r\n",
							"#                                                                             )\r\n",
							"\r\n",
							"# EarlyYearsResults_df = EarlyYearsResults_ClassUpdated_df.drop(\"xCeider\").drop(\"xClassID\").drop(\"xYear\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create test completion table for Prep and Year 1"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# filter out prep and year 1\r\n",
							"\r\n",
							"EarlyYearsStudents_Y1_P_df = EarlyYearsStudents_df.filter((EarlyYearsStudents_df.YearLevel == 'P') | (EarlyYearsStudents_df.YearLevel == '1'))\r\n",
							"\r\n",
							"# Seperate out the Pre and Post tests\r\n",
							"PreTest_df = EarlyYearsResults_df.select(col('Year').alias('xYear'), \r\n",
							"                                            col('CampusID').alias('xCampusID'), \r\n",
							"                                            col('Ceider').alias('xCeider'), \r\n",
							"                                            col('ClassID').alias('xClassID'), \r\n",
							"                                            col('YearLevel').alias('xYearLevel')\r\n",
							"                                        ).filter(col('TestLevel') == \"Pre\") \\\r\n",
							"                                        .withColumn('PreTestComplete', lit(\"1\"))\r\n",
							"\r\n",
							"\r\n",
							"PostTest_df = EarlyYearsResults_df.select(col('Year').alias('xYear'), \r\n",
							"                                            col('CampusID').alias('xCampusID'), \r\n",
							"                                            col('Ceider').alias('xCeider'), \r\n",
							"                                            col('ClassID').alias('xClassID'), \r\n",
							"                                            col('YearLevel').alias('xYearLevel')\r\n",
							"                                        ).filter(col('TestLevel') == \"Post\") \\\r\n",
							"                                        .withColumn('PostTestComplete', lit(\"1\"))\r\n",
							"\r\n",
							"# if the pre and post test dataframes are not empty then join them onto the student list \r\n",
							"if (not PreTest_df.rdd.isEmpty()):\r\n",
							"    EarlyYearsTestCompletion_df = EarlyYearsStudents_Y1_P_df.join(PreTest_df, \r\n",
							"                                                            [col('Year') == col('xYear'),\r\n",
							"                                                            col('CampusID') == col('xCampusID'),\r\n",
							"                                                            col('Ceider') == col('xCeider'),\r\n",
							"                                                            col('ClassID') == col('xClassID'),\r\n",
							"                                                            col('YearLevel') == col('xYearLevel')],\r\n",
							"                                                            how=\"left\"\r\n",
							"                                                            )\r\n",
							"\r\n",
							"    EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
							"\r\n",
							"else:\r\n",
							"    #if the pre tests are completely empty then assign false to pre test completion for every student \r\n",
							"    EarlyYearsTestCompletion_df = EarlyYearsStudents_Y1_P_df.withColumn(\"PreTestComplete\", lit(\"0\"))\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"if (not PostTest_df.rdd.isEmpty()):\r\n",
							"    EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.join(PostTest_df, \r\n",
							"                                                                    [col('Year') == col('xYear'),\r\n",
							"                                                                    col('CampusID') == col('xCampusID'),\r\n",
							"                                                                    col('Ceider') == col('xCeider'),\r\n",
							"                                                                    col('ClassID') == col('xClassID'),\r\n",
							"                                                                    col('YearLevel') == col('xYearLevel')],\r\n",
							"                                                                    how=\"left\"\r\n",
							"                                                                    )\r\n",
							"\r\n",
							"    EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
							"\r\n",
							"else:\r\n",
							"    #if the post tests are completely empty then assign false to post test completion for every student \r\n",
							"    EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn(\"PostTestComplete\", lit(\"0\"))\r\n",
							"\r\n",
							"# add columns to make this table compatible with the Year 2 table \r\n",
							"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn('PreTestNumeracyComplete', col('PreTestComplete'))\r\n",
							"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn('PreTestLiteracyComplete', col('PreTestComplete'))\r\n",
							"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn('PostTestNumeracyComplete', col('PostTestComplete'))\r\n",
							"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn('PostTestLiteracyComplete', col('PostTestComplete'))\r\n",
							"\r\n",
							"# sort the columns\r\n",
							"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.select(sorted(EarlyYearsTestCompletion_df.columns))"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create Test Completion table YEAR 2"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# filter out year 2\r\n",
							"\r\n",
							"EarlyYearsStudents_Y2_df = EarlyYearsStudents_df.filter((EarlyYearsStudents_df.YearLevel == '2'))\r\n",
							"\r\n",
							"# Seperate out the Pre/Post and Numeracy/Literacy tests\r\n",
							"PreTestNumeracy_df = EarlyYearsResultsYear2_df.select(col('Year').alias('xYear'), \r\n",
							"                                                col('CampusID').alias('xCampusID'), \r\n",
							"                                                col('Ceider').alias('xCeider'), \r\n",
							"                                                col('ClassID').alias('xClassID'), \r\n",
							"                                                col('YearLevel').alias('xYearLevel')\r\n",
							"                                                ).filter((col('TestLevel') == \"Pre\") & (col('QuestionType') == \"Numeracy\")) \\\r\n",
							"                                                .withColumn('PreTestNumeracyComplete', lit(\"1\"))\r\n",
							"\r\n",
							"\r\n",
							"PreTestLiteracy_df = EarlyYearsResultsYear2_df.select(col('Year').alias('xYear'), \r\n",
							"                                                col('CampusID').alias('xCampusID'), \r\n",
							"                                                col('Ceider').alias('xCeider'), \r\n",
							"                                                col('ClassID').alias('xClassID'), \r\n",
							"                                                col('YearLevel').alias('xYearLevel')\r\n",
							"                                                ).filter((col('TestLevel') == \"Pre\") & (col('QuestionType') == \"Literacy\")) \\\r\n",
							"                                                .withColumn('PreTestLiteracyComplete', lit(\"1\"))\r\n",
							"\r\n",
							"\r\n",
							"PostTestNumeracy_df = EarlyYearsResultsYear2_df.select(col('Year').alias('xYear'), \r\n",
							"                                                col('CampusID').alias('xCampusID'), \r\n",
							"                                                col('Ceider').alias('xCeider'), \r\n",
							"                                                col('ClassID').alias('xClassID'), \r\n",
							"                                                col('YearLevel').alias('xYearLevel')\r\n",
							"                                                ).filter((col('TestLevel') == \"Post\") & (col('QuestionType') == \"Numeracy\")) \\\r\n",
							"                                                .withColumn('PostTestNumeracyComplete', lit(\"1\"))\r\n",
							"\r\n",
							"\r\n",
							"PostTestLiteracy_df = EarlyYearsResultsYear2_df.select(col('Year').alias('xYear'), \r\n",
							"                                                col('CampusID').alias('xCampusID'), \r\n",
							"                                                col('Ceider').alias('xCeider'), \r\n",
							"                                                col('ClassID').alias('xClassID'), \r\n",
							"                                                col('YearLevel').alias('xYearLevel')\r\n",
							"                                                ).filter((col('TestLevel') == \"Post\") & (col('QuestionType') == \"Literacy\")) \\\r\n",
							"                                                .withColumn('PostTestLiteracyComplete', lit(\"1\"))\r\n",
							"\r\n",
							"\r\n",
							"if (not PreTestNumeracy_df.rdd.isEmpty()):\r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsStudents_Y2_df.join(PreTestNumeracy_df, \r\n",
							"                                                            [col('Year') == col('xYear'),\r\n",
							"                                                            col('CampusID') == col('xCampusID'),\r\n",
							"                                                            col('Ceider') == col('xCeider'),\r\n",
							"                                                            col('ClassID') == col('xClassID'),\r\n",
							"                                                            col('YearLevel') == col('xYearLevel')],\r\n",
							"                                                            how=\"left\"\r\n",
							"                                                            )\r\n",
							"\r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
							"\r\n",
							"else:\r\n",
							"    #if the pre tests are completely empty then assign false to pre test completion for every student \r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsStudents_Y2_df.withColumn(\"PreTestNumeracyComplete\", lit(\"0\"))\r\n",
							"\r\n",
							"\r\n",
							"if (not PreTestLiteracy_df.rdd.isEmpty()):\r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.join(PreTestLiteracy_df, \r\n",
							"                                                                    [col('Year') == col('xYear'),\r\n",
							"                                                                    col('CampusID') == col('xCampusID'),\r\n",
							"                                                                    col('Ceider') == col('xCeider'),\r\n",
							"                                                                    col('ClassID') == col('xClassID'),\r\n",
							"                                                                    col('YearLevel') == col('xYearLevel')],\r\n",
							"                                                                    how=\"left\"\r\n",
							"                                                                    )\r\n",
							"                                                            \r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
							"\r\n",
							"else:\r\n",
							"    #if the pre tests are completely empty then assign false to pre test completion for every student \r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn(\"PreTestLiteracyComplete\", lit(\"0\"))\r\n",
							"\r\n",
							"\r\n",
							"if (not PostTestNumeracy_df.rdd.isEmpty()):\r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.join(PostTestNumeracy_df, \r\n",
							"                                                                    [col('Year') == col('xYear'),\r\n",
							"                                                                    col('CampusID') == col('xCampusID'),\r\n",
							"                                                                    col('Ceider') == col('xCeider'),\r\n",
							"                                                                    col('ClassID') == col('xClassID'),\r\n",
							"                                                                    col('YearLevel') == col('xYearLevel')],\r\n",
							"                                                                    how=\"left\"\r\n",
							"                                                                    )\r\n",
							"                                                            \r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
							"\r\n",
							"else:\r\n",
							"    #if the Post tests are completely empty then assign false to Post test completion for every student \r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn(\"PostTestNumeracyComplete\", lit(\"0\"))\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"if (not PostTestLiteracy_df.rdd.isEmpty()):\r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.join(PostTestLiteracy_df, \r\n",
							"                                                                    [col('Year') == col('xYear'),\r\n",
							"                                                                    col('CampusID') == col('xCampusID'),\r\n",
							"                                                                    col('Ceider') == col('xCeider'),\r\n",
							"                                                                    col('ClassID') == col('xClassID'),\r\n",
							"                                                                    col('YearLevel') == col('xYearLevel')],\r\n",
							"                                                                    how=\"left\"\r\n",
							"                                                                    )\r\n",
							"                                                            \r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.drop('xYear', 'xCampusID', 'xCeider', 'xClassID', 'xYearLevel')\r\n",
							"\r\n",
							"else:\r\n",
							"    #if the Post tests are completely empty then assign false to Post test completion for every student \r\n",
							"    EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn(\"PostTestLiteracyComplete\", lit(\"0\"))\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn('PreTestComplete', when( ((col('PreTestNumeracyComplete') == \"1\") & \r\n",
							"                                                                                                    (col('PreTestLiteracyComplete') == \"1\")), lit(\"1\")).otherwise(lit(\"0\")) \r\n",
							"                                                                                                \r\n",
							"                                                                        )\r\n",
							"\r\n",
							"EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.withColumn('PostTestComplete', when( ((col('PostTestNumeracyComplete') == \"1\") & \r\n",
							"                                                                                                    (col('PostTestLiteracyComplete') == \"1\")), lit(\"1\")).otherwise(lit(\"0\")) \r\n",
							"                                                                                                \r\n",
							"                                                                        )\r\n",
							"\r\n",
							"# sort the columns\r\n",
							"EarlyYearsTestCompletion2_df = EarlyYearsTestCompletion2_df.select(sorted(EarlyYearsTestCompletion2_df.columns))"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# combine the prep/year1 test completion table with the year 2 table\r\n",
							"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.union(EarlyYearsTestCompletion2_df)"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create Results Totals tables (Prep and Year 1)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Create the early years transformations for aggregate pre/post test results\r\n",
							"\r\n",
							"EarlyYearsResultsTotals_df = EarlyYearsResults_df.groupBy(\"CampusID\", \"Ceider\",\t\"ClassID\", \"Year\", \"YearLevel\", \"TestLevel\").agg(sum(EarlyYearsResults_df.Ques1+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques2+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques3+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques4+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques5+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques6+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques7+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques8+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques9+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques10+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques11+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques12+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques13+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques14+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques15+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques16+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques17+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques18+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques19+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques20).alias(\"NumeracyTotal\"), \r\n",
							"                                                                                                                sum(EarlyYearsResults_df.Ques21+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques22+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques23+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques24+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques25+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques26+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques27+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques28+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques29+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques30+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques31+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques32+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques33+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques34+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques35+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques36+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques37+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques38+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques39+\r\n",
							"                                                                                                                EarlyYearsResults_df.Ques40).alias(\"LiteracyTotal\"))\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# add the percent rank based on year, yearlevel, testlevel and numeracy/literacy groups\r\n",
							"\r\n",
							"EarlyYearsResults_Numeracy_df = EarlyYearsResultsTotals_df.select(\"CampusID\", \r\n",
							"                                                                    \"Ceider\", \r\n",
							"                                                                    \"ClassID\", \r\n",
							"                                                                    \"Year\", \r\n",
							"                                                                    \"YearLevel\", \r\n",
							"                                                                    \"TestLevel\", \r\n",
							"                                                                    \"NumeracyTotal\", \r\n",
							"                                                                    \"LiteracyTotal\",\r\n",
							"                                                                    percent_rank().over(Window.partitionBy(EarlyYearsResultsTotals_df['Year'],\r\n",
							"                                                                                                            EarlyYearsResultsTotals_df['YearLevel'],\r\n",
							"                                                                                                            EarlyYearsResultsTotals_df['TestLevel'])\\\r\n",
							"                                                                                                            .orderBy(EarlyYearsResultsTotals_df['NumeracyTotal'])).alias(\"NumeracyPercentile\")\r\n",
							"                                                                    \r\n",
							"                                                                )\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsResults_Literacy_df = EarlyYearsResultsTotals_df.select(col(\"CampusID\").alias('xCampusID'), \r\n",
							"                                                                    col(\"Ceider\").alias('xCeider'), \r\n",
							"                                                                    col(\"ClassID\").alias('xClassID'), \r\n",
							"                                                                    col(\"Year\").alias('xYear'), \r\n",
							"                                                                    col(\"YearLevel\").alias('xYearLevel'), \r\n",
							"                                                                    col(\"TestLevel\").alias('xTestLevel'), \r\n",
							"                                                                    percent_rank().over(Window.partitionBy(EarlyYearsResultsTotals_df['Year'],\r\n",
							"                                                                                                            EarlyYearsResultsTotals_df['YearLevel'],\r\n",
							"                                                                                                            EarlyYearsResultsTotals_df['TestLevel'])\\\r\n",
							"                                                                                                            .orderBy(EarlyYearsResultsTotals_df['LiteracyTotal'])).alias(\"LiteracyPercentile\")\r\n",
							"                                                                    \r\n",
							"                                                                )\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Numeracy_df.join(EarlyYearsResults_Literacy_df, \r\n",
							"                                                                    [col('Year') == col('xYear'),\r\n",
							"                                                                    col('CampusID') == col('xCampusID'),\r\n",
							"                                                                    col('Ceider') == col('xCeider'),\r\n",
							"                                                                    col('ClassID') == col('xClassID'),\r\n",
							"                                                                    col('YearLevel') == col('xYearLevel'),\r\n",
							"                                                                    col('TestLevel') == col('xTestLevel')],\r\n",
							"                                                                    how=\"outer\"\r\n",
							"                                                                    )\r\n",
							"\r\n",
							"# merge the values into single column\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newCampusID\", when(col(\"CampusID\").isNull(), col(\"xCampusID\")).otherwise(col(\"CampusID\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newCeider\", when(col(\"Ceider\").isNull(), col(\"xCeider\")).otherwise(col(\"Ceider\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newClassID\", when(col(\"ClassID\").isNull(), col(\"xClassID\")).otherwise(col(\"ClassID\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newYear\", when(col(\"Year\").isNull(), col(\"xYear\")).otherwise(col(\"Year\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newYearLevel\", when(col(\"YearLevel\").isNull(), col(\"xYearLevel\")).otherwise(col(\"YearLevel\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newTestLevel\", when(col(\"TestLevel\").isNull(), col(\"xTestLevel\")).otherwise(col(\"TestLevel\")) )\r\n",
							"\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.drop(\"CampusID\", \"xCampusID\", \r\n",
							"                                                                        \"Ceider\", \"xCeider\", \r\n",
							"                                                                        \"ClassID\", \"xClassID\", \r\n",
							"                                                                        \"Year\", \"xYear\", \r\n",
							"                                                                        \"YearLevel\", \"xYearLevel\", \r\n",
							"                                                                        \"TestLevel\", \"xTestLevel\")\\\r\n",
							"                                                                .withColumnRenamed(\"newCampusID\", \"CampusID\")\\\r\n",
							"                                                                .withColumnRenamed(\"newCeider\", \"Ceider\")\\\r\n",
							"                                                                .withColumnRenamed(\"newClassID\", \"ClassID\")\\\r\n",
							"                                                                .withColumnRenamed(\"newYear\", \"Year\")\\\r\n",
							"                                                                .withColumnRenamed(\"newYearLevel\", \"YearLevel\")\\\r\n",
							"                                                                .withColumnRenamed(\"newTestLevel\", \"TestLevel\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# numeracy average\r\n",
							"\r\n",
							"num_average_df = EarlyYearsResults_Percentile_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(avg(EarlyYearsResults_Percentile_df['NumeracyTotal']).alias('NumeracyAverage'))\r\n",
							"\r\n",
							"num_average_df = num_average_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
							"\r\n",
							"EarlyYearsResults_NumAverage_df = EarlyYearsResults_Percentile_df.join(num_average_df, \r\n",
							"                                                                        [col('Year') == col('xYear'), \r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
							"                                                                        how='outer')\r\n",
							"\r\n",
							"EarlyYearsResults_NumAverage_df = EarlyYearsResults_NumAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
							"\r\n",
							"\r\n",
							"# literacy average \r\n",
							"\r\n",
							"lit_average_df = EarlyYearsResults_Percentile_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(avg(EarlyYearsResults_Percentile_df['LiteracyTotal']).alias('LiteracyAverage'))\r\n",
							"\r\n",
							"lit_average_df = lit_average_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
							"\r\n",
							"EarlyYearsResults_LitAverage_df = EarlyYearsResults_NumAverage_df.join(lit_average_df, \r\n",
							"                                                                        [col('Year') == col('xYear'), \r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
							"                                                                        how='outer')\r\n",
							"\r\n",
							"EarlyYearsResults_Averages_df = EarlyYearsResults_LitAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# numeracy standard deviation\r\n",
							"\r\n",
							"num_stddev_df = EarlyYearsResults_Averages_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(stddev(EarlyYearsResults_Averages_df['NumeracyTotal']).alias('NumeracyStdDev'))\r\n",
							"\r\n",
							"\r\n",
							"num_stddev_df = num_stddev_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
							"\r\n",
							"EarlyYearsResults_NumStdDev_df = EarlyYearsResults_Averages_df.join(num_stddev_df, \r\n",
							"                                                                        [col('Year') == col('xYear'), \r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
							"                                                                        how='outer')\r\n",
							"\r\n",
							"EarlyYearsResults_NumStdDev_df = EarlyYearsResults_NumStdDev_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
							"\r\n",
							"\r\n",
							"# literacy average \r\n",
							"\r\n",
							"lit_stddev_df = EarlyYearsResults_Averages_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(stddev(EarlyYearsResults_Averages_df['LiteracyTotal']).alias('LiteracyStdDev'))\r\n",
							"\r\n",
							"lit_stddev_df = lit_stddev_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
							"\r\n",
							"EarlyYearsResults_LitAverage_df = EarlyYearsResults_NumStdDev_df.join(lit_stddev_df, \r\n",
							"                                                                        [col('Year') == col('xYear'), \r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
							"                                                                        how='outer')\r\n",
							"\r\n",
							"EarlyYearsResultsTotals_df = EarlyYearsResults_LitAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 62
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Pivot Results from Wide to Long format (PREP and YEAR 1)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# this table will pivot the early years result Questions from columns to rows \r\n",
							"\r\n",
							"df = EarlyYearsResults_df.to_koalas().melt(id_vars=['CampusID', 'Ceider', 'Status', 'ClassID', 'Year', 'YearLevel', 'TestLevel'],\r\n",
							"                                            value_vars=['Ques1', 'Ques2', 'Ques3', 'Ques4', 'Ques5', 'Ques6', 'Ques7', 'Ques8', 'Ques9', 'Ques10',\r\n",
							"                                                        'Ques11', 'Ques12', 'Ques13', 'Ques14', 'Ques15', 'Ques16', 'Ques17', 'Ques18', 'Ques19', 'Ques20',\r\n",
							"                                                        'Ques21', 'Ques22', 'Ques23', 'Ques24', 'Ques25', 'Ques26', 'Ques27', 'Ques28', 'Ques29', 'Ques30',\r\n",
							"                                                        'Ques31', 'Ques32', 'Ques33', 'Ques34', 'Ques35', 'Ques36', 'Ques37', 'Ques38', 'Ques39', 'Ques40'],\r\n",
							"                                            var_name=\"Question\",\r\n",
							"                                            value_name = \"Result\")\r\n",
							"\r\n",
							"EarlyYearsResultsLong_df = df.to_spark()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 63
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Remove the 'Ques' from the Question number in the results table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# extract the numeral from the Ques## column names\r\n",
							"EarlyYearsResultsLong_df = EarlyYearsResultsLong_df.withColumn(\"Question\", substring(\"Question\", 5, len(\"Question\")-4))\r\n",
							"\r\n",
							"# Create SKQID to uniquely identify the different year levels (Prep and Year 1)\r\n",
							"EarlyYearsResultsLong_df = EarlyYearsResultsLong_df.withColumn(\"SKQID\", concat_ws(\"-\", col('Year'), col('YearLevel'), col('Question')))\r\n",
							"\r\n",
							"# Add the 'QuestionType' column so we can merge with the year 2 results \r\n",
							"EarlyYearsResultsLong_df = EarlyYearsResultsLong_df.withColumn(\"QuestionType\", when(EarlyYearsResultsLong_df['Question'] < 21, lit(\"Numeracy\")).otherwise(lit(\"Literacy\")))\r\n",
							"\r\n",
							"# Add the StudentAnswer and Answer Columns (with NULL values) so that we can merge this with the year 2 results \r\n",
							"EarlyYearsResultsLong_df = EarlyYearsResultsLong_df.withColumn(\"StudentAnswer\", lit(\"N/A\")).withColumn(\"Answer\", lit(\"N/A\"))"
						],
						"outputs": [],
						"execution_count": 64
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Convert answers table from wide to long format "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# convert the answer table to long format (same as the year 2 student answers)\r\n",
							"\r\n",
							"df = EYAnswers_df.to_koalas().melt(id_vars=['Year', 'Question'],\r\n",
							"                                            value_vars=['Numeracy', 'Literacy'],\r\n",
							"                                            var_name=\"QuestionType\",\r\n",
							"                                            value_name = \"Answer\")\r\n",
							"\r\n",
							"EYAnswers_df = df.to_spark()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 65
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Pivot Results from Wide to Long format (YEAR 2) + AUTOMARKER"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# wide to long conversion for year 2 and auto marker\r\n",
							"\r\n",
							"df = EYResultsYear2_df.to_koalas().melt(id_vars=['CampusID', 'Ceider', 'ClassID', 'QuestionType', 'Status', 'Year', 'YearLevel', 'TestLevel'],\r\n",
							"                                            value_vars=['Ques1', 'Ques2', 'Ques3', 'Ques4', 'Ques5', 'Ques6', 'Ques7', 'Ques8', 'Ques9', 'Ques10',\r\n",
							"                                                        'Ques11', 'Ques12', 'Ques13', 'Ques14', 'Ques15', 'Ques16', 'Ques17', 'Ques18', 'Ques19', 'Ques20',\r\n",
							"                                                        'Ques21', 'Ques22', 'Ques23', 'Ques24', 'Ques25'],\r\n",
							"                                            var_name=\"Question\",\r\n",
							"                                            value_name = \"StudentAnswer\")\r\n",
							"\r\n",
							"EYResultsYear2Long_df = df.to_spark()\r\n",
							"\r\n",
							"# extract the numeral from the Ques## column names\r\n",
							"EYResultsYear2Long_df = EYResultsYear2Long_df.withColumn(\"Question\", substring(\"Question\", 5, len(\"Question\")-4))\r\n",
							"\r\n",
							"\r\n",
							"# combine the student answers with the actual answers table\r\n",
							"\r\n",
							"EYAnswers_df = EYAnswers_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('Question', 'xQuestion').withColumnRenamed('QuestionType', 'xQuestionType')\r\n",
							"\r\n",
							"joined_df = EYResultsYear2Long_df.join(EYAnswers_df, [col('Year') == col('xYear'), col('Question') == col('xQuestion'), col('QuestionType') == col('xQuestionType')], how='left')\r\n",
							"\r\n",
							"joinedcleaned_df = joined_df.drop('xYear').drop('xQuestion').drop('xQuestionType')\r\n",
							"\r\n",
							"# do the correction by comparing StudentAnswer to the real Answer\r\n",
							"EYResultsYear2LongFinal_df = joinedcleaned_df.withColumn('Result', when(trim(lower(joinedcleaned_df.StudentAnswer)) == trim(lower(joinedcleaned_df.Answer)), 1).otherwise(0))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 66
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# create the SKQID to uniquely identify between literacy and numeracy test results\r\n",
							"EYResultsYear2LongFinal_df = EYResultsYear2LongFinal_df.withColumn('SKQID', when(EYResultsYear2LongFinal_df['QuestionType'] == \"Literacy\", \r\n",
							"                                                                                concat_ws(\"-\", col('Year'), col('YearLevel'), col('Question'), lit(\"Lit\")))\\\r\n",
							"                                                                                .otherwise(concat_ws(\"-\", col('Year'), col('YearLevel'), col('Question'), lit(\"Num\")))\r\n",
							"                                                                    )\r\n",
							""
						],
						"outputs": [],
						"execution_count": 67
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create Results Totals tables (YEAR 2)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# create the totals dataframe for year 2\r\n",
							"\r\n",
							"EarlyYearsResultsTotalsYear2Numeracy_df = EYResultsYear2LongFinal_df.filter(EYResultsYear2LongFinal_df.QuestionType == 'Numeracy')\r\n",
							"\r\n",
							"EarlyYearsResultsTotalsYear2Literacy_df = EYResultsYear2LongFinal_df.filter(EYResultsYear2LongFinal_df.QuestionType == 'Literacy')\r\n",
							"\r\n",
							"EarlyYearsResultsTotalsYear2Numeracy_df = EarlyYearsResultsTotalsYear2Numeracy_df.groupBy(\"CampusID\", \"Ceider\",\t\"ClassID\", \"Year\", \"YearLevel\", \"TestLevel\").agg(sum(EarlyYearsResultsTotalsYear2Numeracy_df.Result).alias(\"NumeracyTotal\"))\r\n",
							"\r\n",
							"EarlyYearsResultsTotalsYear2Literacy_df = EarlyYearsResultsTotalsYear2Literacy_df.groupBy(\"CampusID\", \"Ceider\",\t\"ClassID\", \"Year\", \"YearLevel\", \"TestLevel\").agg(sum(EarlyYearsResultsTotalsYear2Literacy_df.Result).alias(\"LiteracyTotal\"))\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsResultsTotalsYear2Literacy_df = EarlyYearsResultsTotalsYear2Literacy_df.withColumnRenamed(\"CampusID\", \"xCampusID\")\\\r\n",
							"                                                                                    .withColumnRenamed(\"Ceider\", \"xCeider\")\\\r\n",
							"                                                                                    .withColumnRenamed(\"ClassID\", \"xClassID\")\\\r\n",
							"                                                                                    .withColumnRenamed(\"Year\", \"xYear\")\\\r\n",
							"                                                                                    .withColumnRenamed(\"YearLevel\", \"xYearLevel\")\\\r\n",
							"                                                                                    .withColumnRenamed(\"TestLevel\", \"xTestLevel\")\r\n",
							"\r\n",
							"\r\n",
							"# join the numeracy and literacy results \r\n",
							"\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Numeracy_df.join(EarlyYearsResultsTotalsYear2Literacy_df, [col('CampusID') == col('xCampusID'),\r\n",
							"                                                                                                                                col('Ceider') == col('xCeider'),\r\n",
							"                                                                                                                                col('ClassID') == col('xClassID'),\r\n",
							"                                                                                                                                col('Year') == col('xYear'),\r\n",
							"                                                                                                                                col('YearLevel') == col('xYearLevel'),\r\n",
							"                                                                                                                                col('TestLevel') == col('xTestLevel')],\r\n",
							"                                                                                                                                how=\"outer\")\r\n",
							"\r\n",
							"# merge the values into single column\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newCampusID\", when(col(\"CampusID\").isNull(), col(\"xCampusID\")).otherwise(col(\"CampusID\")) )\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newCeider\", when(col(\"Ceider\").isNull(), col(\"xCeider\")).otherwise(col(\"Ceider\")) )\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newClassID\", when(col(\"ClassID\").isNull(), col(\"xClassID\")).otherwise(col(\"ClassID\")) )\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newYear\", when(col(\"Year\").isNull(), col(\"xYear\")).otherwise(col(\"Year\")) )\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newYearLevel\", when(col(\"YearLevel\").isNull(), col(\"xYearLevel\")).otherwise(col(\"YearLevel\")) )\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.withColumn(\"newTestLevel\", when(col(\"TestLevel\").isNull(), col(\"xTestLevel\")).otherwise(col(\"TestLevel\")) )\r\n",
							"\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResultsTotalsYear2Joined_df.drop(\"CampusID\", \"xCampusID\", \r\n",
							"                                                                                    \"Ceider\", \"xCeider\", \r\n",
							"                                                                                    \"ClassID\", \"xClassID\", \r\n",
							"                                                                                    \"Year\", \"xYear\", \r\n",
							"                                                                                    \"YearLevel\", \"xYearLevel\", \r\n",
							"                                                                                    \"TestLevel\", \"xTestLevel\")\\\r\n",
							"                                                                            .withColumnRenamed(\"newCampusID\", \"CampusID\")\\\r\n",
							"                                                                            .withColumnRenamed(\"newCeider\", \"Ceider\")\\\r\n",
							"                                                                            .withColumnRenamed(\"newClassID\", \"ClassID\")\\\r\n",
							"                                                                            .withColumnRenamed(\"newYear\", \"Year\")\\\r\n",
							"                                                                            .withColumnRenamed(\"newYearLevel\", \"YearLevel\")\\\r\n",
							"                                                                            .withColumnRenamed(\"newTestLevel\", \"TestLevel\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 68
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# add the percent rank based on year, yearlevel, testlevel and numeracy/literacy groups\r\n",
							"\r\n",
							"EarlyYearsResultsY2_Numeracy_df = EarlyYearsResultsTotalsYear2Joined_df.select(\"CampusID\", \r\n",
							"                                                                                \"Ceider\", \r\n",
							"                                                                                \"ClassID\", \r\n",
							"                                                                                \"Year\", \r\n",
							"                                                                                \"YearLevel\", \r\n",
							"                                                                                \"TestLevel\", \r\n",
							"                                                                                \"NumeracyTotal\", \r\n",
							"                                                                                \"LiteracyTotal\",\r\n",
							"                                                                                percent_rank().over(Window.partitionBy(EarlyYearsResultsTotalsYear2Joined_df['Year'],\r\n",
							"                                                                                                                        EarlyYearsResultsTotalsYear2Joined_df['YearLevel'],\r\n",
							"                                                                                                                        EarlyYearsResultsTotalsYear2Joined_df['TestLevel'])\\\r\n",
							"                                                                                                                        .orderBy(EarlyYearsResultsTotalsYear2Joined_df['NumeracyTotal'])).alias(\"NumeracyPercentile\")\r\n",
							"                                                                    \r\n",
							"                                                                                )\r\n",
							"\r\n",
							"EarlyYearsResultsY2_Literacy_df = EarlyYearsResultsTotalsYear2Joined_df.select(col(\"CampusID\").alias('xCampusID'), \r\n",
							"                                                                                col(\"Ceider\").alias('xCeider'), \r\n",
							"                                                                                col(\"ClassID\").alias('xClassID'), \r\n",
							"                                                                                col(\"Year\").alias('xYear'), \r\n",
							"                                                                                col(\"YearLevel\").alias('xYearLevel'), \r\n",
							"                                                                                col(\"TestLevel\").alias('xTestLevel'), \r\n",
							"                                                                                percent_rank().over(Window.partitionBy(EarlyYearsResultsTotalsYear2Joined_df['Year'],\r\n",
							"                                                                                                                        EarlyYearsResultsTotalsYear2Joined_df['YearLevel'],\r\n",
							"                                                                                                                        EarlyYearsResultsTotalsYear2Joined_df['TestLevel'])\\\r\n",
							"                                                                                                                        .orderBy(EarlyYearsResultsTotalsYear2Joined_df['LiteracyTotal'])).alias(\"LiteracyPercentile\")\r\n",
							"                                            \r\n",
							"                                                                                )\r\n",
							"\r\n",
							"\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResultsY2_Numeracy_df.join(EarlyYearsResultsY2_Literacy_df, \r\n",
							"                                                                        [col('Year') == col('xYear'),\r\n",
							"                                                                        col('CampusID') == col('xCampusID'),\r\n",
							"                                                                        col('Ceider') == col('xCeider'),\r\n",
							"                                                                        col('ClassID') == col('xClassID'),\r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'),\r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')],\r\n",
							"                                                                        how=\"outer\"\r\n",
							"                                                                        )\r\n",
							"\r\n",
							"# merge the values into single column\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newCampusID\", when(col(\"CampusID\").isNull(), col(\"xCampusID\")).otherwise(col(\"CampusID\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newCeider\", when(col(\"Ceider\").isNull(), col(\"xCeider\")).otherwise(col(\"Ceider\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newClassID\", when(col(\"ClassID\").isNull(), col(\"xClassID\")).otherwise(col(\"ClassID\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newYear\", when(col(\"Year\").isNull(), col(\"xYear\")).otherwise(col(\"Year\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newYearLevel\", when(col(\"YearLevel\").isNull(), col(\"xYearLevel\")).otherwise(col(\"YearLevel\")) )\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.withColumn(\"newTestLevel\", when(col(\"TestLevel\").isNull(), col(\"xTestLevel\")).otherwise(col(\"TestLevel\")) )\r\n",
							"\r\n",
							"EarlyYearsResults_Percentile_df = EarlyYearsResults_Percentile_df.drop(\"CampusID\", \"xCampusID\", \r\n",
							"                                                                        \"Ceider\", \"xCeider\", \r\n",
							"                                                                        \"ClassID\", \"xClassID\", \r\n",
							"                                                                        \"Year\", \"xYear\", \r\n",
							"                                                                        \"YearLevel\", \"xYearLevel\", \r\n",
							"                                                                        \"TestLevel\", \"xTestLevel\")\\\r\n",
							"                                                                .withColumnRenamed(\"newCampusID\", \"CampusID\")\\\r\n",
							"                                                                .withColumnRenamed(\"newCeider\", \"Ceider\")\\\r\n",
							"                                                                .withColumnRenamed(\"newClassID\", \"ClassID\")\\\r\n",
							"                                                                .withColumnRenamed(\"newYear\", \"Year\")\\\r\n",
							"                                                                .withColumnRenamed(\"newYearLevel\", \"YearLevel\")\\\r\n",
							"                                                                .withColumnRenamed(\"newTestLevel\", \"TestLevel\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 69
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# numeracy average\r\n",
							"\r\n",
							"num_average_df = EarlyYearsResults_Percentile_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(avg(EarlyYearsResults_Percentile_df['NumeracyTotal']).alias('NumeracyAverage'))\r\n",
							"\r\n",
							"num_average_df = num_average_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
							"\r\n",
							"EarlyYearsResults_NumAverage_df = EarlyYearsResults_Percentile_df.join(num_average_df, \r\n",
							"                                                                        [col('Year') == col('xYear'), \r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
							"                                                                        how='outer')\r\n",
							"\r\n",
							"EarlyYearsResults_NumAverage_df = EarlyYearsResults_NumAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
							"\r\n",
							"\r\n",
							"# literacy average \r\n",
							"\r\n",
							"lit_average_df = EarlyYearsResults_Percentile_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(avg(EarlyYearsResults_Percentile_df['LiteracyTotal']).alias('LiteracyAverage'))\r\n",
							"\r\n",
							"lit_average_df = lit_average_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
							"\r\n",
							"EarlyYearsResults_LitAverage_df = EarlyYearsResults_NumAverage_df.join(lit_average_df, \r\n",
							"                                                                        [col('Year') == col('xYear'), \r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
							"                                                                        how='outer')\r\n",
							"\r\n",
							"EarlyYearsResults_Averages_df = EarlyYearsResults_LitAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')"
						],
						"outputs": [],
						"execution_count": 70
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# numeracy standard deviation\r\n",
							"\r\n",
							"num_stddev_df = EarlyYearsResults_Averages_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(stddev(EarlyYearsResults_Averages_df['NumeracyTotal']).alias('NumeracyStdDev'))\r\n",
							"\r\n",
							"\r\n",
							"num_stddev_df = num_stddev_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
							"\r\n",
							"EarlyYearsResults_NumStdDev_df = EarlyYearsResults_Averages_df.join(num_stddev_df, \r\n",
							"                                                                        [col('Year') == col('xYear'), \r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
							"                                                                        how='outer')\r\n",
							"\r\n",
							"EarlyYearsResults_NumStdDev_df = EarlyYearsResults_NumStdDev_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')\r\n",
							"\r\n",
							"\r\n",
							"# literacy average \r\n",
							"\r\n",
							"lit_stddev_df = EarlyYearsResults_Averages_df.groupBy('Year', 'YearLevel', 'TestLevel').agg(stddev(EarlyYearsResults_Averages_df['LiteracyTotal']).alias('LiteracyStdDev'))\r\n",
							"\r\n",
							"lit_stddev_df = lit_stddev_df.withColumnRenamed('Year', 'xYear').withColumnRenamed('YearLevel', 'xYearLevel').withColumnRenamed('TestLevel', 'xTestLevel')\r\n",
							"\r\n",
							"EarlyYearsResults_LitAverage_df = EarlyYearsResults_NumStdDev_df.join(lit_stddev_df, \r\n",
							"                                                                        [col('Year') == col('xYear'), \r\n",
							"                                                                        col('YearLevel') == col('xYearLevel'), \r\n",
							"                                                                        col('TestLevel') == col('xTestLevel')], \r\n",
							"                                                                        how='outer')\r\n",
							"\r\n",
							"EarlyYearsResultsTotalsYear2Joined_df = EarlyYearsResults_LitAverage_df.drop('xYear').drop('xYearLevel').drop('xTestLevel')"
						],
						"outputs": [],
						"execution_count": 71
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Join Prep/Year 1 and Year 2 datasets (Results totals)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# join the prep/year 1 and year 2 totals table together (union)\r\n",
							"\r\n",
							"EarlyYearsResultsTotalsCombined_df = EarlyYearsResultsTotalsYear2Joined_df.union(EarlyYearsResultsTotals_df)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Combine the Prep/Year 1 and Year 2 student test results"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# sort the columns for both tables\r\n",
							"EY_Results_Sorted_df = EarlyYearsResultsLong_df.select(sorted(EarlyYearsResultsLong_df.columns))\r\n",
							"EY_ResultsYear2_Sorted_df = EYResultsYear2LongFinal_df.select(sorted(EYResultsYear2LongFinal_df.columns))\r\n",
							"\r\n",
							"# combine the tables with a union \r\n",
							"EarlyYearsResultsCombined_df = EY_Results_Sorted_df.union(EY_ResultsYear2_Sorted_df)\r\n",
							"\r\n",
							"# create unique ID's\r\n",
							"EarlyYearsResultsCombined_df = EarlyYearsResultsCombined_df.withColumn(\"SKResultID\", concat_ws(\"-\", col(\"CampusID\"), col(\"Year\"), col(\"YearLevel\"), upper(regexp_replace(col(\"ClassID\"), \" \", \"\"))))\r\n",
							"EarlyYearsResultsTotalsCombined_df = EarlyYearsResultsTotalsCombined_df.withColumn(\"SKResultID\", concat_ws(\"-\", col(\"CampusID\"), col(\"Year\"), col(\"YearLevel\"), upper(regexp_replace(col(\"ClassID\"), \" \", \"\"))))\r\n",
							"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.withColumn(\"SKResultID\", concat_ws(\"-\", col(\"CampusID\"), col(\"Year\"), col(\"YearLevel\"), upper(regexp_replace(col(\"ClassID\"), \" \", \"\"))))\r\n",
							"\r\n",
							"# create ClassID Dimension\r\n",
							"EarlyYearsClassID_df = EarlyYearsResultsCombined_df.select(col(\"SKResultID\"), col(\"CampusID\"), col(\"Year\"), col(\"YearLevel\"), col(\"ClassID\")).distinct()\r\n",
							"\r\n",
							"# clean up the unwanted columns \r\n",
							"EarlyYearsResultsCombined_df = EarlyYearsResultsCombined_df.drop(\"CampusID\", \"Year\", \"YearLevel\", \"ClassID\")\r\n",
							"EarlyYearsResultsTotalsCombined_df = EarlyYearsResultsTotalsCombined_df.drop(\"CampusID\", \"Year\", \"YearLevel\", \"ClassID\")\r\n",
							"EarlyYearsTestCompletion_df = EarlyYearsTestCompletion_df.drop(\"CampusID\", \"Year\", \"YearLevel\", \"ClassID\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 74
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Create growth effect table for numeracy and literacy"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# groupby year and the student and get post score - pre score\r\n",
							"NumeracyPivot_df = EarlyYearsResultsTotalsCombined_df.groupby(\"SKResultID\", \"Ceider\").pivot(\"TestLevel\").agg({\"NumeracyTotal\": \"first\"})\r\n",
							"\r\n",
							"display(NumeracyPivot_df)\r\n",
							"\r\n",
							"NumeracyDiff_df = NumeracyPivot_df.withColumn(\"Numeracydiff\", col(\"Post\") - col(\"Pre\")).select(\"SKResultID\", \"Ceider\", \"NumeracyDiff\")\r\n",
							"\r\n",
							"# same thing for literacy\r\n",
							"LiteracyPivot_df = EarlyYearsResultsTotalsCombined_df.groupby(\"SKResultID\", \"Ceider\").pivot(\"TestLevel\").agg({\"LiteracyTotal\": \"first\"})\r\n",
							"\r\n",
							"LiteracyDiff_df = LiteracyPivot_df.withColumn(\"Literacydiff\", col(\"Post\") - col(\"Pre\")).select(\"SKResultID\", \"Ceider\", \"LiteracyDiff\")\r\n",
							"\r\n",
							"JoinedResultDiff_df = NumeracyDiff_df.join(LiteracyDiff_df, ['SKResultID', 'Ceider'], 'inner')\r\n",
							"\r\n",
							"# same again for the standard deviation values\r\n",
							"StdDevNumeracyPivot_df = EarlyYearsResultsTotalsCombined_df.groupby(\"SKResultID\", \"Ceider\").pivot(\"TestLevel\").agg({\"NumeracyStdDev\": \"first\"})\r\n",
							"StdDevNumeracyDiff_df = StdDevNumeracyPivot_df.withColumn(\"NumeracyStdDevAverage\", ((col(\"Post\") + col(\"Pre\")) / 2)).select(\"SKResultID\", \"Ceider\", \"NumeracyStdDevAverage\")\r\n",
							"\r\n",
							"StdDevLiteracyPivot_df = EarlyYearsResultsTotalsCombined_df.groupby(\"SKResultID\", \"Ceider\").pivot(\"TestLevel\").agg({\"LiteracyStdDev\": \"first\"})\r\n",
							"StdDevLiteracyDiff_df = StdDevLiteracyPivot_df.withColumn(\"LiteracyStdDevAverage\", ((col(\"Post\") + col(\"Pre\")) / 2)).select(\"SKResultID\", \"Ceider\", \"LiteracyStdDevAverage\")\r\n",
							"\r\n",
							"JoinedStdDevDiff_df = StdDevNumeracyDiff_df.join(StdDevLiteracyDiff_df, ['SKResultID', 'Ceider'], 'inner')\r\n",
							"\r\n",
							"growth_df = JoinedResultDiff_df.join(JoinedStdDevDiff_df, ['SKResultID', 'Ceider'], 'inner')\r\n",
							"\r\n",
							"growth_df = growth_df.withColumn(\"NumeracyGrowthValue\", col('NumeracyDiff')/col('NumeracyStdDevAverage'))\r\n",
							"growth_df = growth_df.withColumn(\"LiteracyGrowthValue\", col('LiteracyDiff')/col('LiteracyStdDevAverage'))\r\n",
							"growth_df = growth_df.select('SKResultID', 'Ceider', 'NumeracyGrowthValue', 'LiteracyGrowthValue')\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Senior Outcomes transformation"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# create a new SAT Column (SBA) that provides counts instead of codes. \r\n",
							"# Codes in the file are N - None, A - Apprenticeship, T - Traineeship\r\n",
							"\r\n",
							"SeniorOutcomes_df = SeniorOutcomes_df.withColumn(\"SBA\", when(SeniorOutcomes_df.sat == \"N\", lit(0)).otherwise(lit(1)))\r\n",
							"\r\n",
							"\r\n",
							"# Add GenderSifCode and AtsiSifId so we can connect this table to the filter tables \r\n",
							"SeniorOutcomes_df = SeniorOutcomes_df.withColumn(\"GenderSifCode\", when(SeniorOutcomes_df.sex == \"F\", \"2\")\r\n",
							"                                                                .when(SeniorOutcomes_df.sex == \"M\", \"1\")\r\n",
							"                                                                .otherwise(\"9\")\r\n",
							"                                                )\r\n",
							"\r\n",
							"\r\n",
							"SeniorOutcomes_df = SeniorOutcomes_df.withColumn(\"AtsiSifId\", when(SeniorOutcomes_df.indigenous == \"A\", \"1\")\r\n",
							"                                                            .when(SeniorOutcomes_df.indigenous == \"T\", \"2\")\r\n",
							"                                                            .when(SeniorOutcomes_df.indigenous == \"B\", \"3\")\r\n",
							"                                                            .when(SeniorOutcomes_df.indigenous == \"N\", \"4\")\r\n",
							"                                                            .otherwise(\"9\")\r\n",
							"                                                )\r\n",
							"\r\n",
							"\r\n",
							"# replace the school column with CampusID - so we can connect to the school table\r\n",
							"\r\n",
							"SeniorOutcomes_df = SeniorOutcomes_df.withColumn(\"CampusID\", when(SeniorOutcomes_df.school == \"Burdekin Catholic High School (Ayr)\", 17240)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"Columba Catholic College (Hackett Tce - Charters Towers)\", 17253)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"Gilroy Santa Maria College (Ingham)\", 17227)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"Good Shepherd Catholic College (Mount Isa)\", 17223)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"Ryan Catholic College (Kirwan)\", 2529)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"Southern Cross Catholic College (Townsville)\", 15370)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"St Anthony's Catholic College (Veales Rd and Joanne St - Deeragun)\", 13492)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"St Catherine's Catholic College The Whitsundays (Proserpine)\", 550)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"St Margaret Mary's College (Hyde Park)\", 17225)\r\n",
							"                                                            .when(SeniorOutcomes_df.school == \"St Teresa's College (Abergowrie)\", 17247)\r\n",
							"                                                )\r\n",
							"\r\n",
							"# remove the school column as it is not needed once we have CampusID\r\n",
							"SeniorOutcomes_df = SeniorOutcomes_df.drop('school')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 75
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# convert from wide to long format\r\n",
							"SO_df = SeniorOutcomes_df.to_koalas().melt(id_vars=['SKLongID', 'year', 'CampusID', 'last_name', 'given_names', 'sex', 'birth_date', 'indigenous', 'qcia', 'qce', 'vet'],\r\n",
							"                                            value_vars=['certs_i', 'certs_ii', 'certs_iii', 'certs_iv', 'diplomas', 'adv_diplomas', 'SBA', 'uni_subjects'],\r\n",
							"                                            var_name=\"CertificationType\",\r\n",
							"                                            value_name = \"CertsAchieved\")\r\n",
							"\r\n",
							"SeniorOutcomesLong_df = SO_df.to_spark()"
						],
						"outputs": [],
						"execution_count": 76
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Save the new tables "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Demographics tables \r\n",
							"saveToTarget(DMStudentDemographic_df, destination_p, f'{version}/DMStudentDemographic_pseudo')\r\n",
							"saveToTarget(DMStaffDemographic_df, destination_p, f'{version}/DMStaffDemographic_pseudo')\r\n",
							"saveToTarget(CompassODSStudentDemoFull_duplicates, destination_p, f'{version}/CompassODSStudentDemographicFullDuplicates_pseudo')\r\n",
							"\r\n",
							"# remove in next version \r\n",
							"#saveToTarget(EarlyYearsResultsLong_df, destination_p, f'{version}/EarlyYearsResultsLong_pseudo')\r\n",
							"#saveToTarget(EarlyYearsResultsTotals_df, destination_p, f'{version}/EarlyYearsResultsTotals_pseudo')\r\n",
							"\r\n",
							"# remove in next version \r\n",
							"#saveToTarget(EYResultsYear2LongFinal_df, destination_p, f'{version}/EarlyYearsResultsYear2Long_pseudo')\r\n",
							"#saveToTarget(EarlyYearsResultsTotalsYear2Joined_df, destination_p, f'{version}/EarlyYearsResultsTotalsYear2Joined_pseudo')\r\n",
							"\r\n",
							"# Test result tables for all years \r\n",
							"saveToTarget(EarlyYearsResultsCombined_df, destination_p, f'{version}/EarlyYearsResultsCombined_pseudo')\r\n",
							"\r\n",
							"# Test result totals (for all years)\r\n",
							"saveToTarget(EarlyYearsResultsTotalsCombined_df, destination_p, f'{version}/EarlyYearsResultsTotalsCombinedYears_pseudo')\r\n",
							"\r\n",
							"# Test completion tables \r\n",
							"saveToTarget(EarlyYearsTestCompletion_df, destination_p, f'{version}/EarlyYearsTestCompletion_pseudo')\r\n",
							"\r\n",
							"# Early Years ClassID Dimension\r\n",
							"saveToTarget(EarlyYearsClassID_df, destination_p, f'{version}/DMEarlyYearsClassID_pseudo')\r\n",
							"\r\n",
							"# Early Years Growth calculations\r\n",
							"saveToTarget(growth_df, destination_p, f'{version}/EarlyYearsGrowth_pseudo')\r\n",
							"\r\n",
							"# Senior Outcomes tables \r\n",
							"saveToTarget(SeniorOutcomesLong_df, destination_p, f'{version}/SeniorOutcomesLong_pseudo')\r\n",
							"\r\n",
							"# Combined results (ACER/Naplan/AE) for correlation visual\r\n",
							"saveToTarget(combinedresults_df, destination_p, f'{version}/_FACTLatestResultsCorrelation')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 77
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d04cc84d-bee5-4088-80ba-55e03814ecdd"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"#dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"#dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"#dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3\r\n",
							"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for naplan and acer participation view\r\n",
							"factstudentenrolmentcounts_df = spark.read.load(sourcep + \"/enrolment/DMFactStudentEnrolmentCounts_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"# stage 3 naplan and acer participation view\r\n",
							"factnaplanstudentyearresult_df = spark.read.load(source3p + \"/pilot/DMFactNaplanStudentYearResult_pseudo\", format='delta')\r\n",
							"factpatresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Learning Task\r\n",
							"ae_manuallearningtasks_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Semester Report\r\n",
							"ae_manualsemesterreports_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for ODS tables (+ dmcampus_df already added above)\r\n",
							"odsactivity_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
							"odsactivityenrolment_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
							"odscompasssubject_df = spark.read.load(sourcep + \"/_ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
							"odsstaffdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
							"odsstudentdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstafforganisationmilestones_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffOrganisationMilestones_pseudo\", format='delta')\r\n",
							"odsstafforganisationdetails_df= spark.read.load(sourcep + \"/_ODS/CompassODSStaffOrganisationDetails_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstudentorganisationdetails_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentOrganisationDetails_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3 transform on this table\r\n",
							"odsstudentorganisationmilestones_df = spark.read.load(source3p + \"/pilot/CompassODSStudentOrganisationMilestones_pseudo\", format='delta')\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"\r\n",
							"factstudentenrolmentcounts_df.createOrReplaceTempView('vw_factstudentenrolmentcounts')\r\n",
							"factnaplanstudentyearresult_df.createOrReplaceTempView('vw_factnaplanstudentyearresult')\r\n",
							"factpatresults_df.createOrReplaceTempView('vw_factpatresults_df')\r\n",
							"\r\n",
							"ae_manuallearningtasks_df.createOrReplaceTempView('vw_aemanuallearningtasks')\r\n",
							"ae_manualsemesterreports_df.createOrReplaceTempView('vw_aemanualsemesterreports')\r\n",
							"\r\n",
							"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \r\n",
							"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \r\n",
							"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \r\n",
							"\r\n",
							"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \r\n",
							"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') \r\n",
							"\r\n",
							"odsstafforganisationdetails_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationDetails') \r\n",
							"odsstafforganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationMilestones')\r\n",
							"\r\n",
							"odsstudentorganisationdetails_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationDetails') \r\n",
							"odsstudentorganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationMilestones')"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct \r\n",
							"\r\n",
							"\tyear(current_date) as Year\r\n",
							"\t, replace(YearLevel, '0', 'P') as YearLevel\r\n",
							"\t, activity.CampusId as CampusID\r\n",
							"\t, campus.SchoolNameAndArea\r\n",
							"\t, ManagingCompassPersonId as TeacherID\r\n",
							"\t, concat(staffdemo.TeacherFirstName, ' ', staffdemo.TeacherLastName) as TeacherName\r\n",
							"\t, students.StudentCompassPersonId as StudentID\r\n",
							"\t, concat(studentdemo.FirstName, ' ', studentdemo.LastName) as StudentName\r\n",
							"\t, enrolment.ActivityName as ClassName\r\n",
							"\t, enrolment.ActivityCode as ClassID\r\n",
							"\t, trim(coalesce(staffemail.TeacherOrganisationUserEmail, staffdemo.TeacherEmailAddress)) as StaffEmail\r\n",
							"\t, trim(studentemail.OrganisationUserEmail) as StudentEmail\r\n",
							"\t, studentdemo.GovCode1 as Ceider\r\n",
							"\r\n",
							"\r\n",
							"from\r\n",
							"\r\n",
							"-- Student Organisation Milestones\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, YearLevel, OrganisationName, CampusId\r\n",
							"  from vw_CompassODSStudentOrganisationMilestones\r\n",
							"  where 1=1\r\n",
							"  and IsActive = 'True'\r\n",
							"  and IsCurrent = 'True'\r\n",
							"  and IsCurrentMilestone = 'True'\r\n",
							"  and DioceseId = 12\r\n",
							"  and (YearLevel = '0' or YearLevel = '1' or YearLevel = '2')\r\n",
							") students\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Compass Activity Enrolment\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, ActivityCode, ActivityName, CampusID\r\n",
							"\tfrom vw_CompassODSActivityEnrolment\r\n",
							"\twhere 1=1\r\n",
							"\tand IsCurrent = 'True'\r\n",
							"\tand RoleDescription = 'Student'\r\n",
							"\tand ActivityName <> 'Sickbay'\r\n",
							"\tand SubjectCode IS NOT NULL\r\n",
							"\tand year(ActivityEnrolmentStartDate) = year(current_date)\r\n",
							"\tand (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\r\n",
							") enrolment\r\n",
							"\r\n",
							"on students.StudentCompassPersonId = enrolment.StudentCompassPersonId\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Compass Activity\r\n",
							"(select distinct ManagingCompassPersonId, ActivityCode, SubjectCode, CampusId\r\n",
							"\tfrom vw_CompassODSActivity\r\n",
							"\twhere 1=1\r\n",
							"\tand IsCurrent = 'True'\r\n",
							"\tand year(StartDateTime) = year(current_date)\r\n",
							") activity\r\n",
							"\r\n",
							"on enrolment.ActivityCode = activity.ActivityCode\r\n",
							"and enrolment.CampusID = activity.CampusId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Organisation Milestones\r\n",
							"(select distinct CompassPersonId as StaffCompassPersonId, OrganisationName\r\n",
							"\tfrom vw_CompassODSStaffOrganisationMilestones\r\n",
							"\twhere 1=1\r\n",
							"\tand DioceseId = 12\r\n",
							"\tand IsCurrentMilestone = 'True'\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand IsActive = 'True'\r\n",
							") staffmilestone\r\n",
							"\r\n",
							"on activity.ManagingCompassPersonId = staffmilestone.StaffCompassPersonId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Demographic\r\n",
							"-- only getting the personal email here because some schools have accidentally \r\n",
							"-- put the org user email in this field in compass\r\n",
							"(select distinct CompassPersonId as StaffCompassPersonId, FirstName as TeacherFirstName, LastName as TeacherLastName, EmailAddress as TeacherEmailAddress\r\n",
							"\tfrom vw_CompassODSStaffDemographic\r\n",
							"\twhere 1=1\r\n",
							"\tand IsCurrent = 'True'\r\n",
							") staffdemo\r\n",
							"\r\n",
							"on staffmilestone.StaffCompassPersonId = staffdemo.StaffCompassPersonId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Organisation Details (email)\r\n",
							"(select distinct CompassPersonId as TeacherCompassPersonId, OrganisationUserEmail as TeacherOrganisationUserEmail, OrganisationName\r\n",
							"\tfrom vw_CompassODSStaffOrganisationDetails\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand OrganisationUserEmail NOT LIKE '%supply%'\r\n",
							") staffemail\r\n",
							"\r\n",
							"on staffmilestone.StaffCompassPersonId = staffemail.TeacherCompassPersonId\r\n",
							"and staffmilestone.OrganisationName = staffemail.OrganisationName\r\n",
							"\r\n",
							"-- compare the subdomain values from the OrganisationName and Teacher email \r\n",
							"-- SQL Version\r\n",
							"--and staffemail.TeacherOrganisationUserEmail like concat('%', (select value from string_split(students.OrganisationName, '-', 1) where ordinal = 1), '%')\r\n",
							"\r\n",
							"-- Spark SQL\r\n",
							"--and staffemail.TeacherOrganisationUserEmail like concat('%', (select split(students.OrganisationName, '-')[0] as orgname), '%')\r\n",
							"and staffemail.TeacherOrganisationUserEmail like concat('%', students.OrganisationName, '%')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"inner join -- inner join will remove students without demographic information\r\n",
							"\r\n",
							"-- Student Demographic\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, FirstName, LastName, GovCode1\r\n",
							"\tfrom vw_CompassODSStudentDemographic\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							") studentdemo\r\n",
							"\r\n",
							"on students.StudentCompassPersonId = studentdemo.StudentCompassPersonId\r\n",
							"\r\n",
							"inner join  -- inner join will remove students without email\r\n",
							"\r\n",
							"-- Student Organisation Details (Email)\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, OrganisationUserEmail, OrganisationName\r\n",
							"\tfrom vw_CompassODSStudentOrganisationDetails\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand OrganisationUserEmail IS NOT NULL --these are all duplicate students that have emails in other records\r\n",
							") studentemail\r\n",
							"\r\n",
							"on studentdemo.StudentCompassPersonId = studentemail.StudentCompassPersonId\r\n",
							"and students.OrganisationName = studentemail.OrganisationName\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Get the School Names\r\n",
							"(select SchoolId, SchoolNameAndArea\r\n",
							"\tfrom vw_dmcampus\r\n",
							") campus\r\n",
							"\r\n",
							"on campus.SchoolId = activity.CampusId"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# example df\r\n",
							"data = [(\"James\",\"M\",60000),(\"Michael\",\"M\",70000),\r\n",
							"        (\"Robert\",None,400000),(\"Maria\",\"F\",500000),\r\n",
							"        (\"Jen\",\"\",None)]\r\n",
							"\r\n",
							"columns = [\"name\",\"gender\",\"salary\"]\r\n",
							"df = spark.createDataFrame(data = data, schema = columns)\r\n",
							"\r\n",
							"df.createOrReplaceTempView('vw_df')\r\n",
							"\r\n",
							"#df.show()"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_df"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# source locations\r\n",
							"sourcep = oea.stage2p\r\n",
							"sourcenp = oea.stage2np\r\n",
							"\r\n",
							"test_source = sourcep + '/student/DMStudent_pseudo'\r\n",
							"\r\n",
							"# create source dataframe from stage 2\r\n",
							"test_df = spark.read.load(f\"{test_source}\", format='delta')\r\n",
							"\r\n",
							"# create a sql view of the dataframe\r\n",
							"test_df.createOrReplaceTempView('test_dmstudent_df')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Testing Transform_Functions functions"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"## Put test function here\r\n",
							"\r\n",
							"# def DMStudent_pseudo(df):\r\n",
							"\r\n",
							"#     sourcep = oea.stage2p\r\n",
							"\r\n",
							"#     df.createOrReplaceTempView('vw_df_dmstudent_pseudo')\r\n",
							"\r\n",
							"#     final_df = spark.sql(\"select * from vw_df_dmstudent_pseudo where length(bksourcestudentid) = 36\")\r\n",
							"\r\n",
							"#     return final_df\r\n",
							"\r\n",
							"def DMPersonDemographic_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmpersondemographic_pseudo')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select * from vw_df_dmpersondemographic_pseudo where PersonType = 'Student' or PersonType = 'Staff'\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"def DMFactPATResults_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmfactpatresults_pseudo')\r\n",
							"\r\n",
							"    datedetails_df = spark.read.load(sourcep + \"/ACER/DMPATStudentTestGrouping_pseudo\", format='delta')\r\n",
							"\r\n",
							"    datedetails_df.createOrReplaceTempView('vw_df_dmpatstudenttestgrouping')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select a.*, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime from vw_df_dmfactpatresults_pseudo a left join vw_df_dmpatstudenttestgrouping b on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping inner join (select skyear, skacerstudent, skpattest, skcampus, scalescore, datecomplete, timecomplete, combineddatetime, max(skpatresults) as maxskpatresults from (select a.skpatresults, a.skyear, a.skacerstudent, a.skpattest, a.skcampus,  a.ScaleScore,  b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime from vw_df_dmfactpatresults_pseudo a left join vw_df_dmpatstudenttestgrouping b on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping inner join (select skyear, skacerstudent, skpattest, skcampus, combineddatetime, max(scalescore) as maxscalescore from (select a.skyear, a.skacerstudent, a.skpattest, a.skcampus,  a.ScaleScore,  b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime from vw_df_dmfactpatresults_pseudo a left join vw_df_dmpatstudenttestgrouping b on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping inner join (select skyear, skacerstudent, skpattest, skcampus, max(concat(datecomplete, ' ', right(left(timecomplete, 10), 8))) as latestdate from (select a.*, orig.skpatstudenttestgrouping, orig.skacerstanine, ScaleScore, skpatresults, b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime from (select skyear, skacerstudent, skpattest, skcampus, count(*) as counttotal from vw_df_dmfactpatresults_pseudo where skpattest not in (43, 54, 65, 66, 76, 79, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112) group by skyear, skacerstudent, skpattest, skcampus) a left join vw_df_dmfactpatresults_pseudo orig on a.skyear = orig.skyear and a.skacerstudent = orig.skacerstudent and a.skpattest = orig.skpattest and a.skcampus = orig.skcampus left join vw_df_dmpatstudenttestgrouping b on orig.skpatstudenttestgrouping = b.skpatstudenttestgrouping) total group by skyear, skacerstudent, skpattest, skcampus) inner1 on a.skyear = inner1.skyear and a.skacerstudent = inner1.SKACERStudent and a.SKPATTest = inner1.SKPATTest and a.SKCampus = inner1.SKCampus and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner1.latestdate ) inner2 group by skyear, skacerstudent, skpattest, skcampus, combineddatetime ) inner3 on a.skyear = inner3.skyear and a.skacerstudent = inner3.SKACERStudent and a.SKPATTest = inner3.SKPATTest and a.SKCampus = inner3.SKCampus and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner3.combineddatetime ) inner4 group by skyear, skacerstudent, skpattest, skcampus, scalescore, datecomplete, timecomplete, combineddatetime ) inner5 on a.skyear = inner5.skyear and a.skacerstudent = inner5.SKACERStudent and a.SKPATTest = inner5.SKPATTest and a.SKCampus = inner5.SKCampus and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner5.combineddatetime and a.SKPATResults = inner5.maxskpatresults\")\r\n",
							"\r\n",
							"    return final_df\r\n",
							""
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"%run Transform_Functions_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"## Test \r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"test_df = spark.read.load(sourcep + \"/ACER/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"result_test = DMFactPATResults_pseudo(test_df)\r\n",
							"# result_test.show()\r\n",
							"\r\n",
							"result_test.createOrReplaceTempView('vw_df_test_checkresult4')"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_df_test_checkresult4"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"## Test \r\n",
							"\r\n",
							"# sourcep = oea.stage2p\r\n",
							"# test_df = spark.read.load(sourcep + \"/student/DMStudent_pseudo\", format='delta')\r\n",
							"\r\n",
							"# result_test = DMStudent_pseudo(test_df)\r\n",
							"# # result_test.show()\r\n",
							"\r\n",
							"# result_test.createOrReplaceTempView('vw_df_test_checkresult2')\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"test_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"result_test = DMPersonDemographic_pseudo(test_df)\r\n",
							"# result_test.show()\r\n",
							"\r\n",
							"result_test.createOrReplaceTempView('vw_df_test_checkresult3')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- check sql results\r\n",
							"\r\n",
							"-- select count(*) from vw_df_test_checkresult2\r\n",
							"-- where length(bksourcestudentid) = 36\r\n",
							"\r\n",
							"select persontype, count(*) from vw_df_test_checkresult3 group by persontype"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need for the classenrolments table\r\n",
							"sourcep = oea.stage2p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')"
						],
						"outputs": [],
						"execution_count": 271
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    LocationID AS LocationAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT cy.Year AS CalendarYear,\r\n",
							"    C.SchoolId AS AGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    student.FirstName  AS  StudentFirstName,\r\n",
							"    student.LastName AS StudentLastName,\r\n",
							"    Student.Ceider,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    s.SubjectShortName AS Subject,\r\n",
							"    a.ActivityName AS  ClassName,\r\n",
							"    a.ActivityCode AS ClassCode,\r\n",
							"    ClassStartDate.date AS ClassStartDate,\r\n",
							"    ClassEndDate.date AS ClassEndDate,\r\n",
							"    staff.FirstName AS StaffFirstName,\r\n",
							"    staff.LastName AS StaffLastName,\r\n",
							"    c.CompassSchoolURL\r\n",
							"\r\n",
							"    FROM vw_factsubjectenrolment f\r\n",
							"    JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\r\n",
							"    AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"    JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\r\n",
							"    JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\r\n",
							"    JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\r\n",
							"    JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"    JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"    JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\r\n",
							"\r\n",
							"    JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\r\n",
							"    JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\r\n",
							"\r\n",
							"    AND cy.Year = 2022\r\n",
							"    --WHERE ClassEndDate.date > date_format('1/10/2022', 'd/mm/yyyy') --current_date() -- spark sql uses current_date() instead of GETDATE()\r\n",
							"    --AND s.SubjectShortName <> 'Unknown'\r\n",
							"    ORDER BY\r\n",
							"    AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    LocationID AS LocationAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    d.date AS DateLeft\r\n",
							"FROM\r\n",
							"    vw_factpersonmilestone f\r\n",
							"JOIN vw_dmdate d ON f.SKMilestoneStartDate = d.SKDate\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'False'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"    AND Date < current_date()\r\n",
							"ORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"from pyspark.sql.functions import max\r\n",
							"\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"df = spark.read.load(sourcep + \"/ACER/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"#aggdf = df.groupBy(\"SKCampus\", \"SKYearLevel\", \"SKDate\", \"SKPATTest\").agg(max(\"NormMeanScaledScore\").alias(\"newNormMean\"))\r\n",
							"aggdf = df.groupBy(\"SKPATTest\").agg(max(\"NormMeanScaledScore\").alias(\"NormMeanScaledScore_cleaned\"))\r\n",
							"aggdf = aggdf.withColumnRenamed(\"SKPATTest\", \"xSKPATTest\")\r\n",
							"\r\n",
							"final_df = aggdf.join(df, df.SKPATTest == aggdf.xSKPATTest, \"inner\")\r\n",
							"final_df = final_df.drop(\"xSKPATTest\")\r\n",
							"\r\n",
							"final_df.show(truncate=False)\r\n",
							"\r\n",
							"#column=[\"newNormMean\"]\r\n",
							"#aggdf.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in aggdf.columns]).show()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"from pyspark.sql.functions import max\r\n",
							"from pyspark.sql.functions import col\r\n",
							"\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"df = spark.read.load(sourcep + \"/ACER/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"#aggdf = df.groupBy(\"SKCampus\", \"SKYearLevel\", \"SKDate\", \"SKPATTest\").agg(max(\"NormMeanScaledScore\").alias(\"newNormMean\"))\r\n",
							"#aggdf = df.groupBy(\"SKYear\", \"SKCampus\", \"SKPATTest\", \"MatchedYearLevelTestLevel\").count().orderBy(col(\"count\").desc())\r\n",
							"\r\n",
							"aggdf = df.groupBy(\"SKYear\", \"SKCampus\", \"SKPATTest\", \"MatchedYearLevelTestLevel\").agg(max(\"NormMeanScaledScore\").alias(\"NormMeanScaledScore_cleaned\"))\r\n",
							"\r\n",
							"aggdf.show(truncate=False)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**More testing**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for naplan and acer participation view\r\n",
							"factstudentenrolmentcounts_df = spark.read.load(sourcep + \"/enrolment/DMFactStudentEnrolmentCounts_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"factnaplanstudentyearresult_df = spark.read.load(source3p + \"/pilot/DMFactNaplanStudentYearResult_pseudo\", format='delta')\r\n",
							"factpatresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"\r\n",
							"factstudentenrolmentcounts_df.createOrReplaceTempView('vw_factstudentenrolmentcounts')\r\n",
							"factnaplanstudentyearresult_df.createOrReplaceTempView('vw_factnaplanstudentyearresult')\r\n",
							"factpatresults_df.createOrReplaceTempView('vw_factpatresults_df')"
						],
						"outputs": [],
						"execution_count": 335
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"select * from vw_dmpersondemographic limit 10;\r\n",
							"select * from vw_dmyearlevel limit 10;\r\n",
							"select * from vw_dmcampus limit 10;\r\n",
							"select * from vw_factpersonmilestone limit 10;\r\n",
							"select * from vw_aemanuallearningtasks limit 10;"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"test_df_sm = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
							"\r\n",
							"#result_test = DMPersonDemographic_pseudo(test_df)\r\n",
							"# result_test.show()\r\n",
							"\r\n",
							"test_df_sm.createOrReplaceTempView('vw_aemanuallearningtasks')"
						],
						"outputs": [],
						"execution_count": 336
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_aemanuallearningtasks"
						],
						"outputs": [],
						"execution_count": 338
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_aemanuallearningtasks\r\n",
							"where result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')"
						],
						"outputs": [],
						"execution_count": 337
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ae_manual_learningtasks_check_nulls\r\n",
							"--where ceider is null"
						],
						"outputs": [],
						"execution_count": 346
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view  vw_ae_manual_learningtasks_check_nulls\r\n",
							""
						],
						"outputs": [],
						"execution_count": 342
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_learningtasks_check_nulls\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"m.School_Name\r\n",
							",m.Area\r\n",
							",m.Semester\r\n",
							",m.Year\r\n",
							",m.SubjectName\r\n",
							",m.Code\r\n",
							",m.TeacherImportIdentifier\r\n",
							",m.TaskId\r\n",
							",m.IsSubjectWide\r\n",
							",m.TaskName\r\n",
							",m.StudentCode\r\n",
							",m.GovtCode1\r\n",
							",m.StudentLastName\r\n",
							",m.StudentFirstName\r\n",
							",m.YearLevel\r\n",
							"--,case when m.YearLevel is null then m.YearLevel else concat('Year ' , cast(m.YearLevel as string)) end\r\n",
							"--,case when m.YearLevel is null then -1 else m.YearLevel end as YearLevelNew\r\n",
							",m.ResultType\r\n",
							",m.PrimaryGrade\r\n",
							",m.CommentTimestamp\r\n",
							",m.CommentPosterCode\r\n",
							",m.CommentPosterName\r\n",
							",m.Result\r\n",
							",m.ComponentName\r\n",
							",m.ComponentType\r\n",
							",m.IsIncludedInReport\r\n",
							",m.ReportCycleName\r\n",
							",m.DueDate\r\n",
							",m.Category\r\n",
							",m.SubmissionStatus\r\n",
							",m.ReceiptTime\r\n",
							",m.BKID\r\n",
							",innerquery.ceider\r\n",
							"from vw_aemanuallearningtasks m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"        and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"--and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
							"and trim(case when m.YearLevel is null then -1 else m.YearLevel end) = trim(innerquery.yearlevelsifcode)\r\n",
							"\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')\r\n",
							"\r\n",
							"--and m.studentfirstname = 'Rebecca' and m.studentlastname = 'VERNON'\r\n",
							"--and innerquery.ceider is null"
						],
						"outputs": [],
						"execution_count": 344
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_learningtasks_original\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"m.School_Name\r\n",
							",m.Area\r\n",
							",m.Semester\r\n",
							",m.Year\r\n",
							",m.SubjectName\r\n",
							",m.Code\r\n",
							",m.TeacherImportIdentifier\r\n",
							",m.TaskId\r\n",
							",m.IsSubjectWide\r\n",
							",m.TaskName\r\n",
							",m.StudentCode\r\n",
							",m.GovtCode1\r\n",
							",m.StudentLastName\r\n",
							",m.StudentFirstName\r\n",
							",m.YearLevel\r\n",
							"--,case when m.YearLevel is null then m.YearLevel else concat('Year ' , cast(m.YearLevel as string)) end\r\n",
							",m.ResultType\r\n",
							",m.PrimaryGrade\r\n",
							",m.CommentTimestamp\r\n",
							",m.CommentPosterCode\r\n",
							",m.CommentPosterName\r\n",
							",m.Result\r\n",
							",m.ComponentName\r\n",
							",m.ComponentType\r\n",
							",m.IsIncludedInReport\r\n",
							",m.ReportCycleName\r\n",
							",m.DueDate\r\n",
							",m.Category\r\n",
							",m.SubmissionStatus\r\n",
							",m.ReceiptTime\r\n",
							",m.BKID\r\n",
							",innerquery.ceider\r\n",
							"from vw_aemanuallearningtasks m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')"
						],
						"outputs": [],
						"execution_count": 315
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							" select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'"
						],
						"outputs": [],
						"execution_count": 329
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_aemanuallearningtasks\r\n",
							"where studentfirstname = 'Matilda' and studentlastname = 'WESTLEY'"
						],
						"outputs": [],
						"execution_count": 328
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_learningtasks_check_nulls\r\n",
							"where studentfirstname = 'Matilda' and studentlastname = 'WESTLEY'"
						],
						"outputs": [],
						"execution_count": 333
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_learningtasks_original\r\n",
							"where studentfirstname = 'Matilda' and studentlastname = 'WESTLEY'"
						],
						"outputs": [],
						"execution_count": 326
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"test_df_sm = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
							"\r\n",
							"#result_test = DMPersonDemographic_pseudo(test_df)\r\n",
							"# result_test.show()\r\n",
							"\r\n",
							"test_df_sm.createOrReplaceTempView('vw_aemanualsemesterreports')\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 298
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_aemanualsemesterreports"
						],
						"outputs": [],
						"execution_count": 299
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct yearlevel from vw_aemanuallearningtasks"
						],
						"outputs": [],
						"execution_count": 230
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_ae_manual_learningtasks\r\n",
							"-- as\r\n",
							"\r\n",
							"select \r\n",
							"--count(*)\r\n",
							"\r\n",
							"blanks.ceider\r\n",
							",blanks.studentfirstname\r\n",
							",blanks.studentlastname\r\n",
							",blanks.yearlevel\r\n",
							",blanks.school_name\r\n",
							"\r\n",
							" from (\r\n",
							"select \r\n",
							"m.* \r\n",
							", innerquery.ceider\r\n",
							"from vw_aemanuallearningtasks m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')\r\n",
							") blanks\r\n",
							"\r\n",
							"\r\n",
							"--where yearlevel is null\r\n",
							"where blanks.ceider is null"
						],
						"outputs": [],
						"execution_count": 295
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"m.* \r\n",
							", innerquery.ceider\r\n",
							", innerquery.firstname\r\n",
							", innerquery.lastname \r\n",
							", innerquery.schoolname \r\n",
							", innerquery.yearlevelsifcode\r\n",
							"from vw_aemanuallearningtasks m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')\r\n",
							"and innerquery.firstname = 'Emily'\r\n",
							"    and innerquery.lastname = 'WATERS'"
						],
						"outputs": [],
						"execution_count": 292
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"        --and a.firstname = 'Emily' \r\n",
							"            and a.lastname = 'WATERS'"
						],
						"outputs": [],
						"execution_count": 289
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"m.* \r\n",
							"-- lower(m.studentfirstname)\r\n",
							"-- , lower(innerquery.firstname)\r\n",
							"-- , lower(m.studentlastname)\r\n",
							"-- , lower(innerquery.lastname)\r\n",
							"-- , lower(m.studentyearlevel)\r\n",
							"-- , lower(innerquery.businessdesc)\r\n",
							"-- , lower(m.school_name)\r\n",
							"-- , lower(innerquery.schoolname)\r\n",
							", innerquery.ceider\r\n",
							"from vw_aemanualsemesterreports m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and trim(m.studentyearlevel) = trim(innerquery.yearlevelsifdesc)\r\n",
							"\r\n",
							"\r\n",
							"where m.studentfirstname = 'Austin' and m.studentlastname = 'Anoop'\r\n",
							"and m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
						],
						"outputs": [],
						"execution_count": 281
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_naplanparticipation\r\n",
							"-- as\r\n",
							"select \r\n",
							"*\r\n",
							"--, round(cast(#naplan_enrolled as float) / cast(#students_enrolled as float), 2) as participation_perc \r\n",
							", round(naplan_enrolled / students_enrolled , 2) as participation_perc \r\n",
							"from \r\n",
							"(select \r\n",
							"a.skcampus\r\n",
							", a.skyear\r\n",
							", a.skyearlevel\r\n",
							", sum(studentcount) as students_enrolled\r\n",
							", innerquery.naplan_enrolled from vw_factstudentenrolmentcounts a\r\n",
							"left join vw_dmdate b on a.skdate = b.skdate\r\n",
							"left join \r\n",
							"\t(select \r\n",
							"\t\tskcampus\r\n",
							"\t\t, skyear\r\n",
							"\t\t, skyearlevel\r\n",
							"\t\t, count(distinct skpersistentstudentid) as naplan_enrolled \r\n",
							"\t\tfrom vw_factnaplanstudentyearresult\r\n",
							"\t\t\tgroup by skcampus, skyear, skyearlevel) innerquery\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skyearlevel = innerquery.skyearlevel\r\n",
							"where a.skyearlevel in (11, 2, 12, 3) \r\n",
							"and b.MonthNumberOfYear = 5\r\n",
							"\r\n",
							"--and a.skcampus = 1489 and a.skyear = 85 and a.skyearlevel = 3 \r\n",
							"and a.skcampus = 9948 and a.skyear = 92 and a.skyearlevel = 2 \r\n",
							"--and a.skyear = 92\r\n",
							"\r\n",
							"group by a.skcampus, a.skyear, a.skyearlevel, innerquery.naplan_enrolled\r\n",
							") wholequery\r\n",
							"--order by skcampus, skyear, skyearlevel\r\n",
							""
						],
						"outputs": [],
						"execution_count": 234
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select a.*, b.skdate, b.MonthNumberOfYear from vw_factstudentenrolmentcounts a\r\n",
							"left join vw_dmdate b on a.skdate = b.skdate\r\n",
							"--where a.skcampus = 1489 and a.skyear = 85 and a.skyearlevel = 3 \r\n",
							"where a.skcampus = 9948 and a.skyear = 92 and a.skyearlevel = 2 \r\n",
							"and b.MonthNumberOfYear = 5"
						],
						"outputs": [],
						"execution_count": 235
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"\t\tskcampus\r\n",
							"\t\t, skyear\r\n",
							"\t\t, skyearlevel\r\n",
							"        , sknaplanassessmentid\r\n",
							"\t\t, count(distinct skpersistentstudentid) as naplan_enrolled \r\n",
							"\t\tfrom vw_factnaplanstudentyearresult\r\n",
							"\r\n",
							"        where \r\n",
							"        --skcampus = 1489 and skyear = 85 and skyearlevel = 3\r\n",
							"        skcampus = 9948 and skyear = 92 and skyearlevel = 2  \r\n",
							"        and skpersistentstudentid <> -1\r\n",
							"\r\n",
							"\t\t\tgroup by skcampus, skyear, skyearlevel, sknaplanassessmentid"
						],
						"outputs": [],
						"execution_count": 240
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"count(*)\r\n",
							"\t\tfrom vw_factnaplanstudentyearresult\r\n",
							"\r\n",
							"        --where skcampus = 1489 and skyear = 85 and skyearlevel = 3 \r\n",
							"        where skcampus = 9948 and skyear = 92 and skyearlevel = 2 \r\n",
							"        and skpersistentstudentid <> -1\r\n",
							""
						],
						"outputs": [],
						"execution_count": 242
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_semesterreports_checks\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"--count(*)\r\n",
							"\r\n",
							"blanks.ceider\r\n",
							",blanks.studentfirstname\r\n",
							",blanks.studentlastname\r\n",
							",blanks.studentyearlevel\r\n",
							",blanks.school_name\r\n",
							"\r\n",
							"\r\n",
							" from (\r\n",
							"\r\n",
							"select \r\n",
							"m.* \r\n",
							", innerquery.ceider\r\n",
							"\r\n",
							"from vw_aemanualsemesterreports m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and trim(m.studentyearlevel) = trim(innerquery.yearlevelsifdesc)\r\n",
							"\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') \r\n",
							" ) blanks\r\n",
							"\r\n",
							"--where blanks.studentyearlevel is null\r\n",
							"where blanks.ceider is null --3136"
						],
						"outputs": [],
						"execution_count": 279
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select check.schoolname, count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"a.ceider\r\n",
							",a.studentfirstname\r\n",
							",innerquery.firstname\r\n",
							",a.studentlastname\r\n",
							",innerquery.lastname\r\n",
							",a.studentyearlevel\r\n",
							",innerquery.yearlevelsifdesc\r\n",
							",a.school_name\r\n",
							",innerquery.schoolname\r\n",
							"\r\n",
							" from vw_ae_manual_semesterreports_checks a \r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(a.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(a.studentlastname) = lower(innerquery.lastname)\r\n",
							"--and lower(a.school_name) = lower(innerquery.schoolname)\r\n",
							"and trim(a.studentyearlevel) = trim(innerquery.yearlevelsifdesc)\r\n",
							"\r\n",
							") check\r\n",
							"group by check.schoolname"
						],
						"outputs": [],
						"execution_count": 278
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmcampus"
						],
						"outputs": [],
						"execution_count": 300
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_semesterreports"
						],
						"outputs": [],
						"execution_count": 297
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"        and a.firstname = 'Charlotte' and a.lastname = 'Dubois' --St Joseph's Catholic School, The Strand\r\n",
							"        "
						],
						"outputs": [],
						"execution_count": 280
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"#dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"#dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"#dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3\r\n",
							"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for naplan and acer participation view\r\n",
							"factstudentenrolmentcounts_df = spark.read.load(sourcep + \"/enrolment/DMFactStudentEnrolmentCounts_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"# stage 3 naplan and acer participation view\r\n",
							"factnaplanstudentyearresult_df = spark.read.load(source3p + \"/pilot/DMFactNaplanStudentYearResult_pseudo\", format='delta')\r\n",
							"factpatresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Learning Task\r\n",
							"ae_manuallearningtasks_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Semester Report\r\n",
							"ae_manualsemesterreports_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"\r\n",
							"factstudentenrolmentcounts_df.createOrReplaceTempView('vw_factstudentenrolmentcounts')\r\n",
							"factnaplanstudentyearresult_df.createOrReplaceTempView('vw_factnaplanstudentyearresult')\r\n",
							"factpatresults_df.createOrReplaceTempView('vw_factpatresults_df')\r\n",
							"\r\n",
							"ae_manuallearningtasks_df.createOrReplaceTempView('vw_aemanuallearningtasks')\r\n",
							"ae_manualsemesterreports_df.createOrReplaceTempView('vw_aemanualsemesterreports')"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"test_df_sm = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
							"\r\n",
							"#result_test = DMPersonDemographic_pseudo(test_df)\r\n",
							"# result_test.show()\r\n",
							"\r\n",
							"test_df_sm.createOrReplaceTempView('vw_aemanuallearningtasks')"
						],
						"outputs": [],
						"execution_count": 445
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ae_manual_learningtasks_2"
						],
						"outputs": [],
						"execution_count": 431
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_learningtasks_2\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"m.School_Name\r\n",
							",m.Area\r\n",
							",m.Semester\r\n",
							",m.Year\r\n",
							",m.SubjectName\r\n",
							",m.Code\r\n",
							",m.TeacherImportIdentifier\r\n",
							",m.TaskId\r\n",
							",m.IsSubjectWide\r\n",
							",m.TaskName\r\n",
							",m.StudentCode\r\n",
							",m.GovtCode1\r\n",
							",m.StudentLastName\r\n",
							",m.StudentFirstName\r\n",
							",m.YearLevel\r\n",
							"--,case when m.YearLevel is null then m.YearLevel else concat('Year ' , cast(m.YearLevel as string)) end\r\n",
							",m.ResultType\r\n",
							",m.PrimaryGrade\r\n",
							",m.CommentTimestamp\r\n",
							",m.CommentPosterCode\r\n",
							",m.CommentPosterName\r\n",
							",m.Result\r\n",
							",m.ComponentName\r\n",
							",m.ComponentType\r\n",
							",m.IsIncludedInReport\r\n",
							",m.ReportCycleName\r\n",
							",m.DueDate\r\n",
							",m.Category\r\n",
							",m.SubmissionStatus\r\n",
							",m.ReceiptTime\r\n",
							",m.BKID\r\n",
							",innerquery.ceider\r\n",
							",innerquery.schoolid\r\n",
							",innerquery.skcampus\r\n",
							"from vw_aemanuallearningtasks m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, b.skyearlevel,  c.schoolname, c.area, c.schoolid, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"        and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"--and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
							"and trim(case when m.YearLevel is null then -1 else m.YearLevel end) = trim(innerquery.yearlevelsifcode)\r\n",
							"and lower(m.area) = lower(innerquery.area)\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')"
						],
						"outputs": [],
						"execution_count": 456
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_learningtasks\r\n",
							"where ceider is null"
						],
						"outputs": [],
						"execution_count": 356
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ae_manual_learningtasks_2\r\n",
							"--where ceider is null"
						],
						"outputs": [],
						"execution_count": 434
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_learningtasks_2 limit 10"
						],
						"outputs": [],
						"execution_count": 457
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"test_df_sm = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
							"\r\n",
							"#result_test = DMPersonDemographic_pseudo(test_df)\r\n",
							"# result_test.show()\r\n",
							"\r\n",
							"test_df_sm.createOrReplaceTempView('vw_aemanualsemesterreports')\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 469
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_aemanualsemesterreports"
						],
						"outputs": [],
						"execution_count": 391
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_aemanualsemesterreports\r\n",
							"where result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
						],
						"outputs": [],
						"execution_count": 428
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ae_manual_semesterreports_test"
						],
						"outputs": [],
						"execution_count": 472
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_semesterreports_test\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"m.* \r\n",
							", innerquery.ceider\r\n",
							", innerquery.schoolid\r\n",
							", innerquery.skcampus\r\n",
							"-- innerquery.ceider\r\n",
							"-- ,m.studentfirstname\r\n",
							"-- ,innerquery.firstname\r\n",
							"-- ,m.studentlastname \r\n",
							"-- ,innerquery.lastname\r\n",
							"-- ,innerquery.skcampus\r\n",
							"-- ,m.school_name \r\n",
							"-- ,innerquery.schoolname\r\n",
							"-- ,m.area \r\n",
							"-- ,innerquery.area\r\n",
							"-- ,m.studentyearlevel \r\n",
							"-- ,innerquery.yearlevelsifdesc\r\n",
							"from vw_aemanualsemesterreports m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype\r\n",
							"    ,b.skcampus\r\n",
							"    ,c.schoolname, c.area, c.schoolid\r\n",
							"    ,b.skyearlevel \r\n",
							"    ,d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"         and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = trim(lower(innerquery.firstname))\r\n",
							"and lower(m.studentlastname) = trim(lower(innerquery.lastname))\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and lower(m.area) = lower(innerquery.area)\r\n",
							"and trim(lower(m.studentyearlevel)) = trim(lower(innerquery.yearlevelsifdesc))\r\n",
							"\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') \r\n",
							"\r\n",
							"--and m.studentfirstname = 'Oliver' and m.studentlastname = 'Henderson'"
						],
						"outputs": [],
						"execution_count": 473
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_semesterreports_test \r\n",
							"where ceider is null"
						],
						"outputs": [],
						"execution_count": 492
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"  select \r\n",
							"  a.studentfirstname, innerquery.firstname\r\n",
							"  , a.studentlastname, innerquery.lastname\r\n",
							"  , a.school_name, innerquery.schoolname\r\n",
							"  , a.area , innerquery.area\r\n",
							"  , a.studentyearlevel, innerquery.YearLevelSifDesc, innerquery.BusinessDesc\r\n",
							"  , innerquery.ceider\r\n",
							"  \r\n",
							"  from vw_aemanualsemesterreports a\r\n",
							"\r\n",
							"\r\n",
							"  left join (\r\n",
							"  select a.ceider, a.firstname, a.lastname, b.skcampus, b.skyearlevel, c.YearLevelSifDesc, c.BusinessDesc, d.schoolname , d.area from vw_dmpersondemographic a\r\n",
							"  left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"  left join vw_dmyearlevel c on b.skyearlevel = c.skyearlevel\r\n",
							"  left join vw_dmcampus d on b.skcampus = d.skcampus\r\n",
							"  where a.firstname = 'Oliver' and a.lastname = 'Henderson' \r\n",
							"      and a.persontype = 'Student') innerquery\r\n",
							"\r\n",
							"  on a.studentfirstname = innerquery.firstname\r\n",
							"  and a.studentlastname = innerquery.lastname\r\n",
							"  and a.school_name = innerquery.schoolname \r\n",
							"  and a.area = innerquery.area\r\n",
							"  and a.studentyearlevel = innerquery.YearLevelSifDesc\r\n",
							"  \r\n",
							"    where studentfirstname = 'Oliver' and studentlastname = 'Henderson'"
						],
						"outputs": [],
						"execution_count": 476
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select a.persontype from vw_dmpersondemographic a\r\n",
							"  left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"where a.firstname = 'Georgia' and a.lastname = 'Tate' "
						],
						"outputs": [],
						"execution_count": 481
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ae_manual_semesterreports_test\r\n",
							"where ceider is null"
						],
						"outputs": [],
						"execution_count": 438
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select a.ceider, a.firstname, a.lastname, a.persontype\r\n",
							"    ,b.skcampus\r\n",
							"    ,c.schoolname, c.area \r\n",
							"    ,b.skyearlevel \r\n",
							"    ,d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"         and b.iscurrentmilestone = 'True'\r\n",
							"             and a.firstname = 'Georgia' and a.lastname = 'Field'"
						],
						"outputs": [],
						"execution_count": 426
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_factpersonmilestone\r\n",
							"where ceider = 453347529"
						],
						"outputs": [],
						"execution_count": 427
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmyearlevel"
						],
						"outputs": [],
						"execution_count": 412
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ae_manual_semesterreports"
						],
						"outputs": [],
						"execution_count": 397
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ae_manual_semesterreports\r\n",
							"where ceider is null"
						],
						"outputs": [],
						"execution_count": 421
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select studentfirstname, studentlastname, studentyearlevel, school_name, area from vw_ae_manual_semesterreports\r\n",
							"where ceider is null"
						],
						"outputs": [],
						"execution_count": 420
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"select * from vw_ae_manual_semesterreports\r\n",
							"where ceider is null"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_aemanualsemesterreports\r\n",
							"where studentfirstname = 'Troy' and studentlastname = 'Holland'\r\n",
							"    and result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
						],
						"outputs": [],
						"execution_count": 373
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, c.area, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"        and firstname = 'Oliver' and lastname = 'Henderson'"
						],
						"outputs": [],
						"execution_count": 400
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select a.*, b.skyearlevel from vw_dmpersondemographic a\r\n",
							"left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"where trim(a.firstname) = 'Troy' and a.lastname = 'Holland'"
						],
						"outputs": [],
						"execution_count": 423
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"select \r\n",
							"m.* \r\n",
							", innerquery.ceider\r\n",
							"from vw_aemanualsemesterreports m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, c.schoolname, b.skyearlevel, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and trim(m.studentyearlevel) = trim(innerquery.yearlevelsifdesc)\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_naplanparticipation\r\n",
							"as\r\n",
							"select \r\n",
							"*\r\n",
							"--, round(cast(#naplan_enrolled as float) / cast(#students_enrolled as float), 2) as participation_perc \r\n",
							", round(naplan_enrolled / students_enrolled , 2) as participation_perc \r\n",
							"from \r\n",
							"(select \r\n",
							"a.skcampus\r\n",
							", a.skyear\r\n",
							", a.skyearlevel\r\n",
							", sum(studentcount) as students_enrolled\r\n",
							", innerquery.naplan_enrolled from vw_factstudentenrolmentcounts a\r\n",
							"left join vw_dmdate b on a.skdate = b.skdate\r\n",
							"left join \r\n",
							"\t(select \r\n",
							"\t\tskcampus\r\n",
							"\t\t, skyear\r\n",
							"\t\t, skyearlevel\r\n",
							"\t\t, count(distinct skpersistentstudentid) as naplan_enrolled \r\n",
							"\t\tfrom vw_factnaplanstudentyearresult\r\n",
							"\t\t\tgroup by skcampus, skyear, skyearlevel) innerquery\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skyearlevel = innerquery.skyearlevel\r\n",
							"where a.skyearlevel in (11, 2, 12, 3) \r\n",
							"and b.MonthNumberOfYear = 5\r\n",
							"group by a.skcampus, a.skyear, a.skyearlevel, innerquery.naplan_enrolled\r\n",
							") wholequery\r\n",
							"--order by skcampus, skyear, skyearlevel\r\n",
							""
						],
						"outputs": [],
						"execution_count": 493
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_naplanparticipation\r\n",
							"where skyear = 92\r\n",
							"and skcampus = 9948 \r\n",
							"--and skyearlevel = 2"
						],
						"outputs": [],
						"execution_count": 518
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"*\r\n",
							"--, round(cast(#naplan_enrolled as float) / cast(#students_enrolled as float), 2) as participation_perc \r\n",
							", round(naplan_enrolled / students_enrolled , 2) as participation_perc \r\n",
							"from \r\n",
							"(select \r\n",
							"a.skcampus\r\n",
							", a.skyear\r\n",
							", a.skyearlevel\r\n",
							", sum(studentcount) as students_enrolled\r\n",
							", innerquery.naplan_enrolled from vw_factstudentenrolmentcounts a\r\n",
							"left join vw_dmdate b on a.skdate = b.skdate\r\n",
							"left join \r\n",
							"\t(select \r\n",
							"\t\tskcampus\r\n",
							"\t\t, skyear\r\n",
							"\t\t, skyearlevel\r\n",
							"\t\t, count(distinct skpersistentstudentid) as naplan_enrolled \r\n",
							"\t\tfrom vw_factnaplanstudentyearresult\r\n",
							"\t\t\tgroup by skcampus, skyear, skyearlevel) innerquery\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skyearlevel = innerquery.skyearlevel\r\n",
							"--on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skdate = innerquery.skdate and a.skyearlevel = innerquery.skyearlevel \r\n",
							"where a.skyearlevel in (11, 2, 12, 3) \r\n",
							"and b.MonthNumberOfYear = 5\r\n",
							"group by a.skcampus, a.skyear, a.skyearlevel, innerquery.naplan_enrolled\r\n",
							") wholequery\r\n",
							"where skcampus = 8769 and skyear = 91 and skyearlevel = 2"
						],
						"outputs": [],
						"execution_count": 510
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"*\r\n",
							"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
							", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
							"from\r\n",
							"(\r\n",
							"select \r\n",
							"\t--*\r\n",
							"\ta.skcampus\r\n",
							"\t, a.skyear\r\n",
							"\t, a.skdate\r\n",
							"\t, a.skyearlevel\r\n",
							"\t, sum(studentcount) as students_enrolled\r\n",
							"\t, innerquery.count_of_tests \r\n",
							"from vw_factstudentenrolmentcounts a\r\n",
							"\r\n",
							"left join \r\n",
							"\t(\t\r\n",
							"\t\tselect innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\tskcampus\r\n",
							"\t\t\t\t\t\t, skyear\r\n",
							"\t\t\t\t\t\t, SKDate\r\n",
							"\t\t\t\t\t\t, skyearlevel\r\n",
							"\t\t\t\t\t\t, SKACERStudent\r\n",
							"\t\t\t\t\t\t, count(distinct skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df\r\n",
							"\t\t\t\t\t\t\tgroup by skcampus, skyear, skdate, skyearlevel, SKACERStudent --9\r\n",
							"\t\t\t) innerinner\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel\r\n",
							"\t) innerquery\r\n",
							"\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skdate = innerquery.skdate and a.skyearlevel = innerquery.skyearlevel \r\n",
							"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
							"group by a.skcampus, a.skyear, a.skdate, a.skyearlevel, innerquery.count_of_tests\r\n",
							") wholequery\r\n",
							"where skcampus = 8769 and skyear = 91 and skyearlevel = 2"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Current ACER code"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_acerparticipation\r\n",
							"-- as\r\n",
							"select \r\n",
							"*\r\n",
							"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
							", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
							"from\r\n",
							"(\r\n",
							"select \r\n",
							"\t--*\r\n",
							"\ta.skcampus\r\n",
							"\t, a.skyear\r\n",
							"\t, a.skdate\r\n",
							"\t, a.skyearlevel\r\n",
							"\t, sum(studentcount) as students_enrolled\r\n",
							"\t, innerquery.count_of_tests \r\n",
							"from vw_factstudentenrolmentcounts a\r\n",
							"\r\n",
							"left join \r\n",
							"\t(\t\r\n",
							"\t\tselect innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\tskcampus\r\n",
							"\t\t\t\t\t\t, skyear\r\n",
							"\t\t\t\t\t\t, SKDate\r\n",
							"\t\t\t\t\t\t, skyearlevel\r\n",
							"\t\t\t\t\t\t, SKACERStudent\r\n",
							"\t\t\t\t\t\t, count(distinct skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df\r\n",
							"\t\t\t\t\t\t\tgroup by skcampus, skyear, skdate, skyearlevel, SKACERStudent --9\r\n",
							"\t\t\t) innerinner\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel\r\n",
							"\t) innerquery\r\n",
							"\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skdate = innerquery.skdate and a.skyearlevel = innerquery.skyearlevel \r\n",
							"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
							"group by a.skcampus, a.skyear, a.skdate, a.skyearlevel, innerquery.count_of_tests\r\n",
							") wholequery\r\n",
							"\r\n",
							"where skcampus = 1898 and skyear = 92 and skyearlevel = 10"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"*\r\n",
							"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
							", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
							"from\r\n",
							"(\r\n",
							"select \r\n",
							"\t--*\r\n",
							"\ta.skcampus\r\n",
							"\t, a.skyear\r\n",
							"\t, a.skdate\r\n",
							"\t, a.skyearlevel\r\n",
							"\t, sum(studentcount) as students_enrolled\r\n",
							"\t, innerquery.count_of_tests \r\n",
							"from vw_factstudentenrolmentcounts a\r\n",
							"\r\n",
							"left join \r\n",
							"\t(\t\r\n",
							"\t\tselect innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\tskcampus\r\n",
							"\t\t\t\t\t\t, skyear\r\n",
							"\t\t\t\t\t\t, SKDate\r\n",
							"\t\t\t\t\t\t, skyearlevel\r\n",
							"\t\t\t\t\t\t, SKACERStudent\r\n",
							"\t\t\t\t\t\t, count(distinct skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df\r\n",
							"\t\t\t\t\t\t\tgroup by skcampus, skyear, skdate, skyearlevel, SKACERStudent --9\r\n",
							"\t\t\t) innerinner\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel\r\n",
							"\t) innerquery\r\n",
							"\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skdate = innerquery.skdate and a.skyearlevel = innerquery.skyearlevel \r\n",
							"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
							"group by a.skcampus, a.skyear, a.skdate, a.skyearlevel, innerquery.count_of_tests\r\n",
							") wholequery\r\n",
							"where skcampus = 1898 and skyear = 92 and skyearlevel = 10"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\ta.skcampus\r\n",
							"\t\t\t\t\t\t, a.skyear\r\n",
							"\t\t\t\t\t\t, a.SKDate\r\n",
							"\t\t\t\t\t\t, a.skyearlevel\r\n",
							"\t\t\t\t\t\t, a.SKACERStudent\r\n",
							"                        , b.year \r\n",
							"                        , b.monthnumberofyear\r\n",
							"\t\t\t\t\t\t, count(distinct a.skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df a\r\n",
							"                        left join vw_dmdate b\r\n",
							"                        on a.skdate = b.skdate\r\n",
							"\t\t\t\t\t\t\tgroup by a.skcampus, a.skyear, a.skdate, a.skyearlevel, a.SKACERStudent, b.year, b.monthnumberofyear --9\r\n",
							"\t\t\t) innerinner\r\n",
							"            where innerinner.skcampus = 1898 and innerinner.skyear = 92 and innerinner.skyearlevel = 10\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear\r\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmdate\r\n",
							"where skdate in (36073, 36134, 36058); \r\n",
							"--year, monthnumberofyear, daynumberofmonth"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Code below gives the breakdown, can filter out the nulls\r\n",
							"But of the 3 dates, which one to use? Bringing in all the dates will give duplicate information?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"*\r\n",
							"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
							", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
							"from\r\n",
							"(\r\n",
							"select \r\n",
							"\t--*\r\n",
							"\ta.skcampus\r\n",
							"\t, a.skyear\r\n",
							"\t--, a.skdate\r\n",
							"\t, a.skyearlevel\r\n",
							"\t, sum(studentcount) as students_enrolled\r\n",
							"\t, innerquery.count_of_tests \r\n",
							"from vw_factstudentenrolmentcounts a\r\n",
							"\r\n",
							"left join vw_dmdate datedetails\r\n",
							"on a.skdate = datedetails.skdate\r\n",
							"\r\n",
							"\r\n",
							"left join \r\n",
							"\t(\t\r\n",
							"\t\tselect innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\ta.skcampus\r\n",
							"\t\t\t\t\t\t, a.skyear\r\n",
							"\t\t\t\t\t\t, a.SKDate\r\n",
							"\t\t\t\t\t\t, a.skyearlevel\r\n",
							"\t\t\t\t\t\t, a.SKACERStudent\r\n",
							"                        , b.year \r\n",
							"                        , b.monthnumberofyear\r\n",
							"\t\t\t\t\t\t, count(distinct a.skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df a\r\n",
							"                        left join vw_dmdate b\r\n",
							"                        on a.skdate = b.skdate\r\n",
							"\t\t\t\t\t\t\tgroup by a.skcampus, a.skyear, a.skdate, a.skyearlevel, a.SKACERStudent, b.year, b.monthnumberofyear --9\r\n",
							"\t\t\t) innerinner\r\n",
							"            where innerinner.skcampus = 1898 and innerinner.skyear = 92 and innerinner.skyearlevel = 10\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear\r\n",
							"\t) innerquery\r\n",
							"\r\n",
							"on a.skcampus = innerquery.skcampus \r\n",
							"and a.skyear = innerquery.skyear \r\n",
							"--and a.skdate = innerquery.skdate \r\n",
							"and a.skyearlevel = innerquery.skyearlevel \r\n",
							"and datedetails.monthnumberofyear = innerquery.monthnumberofyear\r\n",
							"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
							"group by a.skcampus\r\n",
							", a.skyear\r\n",
							"--, a.skdate\r\n",
							", a.skyearlevel\r\n",
							", innerquery.count_of_tests\r\n",
							") wholequery\r\n",
							"where skcampus = 1898 and skyear = 92 and skyearlevel = 10"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\ta.skcampus\r\n",
							"\t\t\t\t\t\t, a.skyear\r\n",
							"\t\t\t\t\t\t, a.SKDate\r\n",
							"\t\t\t\t\t\t, a.skyearlevel\r\n",
							"\t\t\t\t\t\t, a.SKACERStudent\r\n",
							"                        , b.year \r\n",
							"                        , b.monthnumberofyear\r\n",
							"\t\t\t\t\t\t, count(distinct a.skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df a\r\n",
							"                        left join vw_dmdate b\r\n",
							"                        on a.skdate = b.skdate\r\n",
							"\t\t\t\t\t\t\tgroup by a.skcampus, a.skyear, a.skdate, a.skyearlevel, a.SKACERStudent, b.year, b.monthnumberofyear --9\r\n",
							"\t\t\t) innerinner\r\n",
							"            where innerinner.skcampus = 1898 and innerinner.skyear = 92 and innerinner.skyearlevel = 10\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_factpatresults_df limit 3\r\n",
							"--how to tell which result to use?"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"domainselection_df = spark.read.load(sourcep + \"/_GeneralData/DomainSelection_pseudo\", format='delta')\r\n",
							"flagimagedata_df = spark.read.load(sourcep + \"/_GeneralData/FlagImageData_pseudo\", format='delta')\r\n",
							"genderimagedata_df = spark.read.load(sourcep + \"/_GeneralData/GenderImageData_pseudo\", format='delta')\r\n",
							"icsea_df = spark.read.load(sourcep + \"/_GeneralData/ICSEA_pseudo\", format='delta')\r\n",
							"schoollist_df = spark.read.load(sourcep + \"/_GeneralData/School List_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"domainselection_df.createOrReplaceTempView('vw_domainselection')\r\n",
							"flagimagedata_df.createOrReplaceTempView('vw_flagimagedata')\r\n",
							"genderimagedata_df.createOrReplaceTempView('vw_genderimagedata')\r\n",
							"icsea_df.createOrReplaceTempView('vw_icsea')\r\n",
							"schoollist_df.createOrReplaceTempView('vw_schoollist')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_flagimagedata"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsactivity_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
							"odsactivityenrolment_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
							"odscompasssubject_df = spark.read.load(sourcep + \"/_ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
							"odsstaffdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
							"odsstudentdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"\r\n",
							"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') #1426143\r\n",
							"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') #2040598\r\n",
							"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') #47729\r\n",
							"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') #18664\r\n",
							"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') #121511\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 165
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSActivity limit 5"
						],
						"outputs": [],
						"execution_count": 166
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- check how many records for current records\r\n",
							"-- bring in IsCurrent flag for each table (and then filter in powerbi)\r\n",
							"-- add academic year\r\n",
							"\r\n",
							"SELECT distinct\r\n",
							"d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							",s.SubjectLongName\r\n",
							",a.SubjectCode\r\n",
							",a.ActivityName\r\n",
							",a.ActivityTypeDescription\r\n",
							",ae.ActivityEnrolmentStartDate\r\n",
							",ae.ActivityEnrolmentEndDate\r\n",
							",staff.FirstName +' '+ staff.LastName AS StaffName\r\n",
							",a.CampusId AS AGEID\r\n",
							",c.CampusSuburbAndName\r\n",
							",c.CompassSchoolURL\r\n",
							"FROM \r\n",
							"vw_CompassODSStudentDemographic d \r\n",
							"JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND ae.iscurrent is True\r\n",
							"JOIN vw_CompassODSActivity a \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND a.IsCurrent is True\r\n",
							"\r\n",
							"-- --its possible for an activity to not be linked to a subject hence the left outer join.\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"--AND s.AcademicYear = 2021 \r\n",
							"\r\n",
							"-- --join to get the teacher of the class\r\n",
							"LEFT OUTER JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND staff.iscurrent is True\r\n",
							"\r\n",
							"JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\r\n",
							"WHERE \r\n",
							"d.iscurrent is True\r\n",
							"-- AND ae.ActivityEnrolmentStartDate >= '2021-01-01'\r\n",
							"-- AND ae.ActivityEnrolmentStartDate < '2023-01-01'\r\n",
							"AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"-- --ORDER BY a.CampusId, d.CompassPersonId, ae.ActivityEnrolmentStartDate, a.ActivityName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSCompassSubject limit 10"
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--Year, YearLevel, CampusID, SchoolName, TeacherID, Teacher name, StudentID, Student Name, Class name/ID\r\n",
							"\r\n",
							"select * from vw_CompassODSStaffDemographic where iscurrent is True limit 10"
						],
						"outputs": [],
						"execution_count": 73
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--Year, YearLevel, CampusID, SchoolName, TeacherID, Teacher name, StudentID, Student Name, Class name/ID\r\n",
							"\r\n",
							"select * from vw_CompassODSStudentDemographic limit 3"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--Year, YearLevel, CampusID, SchoolName, TeacherID, Teacher name, StudentID, Student Name, Class name/ID\r\n",
							"\r\n",
							"select \r\n",
							"staff.firstname\r\n",
							", staff.lastname \r\n",
							", staff.CompassPersonId as StaffID\r\n",
							", staff.CampusId\r\n",
							", c.schoolname\r\n",
							"--,a.SubjectCode\r\n",
							"--,a.ActivityName\r\n",
							"--,a.ActivityTypeDescription\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,a.ManagingCompassPersonId \r\n",
							"-- ,ae.ActivityEnrolmentStartDate\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							",d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId as StudentID\r\n",
							",d.CampusId\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where staff.firstname = 'Louise' and staff.lastname = 'Costabeber' and staff.iscurrent is True\r\n",
							""
						],
						"outputs": [],
						"execution_count": 66
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmcampus where bkcampusid = 17227"
						],
						"outputs": [],
						"execution_count": 65
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--Year, YearLevel, CampusID, SchoolName, TeacherID, Teacher name, StudentID, Student Name, Class name/ID\r\n",
							"\r\n",
							"select * from \r\n",
							"(\r\n",
							"select \r\n",
							"staff.firstname\r\n",
							", staff.lastname \r\n",
							", staff.CompassPersonId as StaffID\r\n",
							", staff.CampusId\r\n",
							", c.schoolname\r\n",
							", s.AcademicYear\r\n",
							", s.subjectyearlevel\r\n",
							"--,a.SubjectCode\r\n",
							",a.ActivityName\r\n",
							",a.ActivityTypeDescription\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,a.ManagingCompassPersonId \r\n",
							"-- ,ae.ActivityEnrolmentStartDate\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							",d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							"-- ,d.CompassPersonId as StudentID\r\n",
							"-- ,d.CampusId\r\n",
							"-- ,d.CompassPersonId\r\n",
							"-- ,d.GovCode1 AS Ceider\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"-- AND s.AcademicYear = 2023 \r\n",
							"\r\n",
							"--where staff.firstname = 'Louise' and staff.lastname = 'Costabeber' and staff.iscurrent is True\r\n",
							"--where staff.firstname = 'Mark' and staff.lastname = 'Carlon' and staff.iscurrent is True\r\n",
							"where staff.firstname = 'Chloe' and staff.lastname = 'McLaren' and staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"-- where innerquery.academicyear = 2023"
						],
						"outputs": [],
						"execution_count": 109
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--Year, YearLevel, CampusID, SchoolName, TeacherID, Teacher name, StudentID, Student Name, Class name/ID\r\n",
							"\r\n",
							"select * from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year --2023\r\n",
							",s.subjectyearlevel as YearLevel\r\n",
							",staff.campusid \r\n",
							",c.schoolname\r\n",
							"\r\n",
							",staff.bkstaff \r\n",
							",staff.compasspersonid as StaffCompassPersonId\r\n",
							",staff.firstname as TeacherFirstName\r\n",
							",staff.lastname as TeacherLastName\r\n",
							"\r\n",
							",d.bkstudent\r\n",
							",d.compasspersonid as StudentCompassPersonId\r\n",
							",d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							"\r\n",
							",a.SubjectCode\r\n",
							",a.ActivityName\r\n",
							",a.ActivityCode\r\n",
							",a.ActivityTypeDescription\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,a.ManagingCompassPersonId \r\n",
							",ae.ActivityEnrolmentStartDate\r\n",
							",ae.ActivityEnrolmentEndDate\r\n",
							"\r\n",
							",s.subjectshortname \r\n",
							",s.subjectyearlevel \r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"\r\n",
							"where staff.firstname = 'Chloe' and staff.lastname = 'McLaren' and staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where innerquery.Year = 2021\r\n",
							"and studentlastname = 'Choveaux'\r\n",
							"\r\n",
							"--total count = 15739\r\n",
							"--academicyear = 2023 = 966"
						],
						"outputs": [],
						"execution_count": 168
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSActivityEnrolment \r\n",
							"where campusid = 5354 and iscurrent is True and activitycode = 'SCI_2-6_YR3'\r\n",
							""
						],
						"outputs": [],
						"execution_count": 197
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- select \r\n",
							"-- --distinct subjectyearlevel \r\n",
							"-- *\r\n",
							"-- from vw_CompassODSCompassSubject \r\n",
							"-- where academicyear = 2023\r\n",
							"-- limit 10\r\n",
							"\r\n",
							"select subjectyearlevel, count(*) from vw_CompassODSCompassSubject\r\n",
							"where academicyear = 2023\r\n",
							"group by subjectyearlevel "
						],
						"outputs": [],
						"execution_count": 193
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--ae.activitycode, ae.activityname, ae.subjectcode, s.academicyear, subjectshortname, subjectyearlevel \r\n",
							"distinct activitycode, activityname, subjectcode\r\n",
							"from vw_CompassODSActivityEnrolment ae\r\n",
							"\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"-- AND a.CampusId = s.CampusId\r\n",
							"-- AND s.IsCurrent is True\r\n",
							"\r\n",
							"--where subjectyearlevel = 2  -----------------------------------------shows subjectyearlevel is inconsistent as there are activityname = 'MATH_2-6_Yr 5/6B'\r\n",
							"--where subjectyearlevel = 1 -----------------------------------------shows subjectyearlevel is inconsistent as there are activityname = 'ART_2-6_3A', 'EPROJ_P-1_Yr 1C', 'TECH_P-1_PREPB'\r\n",
							"--where subjectyearlevel = 7 -----------------------------------------shows subjectyearlevel is inconsistent as there are activityname = '07HPE2', 'EXTTCTC1'\r\n",
							"--where subjectyearlevel = 11 -----------------------------------------shows subjectyearlevel is inconsistent as there are activityname = '11RAE2', 'EXTTCTC1'\r\n",
							"-- and activityname like '%YR%'\r\n",
							"where subjectyearlevel = 'CY'"
						],
						"outputs": [],
						"execution_count": 206
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSCompassSubject \r\n",
							"where subjectyearlevel = 'CY'\r\n",
							"\r\n",
							"--academicyear, subjectshortname, subjectyearlevel"
						],
						"outputs": [],
						"execution_count": 181
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select *\r\n",
							"--ActivityName, ActivityCode \r\n",
							"from vw_CompassODSActivity\r\n",
							""
						],
						"outputs": [],
						"execution_count": 182
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--distinct subjectyearlevel \r\n",
							"*\r\n",
							"from vw_CompassODSCompassSubject \r\n",
							"-- where academicyear = 2023\r\n",
							"-- limit 5"
						],
						"outputs": [],
						"execution_count": 159
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_CompassODSActivity; --1426143"
						],
						"outputs": [],
						"execution_count": 113
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct academicyear from vw_CompassODSCompassSubject\r\n",
							"order by academicyear desc"
						],
						"outputs": [],
						"execution_count": 98
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- check how many records for current records\r\n",
							"-- bring in IsCurrent flag for each table (and then filter in powerbi)\r\n",
							"-- add academic year\r\n",
							"\r\n",
							"SELECT distinct\r\n",
							"d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							",s.SubjectLongName\r\n",
							",a.SubjectCode\r\n",
							",a.ActivityName\r\n",
							",a.ActivityTypeDescription\r\n",
							",a.ManagingCompassPersonId\r\n",
							",staff.firstname\r\n",
							",staff.lastname\r\n",
							",ae.ActivityEnrolmentStartDate\r\n",
							",ae.ActivityEnrolmentEndDate\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
							",a.CampusId AS AGEID\r\n",
							",c.CampusSuburbAndName\r\n",
							",c.CompassSchoolURL\r\n",
							",s.AcademicYear\r\n",
							",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
							",a.IsCurrent as IsCurrent_Activity\r\n",
							",s.IsCurrent as IsCurrent_Subject\r\n",
							",staff.iscurrent as IsCurrent_Staff\r\n",
							",d.iscurrent as IsCurrent_Student\r\n",
							"\r\n",
							"\r\n",
							"FROM \r\n",
							"vw_CompassODSStudentDemographic d \r\n",
							"\r\n",
							"JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"--AND ae.iscurrent is True\r\n",
							"\r\n",
							"JOIN vw_CompassODSActivity a \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"--AND a.IsCurrent is True\r\n",
							"\r\n",
							"-- --its possible for an activity to not be linked to a subject hence the left outer join.\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"--AND s.IsCurrent is True\r\n",
							"-- AND s.AcademicYear = 2021 -- Remove, but add in flag for filter\r\n",
							"\r\n",
							"-- --join to get the teacher of the class\r\n",
							"LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"-- AND staff.iscurrent is True\r\n",
							"\r\n",
							"JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\r\n",
							"WHERE \r\n",
							"d.iscurrent is True\r\n",
							"-- AND ae.ActivityEnrolmentStartDate >= '2021-01-01'\r\n",
							"-- AND ae.ActivityEnrolmentStartDate < '2023-01-01'\r\n",
							"AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"    -- and d.FirstName = 'Charlie'\r\n",
							"    --     and d.lastname = 'Crawford'\r\n",
							"\r\n",
							"-- order by ae.ActivityEnrolmentStartDate desc"
						],
						"outputs": [],
						"execution_count": 89
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Below is outdated but the logic and what fields is required is correct"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"-- -- check how many records for current records\r\n",
							"-- -- bring in IsCurrent flag for each table (and then filter in powerbi)\r\n",
							"-- -- add academic year\r\n",
							"\r\n",
							"-- SELECT distinct\r\n",
							"-- d.FirstName AS StudentFirstName \r\n",
							"-- ,d.LastName AS StudentLastName\r\n",
							"-- ,d.CompassPersonId\r\n",
							"-- ,d.GovCode1 AS Ceider\r\n",
							"-- ,s.SubjectLongName\r\n",
							"-- ,a.SubjectCode\r\n",
							"-- ,a.ActivityName\r\n",
							"-- ,a.ActivityTypeDescription\r\n",
							"-- ,ae.ActivityEnrolmentStartDate\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							"-- ,staff.FirstName +' '+ staff.LastName AS StaffName\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,c.CampusSuburbAndName\r\n",
							"-- ,c.CompassSchoolURL\r\n",
							"-- FROM \r\n",
							"-- vw_CompassODSStudentDemographic d \r\n",
							"-- JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"-- ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"-- AND ae.iscurrent is True\r\n",
							"-- JOIN vw_CompassODSActivity a \r\n",
							"-- ON ae.ActivityCode = a.ActivityCode\r\n",
							"-- AND ae.CampusId = a.CampusId\r\n",
							"-- AND a.IsCurrent is True\r\n",
							"\r\n",
							"-- -- --its possible for an activity to not be linked to a subject hence the left outer join.\r\n",
							"-- LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"-- ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"-- AND a.CampusId = s.CampusId\r\n",
							"-- AND s.IsCurrent is True\r\n",
							"-- --AND s.AcademicYear = 2021 \r\n",
							"\r\n",
							"-- -- --join to get the teacher of the class\r\n",
							"-- LEFT OUTER JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"-- ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"-- AND staff.iscurrent is True\r\n",
							"\r\n",
							"-- JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\r\n",
							"-- WHERE \r\n",
							"-- d.iscurrent is True\r\n",
							"-- -- AND ae.ActivityEnrolmentStartDate >= '2021-01-01'\r\n",
							"-- -- AND ae.ActivityEnrolmentStartDate < '2023-01-01'\r\n",
							"-- AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"-- -- --ORDER BY a.CampusId, d.CompassPersonId, ae.ActivityEnrolmentStartDate, a.ActivityName\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Extract of table for Manoj"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--Year, YearLevel, CampusID, SchoolName, TeacherID, Teacher name, StudentID, Student Name, Class name/ID\r\n",
							"\r\n",
							"select * from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year --2023\r\n",
							",s.subjectyearlevel as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							"\r\n",
							"-- ,staff.bkstaff \r\n",
							",staff.compasspersonid as TeacherID\r\n",
							"-- ,staff.firstname as TeacherFirstName\r\n",
							"-- ,staff.lastname as TeacherLastName\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							"\r\n",
							"\r\n",
							"-- ,d.bkstudent\r\n",
							",d.compasspersonid as StudentID\r\n",
							"-- ,d.FirstName AS StudentFirstName \r\n",
							"-- ,d.LastName AS StudentLastName\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							"\r\n",
							"-- \r\n",
							"-- ,a.ActivityName\r\n",
							"-- ,a.ActivityCode\r\n",
							"-- ,a.ActivityTypeDescription\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,a.ManagingCompassPersonId \r\n",
							"-- ,ae.ActivityEnrolmentStartDate\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							"\r\n",
							",s.subjectshortname as ClassName\r\n",
							"-- ,s.subjectyearlevel \r\n",
							",a.SubjectCode as ClassID\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"\r\n",
							"where staff.firstname = 'Chloe' and staff.lastname = 'McLaren' and staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where innerquery.Year = 2021\r\n",
							"--and StudentName like '%Choveaux'\r\n",
							"\r\n",
							"--total count = 15739\r\n",
							"--academicyear = 2023 = 966"
						],
						"outputs": [],
						"execution_count": 217
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
							"\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')"
						],
						"outputs": [],
						"execution_count": 210
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmyearlevel"
						],
						"outputs": [],
						"execution_count": 215
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct govcode1 from vw_CompassODSStudentDemographic limit 10;"
						],
						"outputs": [],
						"execution_count": 209
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"#dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"#dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"#dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3\r\n",
							"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for naplan and acer participation view\r\n",
							"factstudentenrolmentcounts_df = spark.read.load(sourcep + \"/enrolment/DMFactStudentEnrolmentCounts_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"# stage 3 naplan and acer participation view\r\n",
							"factnaplanstudentyearresult_df = spark.read.load(source3p + \"/pilot/DMFactNaplanStudentYearResult_pseudo\", format='delta')\r\n",
							"factpatresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Learning Task\r\n",
							"ae_manuallearningtasks_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Semester Report\r\n",
							"ae_manualsemesterreports_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for ODS tables (+ dmcampus_df already added above)\r\n",
							"odsactivity_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
							"odsactivityenrolment_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
							"odscompasssubject_df = spark.read.load(sourcep + \"/_ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
							"odsstaffdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
							"odsstudentdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"\r\n",
							"factstudentenrolmentcounts_df.createOrReplaceTempView('vw_factstudentenrolmentcounts')\r\n",
							"factnaplanstudentyearresult_df.createOrReplaceTempView('vw_factnaplanstudentyearresult')\r\n",
							"factpatresults_df.createOrReplaceTempView('vw_factpatresults_df')\r\n",
							"\r\n",
							"ae_manuallearningtasks_df.createOrReplaceTempView('vw_aemanuallearningtasks')\r\n",
							"ae_manualsemesterreports_df.createOrReplaceTempView('vw_aemanualsemesterreports')\r\n",
							"\r\n",
							"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \r\n",
							"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \r\n",
							"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \r\n",
							"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \r\n",
							"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') "
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmcampus limit 5"
						],
						"outputs": [],
						"execution_count": 249
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"dmcampus_original_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"dmcampus_original_df.createOrReplaceTempView('vw_dmcampus_original')"
						],
						"outputs": [],
						"execution_count": 250
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select CompassSchoolURL from vw_dmcampus_original limit 5"
						],
						"outputs": [],
						"execution_count": 252
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 274
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_activestudent limit 5"
						],
						"outputs": [],
						"execution_count": 219
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--Year, YearLevel, CampusID, SchoolName, TeacherID, Teacher name, StudentID, Student Name, Class name/ID\r\n",
							"\r\n",
							"select * from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year --2023\r\n",
							"-- ,s.subjectyearlevel as YearLevel\r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							"\r\n",
							"-- ,staff.bkstaff \r\n",
							",staff.compasspersonid as TeacherID\r\n",
							"-- ,staff.firstname as TeacherFirstName\r\n",
							"-- ,staff.lastname as TeacherLastName\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							"\r\n",
							"\r\n",
							"-- ,d.bkstudent\r\n",
							",d.compasspersonid as StudentID\r\n",
							"-- ,d.FirstName AS StudentFirstName \r\n",
							"-- ,d.LastName AS StudentLastName\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							"\r\n",
							"-- \r\n",
							"-- ,a.ActivityName\r\n",
							"-- ,a.ActivityCode\r\n",
							"-- ,a.ActivityTypeDescription\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,a.ManagingCompassPersonId \r\n",
							",ae.ActivityEnrolmentStartDate ----------------- if there are duplicates, need to get the latest/highest value?\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							"\r\n",
							",s.subjectshortname as ClassName\r\n",
							"-- ,s.subjectyearlevel \r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,d.govcode1 as ceiderfromstudent\r\n",
							"-- ,active.ceider\r\n",
							"-- ,active.SKYearLevel\r\n",
							"-- ,yl.yearlevelsifcode\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"where staff.firstname = 'Chloe' and staff.lastname = 'McLaren' and staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where innerquery.Year = 2021\r\n",
							"--and innerquery.yearlevel in ('P', '1', '2')\r\n",
							"and StudentName like '%Choveaux'\r\n",
							"\r\n",
							"--total count = 15739\r\n",
							"--academicyear = 2023 = 966"
						],
						"outputs": [],
						"execution_count": 239
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmyearlevel"
						],
						"outputs": [],
						"execution_count": 235
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--Year, YearLevel, CampusID, SchoolName, TeacherID, Teacher name, StudentID, Student Name, Class name/ID\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate)\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year --2023\r\n",
							"-- ,s.subjectyearlevel as YearLevel\r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							"\r\n",
							"-- ,staff.bkstaff \r\n",
							",staff.compasspersonid as TeacherID\r\n",
							"-- ,staff.firstname as TeacherFirstName\r\n",
							"-- ,staff.lastname as TeacherLastName\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							"\r\n",
							"\r\n",
							"-- ,d.bkstudent\r\n",
							",d.compasspersonid as StudentID\r\n",
							"-- ,d.FirstName AS StudentFirstName \r\n",
							"-- ,d.LastName AS StudentLastName\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							"\r\n",
							"-- \r\n",
							"-- ,a.ActivityName\r\n",
							"-- ,a.ActivityCode\r\n",
							"-- ,a.ActivityTypeDescription\r\n",
							"-- ,a.CampusId AS AGEID\r\n",
							"-- ,a.ManagingCompassPersonId \r\n",
							",ae.ActivityEnrolmentStartDate ----------------- if there are duplicates, need to get the latest/highest value?\r\n",
							"-- ,ae.ActivityEnrolmentEndDate\r\n",
							"\r\n",
							",s.subjectshortname as ClassName\r\n",
							"-- ,s.subjectyearlevel \r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,d.govcode1 as ceiderfromstudent\r\n",
							"-- ,active.ceider\r\n",
							"-- ,active.SKYearLevel\r\n",
							"-- ,yl.yearlevelsifcode\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"where \r\n",
							"-- staff.firstname = 'Chloe' and staff.lastname = 'McLaren' and \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"--StudentName like '%Choveaux'\r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							"\r\n",
							"--total count = 15739\r\n",
							"--academicyear = 2023 = 966"
						],
						"outputs": [],
						"execution_count": 246
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_learningtasks\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"concat('LT',row_number() OVER (ORDER BY ceider)) as idcolumn,\r\n",
							"m.School_Name\r\n",
							",m.Area\r\n",
							",m.Semester\r\n",
							",m.Year\r\n",
							",m.SubjectName\r\n",
							",m.Code\r\n",
							",m.TeacherImportIdentifier\r\n",
							",m.TaskId\r\n",
							",m.IsSubjectWide\r\n",
							",m.TaskName\r\n",
							",m.StudentCode\r\n",
							",m.GovtCode1\r\n",
							",m.StudentLastName\r\n",
							",m.StudentFirstName\r\n",
							",m.YearLevel\r\n",
							"--,case when m.YearLevel is null then m.YearLevel else concat('Year ' , cast(m.YearLevel as string)) end\r\n",
							",m.ResultType\r\n",
							",m.PrimaryGrade\r\n",
							",m.CommentTimestamp\r\n",
							",m.CommentPosterCode\r\n",
							",m.CommentPosterName\r\n",
							",m.Result\r\n",
							",m.ComponentName\r\n",
							",m.ComponentType\r\n",
							",m.IsIncludedInReport\r\n",
							",m.ReportCycleName\r\n",
							",m.DueDate\r\n",
							",m.Category\r\n",
							",m.SubmissionStatus\r\n",
							",m.ReceiptTime\r\n",
							",m.BKID\r\n",
							",innerquery.ceider\r\n",
							",innerquery.schoolid\r\n",
							",innerquery.skcampus\r\n",
							"from vw_aemanuallearningtasks m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, b.skyearlevel,  c.schoolname, c.area, c.schoolid, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"        and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"--and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
							"and trim(case when m.YearLevel is null then -1 else m.YearLevel end) = trim(innerquery.yearlevelsifcode)\r\n",
							"and lower(m.area) = lower(innerquery.area)\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select idcolumn from vw_ae_manual_learningtasks where idcolumn = 'LT18518'"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ae_manual_learningtasks"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ae_manual_semesterreports\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"concat('SR',row_number() OVER (ORDER BY ceider)) as idcolumn,\r\n",
							"m.* \r\n",
							", innerquery.ceider\r\n",
							", innerquery.schoolid\r\n",
							", innerquery.skcampus\r\n",
							"from vw_aemanualsemesterreports m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype\r\n",
							"    ,b.skcampus\r\n",
							"    ,c.schoolname, c.area, c.schoolid\r\n",
							"    ,b.skyearlevel \r\n",
							"    ,d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"         and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = trim(lower(innerquery.firstname))\r\n",
							"and lower(m.studentlastname) = trim(lower(innerquery.lastname))\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and lower(m.area) = lower(innerquery.area)\r\n",
							"and trim(lower(m.studentyearlevel)) = trim(lower(innerquery.yearlevelsifdesc))\r\n",
							"\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ae_manual_semesterreports\r\n",
							"where idcolumn = 'SR18049'"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- select count(*) from \r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ae_manual_combined\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"concat('LT',row_number() OVER (ORDER BY ceider)) as id\r\n",
							", School_Name\r\n",
							", Area\r\n",
							", Semester\r\n",
							", Year\r\n",
							", trim(substring(subjectname, 3)) as SubjectName \r\n",
							", code as ClassCode\r\n",
							", StudentCode\r\n",
							", GovtCode1\r\n",
							", StudentFirstName\r\n",
							", initcap(studentlastname) as StudentLastName\r\n",
							", CASE\r\n",
							"    WHEN yearlevel is not null THEN concat('Year ', yearlevel)\r\n",
							"    ELSE yearlevel\r\n",
							"        END as YearLevel\r\n",
							", ResultType\r\n",
							", CASE\r\n",
							"    WHEN result = 'A+' THEN 'A'\r\n",
							"    WHEN result = 'A-' THEN 'A'\r\n",
							"    WHEN result = 'B+' THEN 'B'\r\n",
							"    WHEN result = 'B-' THEN 'B'\r\n",
							"    WHEN result = 'C+' THEN 'C'\r\n",
							"    WHEN result = 'C-' THEN 'C'\r\n",
							"    WHEN result = 'D+' THEN 'D'\r\n",
							"    WHEN result = 'D-' THEN 'D'\r\n",
							"    WHEN result = 'E+' THEN 'E'\r\n",
							"    ELSE result\r\n",
							"        END as Result\r\n",
							", BKID\r\n",
							", ceider \r\n",
							", schoolid\r\n",
							", skcampus\r\n",
							"\r\n",
							"from vw_ae_manual_learningtasks \r\n",
							"\r\n",
							"\r\n",
							"union \r\n",
							"\r\n",
							"\r\n",
							"select \r\n",
							"concat('SR',row_number() OVER (ORDER BY ceider)) as id\r\n",
							", School_Name\r\n",
							", Area\r\n",
							", Semester\r\n",
							", Year\r\n",
							", subject as SubjectName \r\n",
							", ClassCode\r\n",
							", StudentCode\r\n",
							", GovtCode1\r\n",
							", StudentFirstName\r\n",
							", StudentLastName\r\n",
							", StudentYearLevel\r\n",
							", AssessmentType as ResultType\r\n",
							", Result\r\n",
							", BKID\r\n",
							", ceider \r\n",
							", schoolid\r\n",
							", skcampus\r\n",
							"\r\n",
							"from vw_ae_manual_semesterreports "
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(distinct id) from vw_ae_manual_combined"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
							"as\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							") mainquery"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_email2\r\n",
							"as\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",staff.emailaddress as StaffEmail\r\n",
							",d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							") mainquery"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_email"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_email2"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_email2 limit 5"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
							"as\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",staff.emailaddress as StaffEmail\r\n",
							",d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							") mainquery"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStaffDemographic \r\n",
							"where firstname = 'Tegan' and lastname = 'Beckham';\r\n",
							"\r\n",
							"--Tegan Beckham"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_acerparticipation\r\n",
							"as\r\n",
							"select \r\n",
							"*\r\n",
							"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
							", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
							"from\r\n",
							"(\r\n",
							"select \r\n",
							"\t--*\r\n",
							"\ta.skcampus\r\n",
							"\t, a.skyear\r\n",
							"\t, a.skdate\r\n",
							"\t, a.skyearlevel\r\n",
							"\t, sum(studentcount) as students_enrolled\r\n",
							"\t, innerquery.count_of_tests \r\n",
							"from vw_factstudentenrolmentcounts a\r\n",
							"\r\n",
							"left join \r\n",
							"\t(\t\r\n",
							"\t\tselect innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\tskcampus\r\n",
							"\t\t\t\t\t\t, skyear\r\n",
							"\t\t\t\t\t\t, SKDate\r\n",
							"\t\t\t\t\t\t, skyearlevel\r\n",
							"\t\t\t\t\t\t, SKACERStudent\r\n",
							"\t\t\t\t\t\t, count(distinct skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df\r\n",
							"\t\t\t\t\t\t\tgroup by skcampus, skyear, skdate, skyearlevel, SKACERStudent --9\r\n",
							"\t\t\t) innerinner\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel\r\n",
							"\t) innerquery\r\n",
							"\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skdate = innerquery.skdate and a.skyearlevel = innerquery.skyearlevel \r\n",
							"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
							"group by a.skcampus, a.skyear, a.skdate, a.skyearlevel, innerquery.count_of_tests\r\n",
							") wholequery"
						],
						"outputs": [],
						"execution_count": 323
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"--Taking skcampus = 1898 and skyear = 92 and skyearlevel = 10 as an example, \r\n",
							"--the 3 dates in ACER are 11th, 13th and 28th of October, none of which will join onto the 31st of October enrolment data. "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_acerparticipation\r\n",
							"where skcampus = 1898 and skyear = 92 and skyearlevel = 10"
						],
						"outputs": [],
						"execution_count": 324
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct e.skdate, dt.date from vw_factstudentenrolmentcounts e\r\n",
							"left join vw_dmdate dt on e.skdate = dt.skdate\r\n",
							"where e.skcampus = 1898 and e.skyear = 92 and e.skyearlevel = 10\r\n",
							"order by dt.date"
						],
						"outputs": [],
						"execution_count": 341
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct acer.skdate, dt.date from vw_factpatresults_df acer\r\n",
							"left join vw_dmdate dt on acer.skdate = dt.skdate\r\n",
							"where acer.skcampus = 1898 and acer.skyear = 92 and acer.skyearlevel = 10\r\n",
							"order by dt.date"
						],
						"outputs": [],
						"execution_count": 342
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Code below gives the breakdown, can filter out the nulls But of the 3 dates, which one to use? Bringing in all the dates will give duplicate information?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmdate limit 5"
						],
						"outputs": [],
						"execution_count": 344
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"*\r\n",
							"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
							", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
							"from\r\n",
							"(\r\n",
							"select \r\n",
							"\t--*\r\n",
							"\ta.skcampus\r\n",
							"\t, a.skyear\r\n",
							"\t, datedetails.monthnumberofyear\r\n",
							"\t--, a.skdate\r\n",
							"\t, a.skyearlevel\r\n",
							"\t, sum(studentcount) as students_enrolled\r\n",
							"\t, innerquery.count_of_tests \r\n",
							"from vw_factstudentenrolmentcounts a\r\n",
							"\r\n",
							"left join vw_dmdate datedetails\r\n",
							"on a.skdate = datedetails.skdate\r\n",
							"\r\n",
							"\r\n",
							"left join \r\n",
							"\t(\t\r\n",
							"\t\tselect innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\ta.skcampus\r\n",
							"\t\t\t\t\t\t, a.skyear\r\n",
							"\t\t\t\t\t\t, a.SKDate\r\n",
							"\t\t\t\t\t\t, a.skyearlevel\r\n",
							"\t\t\t\t\t\t, a.SKACERStudent\r\n",
							"                        , b.year \r\n",
							"                        , b.monthnumberofyear\r\n",
							"\t\t\t\t\t\t, count(distinct a.skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df a\r\n",
							"                        left join vw_dmdate b\r\n",
							"                        on a.skdate = b.skdate\r\n",
							"\t\t\t\t\t\t\tgroup by a.skcampus, a.skyear, a.skdate, a.skyearlevel, a.SKACERStudent, b.year, b.monthnumberofyear --9\r\n",
							"\t\t\t) innerinner\r\n",
							"            where innerinner.skcampus = 1898 and innerinner.skyear = 92 and innerinner.skyearlevel = 10\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear\r\n",
							"\t) innerquery\r\n",
							"\r\n",
							"on a.skcampus = innerquery.skcampus \r\n",
							"and a.skyear = innerquery.skyear \r\n",
							"--and a.skdate = innerquery.skdate \r\n",
							"and a.skyearlevel = innerquery.skyearlevel \r\n",
							"and datedetails.monthnumberofyear = innerquery.monthnumberofyear\r\n",
							"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
							"group by a.skcampus\r\n",
							", a.skyear\r\n",
							", datedetails.monthnumberofyear\r\n",
							"--, a.skdate\r\n",
							", a.skyearlevel\r\n",
							", innerquery.count_of_tests\r\n",
							") wholequery\r\n",
							"where skcampus = 1898 and skyear = 92 and skyearlevel = 10"
						],
						"outputs": [],
						"execution_count": 346
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select innerinner.skcampus, innerinner.skyear\r\n",
							"--, innerinner.skdate\r\n",
							", innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear\r\n",
							", sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\ta.skcampus\r\n",
							"\t\t\t\t\t\t, a.skyear\r\n",
							"\t\t\t\t\t\t--, a.SKDate\r\n",
							"\t\t\t\t\t\t, a.skyearlevel\r\n",
							"\t\t\t\t\t\t, a.SKACERStudent\r\n",
							"                        , b.year \r\n",
							"                        , b.monthnumberofyear\r\n",
							"\t\t\t\t\t\t, count(distinct a.skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df a\r\n",
							"                        left join vw_dmdate b\r\n",
							"                        on a.skdate = b.skdate\r\n",
							"\t\t\t\t\t\t\tgroup by a.skcampus, a.skyear\r\n",
							"                            --, a.skdate\r\n",
							"                            , a.skyearlevel, a.SKACERStudent, b.year, b.monthnumberofyear --9\r\n",
							"\t\t\t) innerinner\r\n",
							"            where innerinner.skcampus = 1898 and innerinner.skyear = 92 and innerinner.skyearlevel = 10\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear\r\n",
							"    --, innerinner.skdate\r\n",
							"    , innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear"
						],
						"outputs": [],
						"execution_count": 349
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"*\r\n",
							"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
							", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
							"from\r\n",
							"(\r\n",
							"select \r\n",
							"\t--*\r\n",
							"\ta.skcampus\r\n",
							"\t, a.skyear\r\n",
							"\t, datedetails.monthnumberofyear\r\n",
							"\t--, a.skdate\r\n",
							"\t, a.skyearlevel\r\n",
							"\t, sum(studentcount) as students_enrolled\r\n",
							"\t, innerquery.count_of_tests \r\n",
							"from vw_factstudentenrolmentcounts a\r\n",
							"\r\n",
							"left join vw_dmdate datedetails\r\n",
							"on a.skdate = datedetails.skdate\r\n",
							"\r\n",
							"\r\n",
							"inner join \r\n",
							"\t(\t\r\n",
							"\t\tselect innerinner.skcampus, innerinner.skyear\r\n",
							"        --, innerinner.skdate\r\n",
							"        , innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\ta.skcampus\r\n",
							"\t\t\t\t\t\t, a.skyear\r\n",
							"\t\t\t\t\t\t--, a.SKDate\r\n",
							"\t\t\t\t\t\t, a.skyearlevel\r\n",
							"\t\t\t\t\t\t, a.SKACERStudent\r\n",
							"                        , b.year \r\n",
							"                        , b.monthnumberofyear\r\n",
							"\t\t\t\t\t\t, count(distinct a.skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df a\r\n",
							"                        left join vw_dmdate b\r\n",
							"                        on a.skdate = b.skdate\r\n",
							"\t\t\t\t\t\t\tgroup by a.skcampus, a.skyear\r\n",
							"                            --, a.skdate\r\n",
							"                            , a.skyearlevel, a.SKACERStudent, b.year, b.monthnumberofyear --9\r\n",
							"\t\t\t) innerinner\r\n",
							"            where innerinner.skcampus = 1898 and innerinner.skyear = 92 and innerinner.skyearlevel = 10\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear\r\n",
							"    --, innerinner.skdate\r\n",
							"    , innerinner.SKYearLevel, innerinner.year, innerinner.monthnumberofyear\r\n",
							"\t) innerquery\r\n",
							"\r\n",
							"on a.skcampus = innerquery.skcampus \r\n",
							"and a.skyear = innerquery.skyear \r\n",
							"--and a.skdate = innerquery.skdate \r\n",
							"and a.skyearlevel = innerquery.skyearlevel \r\n",
							"and datedetails.monthnumberofyear = innerquery.monthnumberofyear\r\n",
							"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
							"group by a.skcampus\r\n",
							", a.skyear\r\n",
							", datedetails.monthnumberofyear\r\n",
							"--, a.skdate\r\n",
							", a.skyearlevel\r\n",
							", innerquery.count_of_tests\r\n",
							") wholequery\r\n",
							"where skcampus = 1898 and skyear = 92 and skyearlevel = 10"
						],
						"outputs": [],
						"execution_count": 351
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStaffDemographic limit 5"
						],
						"outputs": [],
						"execution_count": 340
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select govcode1 from vw_CompassODSStudentDemographic limit 10"
						],
						"outputs": [],
						"execution_count": 336
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStaffDemographic limit 5"
						],
						"outputs": [],
						"execution_count": 73
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"#dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"#dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"#dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3\r\n",
							"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for naplan and acer participation view\r\n",
							"factstudentenrolmentcounts_df = spark.read.load(sourcep + \"/enrolment/DMFactStudentEnrolmentCounts_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"# stage 3 naplan and acer participation view\r\n",
							"factnaplanstudentyearresult_df = spark.read.load(source3p + \"/pilot/DMFactNaplanStudentYearResult_pseudo\", format='delta')\r\n",
							"factpatresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Learning Task\r\n",
							"ae_manuallearningtasks_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Semester Report\r\n",
							"ae_manualsemesterreports_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# used for ODS tables (+ dmcampus_df already added above)\r\n",
							"odsactivity_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
							"odsactivityenrolment_df = spark.read.load(sourcep + \"/_ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
							"odscompasssubject_df = spark.read.load(sourcep + \"/_ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
							"odsstaffdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
							"odsstudentdemographic_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstafforganisationdetails_df = spark.read.load(sourcep + \"/_ODS/CompassODSStaffOrganisationDetails_pseudo\", format='delta')\r\n",
							"odsstudentorganisationdetails_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentOrganisationDetails_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstudentorganisationmilestones_df = spark.read.load(sourcep + \"/_ODS/CompassODSStudentOrganisationMilestones_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"\r\n",
							"factstudentenrolmentcounts_df.createOrReplaceTempView('vw_factstudentenrolmentcounts')\r\n",
							"factnaplanstudentyearresult_df.createOrReplaceTempView('vw_factnaplanstudentyearresult')\r\n",
							"factpatresults_df.createOrReplaceTempView('vw_factpatresults_df')\r\n",
							"\r\n",
							"ae_manuallearningtasks_df.createOrReplaceTempView('vw_aemanuallearningtasks')\r\n",
							"ae_manualsemesterreports_df.createOrReplaceTempView('vw_aemanualsemesterreports')\r\n",
							"\r\n",
							"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \r\n",
							"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \r\n",
							"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \r\n",
							"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \r\n",
							"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') \r\n",
							"\r\n",
							"odsstafforganisationdetails_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationDetails') \r\n",
							"odsstudentorganisationdetails_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationDetails') \r\n",
							"\r\n",
							"odsstudentorganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationMilestones') "
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           --DATE_ADD(HOUR, 10, MilestoneTimestamp) AS MilestoneStartDate,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       --LEAD(DATE_ADD(HOUR, 10, MilestoneTimestamp)) \r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"    -- WHERE IsCurrent = 1\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504'\r\n",
							""
						],
						"outputs": [],
						"execution_count": 352
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_studentstable"
						],
						"outputs": [],
						"execution_count": 358
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_studentstable_aa"
						],
						"outputs": [],
						"execution_count": 363
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_ods_studentstable_aa\r\n",
							"-- as\r\n",
							"\r\n",
							"select year\r\n",
							", yearlevel\r\n",
							", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote, count(*) from\r\n",
							"\r\n",
							"(\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							"--,yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							"--,ms.yearlevel as YearLevel\r\n",
							",yearlevel.yearlevel as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"--and year(utcactivityenrolmentstartdate) = year(current_date) ---------------------------------------------------------------added this for 2023\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- LEFT OUTER JOIN (select SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear, count(subjectshortname) from vw_CompassODSCompassSubject\r\n",
							"-- group by SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear) s \r\n",
							"-- ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"-- AND a.CampusId = s.CampusId\r\n",
							"-- AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- left join vw_activestudent active\r\n",
							"-- on active.ceider = d.govcode1\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationMilestones ms\r\n",
							"-- on ms.compasspersonid = d.CompassPersonId\r\n",
							"-- and ms.iscurrent is True \r\n",
							"-- and ms.iscurrentmilestone is True\r\n",
							"\r\n",
							"-- left join vw_dmyearlevel yl\r\n",
							"-- on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"-- CASE\r\n",
							"--     WHEN condition1 THEN result1\r\n",
							"--     WHEN condition2 THEN result2\r\n",
							"--     WHEN conditionN THEN resultN\r\n",
							"--     ELSE result\r\n",
							"-- END;\r\n",
							"\r\n",
							"left join (SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           --DATE_ADD(HOUR, 10, MilestoneTimestamp) AS MilestoneStartDate,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       --LEAD(DATE_ADD(HOUR, 10, MilestoneTimestamp)) \r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"    -- WHERE IsCurrent = 1\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"          --and compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504'\r\n",
							"              ) yearlevel \r\n",
							"        on d.CompassPersonId = yearlevel.compasspersonid\r\n",
							"        and yearlevel.milestoneyear = s.academicyear\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where \r\n",
							"--year = year(CURRENT_DATE) ---------------------------------------------------------------added this for 2023\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"--and \r\n",
							"--studentname = 'Allira Ackers'\r\n",
							"--and \r\n",
							"--studentname = 'Adaline Airey'\r\n",
							"    --studentname = 'Piper Dawes' or \r\n",
							"-- (studentname = 'Lacie Silver')\r\n",
							"--and \r\n",
							"and year is not null\r\n",
							"-- and classname like '%Generalist%'\r\n",
							"-- )\r\n",
							") wholequery\r\n",
							"\r\n",
							"where yearlevel is not null\r\n",
							"\r\n",
							"group by year\r\n",
							", yearlevel\r\n",
							", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote"
						],
						"outputs": [],
						"execution_count": 381
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select yearlevel, count(*) from vw_CompassODSStudentOrganisationMilestones \r\n",
							"group by yearlevel \r\n",
							"order by yearlevel"
						],
						"outputs": [],
						"execution_count": 382
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           --DATE_ADD(HOUR, 10, MilestoneTimestamp) AS MilestoneStartDate,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       --LEAD(DATE_ADD(HOUR, 10, MilestoneTimestamp)) \r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"    -- WHERE IsCurrent = 1\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"          and compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504'"
						],
						"outputs": [],
						"execution_count": 370
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_studentstable_aa"
						],
						"outputs": [],
						"execution_count": 365
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_studentstable"
						],
						"outputs": [],
						"execution_count": 360
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_activestudent \r\n",
							"-- where firstname = 'Allira' -- skyearlevel = 14\r\n",
							"where firstname = 'Adaline' and lastname = 'Airey' -- skyearlevel = 14"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
							"as\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",staff.emailaddress as StaffEmail\r\n",
							",d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							") mainquery"
						],
						"outputs": [],
						"execution_count": 220
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
							"-- as\r\n",
							"\r\n",
							"select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",staff.emailaddress as StaffEmail\r\n",
							",d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as staff_login_email\r\n",
							"-- ,studentemails.organisationuseremail as student_login_email\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 94
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"-- vw_CompassODSStaffOrganisationDetails\r\n",
							"-- vw_CompassODSStudentOrganisationDetails"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_CompassODSStaffDemographic"
						],
						"outputs": [],
						"execution_count": 101
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_CompassODSStaffOrganisationDetails"
						],
						"outputs": [],
						"execution_count": 106
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_CompassODSStaffOrganisationDetails where iscurrent = 'True'"
						],
						"outputs": [],
						"execution_count": 107
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStaffOrganisationDetails order by compasspersonid"
						],
						"outputs": [],
						"execution_count": 105
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select iscurrent, count(*) from vw_CompassODSStaffOrganisationDetails\r\n",
							"group by iscurrent"
						],
						"outputs": [],
						"execution_count": 104
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- select count(*) from (\r\n",
							"\r\n",
							"select a.*, b.organisationuseremail from vw_CompassODSStaffDemographic a\r\n",
							"left join vw_CompassODSStaffOrganisationDetails b \r\n",
							"on a.CompassPersonId = b.CompassPersonId\r\n",
							"and b.iscurrent = 'True' and b.status = 'Active'\r\n",
							"where a.iscurrent = 'True'\r\n",
							"\r\n",
							"order by compasspersonid\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 125
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(distinct compasspersonid) from vw_CompassODSStaffDemographic\r\n",
							"where iscurrent = 'True'"
						],
						"outputs": [],
						"execution_count": 124
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStaffDemographic \r\n",
							"where firstname = 'Carmelina' and lastname = 'Murphy' and iscurrent is True\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 202
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--select * from vw_CompassODSStaffDemographic where compasspersonid = 'b790d6d5-6822-47e8-b95f-ff334c71ceb7' and iscurrent = 'True'\r\n",
							"\r\n",
							"    --00182885-5f66-4613-85fa-eb88d67969a5\r\n",
							"-- select * from vw_CompassODSStaffDemographic where compasspersonid = '00182885-5f66-4613-85fa-eb88d67969a5' and iscurrent = 'True'\r\n",
							"\r\n",
							"-- select * from vw_CompassODSStaffDemographic where compasspersonid = '9d46b4bf-7568-44c8-a2c2-181821d3a7da' and iscurrent = 'True'\r\n",
							"\r\n",
							"-- select * from vw_CompassODSStaffDemographic where compasspersonid = '30beb778-8461-46f4-8d1d-b84f87355ec1' and iscurrent = 'True'\r\n",
							"\r\n",
							"-- --Anneka Reynolds\r\n",
							"-- select * from vw_CompassODSStaffDemographic where compasspersonid = '1cd57964-bec5-45f1-ae60-b41f0e82406e' and iscurrent = 'True'\r\n",
							"\r\n",
							"--Carmelina Murphy\r\n",
							"select * from vw_CompassODSStaffDemographic where compasspersonid = 'ad178dc7-8dee-4b3e-b42b-a3d25dada387' and iscurrent = 'True'\r\n",
							"\r\n",
							"-- --Michelle Luinys\r\n",
							"-- select * from vw_CompassODSStaffDemographic where compasspersonid = '6fe9e2f5-65d4-48fd-9862-dc07a0daa22c' and iscurrent = 'True'\r\n",
							"\r\n",
							"-- --Perri McGill\r\n",
							"-- select * from vw_CompassODSStaffDemographic where compasspersonid = '3b5c4a26-71e7-4289-a09b-318b4de7bb7e' and iscurrent = 'True'\r\n",
							"\r\n",
							"-- --Scott Williamson\r\n",
							"-- select * from vw_CompassODSStaffDemographic where compasspersonid = 'd898d26f-5ab7-4901-b029-4580acf8e885' and iscurrent = 'True'\r\n",
							"    "
						],
						"outputs": [],
						"execution_count": 203
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--select * from vw_CompassODSStaffOrganisationDetails where compasspersonid = 'b790d6d5-6822-47e8-b95f-ff334c71ceb7' and iscurrent = 'True' and status = 'Active'\r\n",
							"\r\n",
							"-- select * from vw_CompassODSStaffOrganisationDetails where compasspersonid = '00182885-5f66-4613-85fa-eb88d67969a5' and iscurrent = 'True' and status = 'Active'\r\n",
							"\r\n",
							"--Anna Bennett - 20 to 40 records\r\n",
							"-- select * from vw_CompassODSStaffOrganisationDetails where compasspersonid = '9d46b4bf-7568-44c8-a2c2-181821d3a7da' and iscurrent = 'True' and status = 'Active'\r\n",
							"\r\n",
							"-- --Catherine Motteram - 9 to 27 records\r\n",
							"-- select * from vw_CompassODSStaffOrganisationDetails where compasspersonid = 'c5f8b64f-a1e2-46a2-bc4c-c898a51f5727' and iscurrent = 'True' and status = 'Active'\r\n",
							"\r\n",
							"-- --Melinda Holmes - 2454 to 7362 records\r\n",
							"-- select * from vw_CompassODSStaffOrganisationDetails where compasspersonid = '30beb778-8461-46f4-8d1d-b84f87355ec1' and iscurrent = 'True' and status = 'Active'\r\n",
							"\r\n",
							"--Carmelina Murphy - irregular one - consider using IsTeachingStaff = True but still there will be duplicate emails\r\n",
							"select * from vw_CompassODSStaffOrganisationDetails where compasspersonid = 'ad178dc7-8dee-4b3e-b42b-a3d25dada387' and iscurrent = 'True' and status = 'Active'"
						],
						"outputs": [],
						"execution_count": 211
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents\r\n",
							"where teacherid = '00182885-5f66-4613-85fa-eb88d67969a5'"
						],
						"outputs": [],
						"execution_count": 132
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select status, count(*) from vw_CompassODSStaffOrganisationDetails group by status"
						],
						"outputs": [],
						"execution_count": 116
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from \r\n",
							"\r\n",
							"(\r\n",
							"select a.*, b.organisationuseremail from vw_CompassODSStaffDemographic a\r\n",
							"inner join vw_CompassODSStaffOrganisationDetails b \r\n",
							"on a.CompassPersonId = b.CompassPersonId\r\n",
							"and b.iscurrent = 'True'\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 109
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from \r\n",
							"\r\n",
							"(\r\n",
							"select a.*, b.organisationuseremail from vw_CompassODSStudentDemographic a\r\n",
							"left join vw_CompassODSStudentOrganisationDetails b \r\n",
							"on a.CompassPersonId = b.CompassPersonId\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 99
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents"
						],
						"outputs": [],
						"execution_count": 137
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_2\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							", student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							", student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",staff.emailaddress as StaffEmail\r\n",
							",d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as staff_login_email\r\n",
							",studentemails.organisationuseremail as student_login_email\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"\r\n",
							"left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							", student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 143
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStudentDemographic where compasspersonid = 'd5625c4f-b9ea-4c36-a3dc-b830d49db505'"
						],
						"outputs": [],
						"execution_count": 142
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select teachername, count(*) from vw_ods_earlyyearsstudents \r\n",
							"group by teachername\r\n",
							"order by teachername "
						],
						"outputs": [],
						"execution_count": 149
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select teachername, count(*) from vw_ods_earlyyearsstudents_2 \r\n",
							"group by teachername\r\n",
							"order by teachername "
						],
						"outputs": [],
						"execution_count": 150
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents where teachername = 'Carmelina Murphy'"
						],
						"outputs": [],
						"execution_count": 174
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_2 where teachername = 'Carmelina Murphy'"
						],
						"outputs": [],
						"execution_count": 175
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"select * from vw_CompassODSStudentDemographic where compasspersonid = '64872fa4-b011-4f03-8023-c524895a8b77'"
						],
						"outputs": [],
						"execution_count": 176
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"create temp view temp_carmelina_student as\r\n",
							"select distinct studentid as compasspersonid, studentname from vw_ods_earlyyearsstudents where teachername = 'Carmelina Murphy'"
						],
						"outputs": [],
						"execution_count": 181
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from temp_carmelina_student"
						],
						"outputs": [],
						"execution_count": 189
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from \r\n",
							"\r\n",
							"(\r\n",
							"\r\n",
							"select * from vw_CompassODSStudentOrganisationDetails \r\n",
							"where compasspersonid in \r\n",
							"(select compasspersonid from temp_carmelina_student)\r\n",
							"and iscurrent is True\r\n",
							"and status = 'Active'\r\n",
							")\r\n",
							"\r\n",
							"--2375\r\n",
							"--328 iscurrent is True\r\n",
							"--306 iscurrent is True and status = 'Active'\r\n",
							""
						],
						"outputs": [],
						"execution_count": 187
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
							"-- as\r\n",
							"\r\n",
							"select count(*) from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",staff.emailaddress as StaffEmail\r\n",
							",d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"    and staff.compasspersonid = 'ad178dc7-8dee-4b3e-b42b-a3d25dada387'\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							") mainquery\r\n",
							"\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 188
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Investigate what's going on with different counts when not related to the staff email"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents where teachername = 'Carmelina Murphy'\r\n",
							"\r\n",
							"    --all = 620\r\n",
							"    --distinct studentname = 310"
						],
						"outputs": [],
						"execution_count": 191
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select studentname, count(*) from vw_ods_earlyyearsstudents where teachername = 'Carmelina Murphy'\r\n",
							"    group by studentname order by studentname"
						],
						"outputs": [],
						"execution_count": 196
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(distinct studentname) from vw_ods_earlyyearsstudents_2 where teachername = 'Carmelina Murphy'\r\n",
							"\r\n",
							"    --all = 1866\r\n",
							"    --distinct studentname = 310"
						],
						"outputs": [],
						"execution_count": 193
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select studentname, count(*) from vw_ods_earlyyearsstudents_2 where teachername = 'Carmelina Murphy'\r\n",
							"    group by studentname order by studentname"
						],
						"outputs": [],
						"execution_count": 197
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_staffemailonly\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",staff.emailaddress as StaffEmail\r\n",
							",d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as staff_login_email\r\n",
							"-- ,studentemails.organisationuseremail as student_login_email\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"-- and studentemails.iscurrent is True\r\n",
							"-- and studentemails.status = 'Active'\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							", staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 198
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_staffemailonly where teachername = 'Carmelina Murphy'"
						],
						"outputs": [],
						"execution_count": 199
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_staffemailonly where teachername = 'Carmelina Murphy'\r\n",
							"    order by studentname"
						],
						"outputs": [],
						"execution_count": 201
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_updated\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 226
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select campusid from vw_CompassODSStaffOrganisationDetails where campusid is not null limit 5"
						],
						"outputs": [],
						"execution_count": 225
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_updated limit 10"
						],
						"outputs": [],
						"execution_count": 213
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select studentname, count(*) from vw_ods_earlyyearsstudents_updated\r\n",
							"where teachername = 'Carmelina Murphy'\r\n",
							"group by studentname\r\n",
							"order by studentname"
						],
						"outputs": [],
						"execution_count": 231
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents\r\n",
							"where teachername = 'Carmelina Murphy'\r\n",
							"and studentname = 'Lucas McLoughlin'"
						],
						"outputs": [],
						"execution_count": 233
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_updated\r\n",
							"where teachername = 'Carmelina Murphy'\r\n",
							"and studentname = 'Lucas McLoughlin'"
						],
						"outputs": [],
						"execution_count": 234
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStudentDemographic \r\n",
							"where firstname = 'Lucas' and lastname = 'McLoughlin'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 240
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStudentOrganisationDetails \r\n",
							"where compasspersonid = '7a5505af-23e4-43db-a97c-ad9d965a0027'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 242
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select teachername, count(*) from vw_ods_earlyyearsstudents_updated\r\n",
							"group by teachername\r\n",
							"order by teachername"
						],
						"outputs": [],
						"execution_count": 229
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_updated2\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 243
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_updated2"
						],
						"outputs": [],
						"execution_count": 244
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct teachername from vw_ods_earlyyearsstudents_updated2\r\n",
							"where staffemail is null\r\n",
							"order by teachername"
						],
						"outputs": [],
						"execution_count": 247
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStaffDemographic\r\n",
							"--where firstname = 'Brooke' and lastname = 'Youse'   --8e61bf9d-a22b-4c89-9117-2262ca59f616\r\n",
							"--where firstname = 'Chloe' and lastname = 'McLaren'   --3a3fec1b-d08e-4423-825e-0fdf11fe4af6\r\n",
							"where firstname = 'Trina' and lastname = 'Neilson'   --b82d3985-7131-4540-a697-5a9c4dc04750\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 383
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStaffOrganisationDetails\r\n",
							"where compasspersonid = 'b82d3985-7131-4540-a697-5a9c4dc04750' \r\n",
							"    and iscurrent is True \r\n",
							"    --and status = 'Active'"
						],
						"outputs": [],
						"execution_count": 387
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select organisationuseremail, count(*) from vw_CompassODSStaffOrganisationDetails --497903\r\n",
							"\r\n",
							"where organisationuseremail not like '%catholic.edu.au%' --299185\r\n",
							"and iscurrent is True and status = 'Active'\r\n",
							"    group by organisationuseremail"
						],
						"outputs": [],
						"execution_count": 397
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_updated3\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"--and staffemails.status = 'Active'\r\n",
							"and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"--and studentemails.status = 'Active'\r\n",
							"and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 253
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_updated3"
						],
						"outputs": [],
						"execution_count": 275
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_updated3"
						],
						"outputs": [],
						"execution_count": 255
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct teachername, staffemail from vw_ods_earlyyearsstudents_updated3\r\n",
							"where staffemail is null"
						],
						"outputs": [],
						"execution_count": 257
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--*\r\n",
							"compasspersonid, firstname, lastname, campusid\r\n",
							" from vw_CompassODSStaffDemographic\r\n",
							"where firstname = 'Chloe' and lastname = 'McLaren'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 285
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--* \r\n",
							"compasspersonid, organisationuseremail, campusid\r\n",
							"from vw_CompassODSStaffOrganisationDetails\r\n",
							"where compasspersonid = '3a3fec1b-d08e-4423-825e-0fdf11fe4af6' \r\n",
							"    --and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 308
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct studentname, studentemail from vw_ods_earlyyearsstudents_updated3\r\n",
							"where studentemail is null"
						],
						"outputs": [],
						"execution_count": 267
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStudentDemographic\r\n",
							"where firstname = 'Oscar' and lastname = 'Ohl'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 268
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStudentOrganisationDetails\r\n",
							"where compasspersonid = '62d96e8b-2f1d-4ba3-8e40-91b295f9b60a' \r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 269
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_earlyyearsstudents_updated4"
						],
						"outputs": [],
						"execution_count": 272
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_updated4\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"--and staffemails.status = 'Active'\r\n",
							"and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"--and studentemails.iscurrent is True\r\n",
							"--and studentemails.status = 'Active'\r\n",
							"and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 273
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_updated4"
						],
						"outputs": [],
						"execution_count": 274
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--*\r\n",
							"compasspersonid, firstname, lastname, campusid, govcode1\r\n",
							" from vw_CompassODSStudentDemographic\r\n",
							"where firstname = 'Jarrod' and lastname = 'Camer'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 352
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Investigation into alternative for factstudentenrolmentcounts"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_factstudentenrolmentcounts \r\n",
							"limit 5\r\n",
							"--everything is iscurrent = True"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSActivityEnrolment limit 5"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select campusid, subjectcode, count(*) from vw_CompassODSActivityEnrolment\r\n",
							"where iscurrent is True\r\n",
							"group by campusid, subjectcode\r\n",
							"order by campusid, subjectcode\r\n",
							"\r\n",
							"-- need skyear, skdate"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_activestudent"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSStaffOrganisationDetails"
						],
						"outputs": [],
						"execution_count": 380
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_earlyyearsstudents_beth_hall_3"
						],
						"outputs": [],
						"execution_count": 453
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_beth_hall_3"
						],
						"outputs": [],
						"execution_count": 455
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_beth_hall_3"
						],
						"outputs": [],
						"execution_count": 456
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_beth_hall_3\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"--inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = 2023\r\n",
							"and teachername = 'Beth Hall'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 454
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_beth_hall"
						],
						"outputs": [],
						"execution_count": 437
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_beth_hall_2"
						],
						"outputs": [],
						"execution_count": 446
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_beth_hall_2"
						],
						"outputs": [],
						"execution_count": 447
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents \r\n",
							"where year = year(CURRENT_DATE)"
						],
						"outputs": [],
						"execution_count": 402
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Missing student emails"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--*\r\n",
							"compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStaffDemographic \r\n",
							"--where firstname = 'Amy' and lastname = 'Butterworth'   --8dce31c1-296e-40d5-8290-7bc435991776\r\n",
							"--where firstname = 'Anne' and lastname = 'Roberts'   --d14ae7b3-ddfd-4795-be94-2cacfe5995f6 (campusid 467) -- this pops studentemails\r\n",
							"where firstname = 'Beth' and lastname = 'Hall'   --29a5c67a-af3b-457c-b166-440caebdaabd (campusid 624) -- this DOESN'T pops studentemails\r\n",
							"--and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 494
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status  from vw_CompassODSStaffOrganisationDetails\r\n",
							"where compasspersonid = '29a5c67a-af3b-457c-b166-440caebdaabd'\r\n",
							"    and iscurrent is True\r\n",
							"    and status = 'Active'"
						],
						"outputs": [],
						"execution_count": 495
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--* \r\n",
							"compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStudentDemographic \r\n",
							"--where firstname = 'Abigail' and lastname = 'Long'   --8dce31c1-296e-40d5-8290-7bc435991776\r\n",
							"where firstname = 'Aliyah' and lastname = 'Beetham'   --13e9600d-4022-4370-baaf-85beb2669770\r\n",
							" --where firstname = 'Eva-Jane' and lastname = 'Hicks'   --8ef3ef5b-c77a-4d31-8f5e-4a3a26f9ae70\r\n",
							"  \r\n",
							"--and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 496
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status from vw_CompassODSStudentOrganisationDetails\r\n",
							"where compasspersonid = '13e9600d-4022-4370-baaf-85beb2669770'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 497
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_earlyyearsstudents_beth_hall_2"
						],
						"outputs": [],
						"execution_count": 506
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_beth_hall_2\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- -- --Login emails\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"-- and staffemails.iscurrent is True\r\n",
							"-- --and staffemails.status = 'Active'\r\n",
							"-- and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"-- and studentemails.iscurrent is True\r\n",
							"-- --and studentemails.status = 'Active'\r\n",
							"-- and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"--inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"    and staffemails.campusid = 8770 ------------------- REMEMBER TO COMMENT THIS OUT\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = 2023\r\n",
							"and teachername = 'Beth Hall'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 507
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_beth_hall_2"
						],
						"outputs": [],
						"execution_count": 508
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_beth_hall_2 \r\n",
							"--where studentemail is null\r\n",
							"--where studentname = 'Aliyah Beetham'\r\n",
							"    where studentemail is null\r\n",
							"--order by studentname"
						],
						"outputs": [],
						"execution_count": 526
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--* \r\n",
							"compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStudentDemographic \r\n",
							"--where firstname = 'Angus' and lastname = 'Galvin'   --a0ae9bd7-5c71-4a6a-9d1d-81262a90b02f\r\n",
							"-- where firstname = 'Isla' and lastname = 'Hildebrandt'   --b5747966-f600-483d-a3fb-2f09784ef40e\r\n",
							"where firstname = 'Maddison' and lastname = 'McBow'   --dcdbdc6b-d555-42d9-b53a-917c50182bb9"
						],
						"outputs": [],
						"execution_count": 522
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status  from vw_CompassODSStudentOrganisationDetails\r\n",
							"where compasspersonid = 'dcdbdc6b-d555-42d9-b53a-917c50182bb9'\r\n",
							"    and iscurrent is True\r\n",
							"    --and status = 'Active'"
						],
						"outputs": [],
						"execution_count": 523
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_beth_hall_4\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- -- --Login emails\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"-- and staffemails.iscurrent is True\r\n",
							"-- --and staffemails.status = 'Active'\r\n",
							"-- and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"-- and studentemails.iscurrent is True\r\n",
							"-- --and studentemails.status = 'Active'\r\n",
							"-- and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = 2023\r\n",
							"and teachername = 'Beth Hall'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 527
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_beth_hall_4"
						],
						"outputs": [],
						"execution_count": 530
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_beth_hall_4\r\n",
							"where studentemail is null"
						],
						"outputs": [],
						"execution_count": 529
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--*\r\n",
							"compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStaffDemographic \r\n",
							"where firstname = 'Amy' and lastname = 'Butterworth'   --8dce31c1-296e-40d5-8290-7bc435991776\r\n",
							"--where firstname = 'Anne' and lastname = 'Roberts'   --d14ae7b3-ddfd-4795-be94-2cacfe5995f6 (campusid 467) -- this pops studentemails\r\n",
							"--where firstname = 'Beth' and lastname = 'Hall'   --29a5c67a-af3b-457c-b166-440caebdaabd (campusid 624) -- this DOESN'T pops studentemails\r\n",
							"--and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 457
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status  from vw_CompassODSStaffOrganisationDetails\r\n",
							"where compasspersonid = '55bcece4-6c8a-4c63-8fe6-2a73148d76db'\r\n",
							"    and iscurrent is True\r\n",
							"    --and status = 'Active'"
						],
						"outputs": [],
						"execution_count": 476
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--* \r\n",
							"compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStudentDemographic \r\n",
							"where firstname = 'Abigail' and lastname = 'Long'   --8dce31c1-296e-40d5-8290-7bc435991776\r\n",
							"--where firstname = 'Aliyah' and lastname = 'Beetham'   --13e9600d-4022-4370-baaf-85beb2669770\r\n",
							" --where firstname = 'Eva-Jane' and lastname = 'Hicks'   --8ef3ef5b-c77a-4d31-8f5e-4a3a26f9ae70\r\n",
							"  \r\n",
							"--and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 459
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status from vw_CompassODSStudentOrganisationDetails\r\n",
							"where compasspersonid = '8dce31c1-296e-40d5-8290-7bc435991776'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 477
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_amy_butterworth_3\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							",staff.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staff.CampusId = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- -- --Login emails\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"-- and staffemails.iscurrent is True\r\n",
							"-- --and staffemails.status = 'Active'\r\n",
							"-- and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"-- and studentemails.iscurrent is True\r\n",
							"-- --and studentemails.status = 'Active'\r\n",
							"-- and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"--inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = 2023\r\n",
							"and teachername = 'Amy Butterworth'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 468
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_amy_butterworth\r\n",
							"\r\n",
							"--original count = 491"
						],
						"outputs": [],
						"execution_count": 462
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_amy_butterworth_2\r\n",
							"\r\n",
							"--after new logic = 491 to 470\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 467
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_amy_butterworth_3\r\n",
							"where studentemail is null\r\n",
							"order by studentname"
						],
						"outputs": [],
						"execution_count": 473
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--* \r\n",
							"compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStudentDemographic \r\n",
							"--where firstname = 'Hudson' and lastname = 'Griffin'   --4be94b16-93fb-421c-a302-f01d1a922038\r\n",
							"--where firstname = 'Oliver' and lastname = 'Benson'   --1cae795e-fb74-4bf9-99cf-b6dee0d57e35\r\n",
							"--where firstname = 'Ryan' and lastname = 'Garufi'   --bf707bcb-87c7-4e9b-803f-5c9800ca65f9\r\n",
							"\r\n",
							"where firstname = 'Ivy' and lastname = 'Bray'   --bf707bcb-87c7-4e9b-803f-5c9800ca65f9"
						],
						"outputs": [],
						"execution_count": 535
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status from vw_CompassODSStudentOrganisationDetails\r\n",
							"where compasspersonid = '23c6cd8a-b924-45ec-a4a9-232c36cffdab'\r\n",
							"    --and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 537
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_amy_butterworth_4\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- -- --Login emails\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"-- and staffemails.iscurrent is True\r\n",
							"-- --and staffemails.status = 'Active'\r\n",
							"-- and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"-- and studentemails.iscurrent is True\r\n",
							"-- --and studentemails.status = 'Active'\r\n",
							"-- and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = 2023\r\n",
							"and teachername = 'Amy Butterworth'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 490
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select count(*) from vw_ods_earlyyearsstudents_amy_butterworth_4"
						],
						"outputs": [],
						"execution_count": 534
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct campusid from vw_ods_earlyyearsstudents_amy_butterworth_4\r\n",
							""
						],
						"outputs": [],
						"execution_count": 533
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--*\r\n",
							"compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStaffDemographic \r\n",
							"--where firstname = 'Scott' and lastname = 'Williamson'   --d898d26f-5ab7-4901-b029-4580acf8e885\r\n",
							"-- where firstname = 'Steven' and lastname = 'Pascoe'   --fd403994-5699-4090-8958-1a544fb4c360\r\n",
							"where firstname = 'Perri' and lastname = 'McGill'   --3b5c4a26-71e7-4289-a09b-318b4de7bb7e\r\n",
							"--and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 543
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status from vw_CompassODSStaffOrganisationDetails\r\n",
							"where compasspersonid = '3b5c4a26-71e7-4289-a09b-318b4de7bb7e'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 544
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmcampus\r\n",
							"where bkcampusid = 2529"
						],
						"outputs": [],
						"execution_count": 547
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_checkteachers\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- -- --Login emails\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"-- and staffemails.iscurrent is True\r\n",
							"-- --and staffemails.status = 'Active'\r\n",
							"-- and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"-- and studentemails.iscurrent is True\r\n",
							"-- --and studentemails.status = 'Active'\r\n",
							"-- and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"--where year = year(CURRENT_DATE)\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 548
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct year, teachername from vw_ods_earlyyearsstudents_checkteachers\r\n",
							"where staffemail is null\r\n",
							"order by teachername"
						],
						"outputs": [],
						"execution_count": 550
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--*\r\n",
							"compasspersonid, firstname, lastname, govcode1, iscurrent, campusid  from vw_CompassODSStudentDemographic \r\n",
							"\r\n",
							"where firstname = 'Shae' and lastname = 'Scalia'\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"--*\r\n",
							"compasspersonid, organisationuseremail, iscurrent, campusid, status from vw_CompassODSStudentOrganisationDetails \r\n",
							"\r\n",
							"where compasspersonid = 'b9b56d05-270b-4155-805a-fbef23d03f92'"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_activestudent\r\n",
							"where firstname = 'Shae' and lastname = 'Scalia'"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# example df\r\n",
							"data = [(\"Diocese of Townsville CEO\",2022, \"SCAT\", 5422, \"Burdekin Catholic High School (Ayr)\", 60, \"Accounting\", \"GENERAL\", \"CAMER\", \"JARROD ANDREW\"),\r\n",
							"        (\"Diocese of Townsville CEO\",2022, \"SCAT\", 5422, \"Burdekin Catholic High School (Ayr)\", 6400, \"Agricultural Practices\", \"APPLIED\", \"SCALIA\", \"SHAE\"),\r\n",
							"        (\"Diocese of Townsville CEO\",2022, \"SCAT\", 5422, \"Burdekin Catholic High School (Ayr)\", 20, \"Ancient History\", \"GENERAL\", \"SITTON\", \"STELLA MARIA\"),\r\n",
							"        (\"Diocese of Townsville CEO\",2022, \"SCAT\", 5422, \"Burdekin Catholic High School (Ayr)\", 42, \"Biology\", \"GENERAL\", \"BIFFANTI\", \"DANICA JEAN\"),\r\n",
							"        (\"Diocese of Townsville CEO\",2022, \"SCAT\", 5422, \"Burdekin Catholic High School (Ayr)\", 6099, \"Career Education\", \"SHORT_COURSES\", \"ALEXANDER\", \"KADANCE JOY\")\r\n",
							"        ]\r\n",
							"\r\n",
							"columns = [\"CSA\",\"exit_year\",\"qcaa_org_type\", \"centre_code\", \"school\", \"subject_id\", \"subject\", \"subject_type\", \"lastname\", \"givennames\"]\r\n",
							"df = spark.createDataFrame(data = data, schema = columns)\r\n",
							"\r\n",
							"df.createOrReplaceTempView('vw_seniordata')"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_seniordata"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select sd.lastname, sd.givennames, split(sd.givennames, ' ')[0] as firstname, split(sd.givennames, ' ')[1] as middlename\r\n",
							", studentdemo.firstname, studentdemo.middlename, studentdemo.lastname, studentdemo.govcode1\r\n",
							", sd.school, studentdemo.campusid, camp.bkcampusid, camp.schoolname, concat(camp.schoolname, ' (', camp.area, ')') as schoolnameandarea\r\n",
							"from vw_seniordata sd\r\n",
							"left join vw_CompassODSStudentDemographic studentdemo\r\n",
							"on lower(split(sd.givennames, ' ')[0]) = lower(studentdemo.firstname) \r\n",
							"--and lower(split(sd.givennames, ' ')[1]) = lower(studentdemo.middlename) -- See the Shae Scalia example - missing middle name in the Senior Data\r\n",
							"and lower(sd.lastname) = lower(studentdemo.lastname)\r\n",
							"and studentdemo.iscurrent is True\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus camp\r\n",
							"on studentdemo.campusid = camp.bkcampusid\r\n",
							"and concat(trim(camp.schoolname), ' (', camp.area, ')') = trim(sd.school)\r\n",
							"\r\n",
							"--split(A,'\\\\.')[0] "
						],
						"outputs": [],
						"execution_count": 70
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT firstname, middlename, lastname, govcode1, campusid FROM vw_CompassODSStudentDemographic \r\n",
							"where firstname = 'Shae' and lastname = 'Scalia'"
						],
						"outputs": [],
						"execution_count": 64
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmcampus \r\n",
							"where schoolname like '%Burdekin%'"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"* \r\n",
							"--compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStudentDemographic\r\n",
							"\r\n",
							"where firstname = 'Allira' and lastname = 'Ackers'   --ceb1e6d0-2cdc-49cf-8a07-4bc701841504\r\n",
							"and iscurrent is True\r\n",
							""
						],
						"outputs": [],
						"execution_count": 75
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status from vw_CompassODSStudentOrganisationDetails\r\n",
							"where compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504'\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 73
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents\r\n",
							"where studentname = 'Allira Ackers'\r\n",
							"    order by classname, teachername"
						],
						"outputs": [],
						"execution_count": 77
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
							"as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff -------------------------------------------- staff demo table\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a   -------------------------------------------- activity table\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae  -------------------------------------------- activity enrolment table\r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d  -------------------------------------------- student demo table\r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s  -------------------------------------------- subject table\r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active -------------------------------------------- active students table\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl  -------------------------------------------- year level table\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails -------------------------------------------- staff emails table\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails -------------------------------------------- student emails table\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = year(CURRENT_DATE)\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 76
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSCompassSubject\r\n",
							"where \r\n",
							"--academicyear = 2023\r\n",
							"--and subjectshortname = 'English Prep - Year 1' \r\n",
							" subjectshortname = 'Year 1 Generalist' --GEN1"
						],
						"outputs": [],
						"execution_count": 105
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"* \r\n",
							"--compasspersonid, firstname, lastname, campusid, iscurrent \r\n",
							"from vw_CompassODSStaffDemographic\r\n",
							"\r\n",
							"--where firstname = 'Natalie' and lastname = 'Parsons'   --96b5af58-488f-4a4e-8181-08b03dd68775\r\n",
							"where firstname = 'Kerry' and lastname = 'Rudman'   --8c4b0fd5-1803-40c7-a350-522f09a9a2d9\r\n",
							"and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 80
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select compasspersonid, organisationuseremail, iscurrent, campusid, status from vw_CompassODSStaffOrganisationDetails\r\n",
							"--where compasspersonid = '96b5af58-488f-4a4e-8181-08b03dd68775' -- Natalie Parsons - campus 2529 Active\r\n",
							"where compasspersonid = '8c4b0fd5-1803-40c7-a350-522f09a9a2d9' -- Kerry Rudman - campus 2529 Active\r\n",
							"    and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 84
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff -------------------------------------------- staff demo table\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a   -------------------------------------------- activity table\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae  -------------------------------------------- activity enrolment table\r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d  -------------------------------------------- student demo table\r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s  -------------------------------------------- subject table\r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active -------------------------------------------- active students table\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl  -------------------------------------------- year level table\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails -------------------------------------------- staff emails table\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails -------------------------------------------- student emails table\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"    --and staff.compasspersonid in ('96b5af58-488f-4a4e-8181-08b03dd68775', '8c4b0fd5-1803-40c7-a350-522f09a9a2d9')\r\n",
							"    and staff.compasspersonid = '8c4b0fd5-1803-40c7-a350-522f09a9a2d9' --Kerry Rudman\r\n",
							"    and s.academicyear = 2023\r\n",
							"    and yl.yearlevelsifcode = 'P'\r\n",
							"        and concat(d.FirstName,' ',d.LastName) = 'Allira Ackers'\r\n",
							"\r\n",
							"order by concat(staff.FirstName,' ',staff.LastName), s.subjectshortname, ae.ActivityEnrolmentStartDate \r\n",
							""
						],
						"outputs": [],
						"execution_count": 108
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_activestudent \r\n",
							"where firstname = 'Allira' and lastname = 'Ackers' --skyearlevel = 6"
						],
						"outputs": [],
						"execution_count": 106
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmyearlevel"
						],
						"outputs": [],
						"execution_count": 94
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"*\r\n",
							"--max(createdate), max(lastupdatedate), max(effectivestartdate) \r\n",
							"from vw_factpersonmilestone \r\n",
							"where skperson = 778420"
						],
						"outputs": [],
						"execution_count": 100
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmpersondemographic \r\n",
							"where firstname = 'Allira' and lastname = 'Ackers'\r\n",
							"limit 3"
						],
						"outputs": [],
						"execution_count": 99
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT\r\n",
							"-- s.academicyear as Year \r\n",
							"-- ,yl.yearlevelsifcode as YearLevel\r\n",
							"-- ,staffemails.campusid as CampusID\r\n",
							"-- ,c.schoolname as SchoolName\r\n",
							"--,\r\n",
							"staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							"-- ,d.compasspersonid as StudentID\r\n",
							"-- ,concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							"-- ,ae.ActivityEnrolmentStartDate \r\n",
							"-- ,s.subjectshortname as ClassName\r\n",
							"-- ,a.SubjectCode as ClassID\r\n",
							"-- ,d.govcode1 as ceider\r\n",
							"-- ,staffemails.organisationuseremail as StaffEmail\r\n",
							"-- ,studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff -------------------------------------------- staff demo table\r\n",
							"\r\n",
							"-- inner join vw_CompassODSActivity a   -------------------------------------------- activity table\r\n",
							"-- ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"-- AND a.iscurrent is True\r\n",
							"\r\n",
							"-- inner JOIN vw_CompassODSActivityEnrolment ae  -------------------------------------------- activity enrolment table\r\n",
							"-- ON ae.ActivityCode = a.ActivityCode\r\n",
							"-- AND ae.CampusId = a.CampusId\r\n",
							"-- AND ae.IsCurrent is True\r\n",
							"\r\n",
							"-- inner JOIN vw_CompassODSStudentDemographic d  -------------------------------------------- student demo table\r\n",
							"-- ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"-- AND d.iscurrent is True\r\n",
							"\r\n",
							"-- LEFT OUTER JOIN vw_CompassODSCompassSubject s  -------------------------------------------- subject table\r\n",
							"-- ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"-- AND a.CampusId = s.CampusId\r\n",
							"-- AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- left join vw_activestudent active -------------------------------------------- active students table\r\n",
							"-- on active.ceider = d.govcode1\r\n",
							"\r\n",
							"-- left join vw_dmyearlevel yl  -------------------------------------------- year level table\r\n",
							"-- on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- -- --Login emails\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails -------------------------------------------- staff emails table\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"-- and staffemails.iscurrent is True\r\n",
							"-- and staffemails.status = 'Active'\r\n",
							"-- --and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"-- --left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- inner join vw_CompassODSStudentOrganisationDetails studentemails -------------------------------------------- student emails table\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"-- and studentemails.iscurrent is True\r\n",
							"-- and studentemails.status = 'Active'\r\n",
							"-- --and staff.campusid = studentemails.campusid\r\n",
							"-- and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"    --and staff.compasspersonid in ('96b5af58-488f-4a4e-8181-08b03dd68775', '8c4b0fd5-1803-40c7-a350-522f09a9a2d9')\r\n",
							"    and staff.compasspersonid = '8c4b0fd5-1803-40c7-a350-522f09a9a2d9' --Kerry Rudman\r\n",
							"--     and s.academicyear = 2023\r\n",
							"--     and yl.yearlevelsifcode = 'P'\r\n",
							"--         and concat(d.FirstName,' ',d.LastName) = 'Allira Ackers'\r\n",
							"\r\n",
							"-- order by concat(staff.FirstName,' ',staff.LastName), s.subjectshortname, ae.ActivityEnrolmentStartDate \r\n",
							""
						],
						"outputs": [],
						"execution_count": 110
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSCompassSubject\r\n",
							"where subjectshortname = 'Prep Generalist' and campusid = 2529\r\n",
							"and iscurrent is True"
						],
						"outputs": [],
						"execution_count": 140
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"-- staff.*\r\n",
							"staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",staff.campusid as staffdemocampusid\r\n",
							",a.ManagingCompassPersonId\r\n",
							",a.bkactivity\r\n",
							",a.activityname\r\n",
							",a.subjectcode\r\n",
							",a.activitycode\r\n",
							"-- ,ae.activitycode\r\n",
							"-- ,ae.campusid\r\n",
							"-- ,ae.CompassPersonId\r\n",
							"-- ,ae.currentlyenrolled\r\n",
							"-- ,ae.createdate \r\n",
							"-- ,ae.lastupdatedate \r\n",
							"-- ,ae.effectivestartdate \r\n",
							"-- ,ae.effectiveenddate\r\n",
							",ae.*\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a   -------------------------------------------- activity table\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae  -------------------------------------------- activity enrolment table\r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"\r\n",
							"WHERE\r\n",
							"staff.iscurrent is TRUE\r\n",
							"--and staff.compasspersonid = '8c4b0fd5-1803-40c7-a350-522f09a9a2d9' --Kerry Rudman\r\n",
							"--and staff.compasspersonid in ('96b5af58-488f-4a4e-8181-08b03dd68775', '8c4b0fd5-1803-40c7-a350-522f09a9a2d9')\r\n",
							"and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"    and ae.currentlyenrolled is True"
						],
						"outputs": [],
						"execution_count": 136
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--need to take only the max dates from this table\r\n",
							"select * from vw_CompassODSActivityEnrolment \r\n",
							"where compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504'\r\n",
							"and currentlyenrolled is True\r\n",
							"    order by activitycode, activityname, subjectcode\r\n",
							"\r\n",
							"    --total = 38\r\n",
							"    --after dedupe = ?"
						],
						"outputs": [],
						"execution_count": 132
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **Subjects that Allira Ackers is enrolled in - for discussion**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--check what subjects Allira Ackers is enrolled in\r\n",
							"\r\n",
							"select * from vw_CompassODSActivityEnrolment\r\n",
							"where compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504'\r\n",
							"    and iscurrent is True\r\n",
							"    --and subjectcode = 'GENP'\r\n",
							"        and year(utcactivityenrolmentstartdate) = year(current_date)\r\n",
							"\r\n",
							"    --order by activitycode\r\n",
							"    order by subjectcode"
						],
						"outputs": [],
						"execution_count": 157
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select year(startdatetime) as usethisdate, * from vw_CompassODSActivity\r\n",
							"where managingcompasspersonid = '8c4b0fd5-1803-40c7-a350-522f09a9a2d9'\r\n",
							"    --order by subjectcode\r\n",
							"    order by startdatetime desc"
						],
						"outputs": [],
						"execution_count": 156
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSCompassSubject\r\n",
							"where subjectimportidentifier = 'GENP'\r\n",
							"    and iscurrent is True \r\n",
							"    and campusid = 2529"
						],
						"outputs": [],
						"execution_count": 161
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_ods_earlyyearsstudents\r\n",
							"-- as\r\n",
							"\r\n",
							"-- select count(*) from (\r\n",
							"\r\n",
							"--For year 2023\r\n",
							"\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							"--, YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							"-- , staff_login_email\r\n",
							"-- , student_login_email\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"-- select \r\n",
							"-- year\r\n",
							"-- --, YearLevel\r\n",
							"-- , CampusID\r\n",
							"-- , SchoolName\r\n",
							"-- , TeacherID\r\n",
							"-- , TeacherName\r\n",
							"-- , StudentID \r\n",
							"-- , StudentName\r\n",
							"-- , max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							"-- , ClassName\r\n",
							"-- , ClassID\r\n",
							"-- , StaffEmail\r\n",
							"-- , StudentEmail\r\n",
							"-- , ceider\r\n",
							"-- -- , staff_login_email\r\n",
							"-- -- , student_login_email\r\n",
							"-- ,Gender\r\n",
							"-- ,Gendercode\r\n",
							"-- ,Indigenoustype\r\n",
							"-- ,Indigenoustypecode\r\n",
							"-- ,Disability\r\n",
							"-- ,LBOTE\r\n",
							"\r\n",
							"\r\n",
							"--  from \r\n",
							"-- (\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							"--,yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							"-- ,staff.emailaddress as StaffEmail\r\n",
							"-- ,d.emailaddress as StudentEmail\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"-- left join vw_dmcampus c \r\n",
							"-- --ON staff.CampusId = c.bkCampusId\r\n",
							"-- ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(utcactivityenrolmentstartdate) = year(current_date) ---------------------added this?\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- -- --Login emails\r\n",
							"-- left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"-- on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"-- and staffemails.iscurrent is True\r\n",
							"-- --and staffemails.status = 'Active'\r\n",
							"-- and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"-- on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"-- and studentemails.iscurrent is True\r\n",
							"-- --and studentemails.status = 'Active'\r\n",
							"-- and staff.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"-- ) innerquery\r\n",
							"\r\n",
							"-- -- where \r\n",
							"-- -- innerquery.Year >= 2021 \r\n",
							"-- -- and innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"-- group by\r\n",
							"-- year\r\n",
							"-- --, YearLevel\r\n",
							"-- , CampusID\r\n",
							"-- , SchoolName\r\n",
							"-- , TeacherID\r\n",
							"-- , TeacherName\r\n",
							"-- , StudentID \r\n",
							"-- , StudentName\r\n",
							"-- , ClassName\r\n",
							"-- , ClassID\r\n",
							"-- , StaffEmail\r\n",
							"-- , StudentEmail\r\n",
							"-- , ceider\r\n",
							"-- -- , staff_login_email\r\n",
							"-- -- , student_login_email\r\n",
							"-- ,Gender\r\n",
							"-- ,Gendercode\r\n",
							"-- ,Indigenoustype\r\n",
							"-- ,Indigenoustypecode\r\n",
							"-- ,Disability\r\n",
							"-- ,LBOTE\r\n",
							"\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = year(CURRENT_DATE)\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"and studentname = 'Allira Ackers'\r\n",
							"--and studentname = 'Adaline Airey'\r\n",
							"and classname like '%Generalist%'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 228
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--ATSIID, GenderID, NCCD and LBOTE\r\n",
							"\r\n",
							"select gender, indigenoustype, disability, lbote from vw_CompassODSStudentDemographic \r\n",
							"--, disabilityfunded, gendercode, indigenoustypecode\r\n",
							"limit 3"
						],
						"outputs": [],
						"execution_count": 221
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select utcactivityenrolmentstartdate from vw_CompassODSActivityEnrolment limit 3\r\n",
							""
						],
						"outputs": [],
						"execution_count": 183
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--for 2022\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Indigenoustype\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Indigenoustype\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",case \r\n",
							"    when yl.yearlevelsifcode = 12 then 11\r\n",
							"    when yl.yearlevelsifcode = 11 then 10\r\n",
							"    when yl.yearlevelsifcode = 10 then 9\r\n",
							"    when yl.yearlevelsifcode = 9 then 8\r\n",
							"    when yl.yearlevelsifcode = 8 then 7\r\n",
							"    when yl.yearlevelsifcode = 7 then 6\r\n",
							"    when yl.yearlevelsifcode = 6 then 5\r\n",
							"    when yl.yearlevelsifcode = 5 then 4\r\n",
							"    when yl.yearlevelsifcode = 4 then 3\r\n",
							"    when yl.yearlevelsifcode = 3 then 2\r\n",
							"    when yl.yearlevelsifcode = 2 then 1\r\n",
							"    when yl.yearlevelsifcode = 1 then 'P'\r\n",
							"    else yl.yearlevelsifcode end as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							",d.Gender\r\n",
							",d.Indigenoustype\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"-- and year(utcactivityenrolmentstartdate) = year(current_date)\r\n",
							"and year(utcactivityenrolmentstartdate) = 2022\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Indigenoustype\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"-- where year = year(CURRENT_DATE)\r\n",
							"where year = 2022\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"and studentname = 'Allira Ackers'\r\n",
							"--and studentname = 'Adaline Airey'\r\n",
							"and classname like '%Generalist%'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 227
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--for 2021\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Indigenoustype\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"select \r\n",
							"\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", max(ActivityEnrolmentStartDate) as ActivityEnrolmentStartDate\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Indigenoustype\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"\r\n",
							" from \r\n",
							"(\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",case \r\n",
							"    when yl.yearlevelsifcode = 12 then 10\r\n",
							"    when yl.yearlevelsifcode = 11 then 9\r\n",
							"    when yl.yearlevelsifcode = 10 then 8\r\n",
							"    when yl.yearlevelsifcode = 9 then 7\r\n",
							"    when yl.yearlevelsifcode = 8 then 6\r\n",
							"    when yl.yearlevelsifcode = 7 then 5\r\n",
							"    when yl.yearlevelsifcode = 6 then 4\r\n",
							"    when yl.yearlevelsifcode = 5 then 3\r\n",
							"    when yl.yearlevelsifcode = 4 then 2\r\n",
							"    when yl.yearlevelsifcode = 3 then 1\r\n",
							"    when yl.yearlevelsifcode = 2 then 'P'\r\n",
							"    when yl.yearlevelsifcode = 1 then '?'\r\n",
							"    else yl.yearlevelsifcode end as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							",d.Gender\r\n",
							",d.Indigenoustype\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"-- and year(utcactivityenrolmentstartdate) = year(current_date)\r\n",
							"and year(utcactivityenrolmentstartdate) = 2021\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							") innerquery\r\n",
							"\r\n",
							"where \r\n",
							"innerquery.Year >= 2021 and\r\n",
							"innerquery.yearlevel in ('P', '1', '2') \r\n",
							"\r\n",
							"group by\r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Indigenoustype\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = year(CURRENT_DATE)\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"and studentname = 'Allira Ackers'\r\n",
							"--and studentname = 'Adaline Airey'\r\n",
							"and classname like '%Generalist%'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 210
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_activestudent \r\n",
							"where firstname = 'Allira' and lastname = 'Ackers'"
						],
						"outputs": [],
						"execution_count": 215
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_dmyearlevel"
						],
						"outputs": [],
						"execution_count": 216
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Clean-up student table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_earlyyearsstudents_2023"
						],
						"outputs": [],
						"execution_count": 276
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--For year 2023\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ods_studentstable\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							"--, YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							"-- , ClassName\r\n",
							"-- , ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							"--,yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							"-- ,s.subjectshortname as ClassName\r\n",
							"-- ,a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"--and year(utcactivityenrolmentstartdate) = year(current_date) ---------------------------------------------------------------added this for 2023\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- LEFT OUTER JOIN (select SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear, count(subjectshortname) from vw_CompassODSCompassSubject\r\n",
							"-- group by SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear) s \r\n",
							"-- ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"-- AND a.CampusId = s.CampusId\r\n",
							"-- AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where \r\n",
							"--year = year(CURRENT_DATE) ---------------------------------------------------------------added this for 2023\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"--and studentname = 'Allira Ackers'\r\n",
							"--and studentname = 'Adaline Airey'\r\n",
							"(studentname = 'Piper Dawes' or studentname = 'Lacie Silver')\r\n",
							"-- and classname like '%Generalist%'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 277
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_CompassODSCompassSubject\r\n",
							"limit 2\r\n",
							"--SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear"
						],
						"outputs": [],
						"execution_count": 266
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear, count(subjectshortname) from vw_CompassODSCompassSubject\r\n",
							"group by SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear"
						],
						"outputs": [],
						"execution_count": 257
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select * from vw_ods_earlyyearsstudents_2023\r\n",
							"-- where classname like '%6%'\r\n",
							"--     --Piper Dawes\r\n",
							"--     --Lacie Silver"
						],
						"outputs": [],
						"execution_count": 278
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select year, campusid, schoolname, studentname, ceider, count(*) from vw_ods_earlyyearsstudents_2023\r\n",
							"group by year, campusid, schoolname, studentname, ceider\r\n",
							"order by studentname, year desc"
						],
						"outputs": [],
						"execution_count": 283
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_earlyyearsstudents_2022"
						],
						"outputs": [],
						"execution_count": 243
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--For year 2022\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_2022\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							"--, YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							"--,yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(utcactivityenrolmentstartdate) = 2022 ---------------------------------------------------------------added this for 2022\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = 2022 ---------------------------------------------------------------added this for 2022\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"-- and studentname = 'Allira Ackers'\r\n",
							"--and studentname = 'Adaline Airey'\r\n",
							"and (studentname = 'Piper Dawes' or studentname = 'Lacie Silver')\r\n",
							"and classname like '%Generalist%'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 244
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--For year 2021\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ods_earlyyearsstudents_2021\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"year\r\n",
							"--, YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							"--,yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"and year(utcactivityenrolmentstartdate) = 2021 ---------------------------------------------------------------added this for 2021\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"left join vw_activestudent active\r\n",
							"on active.ceider = d.govcode1\r\n",
							"\r\n",
							"left join vw_dmyearlevel yl\r\n",
							"on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where year = 2021 ---------------------------------------------------------------added this for 2022\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"-- and studentname = 'Allira Ackers'\r\n",
							"--and studentname = 'Adaline Airey'\r\n",
							"and (studentname = 'Piper Dawes' or studentname = 'Lacie Silver')\r\n",
							"and classname like '%Generalist%'\r\n",
							"-- )"
						],
						"outputs": [],
						"execution_count": 246
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- select * from vw_ods_earlyyearsstudents_2023\r\n",
							"\r\n",
							"-- union\r\n",
							"\r\n",
							"-- select * from vw_ods_earlyyearsstudents_2022\r\n",
							"\r\n",
							"-- union\r\n",
							"\r\n",
							"-- select * from vw_ods_earlyyearsstudents_2021"
						],
						"outputs": [],
						"execution_count": 247
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"drop view vw_ods_earlyyearsstudents_2023_nulls"
						],
						"outputs": [],
						"execution_count": 289
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--For year 2023\r\n",
							"\r\n",
							"-- select year, campusid, schoolname, studentname, ceider, count(*) from vw_ods_earlyyearsstudents_2023\r\n",
							"-- group by year, campusid, schoolname, studentname, ceider\r\n",
							"-- order by studentname, year desc\r\n",
							"\r\n",
							"-- CREATE TEMP VIEW vw_ods_earlyyearsstudents_2023_nulls\r\n",
							"-- as\r\n",
							"\r\n",
							"select year\r\n",
							"--, yearlevel\r\n",
							", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote, count(*) from\r\n",
							"\r\n",
							"(\r\n",
							"select \r\n",
							"year\r\n",
							"--, YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							"--,yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							"--,ms.yearlevel as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"--and year(utcactivityenrolmentstartdate) = year(current_date) ---------------------------------------------------------------added this for 2023\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- LEFT OUTER JOIN (select SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear, count(subjectshortname) from vw_CompassODSCompassSubject\r\n",
							"-- group by SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear) s \r\n",
							"-- ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"-- AND a.CampusId = s.CampusId\r\n",
							"-- AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- left join vw_activestudent active\r\n",
							"-- on active.ceider = d.govcode1\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationMilestones ms\r\n",
							"-- on ms.compasspersonid = d.CompassPersonId\r\n",
							"-- and ms.iscurrent is True \r\n",
							"-- and ms.iscurrentmilestone is True\r\n",
							"\r\n",
							"-- left join vw_dmyearlevel yl\r\n",
							"-- on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where \r\n",
							"--year = year(CURRENT_DATE) ---------------------------------------------------------------added this for 2023\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"--and \r\n",
							"studentname = 'Allira Ackers'\r\n",
							"--and \r\n",
							"--studentname = 'Adaline Airey'\r\n",
							"--(studentname = 'Piper Dawes' or studentname = 'Lacie Silver')\r\n",
							"--and \r\n",
							"-- and year is not null\r\n",
							"and year = 2023\r\n",
							"-- and classname like '%Generalist%'\r\n",
							"-- )\r\n",
							") wholequery\r\n",
							"\r\n",
							"group by year\r\n",
							"--, yearlevel\r\n",
							", campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select \r\n",
							"yearlevel, iscurrent, isactive, iscurrentmilestone from vw_CompassODSStudentOrganisationMilestones \r\n",
							"where compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504'\r\n",
							"-- and iscurrent is True \r\n",
							"-- and iscurrentmilestone is True\r\n",
							"--compasspersonid\r\n",
							"--yearlevel\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"What is going on with the grouping count?"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--For year 2023\r\n",
							"\r\n",
							"-- select year, campusid, schoolname, studentname, ceider, count(*) from vw_ods_earlyyearsstudents_2023\r\n",
							"-- group by year, campusid, schoolname, studentname, ceider\r\n",
							"-- order by studentname, year desc\r\n",
							"\r\n",
							"-- CREATE TEMP VIEW vw_ods_earlyyearsstudents_2023_nulls\r\n",
							"-- as\r\n",
							"\r\n",
							"-- select year\r\n",
							"-- --, yearlevel\r\n",
							"-- , campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote, count(*) from\r\n",
							"\r\n",
							"-- (\r\n",
							"select \r\n",
							"year\r\n",
							"--, YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							"--,yl.yearlevelsifcode as YearLevel\r\n",
							"--,staff.campusid as CampusID\r\n",
							"--,ms.yearlevel as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"--and year(utcactivityenrolmentstartdate) = year(current_date) ---------------------------------------------------------------added this for 2023\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- LEFT OUTER JOIN (select SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear, count(subjectshortname) from vw_CompassODSCompassSubject\r\n",
							"-- group by SubjectImportIdentifier, CampusId, IsCurrent, AcademicYear) s \r\n",
							"-- ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"-- AND a.CampusId = s.CampusId\r\n",
							"-- AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- left join vw_activestudent active\r\n",
							"-- on active.ceider = d.govcode1\r\n",
							"\r\n",
							"-- left join vw_CompassODSStudentOrganisationMilestones ms\r\n",
							"-- on ms.compasspersonid = d.CompassPersonId\r\n",
							"-- and ms.iscurrent is True \r\n",
							"-- and ms.iscurrentmilestone is True\r\n",
							"\r\n",
							"-- left join vw_dmyearlevel yl\r\n",
							"-- on active.SKYearLevel = yl.SKYearLevel\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"--and staff.campusid = staffemails.campusid\r\n",
							"\r\n",
							"--left join vw_CompassODSStudentOrganisationDetails studentemails\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails ------------using this eliminates the ones where campusid doesn't match\r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"--and staff.campusid = studentemails.campusid\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"--ON staff.CampusId = c.bkCampusId\r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"where \r\n",
							"--year = year(CURRENT_DATE) ---------------------------------------------------------------added this for 2023\r\n",
							"--and ae.compasspersonid = 'ceb1e6d0-2cdc-49cf-8a07-4bc701841504' --Allira Ackers\r\n",
							"--and \r\n",
							"studentname = 'Allira Ackers'\r\n",
							"--and \r\n",
							"--studentname = 'Adaline Airey'\r\n",
							"--(studentname = 'Piper Dawes' or studentname = 'Lacie Silver')\r\n",
							"--and \r\n",
							"-- and year is not null\r\n",
							"and year = 2023\r\n",
							"-- and classname like '%Generalist%'\r\n",
							"-- )\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"-- ) wholequery\r\n",
							"\r\n",
							"-- group by year\r\n",
							"-- --, yearlevel\r\n",
							"-- , campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"select distinct academicyear, count(*) from vw_CompassODSCompassSubject\r\n",
							"group by academicyear\r\n",
							"order by academicyear"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- left join vw_CompassODSStudentOrganisationMilestones ms\r\n",
							"select distinct yearlevel, count(*) from vw_CompassODSStudentOrganisationMilestones\r\n",
							"group by yearlevel\r\n",
							"order by yearlevel\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"-- CREATE TEMP VIEW vw_ods_studentstable\r\n",
							"-- as\r\n",
							"\r\n",
							"-- select year\r\n",
							"-- , yearlevel\r\n",
							"-- , campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote, count(*) as groupingcount from\r\n",
							"\r\n",
							"-- (\r\n",
							"select \r\n",
							"year\r\n",
							", YearLevel\r\n",
							", CampusID\r\n",
							", SchoolName\r\n",
							", TeacherID\r\n",
							", TeacherName\r\n",
							", StudentID \r\n",
							", StudentName\r\n",
							", ClassName\r\n",
							", ClassID\r\n",
							", StaffEmail\r\n",
							", StudentEmail\r\n",
							", ceider\r\n",
							",Gender\r\n",
							",Gendercode\r\n",
							",Indigenoustype\r\n",
							",Indigenoustypecode\r\n",
							",Disability\r\n",
							",LBOTE\r\n",
							"\r\n",
							"\r\n",
							",startdate\r\n",
							",startdateyear\r\n",
							"\r\n",
							"from \r\n",
							"(\r\n",
							"\r\n",
							"SELECT\r\n",
							"s.academicyear as Year \r\n",
							",yearlevel.yearlevel as YearLevel\r\n",
							",staffemails.campusid as CampusID\r\n",
							",c.schoolname as SchoolName\r\n",
							",staff.compasspersonid as TeacherID\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS TeacherName\r\n",
							",d.compasspersonid as StudentID\r\n",
							",concat(d.FirstName,' ',d.LastName) AS StudentName\r\n",
							",ae.ActivityEnrolmentStartDate \r\n",
							",s.subjectshortname as ClassName\r\n",
							",a.SubjectCode as ClassID\r\n",
							",d.govcode1 as ceider\r\n",
							",staffemails.organisationuseremail as StaffEmail\r\n",
							",studentemails.organisationuseremail as StudentEmail\r\n",
							"\r\n",
							",d.Gender\r\n",
							",d.Gendercode\r\n",
							",d.Indigenoustype\r\n",
							",d.Indigenoustypecode\r\n",
							",d.Disability\r\n",
							",d.LBOTE\r\n",
							"\r\n",
							",ae.utcactivityenrolmentstartdate as startdate\r\n",
							",year(ae.utcactivityenrolmentstartdate) as startdateyear\r\n",
							"\r\n",
							"from vw_CompassODSStaffDemographic staff\r\n",
							"\r\n",
							"inner join vw_CompassODSActivity a\r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"AND a.iscurrent is True\r\n",
							"\r\n",
							"inner JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"AND ae.IsCurrent is True\r\n",
							"--and year(utcactivityenrolmentstartdate) = 2020 ---------------------------------------------------------------added this \r\n",
							"\r\n",
							"inner JOIN vw_CompassODSStudentDemographic d \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"AND d.iscurrent is True\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"AND s.IsCurrent is True\r\n",
							"\r\n",
							"-- --Login emails\r\n",
							"left join vw_CompassODSStaffOrganisationDetails staffemails\r\n",
							"on staff.CompassPersonId = staffemails.CompassPersonId\r\n",
							"and staffemails.iscurrent is True\r\n",
							"and staffemails.status = 'Active'\r\n",
							"\r\n",
							"inner join vw_CompassODSStudentOrganisationDetails studentemails \r\n",
							"on d.CompassPersonId = studentemails.CompassPersonId\r\n",
							"and studentemails.iscurrent is True\r\n",
							"and studentemails.status = 'Active'\r\n",
							"and staffemails.campusid = studentemails.campusid\r\n",
							"\r\n",
							"left join vw_dmcampus c \r\n",
							"ON staffemails.campusid = c.bkCampusId\r\n",
							"\r\n",
							"left join (SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"              ) yearlevel \r\n",
							"        on d.CompassPersonId = yearlevel.compasspersonid\r\n",
							"        and yearlevel.milestoneyear = s.academicyear\r\n",
							"\r\n",
							"\r\n",
							"where \r\n",
							"    staff.iscurrent is True\r\n",
							"\r\n",
							") mainquery\r\n",
							"\r\n",
							"-- where studentname = 'Allira Ackers'\r\n",
							"where studentname = 'Georgia Carland'\r\n",
							"    and year = 2020\r\n",
							"\r\n",
							"    order by teachername\r\n",
							"-- where \r\n",
							"-- year is not null\r\n",
							"-- -- ) wholequery\r\n",
							"\r\n",
							"-- where yearlevel is not null\r\n",
							"\r\n",
							"-- group by year\r\n",
							"-- , yearlevel\r\n",
							"-- , campusid, schoolname, studentname, ceider, gender, gendercode, indigenoustype, indigenoustypecode, disability, lbote"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"select distinct year(utcactivityenrolmentstartdate) from vw_CompassODSActivityEnrolment"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT CompassPersonId,\r\n",
							"           CampusId,\r\n",
							"           --case when YearLevel = 0 then 'P' else YearLevel end as YearLevel,\r\n",
							"           YearLevel,\r\n",
							"           GroupA,\r\n",
							"           GroupB,\r\n",
							"           GroupC,\r\n",
							"           GroupD,\r\n",
							"           GroupE,\r\n",
							"           IsActive,\r\n",
							"           IsCurrentMilestone,\r\n",
							"           year(MilestoneTimestamp + INTERVAL 10 HOURS) AS MilestoneYear,\r\n",
							"           MilestoneTimestamp + INTERVAL 10 HOURS AS MilestoneStartDate,\r\n",
							"           COALESCE(\r\n",
							"                       LEAD(MilestoneTimestamp + INTERVAL 10 HOURS) \r\n",
							"                                                                            OVER (PARTITION BY CompassPersonId,\r\n",
							"                                                                                      OrganisationName\r\n",
							"                                                                         ORDER BY MilestoneTimestamp,\r\n",
							"                                                                                  HomeCampusGuid\r\n",
							"                                                                        ),\r\n",
							"                       make_date(9999, 12, 31)\r\n",
							"                   ) AS MilestoneFinishDate,\r\n",
							"           OrganisationName\r\n",
							"    FROM vw_CompassODSStudentOrganisationMilestones\r\n",
							"     WHERE IsCurrent is True\r\n",
							"          AND DioceseId = 12\r\n",
							"          and yearlevel is not null\r\n",
							"\r\n",
							"          order by compasspersonid"
						],
						"outputs": [],
						"execution_count": 30
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL_Transforms')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "be8d3d30-e41e-4126-af4d-aef090a0c079"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## This note book contains data transformations using SQL\r\n",
							"This notebook should not be run on its own, rather it is run as part of the Transforms_Connector notebook"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Load all required dataframes and convert them to temp sql views"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"from pyspark.sql.functions import split"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta') #need to edit source\r\n",
							"\r\n",
							"subjectexclusionlist_df = spark.read.load(source3p + \"/pilot/SubjectExclusionList_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3 general dims\r\n",
							"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for ODS tables (+ dmcampus_df already added above)\r\n",
							"odsactivity_df = spark.read.load(sourcep + \"/ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
							"odsactivityenrolment_df = spark.read.load(sourcep + \"/ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
							"odsactivityinstance_df = spark.read.load(sourcep + \"/ODSActivityInstance/CompassODSActivityInstance_pseudo\", format='delta')\r\n",
							"odscompasssubject_df = spark.read.load(sourcep + \"/ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstaffdemographic_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
							"odsstudentdemographic_df = spark.read.load(sourcep + \"/ODSStudentDemographic/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstafforganisationdetails_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffOrganisationDetails_pseudo\", format='delta')\r\n",
							"odsstudentorganisationdetails_df = spark.read.load(sourcep + \"/ODS/CompassODSStudentOrganisationDetails_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstafforganisationmilestones_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffOrganisationMilestones_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3 transform on this table\r\n",
							"odsstudentorganisationmilestones_df = spark.read.load(source3p + \"/pilot/CompassODSStudentOrganisationMilestones_pseudo\", format='delta')\r\n",
							"\r\n",
							"# early years\r\n",
							"earlyyearssubteachers_df = spark.read.load(source3p + \"/pilot/EarlyYearsSubTeachers_pseudo\", format='delta')\r\n",
							"\r\n",
							"# Early Years\r\n",
							"EarlyYearsResultsWide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResults_pseudo\", format='delta')\r\n",
							"EYResultsYear2Wide_df = spark.read.load(source3p + \"/pilot/EarlyYearsResultsYear2_pseudo\", format='delta')\r\n",
							"EarlyYearsStudents_df = spark.read.load(source3p + \"/pilot/_FACTODSEarlyYearsStudents\", format='delta')\r\n",
							"\r\n",
							"#NAPLAN\r\n",
							"naplanonlinestudenttest_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANOnlineStudentTestResult_pseudo\", format='delta')\r\n",
							"naplanonlinestudentresult_df = spark.read.load(source3p + \"/pilot/DMNAPLANOnlineStudentResult_pseudo\", format='delta')\r\n",
							"naplantest_df = spark.read.load(source3p + \"/pilot/DMNAPLANTest_pseudo\", format='delta')\r\n",
							"\r\n",
							"#NAPLAN Proficiency\r\n",
							"naplanproficiencytest_df = spark.read.load(source3p + \"/pilot/DMNAPLANProficiencyTest_pseudo\", format='delta')\r\n",
							"naplanproficiencystudentresult_df = spark.read.load(source3p + \"/pilot/DMNAPLANProficiencyStudentResult_pseudo\", format='delta')\r\n",
							"naplanproficiencystudenitemresponse_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANProficiencyStudentItemResponse_pseudo\", format='delta')\r\n",
							"naplanacaraproficiency_df = spark.read.load(source3p + \"/pilot/DMFactNAPLANACARAProficiency_pseudo\", format='delta')\r\n",
							"\r\n",
							"#ACER\r\n",
							"patresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"pattest_df = spark.read.load(source3p + \"/pilot/DMPATTest_pseudo\", format='delta')\r\n",
							"acerstudent_df = spark.read.load(source3p + \"/pilot/DMACERStudent_pseudo\", format='delta')\r\n",
							"\r\n",
							"#AE\r\n",
							"aeresults_df = spark.read.load(source3p + \"/pilot/AEResultsCombined_pseudo\", format='delta')\r\n",
							"\r\n",
							"#ICSEA\r\n",
							"icsea_df = spark.read.load(source3p + \"/pilot/ICSEA_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"subjectexclusionlist_df.createOrReplaceTempView('vw_subjectexclusionlist')\r\n",
							"\r\n",
							"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \r\n",
							"odsactivityinstance_df.createOrReplaceTempView('vw_CompassODSActivityInstance') \r\n",
							"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \r\n",
							"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \r\n",
							"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \r\n",
							"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') \r\n",
							"\r\n",
							"odsstafforganisationdetails_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationDetails') \r\n",
							"odsstafforganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationMilestones')\r\n",
							"\r\n",
							"odsstudentorganisationdetails_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationDetails') \r\n",
							"odsstudentorganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationMilestones')\r\n",
							"\r\n",
							"# Early Years\r\n",
							"earlyyearssubteachers_df.createOrReplaceTempView('vw_EarlyYearsSubTeachers') \r\n",
							"\r\n",
							"EarlyYearsResultsWide_df.createOrReplaceTempView('vw_EarlyYearsResultsWide') \r\n",
							"EYResultsYear2Wide_df.createOrReplaceTempView('vw_EYResultsYear2Wide') \r\n",
							"EarlyYearsStudents_df.createOrReplaceTempView('vw_EarlyYearsStudents') \r\n",
							"\r\n",
							"#NAPLAN\r\n",
							"naplanonlinestudenttest_df.createOrReplaceTempView('vw_naplanonlinestudenttest') \r\n",
							"naplanonlinestudentresult_df.createOrReplaceTempView('vw_naplanonlinestudentresult') \r\n",
							"naplantest_df.createOrReplaceTempView('vw_naplantest') \r\n",
							"\r\n",
							"#NAPLAN Procifiency\r\n",
							"naplanproficiencytest_df.createOrReplaceTempView('vw_naplanproficiencytest') \r\n",
							"naplanproficiencystudentresult_df.createOrReplaceTempView('vw_naplanproficiencystudentresult') \r\n",
							"naplanproficiencystudenitemresponse_df.createOrReplaceTempView('vw_naplanproficiencystudenitemresponse') \r\n",
							"naplanacaraproficiency_df.createOrReplaceTempView('vw_naplanacaraproficiency') \r\n",
							"\r\n",
							"#ACER\r\n",
							"patresults_df.createOrReplaceTempView('vw_patresults') \r\n",
							"pattest_df.createOrReplaceTempView('vw_pattest') \r\n",
							"acerstudent_df.createOrReplaceTempView('vw_acerstudent') \r\n",
							"\r\n",
							"#AE\r\n",
							"aeresults_df.createOrReplaceTempView('vw_aeresults') \r\n",
							"\r\n",
							"#ICSEA\r\n",
							"icsea_df.createOrReplaceTempView('vw_icsea') \r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## REMOVE (has been replaced by AllEnrolment)"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_classenrolment;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_classenrolment\r\n",
							"AS\r\n",
							"SELECT cy.Year AS CalendarYear,\r\n",
							"    C.SchoolId AS AGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    student.FirstName  AS  StudentFirstName,\r\n",
							"    student.LastName AS StudentLastName,\r\n",
							"    Student.Ceider,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    s.SubjectShortName AS Subject,\r\n",
							"    a.ActivityName AS  ClassName,\r\n",
							"    a.ActivityCode AS ClassCode,\r\n",
							"    ClassStartDate.date AS ClassStartDate,\r\n",
							"    ClassEndDate.date AS ClassEndDate,\r\n",
							"    staff.FirstName AS StaffFirstName,\r\n",
							"    staff.LastName AS StaffLastName\r\n",
							"\r\n",
							"    FROM vw_factsubjectenrolment f\r\n",
							"    JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\r\n",
							"    AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"    JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\r\n",
							"    JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\r\n",
							"    JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\r\n",
							"    JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"    JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"    JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\r\n",
							"\r\n",
							"    JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\r\n",
							"    JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\r\n",
							"\r\n",
							"    AND cy.Year = 2022\r\n",
							"    WHERE ClassEndDate.date > current_date() -- spark sql uses current_date() instead of GETDATE()\r\n",
							"    AND s.SubjectShortName <> 'Unknown'\r\n",
							"    ORDER BY\r\n",
							"    AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_activestudenttemp;\r\n",
							"\r\n",
							"-- Temporary table do not save \r\n",
							"CREATE TEMP VIEW vw_activestudenttemp\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    c.SchoolId as CampusId,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_activestudent;\r\n",
							"\r\n",
							"-- Removes duplicates from the active student temp table above\r\n",
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT *\r\n",
							"FROM vw_activestudenttemp\r\n",
							"WHERE Ceider NOT IN (SELECT Ceider\r\n",
							"                    FROM vw_activestudenttemp\r\n",
							"                    GROUP BY Ceider\r\n",
							"                    HAVING COUNT(Ceider) > 1)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_activestudentexceptions;\r\n",
							"\r\n",
							"-- Gets only the duplicates from the active student temp table above so it can be used in an exceptions report \r\n",
							"CREATE TEMP VIEW vw_activestudentexceptions\r\n",
							"AS\r\n",
							"SELECT *\r\n",
							"FROM vw_activestudenttemp\r\n",
							"WHERE Ceider IN (SELECT Ceider\r\n",
							"                    FROM vw_activestudenttemp\r\n",
							"                    GROUP BY Ceider\r\n",
							"                    HAVING COUNT(Ceider) > 1)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_inactivestudent;\r\n",
							"\r\n",
							"-- MAY NOT REQUIRE THIS ANYMORE\r\n",
							"CREATE TEMP VIEW vw_inactivestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE,\r\n",
							"    d.date AS DateLeft\r\n",
							"    \r\n",
							"FROM\r\n",
							"    vw_factpersonmilestone f\r\n",
							"JOIN vw_dmdate d ON f.SKMilestoneStartDate = d.SKDate\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'False'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"    AND Date < current_date()\r\n",
							"ORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_studentclass;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ods_studentclass\r\n",
							"as\r\n",
							"\r\n",
							"SELECT distinct\r\n",
							"d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							",s.SubjectLongName\r\n",
							",a.SubjectCode\r\n",
							",a.ActivityName\r\n",
							",a.ActivityTypeDescription\r\n",
							",a.ManagingCompassPersonId\r\n",
							",staff.firstname\r\n",
							",staff.lastname\r\n",
							",ae.ActivityEnrolmentStartDate\r\n",
							",ae.ActivityEnrolmentEndDate\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
							",a.CampusId AS AGEID\r\n",
							",c.CampusSuburbAndName\r\n",
							"--,c.CompassSchoolURL\r\n",
							",s.AcademicYear\r\n",
							",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
							",a.IsCurrent as IsCurrent_Activity\r\n",
							",s.IsCurrent as IsCurrent_Subject\r\n",
							",staff.iscurrent as IsCurrent_Staff\r\n",
							",d.iscurrent as IsCurrent_Student\r\n",
							"\r\n",
							"\r\n",
							"FROM \r\n",
							"vw_CompassODSStudentDemographic d \r\n",
							"\r\n",
							"JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"\r\n",
							"JOIN vw_CompassODSActivity a \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"\r\n",
							"LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"\r\n",
							"JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\r\n",
							"WHERE \r\n",
							"d.iscurrent is True\r\n",
							"AND a.ActivityTypeDescription = 'Standard Class'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_studentstable;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ods_studentstable\r\n",
							"as\r\n",
							"\r\n",
							"select\r\n",
							"distinct ms.CompassPersonId as MS_CompassPersonID\r\n",
							",demo.CompassPersonId as DEMO_CompassPersonID\r\n",
							",ms.yearlevel\r\n",
							",ms.isactive \r\n",
							",ms.iscurrentmilestone \r\n",
							",ms.studenttype \r\n",
							",ms.dioceseId\r\n",
							",ms.campusid \r\n",
							",camp.skcampus\r\n",
							",camp.BKCampusId\r\n",
							",camp.SchoolName\r\n",
							",ms.iscurrent\r\n",
							",demo.firstname\r\n",
							",demo.lastname \r\n",
							"--,demo.gender \r\n",
							",demo.govcode1 as ceider\r\n",
							"--,demo.disability \r\n",
							"--,demo.LBOTE \r\n",
							"--,demo.indigenoustypecode \r\n",
							",ms.milestonetimestamp\r\n",
							",year(MilestoneTimestamp + INTERVAL 10 HOURS) AS calendaryear\r\n",
							"from vw_CompassODSStudentOrganisationMilestones ms\r\n",
							"\r\n",
							"left join vw_CompassODSStudentDemographic demo on ms.CompassPersonId = demo.CompassPersonId \r\n",
							"\tand demo.Iscurrent = 'True'\r\n",
							"\r\n",
							"left join vw_dmcampus camp on ms.campusid = camp.BKCampusId\r\n",
							"\r\n",
							"where \r\n",
							"ms.iscurrent = 'True'\r\n",
							"and ms.isactive = 'True'\r\n",
							"--and ms.iscurrentmilestone  = 'True' --this is just for 2023 (current year)\r\n",
							"and year(MilestoneTimestamp + INTERVAL 10 HOURS) in (2021, 2022, 2023)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Enrolments "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_allenrolments;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_allenrolments\r\n",
							"AS\r\n",
							"\r\n",
							"SELECT \r\n",
							"\todse.SubjectCode\r\n",
							"\t,odse.ActivityCode\r\n",
							"\t,odse.CampusID\r\n",
							"\t,odss.GovCode1 AS Ceider\r\n",
							"\t,YEAR(odse.ActivityEnrolmentEndDate) AS Year\r\n",
							"\tFROM vw_CompassODSActivityEnrolment odse\r\n",
							"\tJOIN vw_CompassODSStudentDemographic odss on odse.CompassPersonId = odss.CompassPersonId\r\n",
							"\r\n",
							"\tWHERE SubjectCode IS NOT NULL\r\n",
							"\tAND odse.Iscurrent = 'True'\r\n",
							"\tAND odss.Iscurrent = 'True'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_currentyearenrolments;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_currentyearenrolments\r\n",
							"AS\r\n",
							"\r\n",
							"SELECT \r\n",
							"\te.SubjectCode\r\n",
							"\t,e.ActivityCode\r\n",
							"\t,e.CampusID\r\n",
							"\t,e.Year\r\n",
							"\t,a.SKYearLevel\r\n",
							"\t,a.Ceider\r\n",
							"\r\n",
							"\tFROM vw_allenrolments e\r\n",
							"\tJOIN vw_activestudent a on e.Ceider = a.Ceider -- will not include active students who are not enrolled in classes\r\n",
							"\tAND Year = YEAR(current_date())"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_currentyearenrolments_withexclusions;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_currentyearenrolments_withexclusions\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"    ce.*\r\n",
							"    ,subject.SubjectShortName\r\n",
							"\r\n",
							"    FROM vw_currentyearenrolments ce\r\n",
							"    JOIN \r\n",
							"    (\r\n",
							"        SELECT DISTINCT \r\n",
							"            c.SubjectImportIdentifier AS SubjectCode\r\n",
							"            ,c.Campusid\r\n",
							"            ,c.SubjectShortName\r\n",
							"        FROM vw_CompassODSCompassSubject c\r\n",
							"        JOIN vw_subjectexclusionlist e\r\n",
							"        ON c.SubjectImportIdentifier = e.SubjectCode\r\n",
							"        AND c.SubjectShortName = e.SubjectShortName\r\n",
							"        WHERE AcademicYear = YEAR(current_date())\r\n",
							"        AND e.Include = 'TRUE'\r\n",
							"    ) subject\r\n",
							"    ON ce.SubjectCode = subject.SubjectCode\r\n",
							"    AND ce.CampusID = subject.Campusid\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_currentrollgroup;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_currentrollgroup\r\n",
							"AS\r\n",
							"\r\n",
							"SELECT \r\n",
							"\tRollGroup AS SubjectCode\r\n",
							"\t,RollGroup AS ActivityCode \r\n",
							"\t,CampusID\r\n",
							"\t,YEAR(current_date()) AS Year\r\n",
							"\t,SKYearLevel\r\n",
							"\t,Ceider\r\n",
							"\r\n",
							"  FROM vw_activestudent\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_currentenrolments;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_currentenrolments\r\n",
							"AS\r\n",
							"\r\n",
							"SELECT *\r\n",
							"    FROM vw_currentyearenrolments\r\n",
							"\r\n",
							"UNION\r\n",
							"\r\n",
							"SELECT *\r\n",
							"    FROM vw_currentrollgroup"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Early Years Students"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents;\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents\r\n",
							"as\r\n",
							"\r\n",
							"select distinct \r\n",
							"\r\n",
							"\tyear(current_date) as Year\r\n",
							"\t, replace(YearLevel, '0', 'P') as YearLevel\r\n",
							"\t, instance.CampusId as CampusID\r\n",
							"\t, campus.SchoolNameAndArea\r\n",
							"\t, ManagingCompassPersonId as TeacherID\r\n",
							"\t, concat(staffdemo.TeacherFirstName, ' ', staffdemo.TeacherLastName) as TeacherName\r\n",
							"\t, students.StudentCompassPersonId as StudentID\r\n",
							"\t, concat(studentdemo.FirstName, ' ', studentdemo.LastName) as StudentName\r\n",
							"\t, enrolment.ActivityName as ClassName\r\n",
							"\t, enrolment.ActivityCode as ClassID\r\n",
							"\t, trim(coalesce(staffemail.TeacherOrganisationUserEmail, staffdemo.TeacherEmailAddress)) as StaffEmail\r\n",
							"\t, trim(studentemail.OrganisationUserEmail) as StudentEmail\r\n",
							"\t, trim(studentdemo.GovCode1) as Ceider\r\n",
							"\r\n",
							"from\r\n",
							"\r\n",
							"-- Student Organisation Milestones\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, YearLevel, OrganisationName, CampusId\r\n",
							"  from vw_CompassODSStudentOrganisationMilestones\r\n",
							"  where 1=1\r\n",
							"  and IsActive = 'True'\r\n",
							"  and IsCurrent = 'True'\r\n",
							"  and IsCurrentMilestone = 'True'\r\n",
							"  and DioceseId = 12\r\n",
							"  and (YearLevel = '0' or YearLevel = '1' or YearLevel = '2')\r\n",
							") students\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Compass Activity Enrolment\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, ActivityCode, ActivityName, CampusID\r\n",
							"\tfrom vw_CompassODSActivityEnrolment\r\n",
							"\twhere 1=1\r\n",
							"\tand IsCurrent = 'True'\r\n",
							"\tand RoleDescription = 'Student'\r\n",
							"\tand ActivityName <> 'Sickbay'\r\n",
							"\tand SubjectCode IS NOT NULL\r\n",
							"\tand year(ActivityEnrolmentStartDate) = year(current_date)\r\n",
							"\t--and to_date(ActivityEnrolmentEndDate) > current_date\r\n",
							"\tand year(to_date(ActivityEnrolmentEndDate)) = year(current_date)\r\n",
							"\tand (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\r\n",
							") enrolment\r\n",
							"\r\n",
							"on students.StudentCompassPersonId = enrolment.StudentCompassPersonId\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Compass Activity Instance\r\n",
							"(select distinct ActivityCode, ManagingCompassPersonId, CampusId\r\n",
							"  from vw_CompassODSActivityInstance\r\n",
							"  where 1=1 \r\n",
							"  and IsCurrent = 'True'\r\n",
							"  and DioceseId = 12\r\n",
							"  and (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\r\n",
							"  and year(Start) = year(current_date)\r\n",
							"  and ManagingCompassPersonId <> '00000000-0000-0000-0000-000000000000'\r\n",
							") instance \r\n",
							"\r\n",
							"on enrolment.ActivityCode = instance.ActivityCode\r\n",
							"and enrolment.CampusID = instance.CampusId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Organisation Milestones\r\n",
							"(select distinct CompassPersonId as StaffCompassPersonId, OrganisationName\r\n",
							"\tfrom vw_CompassODSStaffOrganisationMilestones\r\n",
							"\twhere 1=1\r\n",
							"\tand DioceseId = 12\r\n",
							"\tand IsCurrentMilestone = 'True'\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand IsActive = 'True'\r\n",
							") staffmilestone\r\n",
							"\r\n",
							"on instance.ManagingCompassPersonId = staffmilestone.StaffCompassPersonId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Demographic\r\n",
							"-- only getting the personal email here because some schools have accidentally \r\n",
							"-- put the org user email in this field in compass\r\n",
							"(select distinct CompassPersonId as StaffCompassPersonId, FirstName as TeacherFirstName, LastName as TeacherLastName, EmailAddress as TeacherEmailAddress\r\n",
							"\tfrom vw_CompassODSStaffDemographic\r\n",
							"\twhere 1=1\r\n",
							"\tand IsCurrent = 'True'\r\n",
							") staffdemo\r\n",
							"\r\n",
							"on staffmilestone.StaffCompassPersonId = staffdemo.StaffCompassPersonId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Organisation Details (email)\r\n",
							"(select distinct CompassPersonId as TeacherCompassPersonId, OrganisationUserEmail as TeacherOrganisationUserEmail, OrganisationName\r\n",
							"\tfrom vw_CompassODSStaffOrganisationDetails\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand OrganisationUserEmail NOT LIKE '%supply%'\r\n",
							") staffemail\r\n",
							"\r\n",
							"on staffmilestone.StaffCompassPersonId = staffemail.TeacherCompassPersonId\r\n",
							"and staffmilestone.OrganisationName = staffemail.OrganisationName\r\n",
							"and staffemail.OrganisationName like students.OrganisationName\r\n",
							"\r\n",
							"inner join -- inner join will remove students without demographic information\r\n",
							"\r\n",
							"-- Student Demographic\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, FirstName, LastName, GovCode1\r\n",
							"\tfrom vw_CompassODSStudentDemographic\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							") studentdemo\r\n",
							"\r\n",
							"on students.StudentCompassPersonId = studentdemo.StudentCompassPersonId\r\n",
							"\r\n",
							"inner join  -- inner join will remove students without email\r\n",
							"\r\n",
							"-- Student Organisation Details (Email)\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, OrganisationUserEmail, OrganisationName\r\n",
							"\tfrom vw_CompassODSStudentOrganisationDetails\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand OrganisationUserEmail IS NOT NULL --these are all duplicate students that have emails in other records\r\n",
							") studentemail\r\n",
							"\r\n",
							"on studentdemo.StudentCompassPersonId = studentemail.StudentCompassPersonId\r\n",
							"and students.OrganisationName = studentemail.OrganisationName\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Get the School Names\r\n",
							"(select SchoolId, SchoolNameAndArea\r\n",
							"\tfrom vw_dmcampus\r\n",
							") campus\r\n",
							"\r\n",
							"on campus.SchoolId = instance.CampusId\r\n",
							"\r\n",
							"-- filter out the duplicate classid's from campusid 617\r\n",
							"WHERE 1=1\r\n",
							"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GENP_PREP')\r\n",
							"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GEN1_Year 1')\r\n",
							"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GEN2_Year 2')\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_exceptions;\r\n",
							"\r\n",
							"-- Create a student exceptions lists with students that are assigned to multiple 'General' type classes\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents_exceptions\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"    Year\r\n",
							"    ,YearLevel\r\n",
							"    ,CampusID\r\n",
							"    ,SchoolNameAndArea\r\n",
							"    ,Ceider\r\n",
							"    ,StudentName\r\n",
							"    ,TeacherName\r\n",
							"    ,ClassID\r\n",
							"\r\n",
							"from vw_ods_earlyyearsstudents\r\n",
							"\r\n",
							"where Ceider in (\r\n",
							"\r\n",
							"  select Ceider\r\n",
							"  from\r\n",
							"\r\n",
							"  (\r\n",
							"\t  select distinct year, ceider, classid\r\n",
							"\t  FROM vw_ods_earlyyearsstudents\r\n",
							"  ) a\r\n",
							"\r\n",
							"  group by year, ceider\r\n",
							"  having count(*) > 1\r\n",
							"\r\n",
							")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_cleaned;\r\n",
							"\r\n",
							"-- Remove the students exceptions (where a student is listed multiple times)\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents_cleaned\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"    Year\r\n",
							"    ,YearLevel\r\n",
							"    ,CampusID\r\n",
							"    ,SchoolNameAndArea\r\n",
							"    ,TeacherID\r\n",
							"    ,TeacherName\r\n",
							"    ,StudentID\r\n",
							"    ,StudentName\r\n",
							"    ,ClassName\r\n",
							"    ,ClassID\r\n",
							"    ,StaffEmail\r\n",
							"    ,StudentEmail\r\n",
							"    ,Ceider\r\n",
							"\r\n",
							"from vw_ods_earlyyearsstudents\r\n",
							"\r\n",
							"where Ceider NOT IN (\r\n",
							"\r\n",
							"  select Ceider\r\n",
							"  from\r\n",
							"\r\n",
							"  (\r\n",
							"\t  select distinct year, ceider, classid\r\n",
							"\t  FROM vw_ods_earlyyearsstudents\r\n",
							"  ) allceiders\r\n",
							"\r\n",
							"  group by year, ceider\r\n",
							"  having count(*) > 1\r\n",
							"\r\n",
							")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudentsclassid_cleaned;\r\n",
							"\r\n",
							"-- create a clean student list that lists the correct classid for each student\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudentsclassid_cleaned\r\n",
							"as\r\n",
							"\r\n",
							"select distinct \r\n",
							"    Year\r\n",
							"    ,Ceider\r\n",
							"    ,ClassID\r\n",
							"    ,ClassName\r\n",
							"\r\n",
							"from vw_ods_earlyyearsstudents_cleaned \r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_EYResultsYear2;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_EYResultsYear2\r\n",
							"AS\r\n",
							"\r\n",
							"select \r\n",
							"    e.Year,\r\n",
							"    e.Ceider,\r\n",
							"    e.CampusID,\r\n",
							"    coalesce(c.ClassID, e.ClassID) AS ClassID,\r\n",
							"    e.Ques1,\r\n",
							"    e.Ques10,\r\n",
							"    e.Ques11,\r\n",
							"    e.Ques12,\r\n",
							"    e.Ques13,\r\n",
							"    e.Ques14,\r\n",
							"    e.Ques15,\r\n",
							"    e.Ques16,\r\n",
							"    e.Ques17,\r\n",
							"    e.Ques18,\r\n",
							"    e.Ques19,\r\n",
							"    e.Ques2,\r\n",
							"    e.Ques20,\r\n",
							"    e.Ques21,\r\n",
							"    e.Ques22,\r\n",
							"    e.Ques23,\r\n",
							"    e.Ques24,\r\n",
							"    e.Ques25,\r\n",
							"    e.Ques3,\r\n",
							"    e.Ques4,\r\n",
							"    e.Ques5,\r\n",
							"    e.Ques6,\r\n",
							"    e.Ques7,\r\n",
							"    e.Ques8,\r\n",
							"    e.Ques9,\r\n",
							"    e.QuestionType,\r\n",
							"    e.Status,\r\n",
							"    e.StudentEmailID,\r\n",
							"    e.StudentName,\r\n",
							"    e.TeacherEmailID,\r\n",
							"    e.TeacherName,\r\n",
							"    e.YearLevel,\r\n",
							"    e.TestLevel,\r\n",
							"    e.BKID,\r\n",
							"    c.ClassName\r\n",
							"\r\n",
							"from vw_EYResultsYear2Wide e\r\n",
							"left join vw_ods_earlyyearsstudentsclassid_cleaned c\r\n",
							"on e.Year = c.Year \r\n",
							"and e.Ceider = c.Ceider\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_EYResults;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_EYResults\r\n",
							"AS\r\n",
							"\r\n",
							"select \r\n",
							"    e.Year,\r\n",
							"    e.Ceider,\r\n",
							"    e.CampusID,\r\n",
							"    coalesce(c.ClassID, e.ClassID) AS ClassID,\r\n",
							"    e.Ques1,\r\n",
							"    e.Ques10,\r\n",
							"    e.Ques11,\r\n",
							"    e.Ques12,\r\n",
							"    e.Ques13,\r\n",
							"    e.Ques14,\r\n",
							"    e.Ques15,\r\n",
							"    e.Ques16,\r\n",
							"    e.Ques17,\r\n",
							"    e.Ques18,\r\n",
							"    e.Ques19,\r\n",
							"    e.Ques2,\r\n",
							"    e.Ques20,\r\n",
							"    e.Ques21,\r\n",
							"    e.Ques22,\r\n",
							"    e.Ques23,\r\n",
							"    e.Ques24,\r\n",
							"    e.Ques25,\r\n",
							"    e.Ques26,\r\n",
							"    e.Ques27,\r\n",
							"    e.Ques28,\r\n",
							"    e.Ques29,\r\n",
							"    e.Ques30,\r\n",
							"    e.Ques31,\r\n",
							"    e.Ques32,\r\n",
							"    e.Ques33,\r\n",
							"    e.Ques34,\r\n",
							"    e.Ques35,\r\n",
							"    e.Ques36,\r\n",
							"    e.Ques37,\r\n",
							"    e.Ques38,\r\n",
							"    e.Ques39,\r\n",
							"    e.Ques40,\r\n",
							"    e.Ques3,\r\n",
							"    e.Ques4,\r\n",
							"    e.Ques5,\r\n",
							"    e.Ques6,\r\n",
							"    e.Ques7,\r\n",
							"    e.Ques8,\r\n",
							"    e.Ques9,\r\n",
							"    e.Status,\r\n",
							"    e.StudentEmailID,\r\n",
							"    e.StudentName,\r\n",
							"    e.TeacherEmailID,\r\n",
							"    e.TeacherName,\r\n",
							"    e.YearLevel,\r\n",
							"    e.TestLevel,\r\n",
							"    e.BKID,\r\n",
							"    c.ClassName\r\n",
							"\r\n",
							"from vw_EarlyYearsResultsWide e\r\n",
							"left join vw_ods_earlyyearsstudentsclassid_cleaned c\r\n",
							"on e.Year = c.Year \r\n",
							"and e.Ceider = c.Ceider\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudentsclassid_updated;\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudentsclassid_updated\r\n",
							"AS\r\n",
							"\r\n",
							"select \r\n",
							"    e.Year\r\n",
							"    ,e.YearLevel\r\n",
							"    ,e.CampusID\r\n",
							"    ,e.SchoolNameAndArea\r\n",
							"    ,e.TeacherID\r\n",
							"    ,e.TeacherName\r\n",
							"    ,e.StudentID\r\n",
							"    ,e.StudentName\r\n",
							"    ,eclean.ClassName\r\n",
							"    ,eclean.ClassID\r\n",
							"    ,e.StaffEmail\r\n",
							"    ,e.StudentEmail\r\n",
							"    ,e.Ceider\r\n",
							"\r\n",
							"from vw_ods_earlyyearsstudents e\r\n",
							"left join vw_ods_earlyyearsstudents_cleaned eclean \r\n",
							"on e.Year = eclean.Year\r\n",
							"and e.Ceider = eclean.Ceider"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Add Substitute Teachers from the SharePoint Online list"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_substituteteachers;\r\n",
							"\r\n",
							"-- Manual entry of support staff (non teachers) that will be conducting tests\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents_substituteteachers\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"\tYear\r\n",
							"    ,YearLevel\r\n",
							"    ,CampusID\r\n",
							"    ,SchoolNameAndArea\r\n",
							"    ,TeacherID\r\n",
							"    ,TeacherName\r\n",
							"    ,StudentID\r\n",
							"    ,StudentName\r\n",
							"    ,ClassName\r\n",
							"    ,ClassID\r\n",
							"    ,StaffEmail\r\n",
							"    ,StudentEmail\r\n",
							"    ,Ceider\r\n",
							"    from vw_ods_earlyyearsstudents\r\n",
							"\r\n",
							"union all\r\n",
							"\r\n",
							"select distinct\r\n",
							"\torg.Year\r\n",
							"\t,org.YearLevel\r\n",
							"\t,org.CampusID\r\n",
							"\t,org.SchoolNameAndArea\r\n",
							"\t,new.SubTeacherCompassID as TeacherID\r\n",
							"\t,new.SubTeacherName as TeacherName\r\n",
							"\t,org.StudentID\r\n",
							"\t,org.StudentName\r\n",
							"\t,org.ClassName\r\n",
							"\t,org.ClassID\r\n",
							"\t,new.SubTeacherEmail as StaffEmail\r\n",
							"\t,org.StudentEmail\r\n",
							"\t,org.Ceider\r\n",
							"\r\n",
							"    from vw_ods_earlyyearsstudents org\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"    (\r\n",
							"    select distinct\r\n",
							"        sub.Title as OriginalTeacherEmail\r\n",
							"        ,coalesce(details.TeacherName, sub.AdditionalTeacherEmail, 'Substitute') as SubTeacherName\r\n",
							"        ,details.TeacherID as SubTeacherCompassID\r\n",
							"        ,sub.AdditionalTeacherEmail as SubTeacherEmail\r\n",
							"\r\n",
							"        from vw_EarlyYearsSubTeachers sub\r\n",
							"        left join\r\n",
							"        (\r\n",
							"        select distinct\r\n",
							"            concat(d.FirstName, ' ', d.LastName) as TeacherName\r\n",
							"            ,d.CompassPersonId as TeacherID\r\n",
							"            ,coalesce(so.OrganisationUserEmail, d.EmailAddress, NULL) as StaffEmail\r\n",
							"\r\n",
							"            from vw_CompassODSStaffDemographic d\r\n",
							"            inner join vw_CompassODSStaffOrganisationDetails so\r\n",
							"            on d.CompassPersonId = so.CompassPersonId\r\n",
							"            where 1=1\r\n",
							"            and d.Iscurrent = 'True'\r\n",
							"            and so.Iscurrent = 'True'\r\n",
							"        ) details\r\n",
							"\r\n",
							"        on sub.AdditionalTeacherEmail = details.StaffEmail\r\n",
							"    ) new\r\n",
							"\r\n",
							"on org.StaffEmail = new.OriginalTeacherEmail"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Combine NAPLAN and NAPLAN Proficiency"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_DMNAPLANTestALL;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_DMNAPLANTestALL AS\r\n",
							"\r\n",
							"-- First part of the UNION\r\n",
							"SELECT \r\n",
							"    NT.SKNAPLANTest AS SKNAPLANProficiencyTest,\r\n",
							"    NT.BKNAPLANTest AS BKNAPLANProficiencyTest,\r\n",
							"    NT.TestYear,\r\n",
							"    NT.TestLevelCode,\r\n",
							"    NT.Domain\r\n",
							"\r\n",
							"FROM vw_naplantest AS NT\r\n",
							"\r\n",
							"UNION\r\n",
							"\r\n",
							"-- Second part of the UNION\r\n",
							"SELECT \r\n",
							"    PT.SKNAPLANProficiencyTest,\r\n",
							"    PT.BKNAPLANProficiencyTest,\r\n",
							"    PT.TestYear,\r\n",
							"    PT.TestLevelCode,\r\n",
							"    PT.Domain\r\n",
							"\r\n",
							"FROM vw_naplanproficiencytest AS PT\r\n",
							"\r\n",
							"WHERE \r\n",
							"    PT.SKNAPLANProficiencyTest <> -1;\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_DIMNAPLANCombinedResultsStudentsActive;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_DIMNAPLANCombinedResultsStudentsActive AS\r\n",
							"\r\n",
							"-- First part of the UNION\r\n",
							"SELECT \r\n",
							"    TR.SKNaplanAssessmentId,\r\n",
							"    A.Ceider,\r\n",
							"    TR.SKYear AS NaplanSKYear,\r\n",
							"    TR.SKYearLevel AS NaplanSKYearLevel,\r\n",
							"    MAX(TR.ScaledScoreValue) AS NaplanScaledScoreValue,\r\n",
							"    MAX(TR.DomainNationalAverage) AS NAPLANDomainNationalAverage\r\n",
							"\r\n",
							"FROM vw_activestudent AS A\r\n",
							"\r\n",
							"LEFT JOIN vw_naplanonlinestudentresult AS SR \r\n",
							"    ON A.Ceider = SR.PersistentIdentifier\r\n",
							"\r\n",
							"JOIN vw_naplanonlinestudenttest AS TR \r\n",
							"    ON SR.SKNAPLANOnlineStudentResult = TR.SKNAPLANOnlineStudentResult\r\n",
							"\r\n",
							"WHERE \r\n",
							"    TR.ScaledScoreValue IS NOT NULL\r\n",
							"\r\n",
							"GROUP BY \r\n",
							"    A.Ceider, \r\n",
							"    TR.SKNaplanAssessmentId, \r\n",
							"    TR.SKYear, \r\n",
							"    TR.SKYearLevel\r\n",
							"\r\n",
							"UNION\r\n",
							"\r\n",
							"-- Second part of the UNION\r\n",
							"SELECT \r\n",
							"    TR.SKNaplanAssessmentId,\r\n",
							"    A.Ceider,\r\n",
							"    TR.SKYear AS NaplanSKYear,\r\n",
							"    TR.SKYearLevel AS NaplanSKYearLevel,\r\n",
							"    MAX(TR.DomainScaledScore) AS NaplanScaledScoreValue,\r\n",
							"    MAX(AP.MeanScale) AS NAPLANDomainNationalAverage\r\n",
							"\r\n",
							"FROM vw_activestudent AS A\r\n",
							"\r\n",
							"LEFT JOIN vw_naplanproficiencystudentresult AS SR \r\n",
							"    ON A.Ceider = SR.PersistentIdentifier\r\n",
							"\r\n",
							"JOIN vw_naplanproficiencystudenitemresponse AS TR \r\n",
							"    ON SR.SKNAPLANProficiencyStudentResult = TR.SKNAPLANProficiencyStudentResult\r\n",
							"\r\n",
							"JOIN vw_naplanacaraproficiency AS AP \r\n",
							"    ON TR.SKYear = AP.SKYear \r\n",
							"    AND TR.SKYearLevel = AP.SKYearLevel \r\n",
							"    AND TR.SKNaplanAssessmentId = AP.SKNaplanAssessmentId\r\n",
							"\r\n",
							"WHERE \r\n",
							"    TR.DomainScaledScore IS NOT NULL\r\n",
							"    AND AP.SKStateTerritory = 12 --National Means\r\n",
							"\r\n",
							"GROUP BY \r\n",
							"    A.Ceider, \r\n",
							"    TR.SKNaplanAssessmentId, \r\n",
							"    TR.SKYear, \r\n",
							"    TR.SKYearLevel;\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_DIMNAPLANCombinedResultsLatestStudentsActive;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_DIMNAPLANCombinedResultsLatestStudentsActive AS\r\n",
							"\r\n",
							"SELECT \r\n",
							"    CR.Ceider,\r\n",
							"    CR.SKNaplanAssessmentId,\r\n",
							"    MAX(CR.NaplanSKYear) AS NaplanSKYear,\r\n",
							"    MAX(CR.NaplanSKYearLevel) AS NaplanSKYearLevel,\r\n",
							"    MAX(CR.NaplanScaledScoreValue) AS NaplanScaledScoreValue,\r\n",
							"    MAX(CR.NAPLANDomainNationalAverage) AS NAPLANDomainNationalAverage\r\n",
							"\r\n",
							"FROM vw_DIMNAPLANCombinedResultsStudentsActive AS CR\r\n",
							"\r\n",
							"GROUP BY \r\n",
							"    CR.Ceider,\r\n",
							"    CR.SKNaplanAssessmentId;\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Save the SQL Temp views created above "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# now save the sql views created above\r\n",
							"classenrolment_df = spark.read.table('vw_classenrolment')\r\n",
							"activestudent_df = spark.read.table('vw_activestudent')\r\n",
							"activestudentexceptions_df = spark.read.table('vw_activestudentexceptions')\r\n",
							"#inactivestudent_df = spark.read.table('vw_inactivestudent')\r\n",
							"\r\n",
							"ods_studentclass_df = spark.read.table('vw_ods_studentclass')\r\n",
							"ods_studentstable_df = spark.read.table('vw_ods_studentstable')\r\n",
							"ods_earlyyearsstudents_df = spark.read.table('vw_ods_earlyyearsstudents_substituteteachers') #need to make sure we include manually added staff\r\n",
							"ods_earlyyearsstudents_exceptions_df = spark.read.table('vw_ods_earlyyearsstudents_exceptions')\r\n",
							"\r\n",
							"ods_earlyyearsstudents_classidcleaned_df = spark.read.table('vw_ods_earlyyearsstudentsclassid_cleaned')\r\n",
							"\r\n",
							"# Early Years\r\n",
							"EYResultsYear2_df = spark.read.table('vw_EYResultsYear2')\r\n",
							"EYResults_df = spark.read.table('vw_EYResults')\r\n",
							"\r\n",
							"\r\n",
							"#NAPLAN\r\n",
							"naplantestall_df = spark.read.table('vw_DMNAPLANTestALL')\r\n",
							"DIMNAPLANCombinedResultsStudentsActive_df = spark.read.table('vw_DIMNAPLANCombinedResultsStudentsActive')\r\n",
							"DIMNAPLANCombinedResultsLatestStudentsActive_df = spark.read.table('vw_DIMNAPLANCombinedResultsLatestStudentsActive')\r\n",
							"\r\n",
							"\r\n",
							"# Enrolments (Current Year) ALL\r\n",
							"currentenrolments_df = spark.read.table('vw_currentenrolments')\r\n",
							"\r\n",
							"# Enrolments (Current Year) Removed exclusions\r\n",
							"currentyearenrolments_df = spark.read.table('vw_currentyearenrolments_withexclusions')\r\n",
							"\r\n",
							"# ALL Enrolments\r\n",
							"allenrolments_df = spark.read.table('vw_allenrolments')\r\n",
							"\r\n",
							"\r\n",
							"saveToTarget(classenrolment_df, destination_p, f'{version}/_DMClassEnrolment')\r\n",
							"saveToTarget(activestudent_df, destination_p, f'{version}/_FACTActiveStudent')\r\n",
							"saveToTarget(activestudentexceptions_df, destination_p, f'{version}/_FACTActiveStudentExceptions')\r\n",
							"\r\n",
							"#saveToTarget(inactivestudent_df, destination_p, f'{version}/_FACTInactiveStudent')\r\n",
							"\r\n",
							"saveToTarget(ods_studentclass_df, destination_p, f'{version}/_FACTODSStudentClass')\r\n",
							"saveToTarget(ods_studentstable_df, destination_p, f'{version}/_FACTODSStudentsTable')\r\n",
							"saveToTarget(ods_earlyyearsstudents_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents')\r\n",
							"saveToTarget(ods_earlyyearsstudents_exceptions_df, destination_p, f'{version}/_FACTODSEarlyYearsStudentsExceptions')\r\n",
							"\r\n",
							"saveToTarget(ods_earlyyearsstudents_classidcleaned_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents_ClassIDCleaned')\r\n",
							"\r\n",
							"# Early Years\r\n",
							"saveToTarget(EYResultsYear2_df, destination_p, f'{version}/_FACTEarlyYearsResultsYear2')\r\n",
							"saveToTarget(EYResults_df, destination_p, f'{version}/_FACTEarlyYearsResults')\r\n",
							"\r\n",
							"#NAPLAN\r\n",
							"saveToTarget(naplantestall_df, destination_p, f'{version}/DMNAPLANTestALL')\r\n",
							"saveToTarget(DIMNAPLANCombinedResultsStudentsActive_df, destination_p, f'{version}/_DIMNAPLANCombinedResultsStudentsActive')\r\n",
							"saveToTarget(DIMNAPLANCombinedResultsLatestStudentsActive_df, destination_p, f'{version}/_DIMNAPLANCombinedResultsLatestStudentsActive')\r\n",
							"\r\n",
							"# Enrolments\r\n",
							"saveToTarget(currentenrolments_df, destination_p, f'{version}/_DIMStudentCurrentEnrolments')\r\n",
							"saveToTarget(currentyearenrolments_df, destination_p, f'{version}/_DIMStudentCurrentYearEnrolments')\r\n",
							"saveToTarget(allenrolments_df, destination_p, f'{version}/_DIMStudentAllEnrolments')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL_Transforms_Copy_July6')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a5fca593-e66e-47f3-9862-0dead3828ab8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_sparksql",
						"display_name": "sql"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## This note book contains data transformations using SQL\r\n",
							"This notebook should not be run on its own, rather it is run as part of the Transforms_Connector notebook"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Load all required dataframes and convert them to temp sql views"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"from pyspark.sql.functions import split"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need\r\n",
							"sourcep = oea.stage2p\r\n",
							"source3p = oea.stage3p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3\r\n",
							"dmyearlevel_df = spark.read.load(source3p + \"/pilot/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(source3p + \"/pilot/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(source3p + \"/pilot/DMDate_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(source3p + \"/pilot/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for naplan and acer participation view\r\n",
							"factstudentenrolmentcounts_df = spark.read.load(sourcep + \"/enrolment/DMFactStudentEnrolmentCounts_pseudo\", format='delta')\r\n",
							"#dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"# stage 3 naplan and acer participation view\r\n",
							"factnaplanstudentyearresult_df = spark.read.load(source3p + \"/pilot/DMFactNaplanStudentYearResult_pseudo\", format='delta')\r\n",
							"factpatresults_df = spark.read.load(source3p + \"/pilot/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Learning Task\r\n",
							"ae_manuallearningtasks_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualLearningTasks_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for manual AE Semester Report\r\n",
							"ae_manualsemesterreports_df = spark.read.load(sourcep + \"/_AE_ManualUploadRawFiles/AE_ManualSemesterReports_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for ODS tables (+ dmcampus_df already added above)\r\n",
							"odsactivity_df = spark.read.load(sourcep + \"/ODS/CompassODSActivity_pseudo\", format='delta')\r\n",
							"odsactivityenrolment_df = spark.read.load(sourcep + \"/ODS/CompassODSActivityEnrolment_pseudo\", format='delta')\r\n",
							"odsactivityinstance_df = spark.read.load(sourcep + \"/ODSActivityInstance/CompassODSActivityInstance_pseudo\", format='delta')\r\n",
							"odscompasssubject_df = spark.read.load(sourcep + \"/ODS/CompassODSCompassSubject_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstaffdemographic_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffDemographic_pseudo\", format='delta')\r\n",
							"odsstudentdemographic_df = spark.read.load(sourcep + \"/ODSStudentDemographic/CompassODSStudentDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstafforganisationdetails_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffOrganisationDetails_pseudo\", format='delta')\r\n",
							"odsstudentorganisationdetails_df = spark.read.load(sourcep + \"/ODS/CompassODSStudentOrganisationDetails_pseudo\", format='delta')\r\n",
							"\r\n",
							"odsstafforganisationmilestones_df = spark.read.load(sourcep + \"/ODS/CompassODSStaffOrganisationMilestones_pseudo\", format='delta')\r\n",
							"\r\n",
							"# stage 3 transform on this table\r\n",
							"odsstudentorganisationmilestones_df = spark.read.load(source3p + \"/pilot/CompassODSStudentOrganisationMilestones_pseudo\", format='delta')\r\n",
							"\r\n",
							"# early years\r\n",
							"earlyyearssubteachers_df = spark.read.load(source3p + \"/pilot/EarlyYearsSubTeachers_pseudo\", format='delta')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"\r\n",
							"factstudentenrolmentcounts_df.createOrReplaceTempView('vw_factstudentenrolmentcounts')\r\n",
							"factnaplanstudentyearresult_df.createOrReplaceTempView('vw_factnaplanstudentyearresult')\r\n",
							"factpatresults_df.createOrReplaceTempView('vw_factpatresults_df')\r\n",
							"\r\n",
							"ae_manuallearningtasks_df.createOrReplaceTempView('vw_aemanuallearningtasks')\r\n",
							"ae_manualsemesterreports_df.createOrReplaceTempView('vw_aemanualsemesterreports')\r\n",
							"\r\n",
							"odsactivity_df.createOrReplaceTempView('vw_CompassODSActivity') \r\n",
							"odsactivityinstance_df.createOrReplaceTempView('vw_CompassODSActivityInstance') \r\n",
							"odsactivityenrolment_df.createOrReplaceTempView('vw_CompassODSActivityEnrolment') \r\n",
							"odscompasssubject_df.createOrReplaceTempView('vw_CompassODSCompassSubject') \r\n",
							"odsstaffdemographic_df.createOrReplaceTempView('vw_CompassODSStaffDemographic') \r\n",
							"odsstudentdemographic_df.createOrReplaceTempView('vw_CompassODSStudentDemographic') \r\n",
							"\r\n",
							"odsstafforganisationdetails_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationDetails') \r\n",
							"odsstafforganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStaffOrganisationMilestones')\r\n",
							"\r\n",
							"odsstudentorganisationdetails_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationDetails') \r\n",
							"odsstudentorganisationmilestones_df.createOrReplaceTempView('vw_CompassODSStudentOrganisationMilestones')\r\n",
							"\r\n",
							"earlyyearssubteachers_df.createOrReplaceTempView('vw_EarlyYearsSubTeachers') \r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Create the SQL temp views from the loaded dataframes "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_classenrolment;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_classenrolment\r\n",
							"AS\r\n",
							"SELECT cy.Year AS CalendarYear,\r\n",
							"    C.SchoolId AS AGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    student.FirstName  AS  StudentFirstName,\r\n",
							"    student.LastName AS StudentLastName,\r\n",
							"    Student.Ceider,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    s.SubjectShortName AS Subject,\r\n",
							"    a.ActivityName AS  ClassName,\r\n",
							"    a.ActivityCode AS ClassCode,\r\n",
							"    ClassStartDate.date AS ClassStartDate,\r\n",
							"    ClassEndDate.date AS ClassEndDate,\r\n",
							"    staff.FirstName AS StaffFirstName,\r\n",
							"    staff.LastName AS StaffLastName\r\n",
							"\r\n",
							"    FROM vw_factsubjectenrolment f\r\n",
							"    JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\r\n",
							"    AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"    JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\r\n",
							"    JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\r\n",
							"    JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\r\n",
							"    JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"    JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"    JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\r\n",
							"\r\n",
							"    JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\r\n",
							"    JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\r\n",
							"\r\n",
							"    AND cy.Year = 2022\r\n",
							"    WHERE ClassEndDate.date > current_date() -- spark sql uses current_date() instead of GETDATE()\r\n",
							"    AND s.SubjectShortName <> 'Unknown'\r\n",
							"    ORDER BY\r\n",
							"    AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_activestudenttemp;\r\n",
							"\r\n",
							"-- Temporary table do not save \r\n",
							"CREATE TEMP VIEW vw_activestudenttemp\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    c.SchoolId as CampusId,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_activestudent;\r\n",
							"\r\n",
							"-- Removes duplicates from the active student temp table above\r\n",
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT *\r\n",
							"FROM vw_activestudenttemp\r\n",
							"WHERE Ceider NOT IN (SELECT Ceider\r\n",
							"                    FROM vw_activestudenttemp\r\n",
							"                    GROUP BY Ceider\r\n",
							"                    HAVING COUNT(Ceider) > 1)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_activestudentexceptions;\r\n",
							"\r\n",
							"-- Gets only the duplicates from the active student temp table above so it can be used in an exceptions report \r\n",
							"CREATE TEMP VIEW vw_activestudentexceptions\r\n",
							"AS\r\n",
							"SELECT *\r\n",
							"FROM vw_activestudenttemp\r\n",
							"WHERE Ceider IN (SELECT Ceider\r\n",
							"                    FROM vw_activestudenttemp\r\n",
							"                    GROUP BY Ceider\r\n",
							"                    HAVING COUNT(Ceider) > 1)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_inactivestudent;\r\n",
							"\r\n",
							"-- MAY NOT REQUIRE THIS ANYMORE\r\n",
							"CREATE TEMP VIEW vw_inactivestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson, \r\n",
							"    pd.Disability,\r\n",
							"    pd.ATSIId,\r\n",
							"    pd.LBOTE,\r\n",
							"    d.date AS DateLeft\r\n",
							"    \r\n",
							"FROM\r\n",
							"    vw_factpersonmilestone f\r\n",
							"JOIN vw_dmdate d ON f.SKMilestoneStartDate = d.SKDate\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'False'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"    AND Date < current_date()\r\n",
							"ORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DROP VIEW IF EXISTS vw_naplanparticipation;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_naplanparticipation\r\n",
							"as\r\n",
							"select \r\n",
							"*\r\n",
							"--, round(cast(#naplan_enrolled as float) / cast(#students_enrolled as float), 2) as participation_perc \r\n",
							", round(naplan_enrolled / students_enrolled , 2) as participation_perc \r\n",
							"from \r\n",
							"(select \r\n",
							"a.skcampus\r\n",
							", a.skyear\r\n",
							", a.skyearlevel\r\n",
							", sum(studentcount) as students_enrolled\r\n",
							", innerquery.naplan_enrolled from vw_factstudentenrolmentcounts a\r\n",
							"left join vw_dmdate b on a.skdate = b.skdate\r\n",
							"left join \r\n",
							"\t(select \r\n",
							"\t\tskcampus\r\n",
							"\t\t, skyear\r\n",
							"\t\t, skyearlevel\r\n",
							"\t\t, count(distinct skpersistentstudentid) as naplan_enrolled \r\n",
							"\t\tfrom vw_factnaplanstudentyearresult\r\n",
							"\t\t\tgroup by skcampus, skyear, skyearlevel) innerquery\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skyearlevel = innerquery.skyearlevel\r\n",
							"where a.skyearlevel in (11, 2, 12, 3) \r\n",
							"and b.MonthNumberOfYear = 5\r\n",
							"group by a.skcampus, a.skyear, a.skyearlevel, innerquery.naplan_enrolled\r\n",
							") wholequery\r\n",
							"--order by skcampus, skyear, skyearlevel\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DROP VIEW IF EXISTS vw_acerparticipation;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_acerparticipation\r\n",
							"as\r\n",
							"select \r\n",
							"*\r\n",
							"--, round(cast(count_of_tests as float) / (cast(#students_enrolled as float) * 2), 2) as participation_perc \r\n",
							", round(count_of_tests /(students_enrolled  * 2), 2) as participation_perc \r\n",
							"from\r\n",
							"(\r\n",
							"select \r\n",
							"\t--*\r\n",
							"\ta.skcampus\r\n",
							"\t, a.skyear\r\n",
							"\t, a.skdate\r\n",
							"\t, a.skyearlevel\r\n",
							"\t, sum(studentcount) as students_enrolled\r\n",
							"\t, innerquery.count_of_tests \r\n",
							"from vw_factstudentenrolmentcounts a\r\n",
							"\r\n",
							"left join \r\n",
							"\t(\t\r\n",
							"\t\tselect innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel, sum(acer_tests) as count_of_tests from \r\n",
							"\t\t\t(\r\n",
							"\t\t\t\tselect \r\n",
							"\t\t\t\t\t\tskcampus\r\n",
							"\t\t\t\t\t\t, skyear\r\n",
							"\t\t\t\t\t\t, SKDate\r\n",
							"\t\t\t\t\t\t, skyearlevel\r\n",
							"\t\t\t\t\t\t, SKACERStudent\r\n",
							"\t\t\t\t\t\t, count(distinct skpattest) as acer_tests\r\n",
							"\t\t\t\t\t\tfrom vw_factpatresults_df\r\n",
							"\t\t\t\t\t\t\tgroup by skcampus, skyear, skdate, skyearlevel, SKACERStudent --9\r\n",
							"\t\t\t) innerinner\r\n",
							"\tgroup by innerinner.skcampus, innerinner.skyear, innerinner.skdate, innerinner.SKYearLevel\r\n",
							"\t) innerquery\r\n",
							"\r\n",
							"on a.skcampus = innerquery.skcampus and a.skyear = innerquery.skyear and a.skdate = innerquery.skdate and a.skyearlevel = innerquery.skyearlevel \r\n",
							"where a.skyearlevel in (21, 11, 10, 2, 16, 12, 20, 3, 17) --ACER - year levels 2 to 10\r\n",
							"group by a.skcampus, a.skyear, a.skdate, a.skyearlevel, innerquery.count_of_tests\r\n",
							") wholequery"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### REMOVE"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ae_manual_learningtasks;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ae_manual_learningtasks\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"m.School_Name\r\n",
							",m.Area\r\n",
							",m.Semester\r\n",
							",m.Year\r\n",
							",m.SubjectName\r\n",
							",m.Code\r\n",
							",m.TeacherImportIdentifier\r\n",
							",m.TaskId\r\n",
							",m.IsSubjectWide\r\n",
							",m.TaskName\r\n",
							",m.StudentCode\r\n",
							",m.GovtCode1\r\n",
							",m.StudentLastName\r\n",
							",m.StudentFirstName\r\n",
							",m.YearLevel\r\n",
							"--,case when m.YearLevel is null then m.YearLevel else concat('Year ' , cast(m.YearLevel as string)) end\r\n",
							",m.ResultType\r\n",
							",m.PrimaryGrade\r\n",
							",m.CommentTimestamp\r\n",
							",m.CommentPosterCode\r\n",
							",m.CommentPosterName\r\n",
							",m.Result\r\n",
							",m.ComponentName\r\n",
							",m.ComponentType\r\n",
							",m.IsIncludedInReport\r\n",
							",m.ReportCycleName\r\n",
							",m.DueDate\r\n",
							",m.Category\r\n",
							",m.SubmissionStatus\r\n",
							",m.ReceiptTime\r\n",
							",m.BKID\r\n",
							",innerquery.ceider\r\n",
							",innerquery.schoolid\r\n",
							",innerquery.skcampus\r\n",
							"from vw_aemanuallearningtasks m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype, b.skcampus, b.skyearlevel,  c.schoolname, c.area, c.schoolid, d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"        and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = lower(innerquery.firstname)\r\n",
							"and lower(m.studentlastname) = lower(innerquery.lastname)\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"--and trim(m.yearlevel) = trim(innerquery.yearlevelsifcode)\r\n",
							"and trim(case when m.YearLevel is null then -1 else m.YearLevel end) = trim(innerquery.yearlevelsifcode)\r\n",
							"and lower(m.area) = lower(innerquery.area)\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ae_manual_semesterreports;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ae_manual_semesterreports\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"m.* \r\n",
							", innerquery.ceider\r\n",
							", innerquery.schoolid\r\n",
							", innerquery.skcampus\r\n",
							"from vw_aemanualsemesterreports m\r\n",
							"\r\n",
							"left join \r\n",
							"(\r\n",
							"    select a.ceider, a.firstname, a.lastname, a.persontype\r\n",
							"    ,b.skcampus\r\n",
							"    ,c.schoolname, c.area, c.schoolid\r\n",
							"    ,b.skyearlevel \r\n",
							"    ,d.yearlevelsifdesc, d.businessdesc, d.yearlevelsifcode\r\n",
							"    --, concat(lower(a.firstname), lower(a.lastname), lower(c.schoolname), lower(d.businessdesc)) as joinkey\r\n",
							"    from vw_dmpersondemographic a \r\n",
							"    left join vw_factpersonmilestone b on a.ceider = b.ceider\r\n",
							"    left join vw_dmcampus c on b.skcampus = c.skcampus\r\n",
							"    left join vw_dmyearlevel d on b.skyearlevel = d.skyearlevel\r\n",
							"    where a.persontype = 'Student'\r\n",
							"         and b.iscurrentmilestone = 'True'\r\n",
							") innerquery\r\n",
							"\r\n",
							"on lower(m.studentfirstname) = trim(lower(innerquery.firstname))\r\n",
							"and lower(m.studentlastname) = trim(lower(innerquery.lastname))\r\n",
							"and lower(m.school_name) = lower(innerquery.schoolname)\r\n",
							"and lower(m.area) = lower(innerquery.area)\r\n",
							"and trim(lower(m.studentyearlevel)) = trim(lower(innerquery.yearlevelsifdesc))\r\n",
							"\r\n",
							"\r\n",
							"where m.result in ('A', 'A+', 'A-', 'B', 'B+', 'B-', 'C', 'C+', 'C-', 'D', 'D+', 'D-', 'E', 'E+', 'N') "
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_studentclass;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ods_studentclass\r\n",
							"as\r\n",
							"\r\n",
							"SELECT distinct\r\n",
							"d.FirstName AS StudentFirstName \r\n",
							",d.LastName AS StudentLastName\r\n",
							",d.CompassPersonId\r\n",
							",d.GovCode1 AS Ceider\r\n",
							",s.SubjectLongName\r\n",
							",a.SubjectCode\r\n",
							",a.ActivityName\r\n",
							",a.ActivityTypeDescription\r\n",
							",a.ManagingCompassPersonId\r\n",
							",staff.firstname\r\n",
							",staff.lastname\r\n",
							",ae.ActivityEnrolmentStartDate\r\n",
							",ae.ActivityEnrolmentEndDate\r\n",
							",concat(staff.FirstName,' ',staff.LastName) AS StaffName\r\n",
							",a.CampusId AS AGEID\r\n",
							",c.CampusSuburbAndName\r\n",
							"--,c.CompassSchoolURL\r\n",
							",s.AcademicYear\r\n",
							",ae.iscurrent as IsCurrent_ActivityEnrolment\r\n",
							",a.IsCurrent as IsCurrent_Activity\r\n",
							",s.IsCurrent as IsCurrent_Subject\r\n",
							",staff.iscurrent as IsCurrent_Staff\r\n",
							",d.iscurrent as IsCurrent_Student\r\n",
							"\r\n",
							"\r\n",
							"FROM \r\n",
							"vw_CompassODSStudentDemographic d \r\n",
							"\r\n",
							"JOIN vw_CompassODSActivityEnrolment ae \r\n",
							"ON d.CompassPersonId = ae.CompassPersonId\r\n",
							"\r\n",
							"JOIN vw_CompassODSActivity a \r\n",
							"ON ae.ActivityCode = a.ActivityCode\r\n",
							"AND ae.CampusId = a.CampusId\r\n",
							"\r\n",
							"LEFT OUTER JOIN vw_CompassODSCompassSubject s \r\n",
							"ON ae.SubjectCode = s.SubjectImportIdentifier\r\n",
							"AND a.CampusId = s.CampusId\r\n",
							"\r\n",
							"LEFT outer JOIN vw_CompassODSStaffDemographic  staff \r\n",
							"ON staff.CompassPersonId = a.ManagingCompassPersonId \r\n",
							"\r\n",
							"JOIN vw_dmcampus c ON a.CampusId = c.bkCampusId\r\n",
							"WHERE \r\n",
							"d.iscurrent is True\r\n",
							"AND a.ActivityTypeDescription = 'Standard Class'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_studentstable;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ods_studentstable\r\n",
							"as\r\n",
							"\r\n",
							"select\r\n",
							"distinct ms.CompassPersonId as MS_CompassPersonID\r\n",
							",demo.CompassPersonId as DEMO_CompassPersonID\r\n",
							",ms.yearlevel\r\n",
							",ms.isactive \r\n",
							",ms.iscurrentmilestone \r\n",
							",ms.studenttype \r\n",
							",ms.dioceseId\r\n",
							",ms.campusid \r\n",
							",camp.skcampus\r\n",
							",camp.BKCampusId\r\n",
							",camp.SchoolName\r\n",
							",ms.iscurrent\r\n",
							",demo.firstname\r\n",
							",demo.lastname \r\n",
							"--,demo.gender \r\n",
							",demo.govcode1 as ceider\r\n",
							"--,demo.disability \r\n",
							"--,demo.LBOTE \r\n",
							"--,demo.indigenoustypecode \r\n",
							",ms.milestonetimestamp\r\n",
							",year(MilestoneTimestamp + INTERVAL 10 HOURS) AS calendaryear\r\n",
							"from vw_CompassODSStudentOrganisationMilestones ms\r\n",
							"\r\n",
							"left join vw_CompassODSStudentDemographic demo on ms.CompassPersonId = demo.CompassPersonId \r\n",
							"\tand demo.Iscurrent = 'True'\r\n",
							"\r\n",
							"left join vw_dmcampus camp on ms.campusid = camp.BKCampusId\r\n",
							"\r\n",
							"where \r\n",
							"ms.iscurrent = 'True'\r\n",
							"and ms.isactive = 'True'\r\n",
							"--and ms.iscurrentmilestone  = 'True' --this is just for 2023 (current year)\r\n",
							"and year(MilestoneTimestamp + INTERVAL 10 HOURS) in (2021, 2022, 2023)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### REMOVE"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ae_manual_combined;\r\n",
							"\r\n",
							"CREATE TEMP VIEW vw_ae_manual_combined\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"concat('LT',row_number() OVER (ORDER BY ceider)) as id\r\n",
							", School_Name\r\n",
							", Area\r\n",
							", Semester\r\n",
							", Year\r\n",
							", trim(substring(subjectname, 3)) as SubjectName \r\n",
							", code as ClassCode\r\n",
							", StudentCode\r\n",
							", GovtCode1\r\n",
							", StudentFirstName\r\n",
							", initcap(studentlastname) as StudentLastName\r\n",
							", CASE\r\n",
							"    WHEN yearlevel is not null THEN concat('Year ', yearlevel)\r\n",
							"    ELSE yearlevel\r\n",
							"        END as YearLevel\r\n",
							", ResultType\r\n",
							", CASE\r\n",
							"    WHEN result = 'A+' THEN 'A'\r\n",
							"    WHEN result = 'A-' THEN 'A'\r\n",
							"    WHEN result = 'B+' THEN 'B'\r\n",
							"    WHEN result = 'B-' THEN 'B'\r\n",
							"    WHEN result = 'C+' THEN 'C'\r\n",
							"    WHEN result = 'C-' THEN 'C'\r\n",
							"    WHEN result = 'D+' THEN 'D'\r\n",
							"    WHEN result = 'D-' THEN 'D'\r\n",
							"    WHEN result = 'E+' THEN 'E'\r\n",
							"    ELSE result\r\n",
							"        END as Result\r\n",
							", BKID\r\n",
							", ceider \r\n",
							", schoolid\r\n",
							", skcampus\r\n",
							"\r\n",
							"from vw_ae_manual_learningtasks \r\n",
							"\r\n",
							"union \r\n",
							"\r\n",
							"select \r\n",
							"concat('SR',row_number() OVER (ORDER BY ceider)) as id\r\n",
							", School_Name\r\n",
							", Area\r\n",
							", Semester\r\n",
							", Year\r\n",
							", subject as SubjectName \r\n",
							", ClassCode\r\n",
							", StudentCode\r\n",
							", GovtCode1\r\n",
							", StudentFirstName\r\n",
							", StudentLastName\r\n",
							", StudentYearLevel\r\n",
							", AssessmentType as ResultType\r\n",
							", Result\r\n",
							", BKID\r\n",
							", ceider \r\n",
							", schoolid\r\n",
							", skcampus\r\n",
							"\r\n",
							"from vw_ae_manual_semesterreports "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Early Years Students"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents;\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents\r\n",
							"as\r\n",
							"\r\n",
							"select distinct \r\n",
							"\r\n",
							"\tyear(current_date) as Year\r\n",
							"\t, replace(YearLevel, '0', 'P') as YearLevel\r\n",
							"\t, instance.CampusId as CampusID\r\n",
							"\t, campus.SchoolNameAndArea\r\n",
							"\t, ManagingCompassPersonId as TeacherID\r\n",
							"\t, concat(staffdemo.TeacherFirstName, ' ', staffdemo.TeacherLastName) as TeacherName\r\n",
							"\t, students.StudentCompassPersonId as StudentID\r\n",
							"\t, concat(studentdemo.FirstName, ' ', studentdemo.LastName) as StudentName\r\n",
							"\t, enrolment.ActivityName as ClassName\r\n",
							"\t, enrolment.ActivityCode as ClassID\r\n",
							"\t, trim(coalesce(staffemail.TeacherOrganisationUserEmail, staffdemo.TeacherEmailAddress)) as StaffEmail\r\n",
							"\t, trim(studentemail.OrganisationUserEmail) as StudentEmail\r\n",
							"\t, trim(studentdemo.GovCode1) as Ceider\r\n",
							"\r\n",
							"from\r\n",
							"\r\n",
							"-- Student Organisation Milestones\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, YearLevel, OrganisationName, CampusId\r\n",
							"  from vw_CompassODSStudentOrganisationMilestones\r\n",
							"  where 1=1\r\n",
							"  and IsActive = 'True'\r\n",
							"  and IsCurrent = 'True'\r\n",
							"  and IsCurrentMilestone = 'True'\r\n",
							"  and DioceseId = 12\r\n",
							"  and (YearLevel = '0' or YearLevel = '1' or YearLevel = '2')\r\n",
							") students\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Compass Activity Enrolment\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, ActivityCode, ActivityName, CampusID\r\n",
							"\tfrom vw_CompassODSActivityEnrolment\r\n",
							"\twhere 1=1\r\n",
							"\tand IsCurrent = 'True'\r\n",
							"\tand RoleDescription = 'Student'\r\n",
							"\tand ActivityName <> 'Sickbay'\r\n",
							"\tand SubjectCode IS NOT NULL\r\n",
							"\tand year(ActivityEnrolmentStartDate) = year(current_date)\r\n",
							"\tand to_date(ActivityEnrolmentEndDate) > current_date\r\n",
							"\tand (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\r\n",
							") enrolment\r\n",
							"\r\n",
							"on students.StudentCompassPersonId = enrolment.StudentCompassPersonId\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Compass Activity Instance\r\n",
							"(select distinct ActivityCode, ManagingCompassPersonId, CampusId\r\n",
							"  from vw_CompassODSActivityInstance\r\n",
							"  where 1=1 \r\n",
							"  and IsCurrent = 'True'\r\n",
							"  and DioceseId = 12\r\n",
							"  and (ActivityCode like '%GEN%' or ActivityCode like 'PREP%')\r\n",
							"  and year(Start) = year(current_date)\r\n",
							"  and ManagingCompassPersonId <> '00000000-0000-0000-0000-000000000000'\r\n",
							") instance \r\n",
							"\r\n",
							"on enrolment.ActivityCode = instance.ActivityCode\r\n",
							"and enrolment.CampusID = instance.CampusId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Organisation Milestones\r\n",
							"(select distinct CompassPersonId as StaffCompassPersonId, OrganisationName\r\n",
							"\tfrom vw_CompassODSStaffOrganisationMilestones\r\n",
							"\twhere 1=1\r\n",
							"\tand DioceseId = 12\r\n",
							"\tand IsCurrentMilestone = 'True'\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand IsActive = 'True'\r\n",
							") staffmilestone\r\n",
							"\r\n",
							"on instance.ManagingCompassPersonId = staffmilestone.StaffCompassPersonId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Demographic\r\n",
							"-- only getting the personal email here because some schools have accidentally \r\n",
							"-- put the org user email in this field in compass\r\n",
							"(select distinct CompassPersonId as StaffCompassPersonId, FirstName as TeacherFirstName, LastName as TeacherLastName, EmailAddress as TeacherEmailAddress\r\n",
							"\tfrom vw_CompassODSStaffDemographic\r\n",
							"\twhere 1=1\r\n",
							"\tand IsCurrent = 'True'\r\n",
							") staffdemo\r\n",
							"\r\n",
							"on staffmilestone.StaffCompassPersonId = staffdemo.StaffCompassPersonId\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"-- Staff Organisation Details (email)\r\n",
							"(select distinct CompassPersonId as TeacherCompassPersonId, OrganisationUserEmail as TeacherOrganisationUserEmail, OrganisationName\r\n",
							"\tfrom vw_CompassODSStaffOrganisationDetails\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand OrganisationUserEmail NOT LIKE '%supply%'\r\n",
							") staffemail\r\n",
							"\r\n",
							"on staffmilestone.StaffCompassPersonId = staffemail.TeacherCompassPersonId\r\n",
							"and staffmilestone.OrganisationName = staffemail.OrganisationName\r\n",
							"and staffemail.OrganisationName like students.OrganisationName\r\n",
							"\r\n",
							"inner join -- inner join will remove students without demographic information\r\n",
							"\r\n",
							"-- Student Demographic\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, FirstName, LastName, GovCode1\r\n",
							"\tfrom vw_CompassODSStudentDemographic\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							") studentdemo\r\n",
							"\r\n",
							"on students.StudentCompassPersonId = studentdemo.StudentCompassPersonId\r\n",
							"\r\n",
							"inner join  -- inner join will remove students without email\r\n",
							"\r\n",
							"-- Student Organisation Details (Email)\r\n",
							"(select distinct CompassPersonId as StudentCompassPersonId, OrganisationUserEmail, OrganisationName\r\n",
							"\tfrom vw_CompassODSStudentOrganisationDetails\r\n",
							"\twhere 1=1\r\n",
							"\tand Iscurrent = 'True'\r\n",
							"\tand OrganisationUserEmail IS NOT NULL --these are all duplicate students that have emails in other records\r\n",
							") studentemail\r\n",
							"\r\n",
							"on studentdemo.StudentCompassPersonId = studentemail.StudentCompassPersonId\r\n",
							"and students.OrganisationName = studentemail.OrganisationName\r\n",
							"\r\n",
							"left join\r\n",
							"\r\n",
							"-- Get the School Names\r\n",
							"(select SchoolId, SchoolNameAndArea\r\n",
							"\tfrom vw_dmcampus\r\n",
							") campus\r\n",
							"\r\n",
							"on campus.SchoolId = instance.CampusId\r\n",
							"\r\n",
							"-- filter out the duplicate classid's from campusid 617\r\n",
							"WHERE 1=1\r\n",
							"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GENP_PREP')\r\n",
							"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GEN1_Year 1')\r\n",
							"AND NOT (instance.CampusId = 617 and enrolment.ActivityCode = 'GEN2_Year 2')\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_exceptions;\r\n",
							"\r\n",
							"-- Create a student exceptions lists with students that are assigned to multiple 'General' type classes\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents_exceptions\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"    Year\r\n",
							"    ,YearLevel\r\n",
							"    ,CampusID\r\n",
							"    ,SchoolNameAndArea\r\n",
							"    ,Ceider\r\n",
							"    ,StudentName\r\n",
							"    ,TeacherName\r\n",
							"    ,ClassID\r\n",
							"\r\n",
							"from vw_ods_earlyyearsstudents\r\n",
							"\r\n",
							"where Ceider in (\r\n",
							"\r\n",
							"  select Ceider\r\n",
							"  from\r\n",
							"\r\n",
							"  (\r\n",
							"\t  select distinct year, ceider, classid\r\n",
							"\t  FROM vw_ods_earlyyearsstudents\r\n",
							"  ) a\r\n",
							"\r\n",
							"  group by year, ceider\r\n",
							"  having count(*) > 1\r\n",
							"\r\n",
							")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_cleaned;\r\n",
							"\r\n",
							"-- Remove the students exceptions (where a student is listed multiple times)\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents_cleaned\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"    Year\r\n",
							"    ,YearLevel\r\n",
							"    ,CampusID\r\n",
							"    ,SchoolNameAndArea\r\n",
							"    ,TeacherID\r\n",
							"    ,TeacherName\r\n",
							"    ,StudentID\r\n",
							"    ,StudentName\r\n",
							"    ,ClassName\r\n",
							"    ,ClassID\r\n",
							"    ,StaffEmail\r\n",
							"    ,StudentEmail\r\n",
							"    ,Ceider\r\n",
							"\r\n",
							"from vw_ods_earlyyearsstudents\r\n",
							"\r\n",
							"where Ceider NOT IN (\r\n",
							"\r\n",
							"  select Ceider\r\n",
							"  from\r\n",
							"\r\n",
							"  (\r\n",
							"\t  select distinct year, ceider, classid\r\n",
							"\t  FROM vw_ods_earlyyearsstudents\r\n",
							"  ) allceiders\r\n",
							"\r\n",
							"  group by year, ceider\r\n",
							"  having count(*) > 1\r\n",
							"\r\n",
							")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudentsclassid_cleaned;\r\n",
							"\r\n",
							"-- create a clean student list that lists the correct classid for each student\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudentsclassid_cleaned\r\n",
							"as\r\n",
							"\r\n",
							"select distinct \r\n",
							"    Year\r\n",
							"    ,Ceider\r\n",
							"    ,ClassID\r\n",
							"    ,ClassName\r\n",
							"\r\n",
							"from vw_ods_earlyyearsstudents_cleaned \r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudentsclassid_updated;\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudentsclassid_updated\r\n",
							"AS\r\n",
							"\r\n",
							"select \r\n",
							"    e.Year\r\n",
							"    ,e.YearLevel\r\n",
							"    ,e.CampusID\r\n",
							"    ,e.SchoolNameAndArea\r\n",
							"    ,e.TeacherID\r\n",
							"    ,e.TeacherName\r\n",
							"    ,e.StudentID\r\n",
							"    ,e.StudentName\r\n",
							"    ,eclean.ClassName\r\n",
							"    ,eclean.ClassID\r\n",
							"    ,e.StaffEmail\r\n",
							"    ,e.StudentEmail\r\n",
							"    ,e.Ceider\r\n",
							"\r\n",
							"from vw_ods_earlyyearsstudents e\r\n",
							"left join vw_ods_earlyyearsstudents_cleaned eclean \r\n",
							"on e.Year = eclean.Year\r\n",
							"and e.Ceider = eclean.Ceider"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_addedstaff;\r\n",
							"\r\n",
							"-- Manual entry of support staff (non teachers) that will be conducting tests\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents_addedstaff\r\n",
							"as\r\n",
							"\r\n",
							"--Judy Anderson\r\n",
							"\r\n",
							"\r\n",
							"select Year\r\n",
							"      ,YearLevel\r\n",
							"      ,CampusID\r\n",
							"      ,SchoolNameAndArea\r\n",
							"      , '70299217-0eb5-4638-ad0e-a4fee4de4d40' as TeacherID\r\n",
							"      , 'Judy Anderson' as TeacherName\r\n",
							"      ,StudentID\r\n",
							"      ,StudentName\r\n",
							"      ,ClassName\r\n",
							"      ,ClassID\r\n",
							"      , 'janderson14@smptsv.catholic.edu.au' as StaffEmail\r\n",
							"      ,StudentEmail\r\n",
							"      ,trim(Ceider) as Ceider\r\n",
							"    from vw_ods_earlyyearsstudents\r\n",
							"    where StudentID in ('10c6afff-6372-4dc4-9628-f3fbbc75ed46'\r\n",
							"                        ,'2cc0a46f-f1b4-4057-aedd-5c9c5fac1454'\r\n",
							"                        ,'3cd4bdcf-81f9-4b65-9a6c-a51ba4a3a0c2'\r\n",
							"                        ,'429c983e-36c7-40bb-92b5-02adb452646e'\r\n",
							"                        ,'453e33b4-421d-42f0-b654-ad5c8b95d58a'\r\n",
							"                        ,'511b1e50-b3c7-416e-9bb1-9573748ac6c5'\r\n",
							"                        ,'59a5179b-37b1-4287-ba8a-1086576970d0'\r\n",
							"                        ,'6efd4212-dcd5-4d48-878e-edd879029ee0'\r\n",
							"                        ,'706feed7-65dd-41d2-9558-f57a9f01ba8b'\r\n",
							"                        ,'82713435-0950-47e1-9123-7ffb1a4de23d'\r\n",
							"                        ,'930732fb-4026-4e75-8815-18ef6535af4d'\r\n",
							"                        ,'c0cf498d-b718-4301-870c-c49fc226e83b'\r\n",
							"                        ,'d3781b02-b7ac-4d03-a5be-4a416a59b82b'\r\n",
							"                        ,'1deef6f4-157a-47c6-8653-d3a372855362'\r\n",
							"                        ,'1dff1b5b-4d4f-4b0c-a38d-ff5a36086452'\r\n",
							"                        ,'2cac09ab-2a96-43e2-a644-47e86d769650'\r\n",
							"                        ,'4487a4ee-04b6-4018-98c5-3fe7e09cb0f9'\r\n",
							"                        ,'4c74f399-da47-46af-bdd5-fa33394df9aa'\r\n",
							"                        ,'4e5b4b86-d434-4ee8-a03d-c18f6fad0da6'\r\n",
							"                        ,'5bd1bd53-0bab-492c-aea7-f43910bcc84c'\r\n",
							"                        ,'7194a869-02f8-45e3-8832-c9b660c6c5c4'\r\n",
							"                        ,'7401b6c9-be73-455a-9fcf-40217550dcb0'\r\n",
							"                        ,'76e5ca03-ac00-4b19-af92-e680c318f91c'\r\n",
							"                        ,'a010c89f-4980-44a6-ba6c-d796ce19752e'\r\n",
							"                        ,'a14f540f-a33a-424b-a6ec-38b24d7a5dd2'\r\n",
							"                        ,'a8765290-1559-4a37-8599-906f4d1a46c8'\r\n",
							"                        ,'b291ff5a-995d-4769-9b48-11591f0f7044'\r\n",
							"                        ,'06f33764-8746-430d-a4ff-b010d77618d2'\r\n",
							"                        ,'1e9709c1-6476-40ef-b294-7d1b0e0426cf'\r\n",
							"                        ,'3884fbcc-9d88-43d6-91cf-9e22083786d7'\r\n",
							"                        ,'4934fd79-65b8-45da-a090-fb88948e3b9a'\r\n",
							"                        ,'86beefe7-ac88-40e0-84dd-a311621ca4ff'\r\n",
							"                        ,'9d8a1d41-d54e-4381-b3ca-9811e933f6cb'\r\n",
							"                        ,'eaf85111-8662-425e-b817-8c053407be53'\r\n",
							"                        ,'ee625bc3-f2ae-4049-afef-12f944ec6abb'\r\n",
							"                        ,'f11212bf-c0a9-471a-a584-76513dea7097'\r\n",
							"                        ,'f6b358e0-9786-4a37-9ac5-026b83a4a1c4'\r\n",
							"                        ,'0a65bb35-9812-4259-9df0-83a0e3dadd1b'\r\n",
							"                        ,'39f82164-f1ec-4c03-b635-91418fd0ad0b'\r\n",
							"                        ,'40b2a4ee-e77f-4643-a078-42529e0256bf'\r\n",
							"                        ,'423dda41-da02-4366-844a-3501cbc3afda'\r\n",
							"                        ,'4a6dfde0-7e77-4aa1-9b0d-7aac97bfec63'\r\n",
							"                        ,'816ac0ea-d650-4157-96b9-2f627fb6fe70'\r\n",
							"                        ,'b18e7d52-d19a-46d2-939f-a48d48d4539c'\r\n",
							"                        ,'bd050f31-ce9b-47a0-b3f3-3f0f2edc83af'\r\n",
							"                        ,'ed58c96e-561c-449a-944f-3d842984e0d1'\r\n",
							"                        ,'0357a132-35a5-464a-a722-dfcffac7ebe0'\r\n",
							"                        ,'46305847-5b3a-4adf-a638-8c6125b28380'\r\n",
							"                        ,'4e89c64e-69bc-4756-b929-2b47e376151e'\r\n",
							"                        ,'8f86ca7f-cdde-47b7-ac8e-ff0629c79eff'\r\n",
							"                        ,'925219b4-ec5a-490f-8bc1-4986f944e872'\r\n",
							"                        ,'93f29b99-c7c6-457d-bdf0-007932e6dd73'\r\n",
							"                        ,'a676b0d7-9069-4ffc-9cf2-3199083fe89f'\r\n",
							"                        ,'b536b8f5-0be0-4462-bffa-019195c4c34f'\r\n",
							"                        ,'b98f556e-3be2-475c-9e68-ec2e25692ee8'\r\n",
							"                        ,'c097fb3b-810e-4b99-9d50-d56eeee172c6'\r\n",
							"                        ,'f8d50fc6-db82-485f-aaf8-cb040ccb96f0'\r\n",
							"\t\t\t\t\t\t          )\r\n",
							"\r\n",
							"union\r\n",
							"\r\n",
							"--Catherine Roberts\r\n",
							"select Year\r\n",
							"      ,YearLevel\r\n",
							"      ,CampusID\r\n",
							"      ,SchoolNameAndArea\r\n",
							"      , '2477a6c4-bd30-4a46-bed2-5b4d190b9f17' as TeacherID\r\n",
							"      , 'Catherine Roberts' as TeacherName\r\n",
							"      ,StudentID\r\n",
							"      ,StudentName\r\n",
							"      ,ClassName\r\n",
							"      ,ClassID\r\n",
							"      , 'croberts1@smptsv.catholic.edu.au' as StaffEmail\r\n",
							"      ,StudentEmail\r\n",
							"      ,trim(Ceider) as Ceider\r\n",
							"    from vw_ods_earlyyearsstudents\r\n",
							"    where StudentID in ('10c6afff-6372-4dc4-9628-f3fbbc75ed46'\r\n",
							"                        ,'2cc0a46f-f1b4-4057-aedd-5c9c5fac1454'\r\n",
							"                        ,'3cd4bdcf-81f9-4b65-9a6c-a51ba4a3a0c2'\r\n",
							"                        ,'429c983e-36c7-40bb-92b5-02adb452646e'\r\n",
							"                        ,'453e33b4-421d-42f0-b654-ad5c8b95d58a'\r\n",
							"                        ,'511b1e50-b3c7-416e-9bb1-9573748ac6c5'\r\n",
							"                        ,'59a5179b-37b1-4287-ba8a-1086576970d0'\r\n",
							"                        ,'6efd4212-dcd5-4d48-878e-edd879029ee0'\r\n",
							"                        ,'706feed7-65dd-41d2-9558-f57a9f01ba8b'\r\n",
							"                        ,'82713435-0950-47e1-9123-7ffb1a4de23d'\r\n",
							"                        ,'930732fb-4026-4e75-8815-18ef6535af4d'\r\n",
							"                        ,'c0cf498d-b718-4301-870c-c49fc226e83b'\r\n",
							"                        ,'d3781b02-b7ac-4d03-a5be-4a416a59b82b'\r\n",
							"                        ,'1deef6f4-157a-47c6-8653-d3a372855362'\r\n",
							"                        ,'1dff1b5b-4d4f-4b0c-a38d-ff5a36086452'\r\n",
							"                        ,'2cac09ab-2a96-43e2-a644-47e86d769650'\r\n",
							"                        ,'4487a4ee-04b6-4018-98c5-3fe7e09cb0f9'\r\n",
							"                        ,'4c74f399-da47-46af-bdd5-fa33394df9aa'\r\n",
							"                        ,'4e5b4b86-d434-4ee8-a03d-c18f6fad0da6'\r\n",
							"                        ,'5bd1bd53-0bab-492c-aea7-f43910bcc84c'\r\n",
							"                        ,'7194a869-02f8-45e3-8832-c9b660c6c5c4'\r\n",
							"                        ,'7401b6c9-be73-455a-9fcf-40217550dcb0'\r\n",
							"                        ,'76e5ca03-ac00-4b19-af92-e680c318f91c'\r\n",
							"                        ,'a010c89f-4980-44a6-ba6c-d796ce19752e'\r\n",
							"                        ,'a14f540f-a33a-424b-a6ec-38b24d7a5dd2'\r\n",
							"                        ,'a8765290-1559-4a37-8599-906f4d1a46c8'\r\n",
							"                        ,'b291ff5a-995d-4769-9b48-11591f0f7044'\r\n",
							"                        ,'06f33764-8746-430d-a4ff-b010d77618d2'\r\n",
							"                        ,'1e9709c1-6476-40ef-b294-7d1b0e0426cf'\r\n",
							"                        ,'3884fbcc-9d88-43d6-91cf-9e22083786d7'\r\n",
							"                        ,'4934fd79-65b8-45da-a090-fb88948e3b9a'\r\n",
							"                        ,'86beefe7-ac88-40e0-84dd-a311621ca4ff'\r\n",
							"                        ,'9d8a1d41-d54e-4381-b3ca-9811e933f6cb'\r\n",
							"                        ,'eaf85111-8662-425e-b817-8c053407be53'\r\n",
							"                        ,'ee625bc3-f2ae-4049-afef-12f944ec6abb'\r\n",
							"                        ,'f11212bf-c0a9-471a-a584-76513dea7097'\r\n",
							"                        ,'f6b358e0-9786-4a37-9ac5-026b83a4a1c4'\r\n",
							"                        ,'0a65bb35-9812-4259-9df0-83a0e3dadd1b'\r\n",
							"                        ,'39f82164-f1ec-4c03-b635-91418fd0ad0b'\r\n",
							"                        ,'40b2a4ee-e77f-4643-a078-42529e0256bf'\r\n",
							"                        ,'423dda41-da02-4366-844a-3501cbc3afda'\r\n",
							"                        ,'4a6dfde0-7e77-4aa1-9b0d-7aac97bfec63'\r\n",
							"                        ,'816ac0ea-d650-4157-96b9-2f627fb6fe70'\r\n",
							"                        ,'b18e7d52-d19a-46d2-939f-a48d48d4539c'\r\n",
							"                        ,'bd050f31-ce9b-47a0-b3f3-3f0f2edc83af'\r\n",
							"                        ,'ed58c96e-561c-449a-944f-3d842984e0d1'\r\n",
							"                        ,'0357a132-35a5-464a-a722-dfcffac7ebe0'\r\n",
							"                        ,'46305847-5b3a-4adf-a638-8c6125b28380'\r\n",
							"                        ,'4e89c64e-69bc-4756-b929-2b47e376151e'\r\n",
							"                        ,'8f86ca7f-cdde-47b7-ac8e-ff0629c79eff'\r\n",
							"                        ,'925219b4-ec5a-490f-8bc1-4986f944e872'\r\n",
							"                        ,'93f29b99-c7c6-457d-bdf0-007932e6dd73'\r\n",
							"                        ,'a676b0d7-9069-4ffc-9cf2-3199083fe89f'\r\n",
							"                        ,'b536b8f5-0be0-4462-bffa-019195c4c34f'\r\n",
							"                        ,'b98f556e-3be2-475c-9e68-ec2e25692ee8'\r\n",
							"                        ,'c097fb3b-810e-4b99-9d50-d56eeee172c6'\r\n",
							"                        ,'f8d50fc6-db82-485f-aaf8-cb040ccb96f0'\r\n",
							"\t\t\t\t\t\t          )\r\n",
							"\r\n",
							"union\r\n",
							"\r\n",
							"-- replacement teachers for Georgia Luscombe\r\n",
							"-- Kris Walls\r\n",
							"\r\n",
							"select Year\r\n",
							"      ,YearLevel\r\n",
							"      ,CampusID\r\n",
							"      ,SchoolNameAndArea\r\n",
							"      , '84224439-871f-49ed-9fdc-ccafa36d38de' as TeacherID\r\n",
							"      , 'Kris Walls' as TeacherName\r\n",
							"      ,StudentID\r\n",
							"      ,StudentName\r\n",
							"      ,ClassName\r\n",
							"      ,ClassID\r\n",
							"      , 'kwalls1@skmtsv.catholic.edu.au' as StaffEmail\r\n",
							"      ,StudentEmail\r\n",
							"      ,trim(Ceider) as Ceider\r\n",
							"    from vw_ods_earlyyearsstudents\r\n",
							"    where StudentID in ('9c4fe11b-7e9c-4a7b-bcf6-2a14223106a5'\r\n",
							"\t\t\t\t\t\t\t,'336781db-99a2-4f35-aeae-73df3cf4d37a'\r\n",
							"\t\t\t\t\t\t\t,'a79cecfd-5ec0-43ad-9fb8-8fc0bae6c19d'\r\n",
							"\t\t\t\t\t\t\t,'dcd06c27-49ac-44ff-9a3b-2e07c31d3982'\r\n",
							"\t\t\t\t\t\t\t,'3776a79a-72ee-4217-aeed-36f7a411e731'\r\n",
							"\t\t\t\t\t\t\t,'c58830f7-76e8-4b7c-9544-548dd00b1ec6'\r\n",
							"\t\t\t\t\t\t\t,'8262a649-e137-48a1-bc52-b8d338cc0d81'\r\n",
							"\t\t\t\t\t\t\t,'8eb564fa-a732-41cf-8f25-3322cc0e6c9a'\r\n",
							"\t\t\t\t\t\t\t,'0d41fee1-b8b9-4f0e-a0e7-9931da7ae12c'\r\n",
							"\t\t\t\t\t\t\t,'44df3e8a-a32d-4d46-9be7-c0bd8f04abe9'\r\n",
							"\t\t\t\t\t\t\t,'c244f2a5-18d2-4c91-accb-a5a4561a6108'\r\n",
							"\t\t\t\t\t\t)\r\n",
							"\r\n",
							"\tand ClassID = 'GEN1_YR1'\r\n",
							"\r\n",
							"union\r\n",
							"\r\n",
							"-- Mel Siemer\r\n",
							"\r\n",
							"select Year\r\n",
							"      ,YearLevel\r\n",
							"      ,CampusID\r\n",
							"      ,SchoolNameAndArea\r\n",
							"      , 'b86bff47-cdfc-4856-a1c8-ec857573537b' as TeacherID\r\n",
							"      , 'Melissa Siemer' as TeacherName\r\n",
							"      ,StudentID\r\n",
							"      ,StudentName\r\n",
							"      ,ClassName\r\n",
							"      ,ClassID\r\n",
							"      , 'msiemer1@skmtsv.catholic.edu.au' as StaffEmail\r\n",
							"      ,StudentEmail\r\n",
							"      ,trim(Ceider) as Ceider\r\n",
							"    from vw_ods_earlyyearsstudents\r\n",
							"    where StudentID in ('33b862b4-1016-4dcf-8181-052a25389ffb'\r\n",
							"\t\t\t\t\t\t\t,'ca97eefc-e2d7-4fbd-a356-47c4a0c0efe7'\r\n",
							"\t\t\t\t\t\t\t,'c221b2d9-ef5d-492f-ab39-7412c6dd9bd2'\r\n",
							"\t\t\t\t\t\t\t,'d7bf9b96-7443-42f0-8d4a-ed810e534305'\r\n",
							"\t\t\t\t\t\t\t,'af9fe34b-e99c-4fc1-9759-0f13d495f4ff'\r\n",
							"\t\t\t\t\t\t\t,'3f7e4000-360c-4549-be88-08daa78d9bee'\r\n",
							"\t\t\t\t\t\t\t,'03d7363c-8a3b-430b-904f-e7feb4b21fad'\r\n",
							"\t\t\t\t\t\t\t,'523e8f23-f356-4e0c-95d6-03eac7fe11dd'\r\n",
							"\t\t\t\t\t\t\t,'100475b2-ab31-4c2b-a59b-510976c5f32c'\r\n",
							"\t\t\t\t\t\t\t,'afe20295-b1b3-43ef-8de8-4be53c5b8366'\r\n",
							"\t\t\t\t\t\t\t,'28052bfa-8cf5-48fe-9805-08bdbafc4fb5'\r\n",
							"\t\t\t\t\t\t\t,'f7c8c1e8-5ae2-4ec0-89d4-5e397dc6d35f'\r\n",
							"\t\t\t\t\t\t\t,'e6b86cbc-148b-4fbf-90aa-17769d56c1d8'\r\n",
							"\t\t\t\t\t\t)\r\n",
							"\r\n",
							"\tand ClassID = 'GEN1_YR1'\r\n",
							"\r\n",
							"union\r\n",
							"\r\n",
							"\r\n",
							"select Year\r\n",
							"      ,YearLevel\r\n",
							"      ,CampusID\r\n",
							"      ,SchoolNameAndArea\r\n",
							"      , '52a62112-dc67-43f5-b84a-f698bfcb27ac' as TeacherID\r\n",
							"      , 'Emma Hiscox' as TeacherName\r\n",
							"      ,StudentID\r\n",
							"      ,StudentName\r\n",
							"      ,ClassName\r\n",
							"      ,ClassID\r\n",
							"      , 'ehiscox@prspne.catholic.edu.au' as StaffEmail\r\n",
							"      ,StudentEmail\r\n",
							"      ,trim(Ceider) as Ceider\r\n",
							"    from vw_ods_earlyyearsstudents\r\n",
							"    where StudentID in ('06fefe55-1b6e-4178-ac25-b15dd8559b33'\r\n",
							"\t\t\t\t\t\t,'0d042b52-ec58-408c-a95d-b435df327e2e'\r\n",
							"\t\t\t\t\t\t,'1931105a-1169-4ebd-a5c5-5080e977a4ef'\r\n",
							"\t\t\t\t\t\t,'218f529e-f006-4b43-a6e7-1d3e0df35ef9'\r\n",
							"\t\t\t\t\t\t,'24f1b468-c9ac-4840-a817-bc856ddd2f28'\r\n",
							"\t\t\t\t\t\t,'2c9413d0-b4c4-4a7c-82eb-6c01ac42ffbc'\r\n",
							"\t\t\t\t\t\t,'34a8687d-a6e8-46a5-9b53-4fac9ba8186b'\r\n",
							"\t\t\t\t\t\t,'63ea9df0-1d57-4983-95f5-f69d26466764'\r\n",
							"\t\t\t\t\t\t,'6bc099cb-3f06-40bc-acfe-9ce9f65412a9'\r\n",
							"\t\t\t\t\t\t,'6e55c2db-c808-45cf-9283-b51c1634f20d'\r\n",
							"\t\t\t\t\t\t,'7a3e1f0a-b4c1-4100-bd5e-fbca7d441175'\r\n",
							"\t\t\t\t\t\t,'7a81413a-408c-4943-8e75-03a85a6a8223'\r\n",
							"\t\t\t\t\t\t,'89f4ddcf-9017-4953-9928-b98262d23a09'\r\n",
							"\t\t\t\t\t\t,'8be656ce-655f-4ad1-919e-9095aff6890c'\r\n",
							"\t\t\t\t\t\t,'a5a72486-6874-4126-bd7d-bc7d1b24372e'\r\n",
							"\t\t\t\t\t\t,'b0e40041-5be6-46f5-814d-3b9151644322'\r\n",
							"\t\t\t\t\t\t,'b25f645b-5802-4916-88d5-1bfe73c37682'\r\n",
							"\t\t\t\t\t\t,'b2a82341-61b1-430d-afce-0d9b984bf3ac'\r\n",
							"\t\t\t\t\t\t,'c1841b0c-b4bc-47eb-a0b3-00dcc248197a'\r\n",
							"\t\t\t\t\t\t,'c24b1240-cbbb-435e-ae82-f22ce36b6f2f'\r\n",
							"\t\t\t\t\t\t,'c4d6440c-82bf-49e6-bebc-ade4ab6a4473'\r\n",
							"\t\t\t\t\t\t,'c93f6510-2615-4e1e-9918-96a7e063a0b9'\r\n",
							"\t\t\t\t\t\t,'d954087b-fa0f-491e-9d4d-6ce4fbccdd2e')\r\n",
							"\r\n",
							"\tand ClassID = 'GEN1_01A'\r\n",
							"\r\n",
							"union\r\n",
							"\r\n",
							"select *\r\n",
							"    from vw_ods_earlyyearsstudents"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Add Substitute Teachers from the SharePoint Online list"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DROP VIEW IF EXISTS vw_ods_earlyyearsstudents_substituteteachers;\r\n",
							"\r\n",
							"-- Manual entry of support staff (non teachers) that will be conducting tests\r\n",
							"\r\n",
							"create temp view vw_ods_earlyyearsstudents_substituteteachers\r\n",
							"as\r\n",
							"\r\n",
							"select \r\n",
							"\tYear\r\n",
							"    ,YearLevel\r\n",
							"    ,CampusID\r\n",
							"    ,SchoolNameAndArea\r\n",
							"    ,TeacherID\r\n",
							"    ,TeacherName\r\n",
							"    ,StudentID\r\n",
							"    ,StudentName\r\n",
							"    ,ClassName\r\n",
							"    ,ClassID\r\n",
							"    ,StaffEmail\r\n",
							"    ,StudentEmail\r\n",
							"    ,Ceider\r\n",
							"    from vw_ods_earlyyearsstudents_addedstaff\r\n",
							"\r\n",
							"union all\r\n",
							"\r\n",
							"select distinct\r\n",
							"\torg.Year\r\n",
							"\t,org.YearLevel\r\n",
							"\t,org.CampusID\r\n",
							"\t,org.SchoolNameAndArea\r\n",
							"\t,new.SubTeacherCompassID as TeacherID\r\n",
							"\t,new.SubTeacherName as TeacherName\r\n",
							"\t,org.StudentID\r\n",
							"\t,org.StudentName\r\n",
							"\t,org.ClassName\r\n",
							"\t,org.ClassID\r\n",
							"\t,new.SubTeacherEmail as StaffEmail\r\n",
							"\t,org.StudentEmail\r\n",
							"\t,org.Ceider\r\n",
							"\r\n",
							"    from vw_ods_earlyyearsstudents_addedstaff org\r\n",
							"\r\n",
							"inner join\r\n",
							"\r\n",
							"    (\r\n",
							"    select distinct\r\n",
							"        sub.Title as OriginalTeacherEmail\r\n",
							"        ,coalesce(details.TeacherName, sub.AdditionalTeacherEmail, 'Substitute') as SubTeacherName\r\n",
							"        ,details.TeacherID as SubTeacherCompassID\r\n",
							"        ,sub.AdditionalTeacherEmail as SubTeacherEmail\r\n",
							"\r\n",
							"        from vw_EarlyYearsSubTeachers sub\r\n",
							"        left join\r\n",
							"        (\r\n",
							"        select distinct\r\n",
							"            concat(d.FirstName, ' ', d.LastName) as TeacherName\r\n",
							"            ,d.CompassPersonId as TeacherID\r\n",
							"            ,coalesce(so.OrganisationUserEmail, d.EmailAddress, NULL) as StaffEmail\r\n",
							"\r\n",
							"            from vw_CompassODSStaffDemographic d\r\n",
							"            inner join vw_CompassODSStaffOrganisationDetails so\r\n",
							"            on d.CompassPersonId = so.CompassPersonId\r\n",
							"            where 1=1\r\n",
							"            and d.Iscurrent = 'True'\r\n",
							"            and so.Iscurrent = 'True'\r\n",
							"        ) details\r\n",
							"\r\n",
							"        on sub.AdditionalTeacherEmail = details.StaffEmail\r\n",
							"    ) new\r\n",
							"\r\n",
							"on org.StaffEmail = new.OriginalTeacherEmail"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Save the SQL Temp views created above "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# now save the sql views created above\r\n",
							"classenrolment_df = spark.read.table('vw_classenrolment')\r\n",
							"activestudent_df = spark.read.table('vw_activestudent')\r\n",
							"activestudentexceptions_df = spark.read.table('vw_activestudentexceptions')\r\n",
							"#inactivestudent_df = spark.read.table('vw_inactivestudent')\r\n",
							"\r\n",
							"naplanparticipation_df = spark.read.table('vw_naplanparticipation')\r\n",
							"acerparticipation_df = spark.read.table('vw_acerparticipation')\r\n",
							"\r\n",
							"ae_manual_learningtasks_df = spark.read.table('vw_ae_manual_learningtasks')\r\n",
							"ae_manual_semesterreports_df = spark.read.table('vw_ae_manual_semesterreports')\r\n",
							"\r\n",
							"ods_studentclass_df = spark.read.table('vw_ods_studentclass')\r\n",
							"ods_studentstable_df = spark.read.table('vw_ods_studentstable')\r\n",
							"ods_earlyyearsstudents_df = spark.read.table('vw_ods_earlyyearsstudents_substituteteachers') #need to make sure we include manually added staff\r\n",
							"ods_earlyyearsstudents_exceptions_df = spark.read.table('vw_ods_earlyyearsstudents_exceptions')\r\n",
							"\r\n",
							"ods_earlyyearsstudents_classidcleaned_df = spark.read.table('vw_ods_earlyyearsstudentsclassid_cleaned')\r\n",
							"\r\n",
							"ae_manual_combined_df = spark.read.table('vw_ae_manual_combined')\r\n",
							"\r\n",
							"saveToTarget(classenrolment_df, destination_p, f'{version}/_DMClassEnrolment')\r\n",
							"saveToTarget(activestudent_df, destination_p, f'{version}/_FACTActiveStudent')\r\n",
							"saveToTarget(activestudentexceptions_df, destination_p, f'{version}/_FACTActiveStudentExceptions')\r\n",
							"\r\n",
							"#saveToTarget(inactivestudent_df, destination_p, f'{version}/_FACTInactiveStudent')\r\n",
							"\r\n",
							"saveToTarget(naplanparticipation_df, destination_p, f'{version}/_FACTNaplanParticipation')\r\n",
							"saveToTarget(acerparticipation_df, destination_p, f'{version}/_FACTAcerParticipation')\r\n",
							"\r\n",
							"saveToTarget(ae_manual_learningtasks_df, destination_p, f'{version}/_FACTAELearningTasks')\r\n",
							"saveToTarget(ae_manual_semesterreports_df, destination_p, f'{version}/_FACTAESemesterReports')\r\n",
							"\r\n",
							"saveToTarget(ods_studentclass_df, destination_p, f'{version}/_FACTODSStudentClass')\r\n",
							"saveToTarget(ods_studentstable_df, destination_p, f'{version}/_FACTODSStudentsTable')\r\n",
							"saveToTarget(ods_earlyyearsstudents_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents')\r\n",
							"saveToTarget(ods_earlyyearsstudents_exceptions_df, destination_p, f'{version}/_FACTODSEarlyYearsStudentsExceptions')\r\n",
							"\r\n",
							"saveToTarget(ods_earlyyearsstudents_classidcleaned_df, destination_p, f'{version}/_FACTODSEarlyYearsStudents_ClassIDCleaned')\r\n",
							"\r\n",
							"saveToTarget(ae_manual_combined_df, destination_p, f'{version}/_FACTAECombined')\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SeniorData_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "674ac805-3131-49bd-bcdc-2099255eeb1e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class SeniorData_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='_SeniorData', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['StudentSubjects'] = [\r\n",
							"                                        ['CSA', 'string', 'no-op'],\r\n",
							"                                        ['exit_year', 'integer', 'no-op'],\r\n",
							"                                        ['qcaa_org_type', 'string', 'no-op'],\r\n",
							"                                        ['centre_code', 'integer', 'no-op'],\r\n",
							"                                        ['school', 'string', 'no-op'],\r\n",
							"                                        ['subject_id', 'integer', 'no-op'],\r\n",
							"                                        ['subject', 'string', 'no-op'],\r\n",
							"                                        ['subject_type', 'string', 'no-op'],\r\n",
							"                                        ['subject_subtype', 'string', 'no-op'],\r\n",
							"                                        ['unit_1_result', 'string', 'no-op'],\r\n",
							"                                        ['unit_2_result', 'string', 'no-op'],\r\n",
							"                                        ['ia1_result', 'string', 'no-op'],\r\n",
							"                                        ['ia2_result', 'string', 'no-op'],\r\n",
							"                                        ['ia3_result', 'string', 'no-op'],\r\n",
							"                                        ['ea_ia4_result', 'string', 'no-op'],\r\n",
							"                                        ['final_result', 'string', 'no-op'],\r\n",
							"                                        ['grade', 'string', 'no-op'],\r\n",
							"                                        ['unit_1_enrolment', 'string', 'no-op'],\r\n",
							"                                        ['unit_2_enrolment', 'string', 'no-op'],\r\n",
							"                                        ['unit_3_enrolment', 'string', 'no-op'],\r\n",
							"                                        ['unit_4_enrolment', 'string', 'no-op'],\r\n",
							"                                        ['lui', 'integer', 'no-op'],\r\n",
							"                                        ['last_name', 'string', 'no-op'],\r\n",
							"                                        ['given_names', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['VETCourses'] = [\r\n",
							"                                        ['CSA', 'string', 'no-op'],\r\n",
							"                                        ['exit_year', 'integer', 'no-op'],\r\n",
							"                                        ['qcaa_org_type', 'string', 'no-op'],\r\n",
							"                                        ['centre_code', 'integer', 'no-op'],\r\n",
							"                                        ['school', 'string', 'no-op'],\r\n",
							"                                        ['provider', 'string', 'no-op'],\r\n",
							"                                        ['qual_code', 'string', 'no-op'],\r\n",
							"                                        ['qual_name', 'string', 'no-op'],\r\n",
							"                                        ['start_date', 'string', 'no-op'],\r\n",
							"                                        ['end_date', 'string', 'no-op'],\r\n",
							"                                        ['qual_status', 'string', 'no-op'],\r\n",
							"                                        ['lui', 'integer', 'no-op'],\r\n",
							"                                        ['last_name', 'string', 'no-op'],\r\n",
							"                                        ['given_names', 'string', 'no-op']                                                          \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['VETUnits'] = [\r\n",
							"                                        ['CSA', 'string', 'no-op'],\r\n",
							"                                        ['exit_year', 'integer', 'no-op'],\r\n",
							"                                        ['qcaa_org_type', 'string', 'no-op'],\r\n",
							"                                        ['centre_code', 'integer', 'no-op'],\r\n",
							"                                        ['school', 'string', 'no-op'],\r\n",
							"                                        ['provider', 'string', 'no-op'],\r\n",
							"                                        ['qual_code', 'string', 'no-op'],\r\n",
							"                                        ['qual_name', 'string', 'no-op'],\r\n",
							"                                        ['unit_code', 'string', 'no-op'],\r\n",
							"                                        ['unit_name', 'string', 'no-op'],\r\n",
							"                                        ['start_date', 'string', 'no-op'],\r\n",
							"                                        ['end_date', 'string', 'no-op'],\r\n",
							"                                        ['grade_description', 'string', 'no-op'],\r\n",
							"                                        ['grade_display_name', 'string', 'no-op'],\r\n",
							"                                        ['lui', 'integer', 'no-op'],\r\n",
							"                                        ['last_name', 'string', 'no-op'],\r\n",
							"                                        ['given_names', 'string', 'no-op']                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['SchoolLevel'] = [\r\n",
							"                                        ['CSA', 'string', 'no-op'],\r\n",
							"                                        ['year', 'integer', 'no-op'],\r\n",
							"                                        ['qcaa_org_type', 'string', 'no-op'],\r\n",
							"                                        ['centre_code', 'integer', 'no-op'],\r\n",
							"                                        ['school', 'string', 'no-op'],\r\n",
							"                                        ['locality', 'string', 'no-op'],\r\n",
							"                                        ['group', 'string', 'no-op'],\r\n",
							"                                        ['sep', 'integer', 'no-op'],\r\n",
							"                                        ['qcia', 'integer', 'no-op'],\r\n",
							"                                        ['qce', 'integer', 'no-op'],\r\n",
							"                                        ['vet', 'integer', 'no-op'],\r\n",
							"                                        ['sat', 'integer', 'no-op'],\r\n",
							"                                        ['certs', 'integer', 'no-op'],\r\n",
							"                                        ['no_outcomes', 'integer', 'no-op'],\r\n",
							"                                        ['pct_ibd', 'integer', 'no-op'],\r\n",
							"                                        ['pct_sat_qce_ibd_vet', 'double', 'no-op'],\r\n",
							"                                        ['cert_i', 'integer', 'no-op'],\r\n",
							"                                        ['cert_ii', 'integer', 'no-op'],\r\n",
							"                                        ['cert_iii', 'integer', 'no-op'],\r\n",
							"                                        ['cert_iv', 'integer', 'no-op'],\r\n",
							"                                        ['diploma', 'integer', 'no-op'],\r\n",
							"                                        ['adv_diploma', 'integer', 'no-op'],\r\n",
							"                                        ['cert_ii_iii_or_iv', 'integer', 'no-op'],\r\n",
							"                                        ['cert_ii_or_higher', 'integer', 'no-op'],\r\n",
							"                                        ['cert_iii_or_iv', 'integer', 'no-op'],\r\n",
							"                                        ['cert_iii_or_higher', 'integer', 'no-op'],\r\n",
							"                                        ['sat_qce_ibd_vet', 'integer', 'no-op'],\r\n",
							"                                        ['ibd_students', 'integer', 'no-op'],\r\n",
							"                                        ['ibd_awards', 'integer', 'no-op']                                                      \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['StudentLevel'] = [\r\n",
							"                                        ['CSA', 'string', 'no-op'],\r\n",
							"                                        ['year', 'integer', 'no-op'],\r\n",
							"                                        ['qcaa_org_type', 'string', 'no-op'],\r\n",
							"                                        ['centre_code', 'integer', 'no-op'],\r\n",
							"                                        ['school', 'string', 'no-op'],\r\n",
							"                                        ['lui', 'integer', 'no-op'],\r\n",
							"                                        ['last_name', 'string', 'no-op'],\r\n",
							"                                        ['given_names', 'string', 'no-op'],\r\n",
							"                                        ['sex', 'string', 'no-op'],\r\n",
							"                                        ['birth_date', 'string', 'no-op'],\r\n",
							"                                        ['visa', 'string', 'no-op'],\r\n",
							"                                        ['indigenous', 'string', 'no-op'],\r\n",
							"                                        ['qcia', 'string', 'no-op'],\r\n",
							"                                        ['qce', 'string', 'no-op'],\r\n",
							"                                        ['vet', 'string', 'no-op'],\r\n",
							"                                        ['sat', 'string', 'no-op'],\r\n",
							"                                        ['ibd_student', 'string', 'no-op'],\r\n",
							"                                        ['ibd_award', 'string', 'no-op'],\r\n",
							"                                        ['ibd_points', 'integer', 'no-op'],\r\n",
							"                                        ['uni_subjects', 'integer', 'no-op'],\r\n",
							"                                        ['diploma_modules', 'integer', 'no-op'],\r\n",
							"                                        ['cert_mods', 'integer', 'no-op'],\r\n",
							"                                        ['certs_i', 'integer', 'no-op'],\r\n",
							"                                        ['certs_ii', 'integer', 'no-op'],\r\n",
							"                                        ['certs_iii', 'integer', 'no-op'],\r\n",
							"                                        ['certs_iv', 'integer', 'no-op'],\r\n",
							"                                        ['diplomas', 'integer', 'no-op'],\r\n",
							"                                        ['adv_diplomas', 'integer', 'no-op'],\r\n",
							"                                        ['qce_credits', 'integer', 'no-op'],\r\n",
							"                                        ['qce_literacy', 'string', 'no-op'],\r\n",
							"                                        ['qce_numeracy', 'string', 'no-op'],\r\n",
							"                                        ['qce_completed_core', 'string', 'no-op']                                                     \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'StudentSubjects', self.schemas['StudentSubjects'], None, 'BKID')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'VETCourses', self.schemas['VETCourses'], None, 'BKID')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'VETUnits', self.schemas['VETUnits'], None, 'BKID')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'SchoolLevel', self.schemas['SchoolLevel'], None, 'BKID')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'StudentLevel', self.schemas['StudentLevel'], None, 'BKID')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"seniordata_object = SeniorData_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SeniorOutcomes_ManualCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d2630e4e-c828-4ceb-83f1-b145e805b290"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lit, monotonically_increasing_id, trim\r\n",
							"from pyspark.sql import DataFrame\r\n",
							"from functools import reduce"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class SeniorOutcomesManualCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"        \r\n",
							"    def mergeAll(self):\r\n",
							"\r\n",
							"        root_dir = f'{self.stage1np}' #\"/_SeniorData\"\r\n",
							"        studentsubjects_list = []\r\n",
							"        vetcourses_list = []\r\n",
							"        vetunits_list = []\r\n",
							"        schoollevel_list = []\r\n",
							"        studentlevel_list = []\r\n",
							"        \r\n",
							"        # for each file location in this manual upload directory..\r\n",
							"        file_list = mssparkutils.fs.ls(root_dir)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"                \r\n",
							"            # .. we need to dissect the filename to get the year, and file type\r\n",
							"            tokens = file.name.split(\"_\")\r\n",
							"            year = tokens[0].strip()\r\n",
							"            folder_name = tokens[2].strip() + \"_\" + tokens[3].strip() + \"_\" + tokens[4].strip()\r\n",
							"            \r\n",
							"            # turn the folder name into lower case \r\n",
							"            folder_name = folder_name.lower()\r\n",
							"\r\n",
							"            filename = f'{self.stage1np}/{file.name}'\r\n",
							"\r\n",
							"            # Merge the same files types into a dataframe (5 files in total)\r\n",
							"            if (folder_name == '1_student_subjects'):\r\n",
							"                df = spark.read.options(header='True').csv(filename)\r\n",
							"                \r\n",
							"                # add the data frame to the list of dataframes\r\n",
							"                studentsubjects_list.append(df)\r\n",
							"\r\n",
							"            elif (folder_name == '2_vet_courses'):\r\n",
							"                df = spark.read.options(header='True').csv(filename)\r\n",
							"                \r\n",
							"                # add the data frame to the list of dataframes\r\n",
							"                vetcourses_list.append(df)\r\n",
							"\r\n",
							"            elif (folder_name == '3_vet_units'):\r\n",
							"                df = spark.read.options(header='True').csv(filename)\r\n",
							"                \r\n",
							"                # add the data frame to the list of dataframes\r\n",
							"                vetunits_list.append(df)\r\n",
							"            \r\n",
							"            elif (folder_name == 'yr12_school_level'):\r\n",
							"                df = spark.read.options(header='True').csv(filename)\r\n",
							"                \r\n",
							"                # add the data frame to the list of dataframes\r\n",
							"                schoollevel_list.append(df)\r\n",
							"            \r\n",
							"            elif (folder_name == 'yr12_student_level'):\r\n",
							"                df = spark.read.options(header='True').csv(filename)\r\n",
							"                \r\n",
							"                # add the data frame to the list of dataframes\r\n",
							"                studentlevel_list.append(df)\r\n",
							"\r\n",
							"            else:\r\n",
							"                continue #skip files that don't meet the filename criteria\r\n",
							"                \r\n",
							"\r\n",
							"        # once we have all of the files converted to dataframes with the extra columns, we can combined them back to one df\r\n",
							"        studentsubjects_combined_df = reduce(DataFrame.unionAll, studentsubjects_list)\r\n",
							"        vetcourses_combined_df = reduce(DataFrame.unionAll, vetcourses_list)\r\n",
							"        vetunits_combined_df = reduce(DataFrame.unionAll, vetunits_list)\r\n",
							"        schoollevel_combined_df = reduce(DataFrame.unionAll, schoollevel_list)\r\n",
							"        studentlevel_combined_df = reduce(DataFrame.unionAll, studentlevel_list)\r\n",
							"\r\n",
							"\r\n",
							"        # add an index to the combined tables \r\n",
							"        studentsubjects_indexed_df = studentsubjects_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"        vetcourses_indexed_df = vetcourses_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"        vetunits_indexed_df = vetunits_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"        schoollevel_indexed_df = schoollevel_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"        studentlevel_indexed_df = studentlevel_combined_df.select(\"*\").withColumn(\"BKID\", monotonically_increasing_id())\r\n",
							"\r\n",
							"\r\n",
							"        # save the csv files\r\n",
							"        studentsubjects_indexed_df.write.option(\"header\", True).csv(f'{self.stage1np}/StudentSubjects')\r\n",
							"        vetcourses_indexed_df.write.option(\"header\", True).csv(f'{self.stage1np}/VETCourses')\r\n",
							"        vetunits_indexed_df.write.option(\"header\", True).csv(f'{self.stage1np}/VETUnits')\r\n",
							"        schoollevel_indexed_df.write.option(\"header\", True).csv(f'{self.stage1np}/SchoolLevel')\r\n",
							"        studentlevel_indexed_df.write.option(\"header\", True).csv(f'{self.stage1np}/StudentLevel')\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the Student Outcomes Manual Data Copy with a source folder that contains all the ingested data files \r\n",
							"seniorcopy = SeniorOutcomesManualCopy(source_folder)\r\n",
							"\r\n",
							"seniorcopy.mergeAll()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Student_profile_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bf16226e-ea33-43d4-b993-b34c77becad1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Student_profile(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='student', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMDetailedStudentPreSubmission'] = [\r\n",
							"                                        ['SKDetailedStudentPreSubmission', 'integer', 'no-op'],\r\n",
							"                                        ['BKDetailedStudentPreSubmission', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CensusYear', 'integer', 'no-op'],\r\n",
							"                                        ['CensusPeriod', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseIdentifierStudentId', 'string', 'no-op'],\r\n",
							"                                        ['OfficialFirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['OfficialLastName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['YearLevel', 'string', 'no-op'],\r\n",
							"                                        ['RollClass', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'date', 'no-op'],\r\n",
							"                                        ['GenderSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEFlag', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['ReceivesESL', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['NationalitySourceValue', 'string', 'no-op'],\r\n",
							"                                        ['NationalitySIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['NationalitySIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResidentIndicator', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResidentStatus', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'date', 'no-op'],\r\n",
							"                                        ['VisaSubClassNumber', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalent', 'double', 'no-op'],\r\n",
							"                                        ['BoardingFlag', 'string', 'no-op'],\r\n",
							"                                        ['OverseasStudentFlag', 'string', 'no-op'],\r\n",
							"                                        ['ReligionSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['ReligionSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionCategory', 'string', 'no-op'],\r\n",
							"                                        ['PreviousSchoolName', 'string', 'no-op'],\r\n",
							"                                        ['PreviousSchoolAGEID', 'integer', 'no-op'],\r\n",
							"                                        ['DateEnrolled', 'date', 'no-op'],\r\n",
							"                                        ['Guardian1FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1SchoolEducationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1SchoolEducationSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2SchoolEducationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2SchoolEducationSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['SWDSourceValueFlag', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentStatus', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentStatusSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['StudentStatus', 'string', 'no-op'],\r\n",
							"                                        ['DateLeft', 'date', 'no-op'],\r\n",
							"                                        ['CreatedDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['CompassProfileURL', 'string', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANSchoolName', 'string', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANSchoolACARAId', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANYear', 'integer', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressState', 'string', 'no-op'],\r\n",
							"                                        ['StudentPostCode', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressState', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Postcode', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressState', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Postcode', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactPersonMilestone'] = [\r\n",
							"                                        ['SKPersonMilestone', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersonType', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentID', 'integer', 'no-op'],\r\n",
							"                                        ['SKMilestoneStartDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKMilestoneEndDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKHouseGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetail', 'integer', 'no-op'],\r\n",
							"                                        ['SKStaffOrganisationDetail', 'integer', 'no-op'],\r\n",
							"                                        ['PersonHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['FTETimeAllocation', 'double', 'no-op'],\r\n",
							"                                        ['PartTime', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['ESL', 'string', 'no-op'],\r\n",
							"                                        ['EALD', 'string', 'no-op'],\r\n",
							"                                        ['ExternalStudent', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['IsActiveMilestone', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrentMilestone', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"        self.schemas['DMFactStudent'] = [\r\n",
							"                                        ['FullTimeStudentSummaryId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCensusYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKAge', 'integer', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['Count', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKCensusGroupingId', 'integer', 'no-op'],\r\n",
							"                                        ['FTE', 'double', 'no-op'],\r\n",
							"                                        ['SKAttendanceStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SWDCount', 'integer', 'no-op'],\r\n",
							"                                        ['ESLCOUNT', 'integer', 'no-op'],\r\n",
							"                                        ['BoarderCount', 'integer', 'no-op'],\r\n",
							"                                        ['OverseasStudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['DistanceEducationCount', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousDistanceEducationCount', 'integer', 'no-op'],\r\n",
							"                                        ['StudentOnVisaCount', 'integer', 'no-op'],\r\n",
							"                                        ['StudentOnBridgeVisaCount', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousBoardersCount', 'integer', 'no-op'],\r\n",
							"                                        ['SWDDistanceEdCount', 'integer', 'no-op'],\r\n",
							"                                        ['NotStatedIndigenousPrimaryCount', 'integer', 'no-op'],\r\n",
							"                                        ['NotStatedIndigenousSecondaryCount', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTECount', 'integer', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentEnrolment'] = [\r\n",
							"                                        ['UIDEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentSubmitted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentStarted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentEnded', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['EslYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LboteYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['SwdYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentFTE', 'double', 'no-op'],\r\n",
							"                                        ['SKMainCampus', 'integer', 'no-op']\r\n",
							"                                        ]\r\n",
							"        self.schemas['DMPersonDemographic'] = [\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['BKPerson', 'string', 'no-op'],\r\n",
							"                                        ['PersonType', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Title', 'string', 'no-op'],\r\n",
							"                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['LastName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['SecondMiddleName', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddress', 'string', 'no-op'],\r\n",
							"                                        ['UsualTransport', 'string', 'no-op'],\r\n",
							"                                        ['HomePhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['MobileNumber', 'string', 'no-op'],\r\n",
							"                                        ['DateOfDeath', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'string', 'no-op'],\r\n",
							"                                        ['RecievesESL', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['InterpreterRequired', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['ATSIId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountryDesc', 'string', 'no-op'],\r\n",
							"                                        ['NationalityId', 'integer', 'no-op'],\r\n",
							"                                        ['NationalityDesc', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassName', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryDate', 'string', 'no-op'],\r\n",
							"                                        ['YouthAllowance', 'string', 'no-op'],\r\n",
							"                                        ['GovernmentFunded', 'string', 'no-op'],\r\n",
							"                                        ['GovCode2', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded', 'string', 'no-op'],\r\n",
							"                                        ['LivingArrangements', 'string', 'no-op'],\r\n",
							"                                        ['ResidentialStatus', 'string', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['AmbulanceSubscriber', 'string', 'no-op'],\r\n",
							"                                        ['UserName', 'string', 'no-op'],\r\n",
							"                                        ['Occupation', 'string', 'no-op'],\r\n",
							"                                        ['OccupationGroup', 'string', 'no-op'],\r\n",
							"                                        ['Employer', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesBH', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesAH', 'string', 'no-op'],\r\n",
							"                                        ['EarliestMilestoneDate', 'string', 'no-op'],\r\n",
							"                                        ['Contactable', 'string', 'no-op'],\r\n",
							"                                        ['EmailAllowed', 'string', 'no-op'],\r\n",
							"                                        ['SMSAllowed', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToMedia', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToInternal', 'string', 'no-op'],\r\n",
							"                                        ['AuthenticationMode', 'string', 'no-op'],\r\n",
							"                                        ['FeeMode', 'string', 'no-op'],\r\n",
							"                                        ['ImportMode', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['RequiresESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityFundedInt', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE_YN', 'string', 'no-op'],\r\n",
							"                                        ['Disability_YN', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded_YN', 'string', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['CommunicationPreference', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op'],\r\n",
							"                                        ['ProgramCode', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligiousOrLay', 'string', 'no-op'],\r\n",
							"                                        ['Parish', 'string', 'no-op'],\r\n",
							"                                        ['ImmunisationRecordSighted', 'string', 'no-op'],\r\n",
							"                                        ['HomeTown', 'string', 'no-op'],\r\n",
							"                                        ['HeadLiceCheckAllowed', 'string', 'no-op'],\r\n",
							"                                        ['TownOfBirth', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"        \r\n",
							"\r\n",
							"        self.schemas['DMStudent'] = [\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['BKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseName', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassId', 'integer', 'no-op'],   ## no-op\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['VisaIdentificationNumber', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['VisaExpiryData', 'date', 'no-op'],   ## no-op\r\n",
							"                                        ['VisaEndDate', 'date', 'no-op'],   ## no-op\r\n",
							"                                        ['CitizenshipResidencyStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['CitizenshipResidencyStatusDesc', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['SingleNameOnly', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['OfficialFirstName', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['OfficialSurname', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['PreferredSurname', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['DOB', 'date', 'no-op'], ## no-op\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['RollGroup', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['ESLYesNo', 'string', 'no-op'],\r\n",
							"                                        ['EslLanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['ESLLanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['SWDYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SwdId', 'integer', 'no-op'],\r\n",
							"                                        ['SwdSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressStreet', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentAddressPostCode', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['BKStudentAddressState', 'integer', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentAddressState', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentAddressGeoData', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLongitude', 'double', 'no-op'], #changed 'decimal' to 'double' (float doesn't work)\r\n",
							"                                        ['StudentAddressLatitude', 'double', 'no-op'], #changed 'decimal' to 'double' (float doesn't work)\r\n",
							"                                        ['HomePhone', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['HomeEmail', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentMobile', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentEmail', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1FirstName', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1Surname', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1Phone', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1Mobile', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1Email', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2Surname', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2Phone', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2Mobile', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2Email', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BaptismDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstReconciliationDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstEucharistDate', 'date', 'no-op'],\r\n",
							"                                        ['ConfirmationDate', 'date', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'timestamp', 'no-op'], #changed 'string' to 'timestamp'\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['MainCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op']\r\n",
							"                                        ]    \r\n",
							"\r\n",
							"        self.schemas['DMStudentOrganisationDetails'] = [\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentOrganisationDetails', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserEmail', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['DateAppliedFor', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentConditions', 'string', 'no-op'],\r\n",
							"                                        ['TransportDetails', 'string', 'no-op'],\r\n",
							"                                        ['IntendedFutureSchool', 'string', 'no-op'],\r\n",
							"                                        ['LockerDetails', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['Status', 'string', 'no-op'],\r\n",
							"                                        ['GetPersonPhotoURL', 'string', 'no-op'],\r\n",
							"                                        ['BoarderType', 'string', 'no-op'],\r\n",
							"                                        ['CensusStartDate', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentCompassURL', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentWithdrawalReason', 'string', 'no-op'],\r\n",
							"                                        ['ExternalScholarship', 'string', 'no-op'],\r\n",
							"                                        ['DateNotifiedOfLeaving', 'string', 'no-op']\r\n",
							"                                    ]  \r\n",
							"\r\n",
							"        self.schemas['DMStudentSchoolHistory'] = [ \r\n",
							"                                        ['SKStudentSchoolHistory', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentSchoolHistory', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['SchoolStartDate', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEndDate', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelFinish', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                    ] \r\n",
							"\r\n",
							"        self.schemas['DMStudentType'] = [ \r\n",
							"                                        ['SKStudentType', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentType', 'string', 'no-op'],\r\n",
							"                                        ['StudentType', 'string', 'no-op'],\r\n",
							"                                        ['StudentStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']\r\n",
							"                                    ]   \r\n",
							"                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMDetailedStudentPreSubmission', self.schemas['DMDetailedStudentPreSubmission'], 'LastUpdateDate', 'SKDetailedStudentPreSubmission')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactPersonMilestone', self.schemas['DMFactPersonMilestone'], 'LastUpdateDate', 'SKPersonMilestone')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactStudent', self.schemas['DMFactStudent'], 'LastUpdateDate', 'FullTimeStudentSummaryId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactStudentEnrolment', self.schemas['DMFactStudentEnrolment'], 'LastUpdateDate', 'UIDEnrolmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPersonDemographic', self.schemas['DMPersonDemographic'], 'LastUpdateDate', 'SKPerson')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStudent', self.schemas['DMStudent'], 'LastUpdateDate', 'SKStudent')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStudentOrganisationDetails', self.schemas['DMStudentOrganisationDetails'], 'LastUpdateDate', 'SKStudentOrganisationDetails')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStudentSchoolHistory', self.schemas['DMStudentSchoolHistory'], 'LastUpdateDate', 'SKStudentSchoolHistory')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStudentType', self.schemas['DMStudentType'], 'LastUpdateDate', 'SKStudentType')\r\n",
							"\r\n",
							"student_profile = Student_profile()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SubjectExclusionList_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ccf0d269-75da-4955-afbf-703badbeff85"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class SubjectExclusionList_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='SubjectExclusionList', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['SubjectExclusionList'] = [\r\n",
							"                                        ['SubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['CampusID', 'integer', 'no-op'],\r\n",
							"                                        ['SubjectShortName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectLongName', 'string', 'no-op'],\r\n",
							"                                        ['Include', 'string', 'no-op'],\r\n",
							"                                        ['SKID', 'string', 'no-op']                                                               \r\n",
							"                                    ]\r\n",
							"\r\n",
							"        \r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'SubjectExclusionList', self.schemas['SubjectExclusionList'], None, 'SKID')\r\n",
							"\r\n",
							"subjectexclusionlist_object = SubjectExclusionList_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SupportingDataCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a82dd2db-2096-456c-a6d5-e287b462751a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class SupportingDataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"    def createFoldersForAll(self):\r\n",
							"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"\r\n",
							"            destination = file.name\r\n",
							"            \r\n",
							"            # copy the file to the created folder\r\n",
							"            self._copyToFolder(file, destination)\r\n",
							"\r\n",
							"\r\n",
							"    def _copyToFolder(self, file, destination):\r\n",
							"        \"\"\" Moves the file to a folder that is based on the filename without its file extension\"\"\"\r\n",
							"        tokens = destination.split(\".\")\r\n",
							"        target = self.stage1np + '/' + tokens[0] +'/' + file.name\r\n",
							"        mssparkutils.fs.mv(file.path, target, True) # will create the new dir and move file into it\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
							"supportingdatacopy = SupportingDataCopy(source_folder)\r\n",
							"\r\n",
							"supportingdatacopy.createFoldersForAll()"
						],
						"outputs": [],
						"execution_count": 28
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SupportingData_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "439c4399-8771-44e1-aa1a-31fe4616b82c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class SupportingData_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='_SupportData', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['SchoolList'] = [\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['Area', 'string', 'no-op'],\r\n",
							"                                        ['Location', 'string', 'no-op'],\r\n",
							"                                        ['Team', 'string', 'no-op'],\r\n",
							"                                        ['SchoolType', 'string', 'no-op'],\r\n",
							"                                        ['Boarding', 'integer', 'no-op'],\r\n",
							"                                        ['SMYL', 'integer', 'no-op'],\r\n",
							"                                        ['LastICSEA', 'integer', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'SchoolList', self.schemas['SchoolList'], None, 'SchoolId')\r\n",
							"\r\n",
							"\r\n",
							"supportingdata_object = SupportingData_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform_Functions_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3053e60b-ce98-427b-b4d0-b7a70da6fa6b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import when, max, regexp_replace, col, concat_ws, concat, udf, lit, regexp_replace, split, upper, date_format, to_date, first\r\n",
							"from pyspark.sql.types import StringType\r\n",
							"from pyspark.sql.window import Window"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMYearLevel_pseudo(df):\r\n",
							"    # create display name\r\n",
							"    df = df.withColumn(\"DisplayName\", when(df.BusinessDesc == \"Unknown\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"Ungraded\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"SecondaryUngraded\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"PrimaryUngraded\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"Childcare\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"4yo Kindergarten\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"3yo Kindergarten\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"TwoYearsBeforeYear1\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"Pre-Year 1\", \"Prep\")\r\n",
							"                                        .when(df.BusinessDesc == \"Pre-School\", \"Prep\")\r\n",
							"                                        .when(df.BusinessDesc == \"OneYearBeforeYear1\", \"Prep\")\r\n",
							"                                        .otherwise(df.BusinessDesc)\r\n",
							"                        )\r\n",
							"\r\n",
							"    # create 'short' name \r\n",
							"    df = df.withColumn(\"ShortName\", when(df.DisplayName == \"\", \"\")\r\n",
							"                                    .when(df.DisplayName == \"Prep\", \"P\")\r\n",
							"                                    .otherwise(split(df.DisplayName, \" \")[-1])\r\n",
							"                        )\r\n",
							"\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMCampus_pseudo(df):\r\n",
							"        df = df.filter(df.DioceseName == 'Townsville') \\\r\n",
							"                .filter(df.SchoolName !=  'Townsville Catholic Education Office') \\\r\n",
							"                .filter(df.SchoolName !=  'Canossa Convent School') \\\r\n",
							"                .filter(df.SchoolName !=  'St Patrick\\'s College Townsville') \\\r\n",
							"                .filter(df.SchoolId != 6814)\r\n",
							"        \r\n",
							"        # load the school list to get the 'area' into DMCampus\r\n",
							"        sourcep = oea.stage2p\r\n",
							"        school_df = spark.read.load(sourcep + \"/_SupportData/SchoolList_pseudo\", format='delta')\r\n",
							"        \r\n",
							"        school_df = school_df.withColumnRenamed('SchoolId', 'xSchoolId')\r\n",
							"\r\n",
							"        df = df.withColumnRenamed('SchoolName', 'xSchoolName')\r\n",
							"\r\n",
							"        newdf = df.join(school_df, df.SchoolId == school_df.xSchoolId, \"inner\")\r\n",
							"        \r\n",
							"        final_df = newdf.select(col(\"SchoolId\"), col(\"SchoolName\"), col(\"Area\"), col(\"Location\"), \\\r\n",
							"                                col(\"Team\"), col(\"SchoolType\"), col(\"Boarding\"), col(\"SMYL\"), col(\"LastICSEA\"), \\\r\n",
							"                                col(\"SKCampus\"), col(\"BKCampusId\"), col(\"CampusSuburbAndName\"), col(\"SchoolSuburbAndName\"))\r\n",
							"\r\n",
							"        final_df = final_df.withColumn(\"SchoolNameAndArea\", concat_ws(\" - \", \"SchoolName\", \"Area\"))\r\n",
							"\r\n",
							"        return final_df\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMDate_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmdate_pseudo')\r\n",
							"\r\n",
							"    calendar_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"    calendar_df.createOrReplaceTempView('vw_df_calendar')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select d.*, c.skyear from vw_df_dmdate_pseudo d left join vw_df_calendar c on d.year = c.year where d.year >= 2008 and d.year <= 2030\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMStudent_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmstudent_pseudo')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select * from vw_df_dmstudent_pseudo where length(bksourcestudentid) = 36\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMNAPLAN_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmnaplan_pseudo')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select * from vw_df_dmnaplan_pseudo where PersistentStudentID <> -1\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMPersonDemographic_pseudo(df):\r\n",
							"\r\n",
							"    final_df = df.filter(df.Ceider != -1) \\\r\n",
							"                .filter( (df.PersonType == \"Student\") | (df.PersonType == \"Staff\") ) \\\r\n",
							"                .drop(\"UsualTransport\") \\\r\n",
							"                .drop(\"ContactNotesBH\") \\\r\n",
							"                .drop(\"ContactNotesAH\") \\\r\n",
							"                .drop(\"OrganisationUserId\") \\\r\n",
							"                .drop(\"ProgramCode\") \\\r\n",
							"                .drop(\"Disability_YN\") \\\r\n",
							"                .drop(\"DisabilityFundedInt\") \\\r\n",
							"                .drop(\"ReceivesESL_YN\") \\\r\n",
							"                .drop(\"ReceivesESLInt\") \\\r\n",
							"                .drop(\"RequiresESL_YN\") \\\r\n",
							"                .drop(\"RequresESLInt\") \\\r\n",
							"                .drop(\"LBOTE_YN\") \\\r\n",
							"                .drop(\"LBOTEInt\") \\\r\n",
							"                .drop(\"AccessRestrictions_YN\")\r\n",
							"\r\n",
							"    return final_df\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### REMOVE THIS"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMFactPATResults_pseudoREMOVE(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmfactpatresults_pseudo')\r\n",
							"\r\n",
							"    datedetails_df = spark.read.load(sourcep + \"/ACER/DMPATStudentTestGrouping_pseudo\", format='delta')\r\n",
							"\r\n",
							"    datedetails_df.createOrReplaceTempView('vw_df_dmpatstudenttestgrouping')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select a.*, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime from vw_df_dmfactpatresults_pseudo a left join vw_df_dmpatstudenttestgrouping b on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping inner join (select skyear, skacerstudent, skpattest, skcampus, scalescore, datecomplete, timecomplete, combineddatetime, max(skpatresults) as maxskpatresults from (select a.skpatresults, a.skyear, a.skacerstudent, a.skpattest, a.skcampus,  a.ScaleScore,  b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime from vw_df_dmfactpatresults_pseudo a left join vw_df_dmpatstudenttestgrouping b on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping inner join (select skyear, skacerstudent, skpattest, skcampus, combineddatetime, max(scalescore) as maxscalescore from (select a.skyear, a.skacerstudent, a.skpattest, a.skcampus,  a.ScaleScore,  b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime from vw_df_dmfactpatresults_pseudo a left join vw_df_dmpatstudenttestgrouping b on a.skpatstudenttestgrouping = b.skpatstudenttestgrouping inner join (select skyear, skacerstudent, skpattest, skcampus, max(concat(datecomplete, ' ', right(left(timecomplete, 10), 8))) as latestdate from (select a.*, orig.skpatstudenttestgrouping, orig.skacerstanine, ScaleScore, skpatresults, b.datecomplete, b.timecomplete, concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) as combineddatetime from (select skyear, skacerstudent, skpattest, skcampus, count(*) as counttotal from vw_df_dmfactpatresults_pseudo where skpattest not in (43, 54, 65, 66, 76, 79, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112) group by skyear, skacerstudent, skpattest, skcampus) a left join vw_df_dmfactpatresults_pseudo orig on a.skyear = orig.skyear and a.skacerstudent = orig.skacerstudent and a.skpattest = orig.skpattest and a.skcampus = orig.skcampus left join vw_df_dmpatstudenttestgrouping b on orig.skpatstudenttestgrouping = b.skpatstudenttestgrouping) total group by skyear, skacerstudent, skpattest, skcampus) inner1 on a.skyear = inner1.skyear and a.skacerstudent = inner1.SKACERStudent and a.SKPATTest = inner1.SKPATTest and a.SKCampus = inner1.SKCampus and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner1.latestdate ) inner2 group by skyear, skacerstudent, skpattest, skcampus, combineddatetime ) inner3 on a.skyear = inner3.skyear and a.skacerstudent = inner3.SKACERStudent and a.SKPATTest = inner3.SKPATTest and a.SKCampus = inner3.SKCampus and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner3.combineddatetime ) inner4 group by skyear, skacerstudent, skpattest, skcampus, scalescore, datecomplete, timecomplete, combineddatetime ) inner5 on a.skyear = inner5.skyear and a.skacerstudent = inner5.SKACERStudent and a.SKPATTest = inner5.SKPATTest and a.SKCampus = inner5.SKCampus and concat(b.datecomplete, ' ', right(left(b.timecomplete, 10), 8)) = inner5.combineddatetime and a.SKPATResults = inner5.maxskpatresults\")\r\n",
							"\r\n",
							"    return final_df\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMFactPATResults_pseudo(df):\r\n",
							"    # Create a window specification for ordering rows\r\n",
							"    window_spec = Window.partitionBy('SKYear', 'SKYearLevel', 'SKPATTest').orderBy('NormMeanScaledScore')\r\n",
							"\r\n",
							"    df = df.withColumn('NormMeanScaledScore', when(col('NormMeanScaledScore').isNull(), first(col('NormMeanScaledScore'), ignorenulls=True).over(window_spec)).otherwise(col('NormMeanScaledScore')))\r\n",
							"\r\n",
							"    return df\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMPATTest_pseudo(df):\r\n",
							"    df = df.withColumn('SummaryGroups', when(df.PATTestName == \"PAT Maths 4th Edition\", \"Maths\")\r\n",
							"                                        .when(df.PATTestName == \"PAT Maths Plus\", \"Maths\")\r\n",
							"                                        .when(df.PATTestName == \"PAT Maths Adaptive\", \"Maths\")\r\n",
							"                                        .when(df.PATTestName == \"PAT Reading 5th Edition\", \"Reading\")\r\n",
							"                                        .when(df.PATTestName == \"PAT-R Comprehension\", \"Reading\")\r\n",
							"                                        .when(df.PATTestName == \"PAT Reading Adaptive\", \"Reading\")\r\n",
							"                                        .otherwise(\"Other\")\r\n",
							"                        )\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def CompassODSStudentOrganisationMilestones_pseudo(df):\r\n",
							"\r\n",
							"    # this will get a the first substring up to the first hyphen \r\n",
							"    get_substring_udf = udf(lambda x: x.split(\"-\")[0] if \"-\" in x else x, StringType())\r\n",
							"\r\n",
							"    df = df.withColumn('xOrganisationName', get_substring_udf(col('OrganisationName')))\r\n",
							"    df = df.drop('OrganisationName')\r\n",
							"    df = df.withColumnRenamed('xOrganisationName', 'OrganisationName')\r\n",
							"\r\n",
							"    return df\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Early Years Testing"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def EarlyYearsResults_pseudo(df):\r\n",
							"\r\n",
							"    # filter out the in-progress tests (incomplete tests)\r\n",
							"    df = df.filter(df.Status == \"Completed\")\r\n",
							"\r\n",
							"    question_columns = [item for item in df.columns if item.startswith('Ques')]\r\n",
							"\r\n",
							"    for col in question_columns:\r\n",
							"            df = df.withColumn(col, when(df[col] == 'Correct', lit('1'))\r\n",
							"                                .otherwise(when(df[col] == 'Incorrect', lit('0'))\r\n",
							"                                .otherwise(when(df[col] == 'Used structure correctly', lit('1'))\r\n",
							"                                .otherwise(when(df[col] == 'Used structure incorrectly', lit('0'))\r\n",
							"                                .otherwise(when(df[col] == 'Other response', lit('0')))))))\r\n",
							"  \r\n",
							"    # replace errors in classes\r\n",
							"    df = df.withColumn('ClassID', regexp_replace('ClassID', 'GENP_PREP', '00GENP01'))\r\n",
							"    df = df.withColumn('ClassID', regexp_replace('ClassID', 'GEN1_Year 1', '01GEN101'))\r\n",
							"   \r\n",
							"    return df\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def EarlyYearsResultsYear2_pseudo(df):\r\n",
							"\r\n",
							"    # filter out the in-progress tests (incomplete tests)\r\n",
							"    df = df.filter(df.Status == \"Completed\")\r\n",
							"\r\n",
							"    df = df.withColumn('Ques1', when(df.Ques1.substr(1,5) == 'could', lit('could good')).otherwise(df.Ques1))\r\n",
							"\r\n",
							"    df = df.withColumn('ClassID', regexp_replace('ClassID', 'GEN2_Year 2', '02GEN201'))\r\n",
							"\r\n",
							"    #df = df.withColumn('ClassId', when(df.Ceider == '769425243', lit('GEN2_02C')).otherwise(df.ClassID))\r\n",
							"\r\n",
							"    return df\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Senior Outcomes "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def ATAR_pseudo(df):\r\n",
							"    df = df.withColumn(\"Result_Bucket\", \r\n",
							"                        when(df.Given_Name == \"No Consent\", \"No Consent\")\r\n",
							"                        .when(df.Given_Name == \"Vocational Pathway\", \"Vocational Pathway\")\r\n",
							"                        .otherwise(when(df.ATAR < 30, \"< 30\")\r\n",
							"                                    .when(((df.ATAR < 40) & (df.ATAR >= 30)), \"39.95 - 30\")\r\n",
							"                                    .when(((df.ATAR < 50) & (df.ATAR >= 40)), \"49.95 - 40\")\r\n",
							"                                    .when(((df.ATAR < 60) & (df.ATAR >= 50)), \"59.95 - 50\")\r\n",
							"                                    .when(((df.ATAR < 70) & (df.ATAR >= 60)), \"69.95 - 60\")\r\n",
							"                                    .when(((df.ATAR < 80) & (df.ATAR >= 70)), \"79.95 - 70\")\r\n",
							"                                    .when(((df.ATAR < 90) & (df.ATAR >= 80)), \"89.95 - 80\")\r\n",
							"                                    .when(df.ATAR >= 90, \"99.95 - 90\")\r\n",
							"                                )\r\n",
							"                    )\r\n",
							"\r\n",
							"    df = df.withColumn(\"Order\", \r\n",
							"                        when(df.Result_Bucket == \"< 30\", 8)\r\n",
							"                        .when(df.Result_Bucket == \"39.95 - 30\", 7)\r\n",
							"                        .when(df.Result_Bucket == \"49.95 - 40\", 6)\r\n",
							"                        .when(df.Result_Bucket == \"59.95 - 50\", 5)\r\n",
							"                        .when(df.Result_Bucket == \"69.95 - 60\", 4)\r\n",
							"                        .when(df.Result_Bucket == \"79.95 - 70\", 3)\r\n",
							"                        .when(df.Result_Bucket == \"89.95 - 80\", 2)\r\n",
							"                        .when(df.Result_Bucket == \"99.95 - 90\", 1)\r\n",
							"                        .when(df.Result_Bucket == \"No Consent\", 9)\r\n",
							"                        .otherwise(10)\r\n",
							"                    )\r\n",
							"    \r\n",
							"    # also create a SK ID that will connect to the senior outcomes table\r\n",
							"    df = df.withColumn(\"SKShortID\", upper(concat_ws(\"-\", \"SchoolId\", \"Year\", \"Family_Name\", \"Given_Name\")))\r\n",
							"\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def StudentLevel_pseudo(df):\r\n",
							"    df = df.withColumn(\"CampusID\", \r\n",
							"                        when(df.centre_code == 1591, 15370)\r\n",
							"                        .when(df.centre_code == 1653, 17253)\r\n",
							"                        .when(df.centre_code == 5328, 17227)\r\n",
							"                        .when(df.centre_code == 5331, 2529)\r\n",
							"                        .when(df.centre_code == 5373, 13492)\r\n",
							"                        .when(df.centre_code == 5421, 17223)\r\n",
							"                        .when(df.centre_code == 5422, 17240)\r\n",
							"                        .when(df.centre_code == 5429, 17225)\r\n",
							"                        .when(df.centre_code == 5434, 17247)\r\n",
							"                        .when(df.centre_code == 7578, 550)\r\n",
							"                    )\r\n",
							"    \r\n",
							"    #df = df.withColumn(\"FirstNameOnly\", when(\"given_names\".contains(\" \"), split(\"given_names\", \" \").getItem(0)).otherwise(\"given_names\"))\r\n",
							"\r\n",
							"    df = df.withColumn(\"SKLongID\", upper(concat_ws(\"-\", split(\"last_name\", \" \").getItem(0), split(\"given_names\", \" \").getItem(0), \"birth_date\")))\r\n",
							"\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def CompassODSStudentDemographicFull_pseudo(df):\r\n",
							"    \"\"\" create the SKLongID column for the ODS Student Demographics table \"\"\"\r\n",
							"\r\n",
							"    # clean up the data of birth column\r\n",
							"    df = df.withColumn(\"DOB_YearFirstFormat\", to_date(col(\"DateOfBirth\")))\r\n",
							"\r\n",
							"    df = df.withColumn(\"DOB\", date_format(\"DOB_YearFirstFormat\", \"dd/MM/yyyy\"))\r\n",
							"\r\n",
							"    df = df.withColumn(\"SKLongID\", upper(concat_ws(\"-\", split(\"LastName\", \" \").getItem(0), split(\"FirstName\", \" \").getItem(0), \"DOB\")))\r\n",
							"\r\n",
							"    df = df.drop(\"DOB_YearFirstFormat\", \"DOB\")\r\n",
							"\r\n",
							"    # filter for isCurrent records only\r\n",
							"    df = df.filter(col(\"Iscurrent\") == \"True\")\r\n",
							"\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def AEResultsCombined(df):\r\n",
							"    # create an extra column to combine year and semester into one value\r\n",
							"    df = df.withColumn('YearSemesterValue', concat('Year', 'Semester'))\r\n",
							"    df = df.withColumn(\"YearSemesterDescription\", concat(df.Year, lit(\" Semester \"), df.Semester))\r\n",
							"\r\n",
							"    df = df.withColumn(\"UniversalResult\", when(df.Result == \"A\", \"A/AP\") \r\n",
							"                                            .when(df.Result == \"B\", \"B/MC\")\r\n",
							"                                            .when(df.Result == \"C\", \"C/WW\")\r\n",
							"                                            .when(df.Result == \"D\", \"D/EX\")\r\n",
							"                                            .when(df.Result == \"E\", \"E/BA\")\r\n",
							"                                            .when(df.Result == \"AP\", \"A/AP\")\r\n",
							"                                            .when(df.Result == \"MC\", \"B/MC\")\r\n",
							"                                            .when(df.Result == \"WW\", \"C/WW\")\r\n",
							"                                            .when(df.Result == \"EX\", \"D/EX\")\r\n",
							"                                            .when(df.Result == \"BA\", \"E/BA\")\r\n",
							"                                            .otherwise(df.Result)\r\n",
							"                                            \r\n",
							"                        )\r\n",
							"\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transformations_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "06b16fbd-2907-45fd-a439-63bb3eb5a766"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Transformation functions for each data table ingested "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage3/Transform_Functions_py"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def transformation(df, name):\r\n",
							"\r\n",
							"    if name == \"DMYearLevel_pseudo\":\r\n",
							"        final_df = DMYearLevel_pseudo(df)\r\n",
							"    elif name == \"DMCampus_pseudo\":\r\n",
							"        final_df = DMCampus_pseudo(df)\r\n",
							"    elif name == \"DMDate_pseudo\":\r\n",
							"        final_df = DMDate_pseudo(df)\r\n",
							"    elif name == \"DMStudent_pseudo\":\r\n",
							"        final_df = DMStudent_pseudo(df)\r\n",
							"    elif name == \"DMNAPLAN_pseudo\":\r\n",
							"        final_df = DMNAPLAN_pseudo(df)\r\n",
							"    elif name == \"DMPersonDemographic_pseudo\":\r\n",
							"        final_df = DMPersonDemographic_pseudo(df)\r\n",
							"    elif name == \"DMFactPATResults_pseudo\":\r\n",
							"        final_df = DMFactPATResults_pseudo(df)  \r\n",
							"    elif name == \"DMPATTest_pseudo\":\r\n",
							"        final_df = DMPATTest_pseudo(df)  \r\n",
							"    elif name == \"EarlyYearsResults_pseudo\":\r\n",
							"        final_df = EarlyYearsResults_pseudo(df)\r\n",
							"    elif name == \"EarlyYearsResultsYear2_pseudo\":\r\n",
							"        final_df = EarlyYearsResultsYear2_pseudo(df)\r\n",
							"    elif name == \"ATAR_pseudo\":\r\n",
							"        final_df = ATAR_pseudo(df)\r\n",
							"    elif name == \"StudentLevel_pseudo\":\r\n",
							"        final_df = StudentLevel_pseudo(df)\r\n",
							"    elif name == \"CompassODSStudentDemographicFull_pseudo\":\r\n",
							"        final_df = CompassODSStudentDemographicFull_pseudo(df)\r\n",
							"    elif name == \"AEResultsCombined_pseudo\":\r\n",
							"        final_df = AEResultsCombined(df)\r\n",
							"    else:  \r\n",
							"        final_df = df\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# call this function with the name of the table to transform\r\n",
							"def transform(tableName):\r\n",
							"\r\n",
							"    try:\r\n",
							"        df = spark.read.load(f\"{tableName.path}\", format='delta')\r\n",
							"        return transformation(df, tableName.name)\r\n",
							"\r\n",
							"    except AnalysisException as e:\r\n",
							"        raise ValueError(f\"Failed to load {tableName.path}. Check the paths.\\nMore info below:\\n\" + str(e)) \r\n",
							"    \r\n",
							"    return None"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transforms_Connector')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9ae123e6-dd80-483d-9626-12c145327334"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Load data from Stage2"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage3/Transformations_py"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage3/Transform_Functions_py"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stage2 locations defined in the base OEA\r\n",
							"source_p = oea.stage2p \r\n",
							"source_np = oea.stage2np\r\n",
							"\r\n",
							"# stage3 locations defined in OEA\r\n",
							"destination_p = oea.stage3p\r\n",
							"destination_np = oea.stage3np\r\n",
							"\r\n",
							"# stage3 version (eg. pilot)\r\n",
							"version = 'pilot'\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def saveToTarget(df, target_system, target_path):\r\n",
							"    path = f'{target_system}/{target_path}'\r\n",
							"    df.write.format('delta').option(\"overwriteSchema\", \"true\").save(path, header=True, mode=\"overwrite\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# load data, transform then save from each source folder to the destination \r\n",
							"def stage3Transform(source, destination):\r\n",
							"    # source - for each major folder, iterate through each subfolder\r\n",
							"    folders = mssparkutils.fs.ls(source)\r\n",
							"    for folder in folders:\r\n",
							"        #ignore files\r\n",
							"        if folder.isFile:\r\n",
							"            continue\r\n",
							"        # iterate through each subfolder\r\n",
							"        subfolders = mssparkutils.fs.ls(folder.path)\r\n",
							"        for subfolder in subfolders:\r\n",
							"            #There shouldn't be any files at this directory level \r\n",
							"            if subfolder.isFile:\r\n",
							"                continue\r\n",
							"\r\n",
							"            # run transformations\r\n",
							"            transformed_df = transform(subfolder)\r\n",
							"            # if transformation has worked..\r\n",
							"            if transformed_df:\r\n",
							"                saveToTarget(transformed_df, destination, f'{version}/{subfolder.name}')\r\n",
							"            else:\r\n",
							"                print(f'Errors in Transform - Skipping: {folder.name}/{subfolder.name}')\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"stage3Transform(source_p, destination_p)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stage3Transform(source_np, destination_np)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Creation of additional views"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run Stage3/SQL_Transforms"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run Stage3/PySpark_Transforms"
						],
						"outputs": [],
						"execution_count": 24
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark3p1sm')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 8,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiasoutheast"
		}
	]
}