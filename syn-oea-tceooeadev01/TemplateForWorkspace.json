{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "syn-oea-tceooeadev01"
		},
		"LS_Azure_SQL_DB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Azure_SQL_DB'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().dbServer};Initial Catalog=@{linkedService().dbName};User ID=@{linkedService().userName}"
		},
		"LS_SQL_Serverless_OEA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_Serverless_OEA'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=syn-oea-tceooeadev01-ondemand.sql.azuresynapse.net;Initial Catalog=@{linkedService().dbName}"
		},
		"syn-oea-tceooeadev01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syn-oea-tceooeadev01-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:syn-oea-tceooeadev01.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"CeNet_DataBlend_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "CeNet-Datablend-DB"
		},
		"LS_ADLS_OEA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeatceooeadev01.dfs.core.windows.net"
		},
		"LS_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseURL}"
		},
		"LS_KeyVault_OEA_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-oea-tceooeadev01.vault.azure.net/"
		},
		"syn-oea-tceooeadev01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeatceooeadev01.dfs.core.windows.net"
		},
		"tmp_datablend_dev_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "temp-datablend-db"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ACER_part1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_ymt",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_ymt",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/ACER/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_ACER_part1",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_ACER_part1",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMACERStanine"
								},
								"destination": {
									"fileName": "dbovwDMACERStanine.csv"
								}
							},
							{
								"source": {
									"table": "vwDMACERStudent"
								},
								"destination": {
									"fileName": "dbovwDMACERStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMCalendarYear"
								},
								"destination": {
									"fileName": "dbovwDMCalendarYear.csv"
								}
							},
							{
								"source": {
									"table": "vwDMDate"
								},
								"destination": {
									"fileName": "dbovwDMDate.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPATResponse"
								},
								"destination": {
									"fileName": "dbovwDMFactPATResponse.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPATResults"
								},
								"destination": {
									"fileName": "dbovwDMFactPATResults.csv"
								}
							},
							{
								"source": {
									"table": "vwDMGender"
								},
								"destination": {
									"fileName": "dbovwDMGender.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPATStudentTestGrouping"
								},
								"destination": {
									"fileName": "dbovwDMPATStudentTestGrouping.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPATTest"
								},
								"destination": {
									"fileName": "dbovwDMPATTest.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPersonDemographic"
								},
								"destination": {
									"fileName": "dbovwDMPersonDemographic.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSchoolTermWeek"
								},
								"destination": {
									"fileName": "dbovwDMSchoolTermWeek.csv"
								}
							},
							{
								"source": {
									"table": "vwDMYearLevel"
								},
								"destination": {
									"fileName": "dbovwDMYearLevel.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ACER_part1')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ACER_part1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_ACER_part2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_2p9",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/ACER/dbovwDMCampus.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select \r\nSKCampus,\r\nBKCampusId,\r\nSchoolId,\r\nSchoolName,\r\nDioceseId,\r\nDioceseName,\r\nCongregationId,\r\nCongregationName,\r\nIsSystemic,\r\nCampusName,\r\nCampusAddressStreet,\r\nCampusAddressSuburb,\r\nCampusAddressPostCode,\r\nBKCampusAddressState,\r\nCampusAddressState,\r\ncast(CampusAddressGeoData as nvarchar),\r\nCampusAddressLongitude,\r\nCampusAddressLatitude,\r\nSocioEconomicStatus,\r\nICSEACode,\r\nCampusEmail,\r\nCampusPrincipalEmail,\r\nCampusSchoolLevelId,\r\nCampusSchoolLevelSifCode,\r\nCampusSchoolLevelSifDesc,\r\nCampusSchoolSubTypeId,\r\nCampusSchoolSubTypeDesc,\r\nCoEdStatusId,\r\nCoEdStatusSifDesc,\r\nCampusFocusCode,\r\nCampusRegion,\r\nCampusCluster,\r\nPrimarySort,\r\nSecondarySort,\r\nCreateDate,\r\nLastUpdateDate,\r\nEffectiveStartDate,\r\nEffectiveEndDate,\r\nIsCurrent,\r\nScdReason,\r\nCampusSuburbAndName,\r\nSchoolSuburbAndName,\r\nSchoolAddressStreet,\r\nSchoolAddressSuburb,\r\nSchoolAddressPostCode,\r\nSchoolAddressState,\r\ncast(SchoolAddressGeoData as nvarchar),\r\nSchoolAddressLongitude,\r\nSchoolAddressLatitude,\r\nSchoolRegion,\r\nSchoolCluster,\r\nWebsite,\r\nBoardingStatus,\r\nCohorts,\r\nCoEdStatusSifCode,\r\nCampusPhone,\r\nSchoolPhone,\r\nDateCampusOpened,\r\nDateCampusClosed,\r\nIsCampusOpen,\r\nDateSchoolOpened,\r\nDateSchoolClosed,\r\nIsSchoolOpen,\r\nCampusStateCode,\r\nStatisticalArea1,\r\nNameofStatisticalArea1,\r\nStatisticalArea2,\r\nNameofStatisticalArea2,\r\nStatisticalArea3,\r\nNameofStatisticalArea3,\r\nStatisticalArea4,\r\nNameofStatisticalArea4,\r\nABSRemotenessArea,\r\nGeolocation,\r\nSchoolURL,\r\nAcaraSchoolId,\r\nHeadCampusAcaraId,\r\nSchoolSector,\r\nCampusType,\r\nRolledReportingDescription,\r\nNESASchoolId,\r\nCompassSchoolURL,\r\nCompassSchoolName,\r\nCompassAPIKey,\r\nAncestryFlag,\r\nLocationId\r\nfrom dbo.vwDMCampus\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ACER_part2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ACER_part2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ACER_part2')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ACER_part2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_AE')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_byg",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_byg",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/AE/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_AE",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_AE",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMAEStudent"
								},
								"destination": {
									"fileName": "dbovwDMAEStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMAEStudentDescription"
								},
								"destination": {
									"fileName": "dbovwDMAEStudentDescription.csv"
								}
							},
							{
								"source": {
									"table": "vwDMAEStudentResultId"
								},
								"destination": {
									"fileName": "dbovwDMAEStudentResultId.csv"
								}
							},
							{
								"source": {
									"table": "vwDMAESubjectCourse"
								},
								"destination": {
									"fileName": "dbovwDMAESubjectCourse.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFACTAEDC"
								},
								"destination": {
									"fileName": "dbovwDMFACTAEDC.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFACTAEDCStrengths"
								},
								"destination": {
									"fileName": "dbovwDMFACTAEDCStrengths.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudentAEResult"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentAEResult.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_AE')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_AE')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_Attendance')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_qee",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_qee",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/attendance/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_Attendance_source",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_Attendance_dest",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwAggWholeDayAttendanceBySchool"
								},
								"destination": {
									"fileName": "dbovwAggWholeDayAttendanceBySchool.csv"
								}
							},
							{
								"source": {
									"table": "vwAggWholeDayAttendanceByStudent"
								},
								"destination": {
									"fileName": "dbovwAggWholeDayAttendanceByStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactWholeDayAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactWholeDayAttendance.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_Attendance_source')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_Attendance_dest')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_MySchools')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_3hr",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_3hr",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/MySchools/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_MySchools",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_MySchools",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMFactMySchoolsAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsAttendance.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsEnrolmentsByGrade"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsEnrolmentsByGrade.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsFinance"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsFinance.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsNAPLANResults"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResults.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsNAPLANResultsSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResultsSimilarSchools.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsProfile"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsProfile.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsSeniorOutcomes"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsSeniorOutcomes.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGain"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGain.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGainSameStartingScore"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGainSameStartingScore.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsStudentGainSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsStudentGainSimilarSchools.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsVETInSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsVETInSchools.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships.csv"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsStudentGainGroup"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsStudentGainGroup.csv"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsVETClassification"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsVETClassification.csv"
								}
							},
							{
								"source": {
									"table": "vwDMMySchoolsVETStatus"
								},
								"destination": {
									"fileName": "dbovwDMMySchoolsVETStatus.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_MySchools')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_MySchools')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_NAPLAN')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_aa6",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_aa6",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{item().source.schema}.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/NAPLAN/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_NAPLAN",
											"type": "DatasetReference",
											"parameters": {
												"cw_schema": "@item().source.schema",
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_NAPLAN",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"schema": "dbo",
									"table": "NaplanData"
								},
								"destination": {
									"fileName": "dboNaplanData.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "NaplanNational"
								},
								"destination": {
									"fileName": "dboNaplanNational.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "NaplanNationalAverage"
								},
								"destination": {
									"fileName": "dboNaplanNationalAverage.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMySchoolsNAPLANResults"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResults.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactMySchoolsNAPLANResultsSimilarSchools"
								},
								"destination": {
									"fileName": "dbovwDMFactMySchoolsNAPLANResultsSimilarSchools.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANACARABands"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANACARABands.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANOnlineStudentItemResponse"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANOnlineStudentItemResponse.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANOnlineStudentTestResult"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANOnlineStudentTestResult.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNAPLANStudentResponse"
								},
								"destination": {
									"fileName": "dbovwDMFactNAPLANStudentResponse.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMFactNaplanStudentYearResult"
								},
								"destination": {
									"fileName": "dbovwDMFactNaplanStudentYearResult.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLAN"
								},
								"destination": {
									"fileName": "dbovwDMNAPLAN.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANACARAAggregate"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANACARAAggregate.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANAnswer"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANAnswer.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANAssessmentArea"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANAssessmentArea.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentItemResponse"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentItemResponse.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentResult"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentResult.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineStudentTestResultId"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineStudentTestResultId.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANStudent"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANStudent.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANStudentResponseId"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANStudentResponseId.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANTest"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANTest.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANTextResponse"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANTextResponse.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "AssessmentArea"
								},
								"destination": {
									"fileName": "NAPLANAssessmentArea.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "NAPLAN"
								},
								"destination": {
									"fileName": "NAPLANNAPLAN.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "NAPLANStudentView"
								},
								"destination": {
									"fileName": "NAPLANNAPLANStudentView.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "Student"
								},
								"destination": {
									"fileName": "NAPLANStudent.csv"
								}
							},
							{
								"source": {
									"schema": "NAPLAN",
									"table": "StudentYearResult"
								},
								"destination": {
									"fileName": "NAPLANStudentYearResult.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANOnlineTestPath"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANOnlineTestPath.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNAPLANParticipationCode"
								},
								"destination": {
									"fileName": "dbovwDMNAPLANParticipationCode.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMNaplanSourceID"
								},
								"destination": {
									"fileName": "dbovwDMNaplanSourceID.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMStateTerritory"
								},
								"destination": {
									"fileName": "dbovwDMStateTerritory.csv"
								}
							},
							{
								"source": {
									"schema": "dbo",
									"table": "vwDMExamBands"
								},
								"destination": {
									"fileName": "dbovwDMExamBands.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_NAPLAN')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_NAPLAN')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_NCCD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_mg1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_mg1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/NCCD/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_NCCD",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_NCCD",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMCensusStudentWithDisabilityId"
								},
								"destination": {
									"fileName": "dbovwDMCensusStudentWithDisabilityId.csv"
								}
							},
							{
								"source": {
									"table": "vwDMDisabilityCategoryAdjustment"
								},
								"destination": {
									"fileName": "dbovwDMDisabilityCategoryAdjustment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactCensusStudentWithDisability"
								},
								"destination": {
									"fileName": "dbovwDMFactCensusStudentWithDisability.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_NCCD')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_NCCD')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_class_period')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_lq2",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_lq2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/class_period/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_class_period",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_class_period",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMClass"
								},
								"destination": {
									"fileName": "dbovwDMClass.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPeriodAttendance"
								},
								"destination": {
									"fileName": "dbovwDMFactPeriodAttendance.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_class_period')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_class_period')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_daw",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_daw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/enrolment/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_enrolment",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_enrolment",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMEnrolmentStatus"
								},
								"destination": {
									"fileName": "dbovwDMEnrolmentStatus.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudentEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudentEnrolmentCounts"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolmentCounts.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactSubjectEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactSubjectEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPreEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMPreEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMActivity"
								},
								"destination": {
									"fileName": "dbovwDMActivity.csv"
								}
							},
							{
								"source": {
									"table": "vwDMSubject"
								},
								"destination": {
									"fileName": "dbovwDMSubject.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPreEnrolmentId"
								},
								"destination": {
									"fileName": "dbovwDMPreEnrolmentId.csv"
								}
							},
							{
								"source": {
									"table": "vwDMRollGroup"
								},
								"destination": {
									"fileName": "dbovwDMRollGroup.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_enrolment')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_enrolment')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_student_object')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_61r",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_61r",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "stage1np/student/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_student_profile_object",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_student_profile_object",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "vwDMDetailedStudentPreSubmission"
								},
								"destination": {
									"fileName": "dbovwDMDetailedStudentPreSubmission.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactPersonMilestone"
								},
								"destination": {
									"fileName": "dbovwDMFactPersonMilestone.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudent"
								},
								"destination": {
									"fileName": "dbovwDMFactStudent.csv"
								}
							},
							{
								"source": {
									"table": "vwDMFactStudentEnrolment"
								},
								"destination": {
									"fileName": "dbovwDMFactStudentEnrolment.csv"
								}
							},
							{
								"source": {
									"table": "vwDMPersonDemographic"
								},
								"destination": {
									"fileName": "dbovwDMPersonDemographic.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentOrganisationDetails"
								},
								"destination": {
									"fileName": "dbovwDMStudentOrganisationDetails.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentSchoolHistory"
								},
								"destination": {
									"fileName": "dbovwDMStudentSchoolHistory.csv"
								}
							},
							{
								"source": {
									"table": "vwDMStudentType"
								},
								"destination": {
									"fileName": "dbovwDMStudentType.csv"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_student_profile_object')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_student_profile_object')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_student_object_2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_6wf",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/student/dbovwDMStudent.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\r\nSKStudent,\r\nBKSourceStudentId,\r\nBKPersistentStudentId,\r\nCampusId,\r\nCampusName,\r\nSchoolId,\r\nSchoolName,\r\nDioceseId,\r\nDioceseName,\r\nVisaSubClassId,\r\nVisaSubClassDesc,\r\nVisaIdentificationNumber,\r\nVisaExpiryData,\r\nVisaEndDate,\r\nCitizenshipResidencyStatusId,\r\nCitizenshipResidencyStatusDesc,\r\nBoarder,\r\nSingleNameOnly,\r\nOfficialFirstName,\r\nPreferredFirstName,\r\nOfficialSurname,\r\nPreferredSurname,\r\nDOB,\r\nGenderId,\r\nGenderSifDesc,\r\nBirthCountryId,\r\nBirthCountrySifDesc,\r\nPrimaryCitizenshipCountryId,\r\nPrimaryCitizenshipCountrySifDesc,\r\nPrimaryPassportIssueCountryId,\r\nPrimaryPassportIssueCountrySifDesc,\r\nAttendanceStatusId,\r\nAttendanceStatusSifDesc,\r\nRollGroup,\r\nFFPOS,\r\nESLYesNo,\r\nEslLanguageId,\r\nESLLanguageSifDesc,\r\nLBOTEYesNo,\r\nLBOTELanguageId,\r\nLBOTELanguageSifDesc,\r\nAtsiId,\r\nATSIDesc,\r\nReligionId,\r\nReligionDesc,\r\nSWDYesNo,\r\nSwdId,\r\nSwdSifDesc,\r\nStudentAddressStreet,\r\nStudentAddressSuburb,\r\nStudentAddressPostCode,\r\nBKStudentAddressState,\r\nStudentAddressState,\r\ncast(StudentAddressGeoData as nvarchar),\r\nStudentAddressLongitude,\r\nStudentAddressLatitude,\r\nHomePhone,\r\nHomeEmail,\r\nStudentMobile,\r\nStudentEmail,\r\nGuardian1FirstName,\r\nGuardian1Surname,\r\nGuardian1Phone,\r\nGuardian1Mobile,\r\nGuardian1Email,\r\nGuardian1OccupationalGroupId,\r\nGuardian1OccupationalGroupSifDesc,\r\nGuardian1EducationSchoolLevelId,\r\nGuardian1EducationSchoolLevelSifDesc,\r\nGuardian1EducationNonSchoolLevelId,\r\nGuardian1EducationNonSchoolLevelSifDesc,\r\nGuardian1LanguageId,\r\nGuardian1LanguageSifDesc,\r\nGuardian2FirstName,\r\nGuardian2Surname,\r\nGuardian2Phone,\r\nGuardian2Mobile,\r\nGuardian2Email,\r\nGuardian2OccupationalGroupId,\r\nGuardian2OccupationalGroupSifDesc,\r\nGuardian2EducationSchoolLevelId,\r\nGuardian2EducationSchoolLevelSifDesc,\r\nGuardian2EducationNonSchoolLevelId,\r\nGuardian2EducationNonSchoolLevelSifDesc,\r\nGuardian2LanguageId,\r\nGuardian2LanguageSifDesc,\r\nBaptismDate,\r\nFirstReconciliationDate,\r\nFirstEucharistDate,\r\nConfirmationDate,\r\nBaptismParish,\r\nCreateDate,\r\nEffectiveStartDate,\r\nEffectiveEndDate,\r\nIsCurrent,\r\nScdReason,\r\nLastUpdateDate,\r\nMainCampusId,\r\nOrganisationUserId,\r\nSKPerson,\r\nStudentReportingId,\r\nAccessRestrictions_YN,\r\nAccessRestrictionsInt\r\nfrom dbo.vwDMStudent\r\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_student_profile_object_2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_student_profile_object_2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_student_profile_object_2')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_student_profile_object_2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_test_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_op9",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "stage1np/test_enrolment /testenroldata.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "USE DBTOW\r\n--Active  and current Enrolments\r\nSELECT \r\nSchoolID AS SchoolAGEID,\r\nLocationID AS LocationAGEID,\r\nc.CampusSuburbAndName,\r\npd.FirstName,\r\npd.LastName,\r\nyl.YearLevelSifDesc AS YearLevel,\r\nrg.RollGroupDesc AS RollGroup,\r\npd.Ceider\r\nFROM dbo.vwDMFactPersonMilestone f\r\nJOIN dbo.vwDMPersonDemographic pd ON f.SKPerson = pd.SKPerson\r\nJOIN dbo.vwDMCampus c ON f.SKCampus = c.SKCampus\r\nJOIN dbo.vwDMYearLevel yl ON f.SKYearLevel = yl.SKYearLevel\r\nJOIN dbo.vwDMRollGroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n\r\nWHERE \r\nf.IsCurrentMilestone = 1\r\nAND f.IsActiveMilestone = 1\r\nAND pd.PersonType = 'Student'\r\nORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_op9",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_op9",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Copy Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_op9')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_op9')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_all_from_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get list of tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select schema_name(t.schema_id) as schema_name, t.name as table_name\nfrom sys.tables t",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set currentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDateTime",
							"value": {
								"value": "@{formatDateTime(convertTimeZone(utcnow(), 'UTC', pipeline().parameters.timezone), 'yyyy-MM-ddTHHmm_ss')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get list of tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set currentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get list of tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy_from_Azure_SQL_DB",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy_from_Azure_SQL_DB",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"dbServer": {
												"value": "@pipeline().parameters.dbServer",
												"type": "Expression"
											},
											"dbName": {
												"value": "@pipeline().parameters.dbName",
												"type": "Expression"
											},
											"userName": {
												"value": "@pipeline().parameters.userName",
												"type": "Expression"
											},
											"keyVaultSecretName": {
												"value": "@pipeline().parameters.keyVaultSecretName",
												"type": "Expression"
											},
											"query": {
												"value": "select * from @{item().schema_name}.@{item().table_name}",
												"type": "Expression"
											},
											"sinkFilesystem": {
												"value": "@pipeline().parameters.sinkFilesystem",
												"type": "Expression"
											},
											"sinkDirectory": {
												"value": "@{pipeline().parameters.sinkDirectory}/@{variables('currentDateTime')}/@{item().table_name}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "contosoisd3a.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqladmin-password"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db"
					},
					"timezone": {
						"type": "string",
						"defaultValue": "Eastern Standard Time"
					}
				},
				"variables": {
					"currentDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "External Extraction Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:07Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy from Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.query",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Azure_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"dbServer": {
										"value": "@pipeline().parameters.dbServer",
										"type": "Expression"
									},
									"dbName": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									},
									"userName": {
										"value": "@pipeline().parameters.userName",
										"type": "Expression"
									},
									"keyVaultSecretName": {
										"value": "@pipeline().parameters.keyVaultSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_parquet",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sinkDirectory",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "contosoisd3a.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqladmin-password"
					},
					"query": {
						"type": "string",
						"defaultValue": "select * from person"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkDirectory": {
						"type": "string",
						"defaultValue": "contoso_sis_db/person"
					}
				},
				"folder": {
					"name": "External Extraction Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Azure_SQL_DB')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_URL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copies data from the specified URL and lands it in the specified location in the data lake.",
				"activities": [
					{
						"name": "copy from URL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "URL",
								"value": "@pipeline().parameters.URL"
							},
							{
								"name": "sinkFilesystem",
								"value": "@pipeline().parameters.sinkFilesystem"
							},
							{
								"name": "sinkFilename",
								"value": "@pipeline().parameters.sinkFilename"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_HTTP_binary",
								"type": "DatasetReference",
								"parameters": {
									"URL": {
										"value": "@pipeline().parameters.URL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_binary_file",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "@pipeline().parameters.sinkFilesystem",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.sinkFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"URL": {
						"type": "string",
						"defaultValue": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentattendance.csv"
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"sinkFilename": {
						"type": "string",
						"defaultValue": "contoso_sis/example1/studentattendance.csv"
					}
				},
				"folder": {
					"name": "External Extraction Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_HTTP_binary')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_file')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_from_each_URL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieves data from multiple HTTP endpoints as specified in the 'endpoints' parameter.\nThe data is landed in the data lake within a folder named with the current datetime (in the timezone specified).\n\nFor a list of timezones, see: https://docs.microsoft.com/en-us/azure/data-factory/control-flow-expression-language-functions#convertfromutc",
				"activities": [
					{
						"name": "get data for each endpoint",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set currentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.endpoints",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "Copy_from_URL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy_from_URL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"URL": {
												"value": "@item().URL",
												"type": "Expression"
											},
											"sinkFilesystem": {
												"value": "@pipeline().parameters.sinkFilesystem",
												"type": "Expression"
											},
											"sinkFilename": {
												"value": "@{item().sinkDirectory}/@{variables('currentDateTime')}/@{item().sinkFilename}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set currentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDateTime",
							"value": {
								"value": "@{formatDateTime(convertTimeZone(utcnow(), 'UTC', pipeline().parameters.timezone), 'yyyy-MM-ddTHHmm_ss')}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"endpoints": {
						"type": "array",
						"defaultValue": [
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentattendance.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentattendance/studentattendance.csv"
							},
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentdemographics.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentdemographics/studentdemographics.csv"
							},
							{
								"URL": "https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/Contoso_SIS/test_data/studentsectionmark.csv",
								"sinkDirectory": "contoso_sis",
								"sinkFilename": "studentsectionmark/studentsectionmark.csv"
							}
						]
					},
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"timezone": {
						"type": "string",
						"defaultValue": "Eastern Standard Time"
					}
				},
				"variables": {
					"currentDateTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "External Extraction Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:18:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Copy_from_URL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_LakeDB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_lake_db",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"stageNum": "3",
								"sourceDirectory": "pilot"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_lake_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_LakeDB_nohashing')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_lake_db_nohashing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"stageNum": "3",
								"sourceDirectory": "pilot"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_lake_db_nohashing')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_SQLDB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create SQL DB",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_sql_db",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"storageAccount": "stoeatceooeadev01",
								"sourceDirectory": "pilot",
								"stage": "3"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_sql_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_SQLDB_nohashing')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create SQL DB",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_sql_db_nohashing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"storageAccount": "stoeatceooeadev01",
								"sourceDirectory": "pilot",
								"stage": "3"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_sql_db_nohashing')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ingestion_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingestion_stage2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Main Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Data to Stage1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Stage1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Move Data to Stage2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Data to Stage1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Stage2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Transformations and Stage3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Move Data to Stage2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Stage3",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Stage1')]",
				"[concat(variables('workspaceId'), '/pipelines/Stage2')]",
				"[concat(variables('workspaceId'), '/pipelines/Stage3')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stage1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "If Acer",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.acer",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy ACER part1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_ACER_part1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {}
									}
								},
								{
									"name": "Copy ACER part2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy ACER part1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_ACER_part2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If AE",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.ae",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline AE",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_AE",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If attendance",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.attendance",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline Attendance",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_Attendance",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Class-Period",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.class_period",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline class_period",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_class_period",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Enrolment",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.enrolment",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline enrolment",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_enrolment",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If MySchools",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.myschools",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline MySchools",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_MySchools",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Naplan",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.naplan",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline NAPLAN",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_NAPLAN",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If NCCD",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.nccd",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Pipeline NCCD",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_NCCD",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Student",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.student",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyPipeline student_object",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_student_object",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "CopyPipeline student_object_2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "CopyPipeline student_object",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyPipeline_student_object_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"acer": {
						"type": "bool",
						"defaultValue": false
					},
					"ae": {
						"type": "bool",
						"defaultValue": false
					},
					"attendance": {
						"type": "bool",
						"defaultValue": false
					},
					"class_period": {
						"type": "bool",
						"defaultValue": false
					},
					"enrolment": {
						"type": "bool",
						"defaultValue": false
					},
					"myschools": {
						"type": "bool",
						"defaultValue": false
					},
					"naplan": {
						"type": "bool",
						"defaultValue": true
					},
					"nccd": {
						"type": "bool",
						"defaultValue": false
					},
					"student": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_ACER_part1')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_ACER_part2')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_AE')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_Attendance')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_class_period')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_enrolment')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_MySchools')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_NAPLAN')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_NCCD')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_student_object')]",
				"[concat(variables('workspaceId'), '/pipelines/CopyPipeline_student_object_2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stage2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "If acer",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.acer",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_acer",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_acer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If AE",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.ae",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_ae",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_ae",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If attendance",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.attendance",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_attendance",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_attendance",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Class-period",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.class_period",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_class_period",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_class_period",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If enrolment",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.enrolment",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_enrolment",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_enrolment",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If MySchools",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.myschools",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_myschools",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_myschools",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Naplan",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.naplan",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_naplan",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_naplan",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If NCCD",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.nccd",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_nccd",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_nccd",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If Student",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.student",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ingestion_stage2_student_profile",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ingestion_stage2_student_profile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"acer": {
						"type": "bool",
						"defaultValue": false
					},
					"ae": {
						"type": "bool",
						"defaultValue": false
					},
					"attendance": {
						"type": "bool",
						"defaultValue": false
					},
					"class_period": {
						"type": "bool",
						"defaultValue": false
					},
					"enrolment": {
						"type": "bool",
						"defaultValue": false
					},
					"myschools": {
						"type": "bool",
						"defaultValue": false
					},
					"naplan": {
						"type": "bool",
						"defaultValue": true
					},
					"nccd": {
						"type": "bool",
						"defaultValue": false
					},
					"student": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_acer')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_ae')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_attendance')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_class_period')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_enrolment')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_myschools')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_naplan')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_nccd')]",
				"[concat(variables('workspaceId'), '/pipelines/ingestion_stage2_student_profile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stage3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Transform and Move to Stage3",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Transforms_Connector",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					},
					{
						"name": "If create_sql_db",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Transform and Move to Stage3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.create_sql_db",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Create_SQLDB_nohashing",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create_SQLDB_nohashing",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "If create_lake_db",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Transform and Move to Stage3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.create_lake_db",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Create_LakeDB_nohashing",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create_LakeDB_nohashing",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"create_sql_db": {
						"type": "bool",
						"defaultValue": true
					},
					"create_lake_db": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Main Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Transforms_Connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]",
				"[concat(variables('workspaceId'), '/pipelines/Create_SQLDB_nohashing')]",
				"[concat(variables('workspaceId'), '/pipelines/Create_LakeDB_nohashing')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_lake_db')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create_lake_db",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "kwargs",
								"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':@{pipeline().parameters.sourceDirectory}"
							}
						],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "oea",
									"type": "string"
								},
								"method_name": {
									"value": "create_lake_db",
									"type": "string"
								},
								"kwargs": {
									"value": {
										"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':'@{pipeline().parameters.sourceDirectory}'}",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"stageNum": {
						"type": "string",
						"defaultValue": "3"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "pilot"
					}
				},
				"folder": {
					"name": "Data Lake Ingestion Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_lake_db_nohashing')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create_lake_db_nohashing",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "kwargs",
								"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':@{pipeline().parameters.sourceDirectory}"
							}
						],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "oea",
									"type": "string"
								},
								"method_name": {
									"value": "create_lake_db_nohashing",
									"type": "string"
								},
								"kwargs": {
									"value": {
										"value": "{'stage_num':@{pipeline().parameters.stageNum},'source_dir':'@{pipeline().parameters.sourceDirectory}'}",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"stageNum": {
						"type": "string",
						"defaultValue": "3"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "pilot"
					}
				},
				"folder": {
					"name": "Data Lake Ingestion Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_sql_db')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "set sqlDBName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sqlDBName",
							"value": {
								"value": "sqls@{pipeline().parameters.stage}_@{pipeline().parameters.sourceDirectory}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "set sqlDBName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_executesql]",
							"storedProcedureParameters": {
								"command": {
									"value": {
										"value": "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '@{variables('sqlDBName')}') \nBEGIN\n  CREATE DATABASE @{variables('sqlDBName')}; \nEND;",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_Serverless_OEA",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "master"
							}
						}
					},
					{
						"name": "get folders in stageXp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}p",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for pseduonymized tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "get folders in stageXnp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}np",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXnp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXnp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for lookup tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}np/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeatceooeadev01"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "pilot"
					},
					"stage": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"variables": {
					"sqlDBName": {
						"type": "String",
						"defaultValue": "sqls2_dev"
					}
				},
				"folder": {
					"name": "Data Lake Ingestion Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_Serverless_OEA')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_sql_db_nohashing')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "set sqlDBName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sqlDBName",
							"value": {
								"value": "sqls@{pipeline().parameters.stage}_@{pipeline().parameters.sourceDirectory}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "set sqlDBName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_executesql]",
							"storedProcedureParameters": {
								"command": {
									"value": {
										"value": "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '@{variables('sqlDBName')}') \nBEGIN\n  CREATE DATABASE @{variables('sqlDBName')}; \nEND;",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_Serverless_OEA",
							"type": "LinkedServiceReference",
							"parameters": {
								"dbName": "master"
							}
						}
					},
					{
						"name": "get folders in stageXp",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": {
										"value": "stage@{pipeline().parameters.stage}p",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get folders in stageXp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get folders in stageXp').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "create or alter view for pseduonymized tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "command",
											"value": "CREATE OR ALTER VIEW @{item().name} AS SELECT * FROM OPENROWSET( BULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}', FORMAT='DELTA' ) AS [r]"
										}
									],
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_executesql]",
										"storedProcedureParameters": {
											"command": {
												"value": {
													"value": "CREATE OR ALTER VIEW @{item().name} AS\nSELECT * FROM OPENROWSET(\nBULK 'https://@{pipeline().parameters.storageAccount}.dfs.core.windows.net/stage@{pipeline().parameters.stage}p/@{pipeline().parameters.sourceDirectory}/@{item().name}',\nFORMAT='DELTA'\n) AS [r]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQL_Serverless_OEA",
										"type": "LinkedServiceReference",
										"parameters": {
											"dbName": {
												"value": "@variables('sqlDBName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"storageAccount": {
						"type": "string",
						"defaultValue": "stoeatceooeadev01"
					},
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "pilot"
					},
					"stage": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"variables": {
					"sqlDBName": {
						"type": "String",
						"defaultValue": "sqls2_dev"
					}
				},
				"folder": {
					"name": "Data Lake Ingestion Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:19:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_Serverless_OEA')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "acer",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sinkFilesystem": {
						"type": "string",
						"defaultValue": "stage2np"
					}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_acer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest Acer to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Acer",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "acer_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "ACER",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Acer')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_ae')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_AE",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "ae_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "AE",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_AE')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_attendance')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Attendance",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "attendance_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "attendance",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Attendance')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_class_period')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Class_Period",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "class_period_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "class_period",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Class_Period')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Enrolment",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "enrolment_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "enrolment",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Enrolment')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_myschools')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_MySchools",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "myschools_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "MySchools",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_MySchools')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_naplan')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_NAPLAN",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "naplan_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "NAPLAN",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_NAPLAN')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_nccd')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_NCCD",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "nccd_object",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "NCCD",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_NCCD')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ingestion_stage2_student_profile')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Ingest to Stage2",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "OEA_connector_Student_Profile",
								"type": "NotebookReference"
							},
							"parameters": {
								"object_name": {
									"value": "student_profile",
									"type": "string"
								},
								"method_name": {
									"value": "ingest",
									"type": "string"
								},
								"source_folder": {
									"value": "student",
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "spark3p1sm",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Stage2 Ingestion Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/OEA_connector_Student_Profile')]",
				"[concat(variables('workspaceId'), '/bigDataPools/spark3p1sm')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reset_all_for_source')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Deletes the ingestion for the specified system and table - in order to start over when testing during implementation.",
				"activities": [
					{
						"name": "delete source system dir from stage1np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2np",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2p",
									"directory": {
										"value": "@pipeline().parameters.sourceSystem",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSystem": {
						"type": "string",
						"defaultValue": "contoso_sis"
					}
				},
				"folder": {
					"name": "Data Reset Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:20:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reset_ingestion_of_table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Deletes the ingestion for the specified system and table - in order to start over when testing during implementation.",
				"activities": [
					{
						"name": "delete _checkpoints_p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}/_checkpoints_p",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete _checkpoints_np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage1np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}/_checkpoints_np",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2np",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2np",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete from stage2p",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_binary_folder",
								"type": "DatasetReference",
								"parameters": {
									"filesystem": "stage2p",
									"directory": {
										"value": "@{pipeline().parameters.sourceSystem}/@{pipeline().parameters.tablename}",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSystem": {
						"type": "string",
						"defaultValue": "contoso_sis"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "studentattendance"
					}
				},
				"folder": {
					"name": "Data Reset Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-28T06:20:24Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_binary_folder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AggWholeDayAttendanceBySchool')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAggWholeDayAttendanceBySchool",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKCampus",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKAttendanceDate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKGender",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKATSI",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKYearLevel",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalSchoolMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalMinutesMissed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MinutesArrivedLate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MinutesDepartedEarly",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnmarkedMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnscheduledMinutes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ArrivedLate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DepartedEarly",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WholeDayAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PartialAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NoAbsence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CountAttended",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "Disability",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwAggWholeDayAttendanceBySchool"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_binary_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used for landing data in the data lake.\nDefaults to landing data in stage1np.\nNote that you can specify a full path in the filename param (eg, to land a file in a specific folder filename param can be 'contoso_sis/students/students.csv').\n",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_binary_folder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used for landing data in the data lake as in parquet format.\nDefaults to landing data in stage1np.\nNote that you cannot specify a filename because with parquet the filename should be auto-generated.\n",
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filesystem": {
						"type": "string",
						"defaultValue": "stage1np"
					},
					"directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().filesystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SQL_DB",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbServer": {
							"value": "@dataset().dbServer",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						},
						"userName": {
							"value": "@dataset().userName",
							"type": "Expression"
						},
						"keyVaultSecretName": {
							"value": "@dataset().keyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "myserver.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "testdb"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqlAdmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqlAdminPwd"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "student"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_HTTP_binary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieves data from an http endpoint.\nThe data can be in any format - the binary dataset allows us to pull any payload without affecting it.",
				"linkedServiceName": {
					"referenceName": "LS_HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"baseURL": {
							"value": "@dataset().URL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"URL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_45g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student2",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACER')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "ACER",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACERAEStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "students/acer",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACER_part1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "ACER",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ACER_part2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbovwDMCampus.csv",
						"folderPath": "ACER",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_AE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "AE",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Acer02')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AcerStudent",
						"folderPath": "students/acer2",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_All_schools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "schools_all",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_All_student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Attendance_dest')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "attendance",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Bit_Test')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbovwDMAttendanceStatus.csv",
						"folderPath": "test_bit",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_MySchools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "MySchools",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_NAPLAN')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "NAPLAN",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_NCCD')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "NCCD",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_attendance_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "attendance",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_class_period')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "class_period",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_cxs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "student3",
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_d0j')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "aestudents.csv",
						"folderPath": "student4",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "enrolment",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_j06')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "stage1np"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_op9')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "testenroldata.csv",
						"folderPath": "test_enrolment ",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_profile_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_profile_object_2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbovwDMStudent.csv",
						"folderPath": "student",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_student_test_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "student_test",
						"folderPath": "students/student_test_file",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_vwDMStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "student_test",
						"folderPath": "students",
						"fileSystem": "stage1np"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dim_ACER_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tmp_datablend_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKACERStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKACERStudent",
						"type": "nvarchar"
					},
					{
						"name": "SystemId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FamilyName",
						"type": "nvarchar"
					},
					{
						"name": "GivenName",
						"type": "nvarchar"
					},
					{
						"name": "DateOfBirth",
						"type": "date"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Username",
						"type": "nvarchar"
					},
					{
						"name": "Password",
						"type": "nvarchar"
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					},
					{
						"name": "SCDReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMACERStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/tmp_datablend_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Naplan_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tmp_datablend_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "BKSourceStudentId",
						"type": "nvarchar"
					},
					{
						"name": "BKPersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SKStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OfficialFirstName",
						"type": "nvarchar"
					},
					{
						"name": "OfficialSurname",
						"type": "nvarchar"
					},
					{
						"name": "PreferredFirstName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredSurname",
						"type": "nvarchar"
					},
					{
						"name": "SingleNameOnly",
						"type": "bit"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DOB",
						"type": "date"
					},
					{
						"name": "AttendanceStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StudentAddressStreet",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressSuburb",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressState",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressPostCode",
						"type": "nvarchar"
					},
					{
						"name": "StudentAddressLatitude",
						"type": "decimal",
						"precision": 9,
						"scale": 6
					},
					{
						"name": "StudentAddressLongitude",
						"type": "decimal",
						"precision": 9,
						"scale": 6
					},
					{
						"name": "HomePhone",
						"type": "nvarchar"
					},
					{
						"name": "HomeEmail",
						"type": "nvarchar"
					},
					{
						"name": "StudentMobile",
						"type": "nvarchar"
					},
					{
						"name": "StudentEmail",
						"type": "nvarchar"
					},
					{
						"name": "BirthCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CitizenshipResidencyStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryCitizenshipCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryPassportIssueCountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Boarder",
						"type": "bit"
					},
					{
						"name": "VisaSubClassId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VisaSubClassDesc",
						"type": "nvarchar"
					},
					{
						"name": "VisaExpiryData",
						"type": "date"
					},
					{
						"name": "VisaEndDate",
						"type": "date"
					},
					{
						"name": "AtsiId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ATSIDesc",
						"type": "nvarchar"
					},
					{
						"name": "ESLYesNo",
						"type": "bit"
					},
					{
						"name": "EslLanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LBOTEYesNo",
						"type": "bit"
					},
					{
						"name": "LBOTELanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FFPOS",
						"type": "bit"
					},
					{
						"name": "SWDYesNo",
						"type": "bit"
					},
					{
						"name": "SwdSifDesc",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1FirstName",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Surname",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1LanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1Email",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Phone",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1Mobile",
						"type": "nvarchar"
					},
					{
						"name": "Guardian1OccupationalGroupId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1EducationSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian1EducationNonSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2FirstName",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Surname",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2LanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2Email",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Phone",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2Mobile",
						"type": "nvarchar"
					},
					{
						"name": "Guardian2OccupationalGroupId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2EducationSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guardian2EducationNonSchoolLevelId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReligionId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BaptismDate",
						"type": "date"
					},
					{
						"name": "BaptismParish",
						"type": "nvarchar"
					},
					{
						"name": "ConfirmationDate",
						"type": "date"
					},
					{
						"name": "FirstEucharistDate",
						"type": "date"
					},
					{
						"name": "FirstReconciliationDate",
						"type": "date"
					},
					{
						"name": "RollGroup",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "NAPLAN",
					"table": "Student"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/tmp_datablend_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_45g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACER')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACERAEStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACER_part1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ACER_part2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_AE')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Acer02')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKACERStudent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKACERStudent",
						"type": "nvarchar"
					},
					{
						"name": "SystemId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FamilyName",
						"type": "nvarchar"
					},
					{
						"name": "GivenName",
						"type": "nvarchar"
					},
					{
						"name": "DateOfBirth",
						"type": "date"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Username",
						"type": "nvarchar"
					},
					{
						"name": "Password",
						"type": "nvarchar"
					},
					{
						"name": "CampusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Iscurrent",
						"type": "bit"
					},
					{
						"name": "SCDReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMACERStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_All_schools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_All_student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Attendance_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Bit_Test')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAttendanceStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKAttendanceStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AttendanceStatusSifCode",
						"type": "nvarchar"
					},
					{
						"name": "AttendanceStatusSifDesc",
						"type": "nvarchar"
					},
					{
						"name": "PrimarySort",
						"type": "decimal",
						"precision": 18,
						"scale": 5
					},
					{
						"name": "SecondarySort",
						"type": "decimal",
						"precision": 18,
						"scale": 5
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "ScdReason",
						"type": "nvarchar"
					},
					{
						"name": "BusinessDesc",
						"type": "nvarchar"
					},
					{
						"name": "AttendanceStatusGroup",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAttendanceStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_MySchools')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_NAPLAN')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_NCCD')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_Student')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_attendance_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_class_period')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_cxs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SKAEStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BKSourceStudentId",
						"type": "nvarchar"
					},
					{
						"name": "PersistentStudentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StudentFirstName",
						"type": "nvarchar"
					},
					{
						"name": "StudentSurname",
						"type": "nvarchar"
					},
					{
						"name": "DOB",
						"type": "date"
					},
					{
						"name": "GenderId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ATSIId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LBOTELanguageId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WholeDaysAbsent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PartialDaysAbsent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveStartDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "EffectiveEndDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					},
					{
						"name": "ScdReason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAEStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_d0j')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "vwDMAEStudent"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_enrolment')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_j06')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_op9')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_profile_object')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_profile_object_2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_student_test_file')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_vwDMStudent')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CeNet_DataBlend",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CeNet_DataBlend')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CeNet_DataBlend')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('CeNet_DataBlend_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_ADLS_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to the OEA data lake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_OEA_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Azure_SQL_DB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Allows for connecting to an Azure SQL database using SQL authentication and retrieving the user password from the key vault.",
				"parameters": {
					"dbServer": {
						"type": "string",
						"defaultValue": "myserver.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "testdb"
					},
					"userName": {
						"type": "string",
						"defaultValue": "sqlAdmin"
					},
					"keyVaultSecretName": {
						"type": "string",
						"defaultValue": "sqlAdminPwd"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_Azure_SQL_DB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().keyVaultSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_HTTP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to an HTTP endpoint.\nThe baseURL parameter must be passed in from the dataset that utilizes this linked service.",
				"parameters": {
					"baseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_KeyVault_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_KeyVault_OEA_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_SQL_Serverless_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "master"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_Serverless_OEA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-tceooeadev01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syn-oea-tceooeadev01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-tceooeadev01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('syn-oea-tceooeadev01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tmp_datablend_dev')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('tmp_datablend_dev_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SelfHostedIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"description": "Temporary TCEO Private network access to DEV database",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AE_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5efbc363-7762-4194-9619-8a2e25ea9909"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class AE_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='AE', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMAEStudent'] = [\r\n",
							"                                        ['SKAEStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIId', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDaysAbsent', 'integer', 'no-op'],\r\n",
							"                                        ['PartialDaysAbsent', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                    \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMAEStudentDescription'] = [\r\n",
							"                                        ['SKAEStudentDescriptionId', 'integer', 'no-op'],\r\n",
							"                                        ['BKAEStudentDescriptionId', 'string', 'no-op'],\r\n",
							"                                        ['AESubjectComment', 'string', 'no-op'],\r\n",
							"                                        ['AESubAreaComment', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMAEStudentResultId'] = [\r\n",
							"                                        ['SKAEStudentResultId', 'integer', 'no-op'],\r\n",
							"                                        ['BKAEStudentResultId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMAESubjectCourse'] = [\r\n",
							"                                        ['SKAESubjectCourseId', 'integer', 'no-op'],\r\n",
							"                                        ['BKAESubjectCourseId', 'string', 'no-op'],\r\n",
							"                                        ['AESubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['AESubjectName', 'string', 'no-op'],\r\n",
							"                                        ['AECourseCode', 'string', 'no-op'],\r\n",
							"                                        ['AECourseName', 'string', 'no-op'],\r\n",
							"                                        ['AESubCourseCode', 'string', 'no-op'],\r\n",
							"                                        ['AESubCourseName', 'string', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder3', 'double', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                                                   \r\n",
							"                                        ]\r\n",
							"            \r\n",
							"        self.schemas['DMFACTAEDC'] = [\r\n",
							"                                        ['SKAEDC', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEDCGroupingId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['TotalStudents', 'integer', 'no-op'],\r\n",
							"                                        ['AverageAge', 'string', 'no-op'],\r\n",
							"                                        ['Males', 'integer', 'no-op'],\r\n",
							"                                        ['Females', 'integer', 'no-op'],\r\n",
							"                                        ['Indigenous', 'integer', 'no-op'],\r\n",
							"                                        ['ESL', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEEnglishProficient', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTENotEnglishProficient', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCare', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareDaycare', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCarePreschool', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareFamilyDaycare', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareGrandparent', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareOtherRelative', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareNanny', 'integer', 'no-op'],\r\n",
							"                                        ['EarlyChildhoodCareOther', 'integer', 'no-op'],\r\n",
							"                                        ['ChildAdaptingToSchoolVeryTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildAdaptingToSchoolVerySomewhatTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildAdaptingToSchoolNotTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildAdaptingToSchoolDontKnow', 'integer', 'no-op'],\r\n",
							"                                        ['ParentsActivelyEngagedWithschoolVeryTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ParentsActivelyEngagedWithschoolSomewhatTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ParentsActivelyEngagedWithschoolNotTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ParentsActivelyEngagedWithschoolDontKnow', 'integer', 'no-op'],\r\n",
							"                                        ['ChildRegularlyReadToAtHomeVerytrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildRegularlyReadToAtHomeSomewhatTrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildRegularlyReadToAtHomeNottrue', 'integer', 'no-op'],\r\n",
							"                                        ['ChildRegularlyReadToAtHomeDontKnow', 'integer', 'no-op'],\r\n",
							"                                        ['ChildrenWithSpecialNeeds', 'integer', 'no-op'],\r\n",
							"                                        ['ChildrenWithFurtherInvestigationRequired', 'integer', 'no-op'],\r\n",
							"                                        ['ChildrenAttendedEarlyInterventionProgram', 'integer', 'no-op'],\r\n",
							"                                        ['DaysAbsentSinceStartOfYear0to1Days', 'integer', 'no-op'],\r\n",
							"                                        ['DaysAbsentSinceStartOfYear2to5Days', 'integer', 'no-op'],\r\n",
							"                                        ['DaysAbsentSinceStartOfYear6to10Days', 'integer', 'no-op'],\r\n",
							"                                        ['DaysAbsentSinceStartOfYear10DaysPlus', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingTotal', 'integer', 'no-op'],\r\n",
							"                                        ['SocialCompetenceTotal', 'integer', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityTotal', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsTotal', 'integer', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeTotal', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['SocialCompetenceOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeOnTrackNum', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['SocialCompetenceOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeOnTrackPer', 'double', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['SocialCompetenceAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeAtRiskNum', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['SocialCompetenceAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeAtRiskPer', 'double', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['SocialCompetenceVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeVulnerableNum', 'integer', 'no-op'],\r\n",
							"                                        ['PhysHealthWellbeingVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['SocialCompetenceVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['EmotionalMaturityVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['LanguageCognitiveSkillsVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['CommSkillsAndGeneralKnowledgeVulnerablePer', 'double', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableOneDomainTotalwithResults', 'integer', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableOneDomainNum', 'integer', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableOneDomainPer', 'double', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableTwoDomain2TotalwithResults', 'integer', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableTwoDomainsNum', 'integer', 'no-op'],\r\n",
							"                                        ['DevelopmentallyVulnerableTwoDomainsPer', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFACTAEDCStrengths'] = [\r\n",
							"                                        ['SKAEDCStrengths', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEDCStrengthsBK', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['HighlyDeveloped', 'integer', 'no-op'],\r\n",
							"                                        ['WellDeveloped', 'integer', 'no-op'],\r\n",
							"                                        ['Emerging', 'integer', 'no-op'],\r\n",
							"                                        ['Total', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentAEResult'] = [\r\n",
							"                                        ['SKFactStudentAEResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEStudentResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKReportingPeriod', 'integer', 'no-op'],\r\n",
							"                                        ['SKAECourse', 'integer', 'no-op'],\r\n",
							"                                        ['SKAESubCourse', 'integer', 'no-op'],\r\n",
							"                                        ['SKAECourseGrade', 'integer', 'no-op'],\r\n",
							"                                        ['SKAESubCourseGrade', 'integer', 'no-op'],\r\n",
							"                                        ['SKAECourseEffort', 'integer', 'no-op'],\r\n",
							"                                        ['SKAESubCourseEffort', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentClass', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKAEStudentDescription', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadcount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAEStudent', self.schemas['DMAEStudent'], 'LastUpdateDate', 'SKAEStudentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAEStudentDescription', self.schemas['DMAEStudentDescription'], 'LastUpdateDate', 'SKAEStudentDescriptionId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAEStudentResultId', self.schemas['DMAEStudentResultId'], 'LastUpdateDate', 'SKAEStudentResultId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMAESubjectCourse', self.schemas['DMAESubjectCourse'], 'LastUpdateDate', 'SKAESubjectCourseId')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFACTAEDC', self.schemas['DMFACTAEDC'], 'LastUpdateDate', 'SKAEDC')\r\n",
							"        \r\n",
							"        # empty tables \r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMFACTAEDCStrengths', self.schemas['DMFACTAEDCStrengths'], 'LastUpdateDate', 'SKAEDCStrengths')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMFactStudentAEResult', self.schemas['DMFactStudentAEResult'], 'LastUpdateDate', 'SKFactStudentAEResultId')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"ae_object = AE_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Acer_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "95a0319a-047f-4032-9895-82230f2e3c6b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Acer_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='ACER', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMACERStanine'] = [\r\n",
							"                                        ['SKACERStanine', 'integer', 'no-op'],\r\n",
							"                                        ['BKACERStanine', 'integer', 'no-op'],\r\n",
							"                                        ['StanineNumber', 'integer', 'no-op'],\r\n",
							"                                        ['StanineNumberDescription', 'string', 'no-op'],\r\n",
							"                                        ['StanineAchievementDescriptor', 'string', 'no-op'],\r\n",
							"                                        ['PercentileRank', 'string', 'no-op'],\r\n",
							"                                        ['PercentageOfStudents', 'double', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                    \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMACERStudent'] = [\r\n",
							"                                        ['SKACERStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKACERStudent', 'string', 'no-op'],\r\n",
							"                                        ['SystemId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['FamilyName', 'string', 'no-op'],\r\n",
							"                                        ['GivenName', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'date', 'no-op'],\r\n",
							"                                        ['Gender', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['Username', 'string', 'no-op'],\r\n",
							"                                        ['Password', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactPATResponse'] = [\r\n",
							"                                        ['SKPATResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATStudentResponseGrouping', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKACERStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATTest', 'integer', 'no-op'],\r\n",
							"                                        ['SKCorrectAnswer', 'integer', 'no-op'],\r\n",
							"                                        ['StudentResponse', 'string', 'no-op'],\r\n",
							"                                        ['AnswerCorrect', 'integer', 'no-op'],\r\n",
							"                                        ['CampusPercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['DiocesePercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactPATResults'] = [\r\n",
							"                                        ['SKPATResults', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATStudentTestGrouping', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKACERStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKPATTest', 'integer', 'no-op'],\r\n",
							"                                        ['SKACERStanine', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['RawScore', 'integer', 'no-op'],\r\n",
							"                                        ['ScaleScore', 'double', 'no-op'],\r\n",
							"                                        ['RecentTest', 'integer', 'no-op'],\r\n",
							"                                        ['ErrorMargin', 'double', 'no-op'],\r\n",
							"                                        ['Stanine', 'integer', 'no-op'],\r\n",
							"                                        ['Percentile', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear1', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear1', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear2', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear2', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear3', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear3', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear4', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear4', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear5', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear5', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear6', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear6', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear7', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear7', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear8', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear8', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear9', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear9', 'integer', 'no-op'],\r\n",
							"                                        ['StanineYear10', 'integer', 'no-op'],\r\n",
							"                                        ['PercentileYear10', 'integer', 'no-op'],\r\n",
							"                                        ['StudentTestHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['NORMMeanScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['NORMStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['PreviousYearNORMMeanScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['NextYearNORMMeanScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['TestLevelNormMeanScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['MatchedYearLevelTestLevel', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMPersonDemographic'] = [\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['BKPerson', 'string', 'no-op'],\r\n",
							"                                        ['PersonType', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Title', 'string', 'no-op'],\r\n",
							"                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['LastName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['SecondMiddleName', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddress', 'string', 'no-op'],\r\n",
							"                                        ['UsualTransport', 'string', 'no-op'],\r\n",
							"                                        ['HomePhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['MobileNumber', 'string', 'no-op'],\r\n",
							"                                        ['DateOfDeath', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'string', 'no-op'],\r\n",
							"                                        ['RecievesESL', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['InterpreterRequired', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['ATSIId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountryDesc', 'string', 'no-op'],\r\n",
							"                                        ['NationalityId', 'integer', 'no-op'],\r\n",
							"                                        ['NationalityDesc', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassName', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryDate', 'string', 'no-op'],\r\n",
							"                                        ['YouthAllowance', 'string', 'no-op'],\r\n",
							"                                        ['GovernmentFunded', 'string', 'no-op'],\r\n",
							"                                        ['GovCode2', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded', 'string', 'no-op'],\r\n",
							"                                        ['LivingArrangements', 'string', 'no-op'],\r\n",
							"                                        ['ResidentialStatus', 'string', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['AmbulanceSubscriber', 'string', 'no-op'],\r\n",
							"                                        ['UserName', 'string', 'no-op'],\r\n",
							"                                        ['Occupation', 'string', 'no-op'],\r\n",
							"                                        ['OccupationGroup', 'string', 'no-op'],\r\n",
							"                                        ['Employer', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesBH', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesAH', 'string', 'no-op'],\r\n",
							"                                        ['EarliestMilestoneDate', 'string', 'no-op'],\r\n",
							"                                        ['Contactable', 'string', 'no-op'],\r\n",
							"                                        ['EmailAllowed', 'string', 'no-op'],\r\n",
							"                                        ['SMSAllowed', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToMedia', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToInternal', 'string', 'no-op'],\r\n",
							"                                        ['AuthenticationMode', 'string', 'no-op'],\r\n",
							"                                        ['FeeMode', 'string', 'no-op'],\r\n",
							"                                        ['ImportMode', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['RequiresESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityFundedInt', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE_YN', 'string', 'no-op'],\r\n",
							"                                        ['Disability_YN', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded_YN', 'string', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['CommunicationPreference', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op'],\r\n",
							"                                        ['ProgramCode', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligiousOrLay', 'string', 'no-op'],\r\n",
							"                                        ['Parish', 'string', 'no-op'],\r\n",
							"                                        ['ImmunisationRecordSighted', 'string', 'no-op'],\r\n",
							"                                        ['HomeTown', 'string', 'no-op'],\r\n",
							"                                        ['HeadLiceCheckAllowed', 'string', 'no-op'],\r\n",
							"                                        ['TownOfBirth', 'string', 'no-op']                                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMPATStudentTestGrouping'] = [\r\n",
							"                                        ['SKPATStudentTestGrouping', 'integer', 'no-op'],\r\n",
							"                                        ['BKPATStudentTestGrouping', 'string', 'no-op'],\r\n",
							"                                        ['SystemId', 'string', 'no-op'],\r\n",
							"                                        ['DateComplete', 'date', 'no-op'],\r\n",
							"                                        ['TimeComplete', 'string', 'no-op'],  # converted time type to string\r\n",
							"                                        ['TestName', 'string', 'no-op'],\r\n",
							"                                        ['TestLevel', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMPATTest'] = [\r\n",
							"                                        ['SKPATTest', 'integer', 'no-op'],\r\n",
							"                                        ['BKPATTest', 'string', 'no-op'],\r\n",
							"                                        ['PATTestName', 'string', 'no-op'],\r\n",
							"                                        ['PATTestLevel', 'string', 'no-op'],\r\n",
							"                                        ['PATTestLevelNumber', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['PATTestGroup', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMCampus'] = [\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['BKCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseName', 'string', 'no-op'],\r\n",
							"                                        ['CongregationId', 'integer', 'no-op'],\r\n",
							"                                        ['CongregationName', 'string', 'no-op'],\r\n",
							"                                        ['IsSystemic', 'string', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressStreet', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressPostCode', 'string', 'no-op'],\r\n",
							"                                        ['BKCampusAddressState', 'integer', 'no-op'],\r\n",
							"                                        ['CampusAddressState', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressGeoData', 'string', 'no-op'],\r\n",
							"                                        ['CampusAddressLongitude', 'double', 'no-op'],\r\n",
							"                                        ['CampusAddressLatitude', 'double', 'no-op'],\r\n",
							"                                        ['SocioEconomicStatus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['CampusEmail', 'string', 'no-op'],\r\n",
							"                                        ['CampusPrincipalEmail', 'string', 'no-op'],\r\n",
							"                                        ['CampusSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CampusSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CampusSchoolSubTypeId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusSchoolSubTypeDesc', 'string', 'no-op'],\r\n",
							"                                        ['CoEdStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['CoEdStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CampusFocusCode', 'integer', 'no-op'],\r\n",
							"                                        ['CampusRegion', 'string', 'no-op'],\r\n",
							"                                        ['CampusCluster', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['CampusSuburbAndName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolSuburbAndName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressStreet', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressPostCode', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressState', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressGeoData', 'string', 'no-op'],\r\n",
							"                                        ['SchoolAddressLongitude', 'double', 'no-op'],\r\n",
							"                                        ['SchoolAddressLatitude', 'double', 'no-op'],\r\n",
							"                                        ['SchoolRegion', 'string', 'no-op'],\r\n",
							"                                        ['SchoolCluster', 'string', 'no-op'],\r\n",
							"                                        ['Website', 'string', 'no-op'],\r\n",
							"                                        ['BoardingStatus', 'string', 'no-op'],\r\n",
							"                                        ['Cohorts', 'string', 'no-op'],\r\n",
							"                                        ['CoEdStatusSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CampusPhone', 'string', 'no-op'],\r\n",
							"                                        ['SchoolPhone', 'string', 'no-op'],\r\n",
							"                                        ['DateCampusOpened', 'date', 'no-op'],\r\n",
							"                                        ['DateCampusClosed', 'date', 'no-op'],\r\n",
							"                                        ['IsCampusOpen', 'string', 'no-op'],\r\n",
							"                                        ['DateSchoolOpened', 'date', 'no-op'],\r\n",
							"                                        ['DateSchoolClosed', 'date', 'no-op'],\r\n",
							"                                        ['IsSchoolOpen', 'string', 'no-op'],\r\n",
							"                                        ['CampusStateCode', 'integer', 'no-op'],\r\n",
							"                                        ['StatisticalArea1', 'integer', 'no-op'], #updated bigint to integer\r\n",
							"                                        ['NameofStatisticalArea1', 'string', 'no-op'],\r\n",
							"                                        ['StatisticalArea2', 'integer', 'no-op'], #updated bigint to integer\r\n",
							"                                        ['NameofStatisticalArea2', 'string', 'no-op'],\r\n",
							"                                        ['StatisticalArea3', 'integer', 'no-op'], #updated bigint to integer\r\n",
							"                                        ['NameofStatisticalArea3', 'string', 'no-op'],\r\n",
							"                                        ['StatisticalArea4', 'integer', 'no-op'], #updated bigint to integer\r\n",
							"                                        ['NameofStatisticalArea4', 'string', 'no-op'],\r\n",
							"                                        ['ABSRemotenessArea', 'string', 'no-op'],\r\n",
							"                                        ['Geolocation', 'string', 'no-op'],\r\n",
							"                                        ['SchoolURL', 'string', 'no-op'],\r\n",
							"                                        ['AcaraSchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['HeadCampusAcaraId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolSector', 'string', 'no-op'],\r\n",
							"                                        ['CampusType', 'string', 'no-op'],\r\n",
							"                                        ['RolledReportingDescription', 'string', 'no-op'],\r\n",
							"                                        ['NESASchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['CompassSchoolURL', 'string', 'no-op'],\r\n",
							"                                        ['CompassSchoolName', 'string', 'no-op'],\r\n",
							"                                        ['CompassAPIKey', 'string', 'no-op'],\r\n",
							"                                        ['AncestryFlag', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMCalendarYear'] = [\r\n",
							"                                        ['SkYear', 'integer', 'no-op'],\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['ShortYear', 'string', 'no-op'],\r\n",
							"                                        ['YearName', 'string', 'no-op'],\r\n",
							"                                        ['prevyear', 'integer', 'no-op'],\r\n",
							"                                        ['nextyear', 'integer', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['FirstDayOfYear', 'date', 'no-op'],\r\n",
							"                                        ['LastDayOfYear', 'date', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMGender'] = [\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['BKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSifCode', 'string', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['GenderGroup', 'string', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMYearLevel'] = [\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['SchoolGroup', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMDate'] = [\r\n",
							"                                        ['SKDate', 'integer', 'no-op'],\r\n",
							"                                        ['BKDate', 'integer', 'no-op'],\r\n",
							"                                        ['Date', 'date', 'no-op'],\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['ShortYear', 'string', 'no-op'],\r\n",
							"                                        ['YearName', 'string', 'no-op'],\r\n",
							"                                        ['MonthNumberOfYear', 'integer', 'no-op'],\r\n",
							"                                        ['YearMonthConcatValue', 'integer', 'no-op'],\r\n",
							"                                        ['MonthLongName', 'string', 'no-op'],\r\n",
							"                                        ['MonthShortName', 'string', 'no-op'],\r\n",
							"                                        ['DayNumberOfMonth', 'integer', 'no-op'],\r\n",
							"                                        ['LastDayOfMonth', 'integer', 'no-op'],\r\n",
							"                                        ['LastDateOfMonth', 'date', 'no-op'],\r\n",
							"                                        ['LastDateOfMonthKey', 'integer', 'no-op'],\r\n",
							"                                        ['LastDayInMonthYesNo', 'string', 'no-op'],\r\n",
							"                                        ['DateLastYear', 'date', 'no-op'],\r\n",
							"                                        ['DateLastYearKey', 'integer', 'no-op'],\r\n",
							"                                        ['DateNextYear', 'date', 'no-op'],\r\n",
							"                                        ['DateNextYearKey', 'integer', 'no-op'],\r\n",
							"                                        ['DayLongName', 'string', 'no-op'],\r\n",
							"                                        ['DayShortName', 'string', 'no-op'],\r\n",
							"                                        ['DayNumberOfWeekSunday', 'integer', 'no-op'],\r\n",
							"                                        ['DayNumberOfWeekMonday', 'integer', 'no-op'],\r\n",
							"                                        ['FirstDateOfWeekSunday', 'date', 'no-op'],\r\n",
							"                                        ['FirstDateOfWeekMonday', 'date', 'no-op'],\r\n",
							"                                        ['FirstDateOfWeekSundayKey', 'integer', 'no-op'],\r\n",
							"                                        ['FirstDateOfWeekMondayKey', 'integer', 'no-op'],\r\n",
							"                                        ['DayNumberOfYear', 'integer', 'no-op'],\r\n",
							"                                        ['WeekNumberOfYearSunday', 'integer', 'no-op'],\r\n",
							"                                        ['WeekShortNameOfYearSunday', 'string', 'no-op'],\r\n",
							"                                        ['WeekNameOfYearSunday_Year', 'string', 'no-op'],\r\n",
							"                                        ['WeekNumberOfYearMonday', 'integer', 'no-op'],\r\n",
							"                                        ['WeekShortNameOfYearMonday', 'string', 'no-op'],\r\n",
							"                                        ['WeekNameOfYearMonday_Year', 'string', 'no-op'],\r\n",
							"                                        ['WeekNumberOfTermNSW', 'integer', 'no-op'],\r\n",
							"                                        ['WeekNumberOfTermQLD', 'integer', 'no-op'],\r\n",
							"                                        ['WeekNumberOfTermACT', 'integer', 'no-op'],\r\n",
							"                                        ['TermNumberNsw', 'integer', 'no-op'],\r\n",
							"                                        ['TermNumberQLD', 'integer', 'no-op'],\r\n",
							"                                        ['TermNumberACT', 'integer', 'no-op'],\r\n",
							"                                        ['SemesterNumberNSW', 'integer', 'no-op'],\r\n",
							"                                        ['SemesterNumberQLD', 'integer', 'no-op'],\r\n",
							"                                        ['SemesterNumberACT', 'integer', 'no-op'],\r\n",
							"                                        ['CYQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['CYQuarterShortName', 'string', 'no-op'],\r\n",
							"                                        ['CYQuarterLongName', 'string', 'no-op'],\r\n",
							"                                        ['CYQuarter_ShortYear', 'string', 'no-op'],\r\n",
							"                                        ['CYQuarter_LongYear', 'string', 'no-op'],\r\n",
							"                                        ['CYQuarterLongName1', 'string', 'no-op'],\r\n",
							"                                        ['CYHalfNumber', 'integer', 'no-op'],\r\n",
							"                                        ['CYHalfName', 'string', 'no-op'],\r\n",
							"                                        ['FYHalf_Year', 'string', 'no-op'],\r\n",
							"                                        ['FYQuarter_Year', 'string', 'no-op'],\r\n",
							"                                        ['FYHalf', 'integer', 'no-op'],\r\n",
							"                                        ['FYQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['FYMonth', 'integer', 'no-op'],\r\n",
							"                                        ['FYLongName', 'string', 'no-op'],\r\n",
							"                                        ['FYShortName', 'string', 'no-op'],\r\n",
							"                                        ['FYYear', 'string', 'no-op'],\r\n",
							"                                        ['WeekDayM_F_YesNo', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayYesNoNational', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayNationalDescription', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayYesNoNSW', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayNSWDesc', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayYesNoQLD', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayQLDDesc', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayYesNoACT', 'string', 'no-op'],\r\n",
							"                                        ['PublicHolidayACTDesc', 'string', 'no-op'],\r\n",
							"                                        ['SchoolHolidaySessionNumberNSW', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolHolidaySessionNumberQLD', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolHolidaySessionNumberACT', 'integer', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMSchoolTermWeek'] = [\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['BKSchoolTermWeek', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['Date', 'date', 'no-op'],\r\n",
							"                                        ['DayOfWeek', 'string', 'no-op'],\r\n",
							"                                        ['TermName', 'string', 'no-op'],\r\n",
							"                                        ['TermNumber', 'integer', 'no-op'],\r\n",
							"                                        ['WeekName', 'string', 'no-op'],\r\n",
							"                                        ['WeekNumber', 'integer', 'no-op'],\r\n",
							"                                        ['TermStartDate', 'string', 'no-op'],\r\n",
							"                                        ['TermFinishDate', 'string', 'no-op'],\r\n",
							"                                        ['IsPublicHoliday', 'string', 'no-op'],\r\n",
							"                                        ['IsTeachingDay', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMACERStanine', self.schemas['DMACERStanine'], 'LastUpdateDate', 'SKACERStanine')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMACERStudent', self.schemas['DMACERStudent'], 'LastUpdateDate', 'SKACERStudent')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactPATResponse', self.schemas['DMFactPATResponse'], 'LastUpdateDate', 'SKPATResponse')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactPATResults', self.schemas['DMFactPATResults'], 'LastUpdateDate', 'SKPATResults')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPersonDemographic', self.schemas['DMPersonDemographic'], 'LastUpdateDate', 'SKPerson')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPATStudentTestGrouping', self.schemas['DMPATStudentTestGrouping'], 'LastUpdateDate', 'SKPATStudentTestGrouping')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPATTest', self.schemas['DMPATTest'], 'LastUpdateDate', 'SKPATTest')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMCampus', self.schemas['DMCampus'], 'LastUpdateDate', 'SKCampus')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMCalendarYear', self.schemas['DMCalendarYear'], 'LastUpdateDate', 'SkYear')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMGender', self.schemas['DMGender'], 'LastUpdateDate', 'SKGenderId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMYearLevel', self.schemas['DMYearLevel'], 'LastUpdateDate', 'SKYearLevel')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMDate', self.schemas['DMDate'], 'LastUpdateDate', 'SKDate')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMSchoolTermWeek', self.schemas['DMSchoolTermWeek'], 'LastUpdateDate', 'SKSchoolTermWeek')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"acer_object = Acer_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Attendance_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1e7502a8-240d-4b53-b2c9-954913c1401c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Attendance_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='attendance', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['AggWholeDayAttendanceBySchool'] = [\r\n",
							"                                        ['SKAggWholeDayAttendanceBySchool', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['CountAttended', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                                                     \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['AggWholeDayAttendanceByStudent'] = [\r\n",
							"                                        ['SKAggWholeDayAttendanceByStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['CountAttended', 'integer', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceCode'] = [\r\n",
							"        #                                 ['SKAttendanceCode', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKattendanceCode', 'string', 'no-op'],\r\n",
							"        #                                 ['ExtendedStatusGUId', 'string', 'no-op'],\r\n",
							"        #                                 ['CountAbscence', 'string', 'no-op'],\r\n",
							"        #                                 ['StatusDescription', 'string', 'no-op'],\r\n",
							"        #                                 ['StatusName', 'string', 'no-op'],\r\n",
							"        #                                 ['SchoolSystemExportIdentifier', 'string', 'no-op'],\r\n",
							"        #                                 ['ShortCode', 'string', 'no-op'],\r\n",
							"        #                                 ['ShortName', 'string', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['SCDReason', 'string', 'no-op']                                \r\n",
							"        #                                 ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceNote'] = [\r\n",
							"        #                                 ['SKAttendanceNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKAttendanceNote', 'string', 'no-op'],\r\n",
							"        #                                 ['CompassPersonId', 'string', 'no-op'],\r\n",
							"        #                                 ['CalendarYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['NoteStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LengthOfNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['Details', 'string', 'no-op'],\r\n",
							"        #                                 ['DateNoteEntered', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteAttendanceCodeDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['NoteAttendanceCode', 'string', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['ScdReason', 'string', 'no-op']                                \r\n",
							"        #                                 ]\r\n",
							"\r\n",
							"        # self.schemas['DMAttendanceStatus'] = [\r\n",
							"        #                                 ['SKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusSifCode', 'string', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusSifDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['PrimarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['SecondarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['ScdReason', 'string', 'no-op'],\r\n",
							"        #                                 ['BusinessDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['AttendanceStatusGroup', 'string', 'no-op']                                                                                                             \r\n",
							"        #                                 ]\r\n",
							"        \r\n",
							"\r\n",
							"        # self.schemas['DMFactAttendanceCheckin'] = [\r\n",
							"        #                                 ['SKAttendanceCheckIn', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentID', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['CheckInTime', 'time', 'no-op'],\r\n",
							"        #                                 ['CheckInType', 'integer', 'no-op'],\r\n",
							"        #                                 ['CheckInCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op']                                                                      \r\n",
							"        #                                 ]    \r\n",
							"\r\n",
							"        # self.schemas['DMFactAttendanceRealTime'] = [\r\n",
							"        #                                 ['SKAttendanceRealTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentType', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['ArrivedLate', 'string', 'no-op'],\r\n",
							"        #                                 ['DepartedEarly', 'string', 'no-op'],\r\n",
							"        #                                 ['HasNote', 'string', 'no-op'],\r\n",
							"        #                                 ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['SliceCode', 'string', 'no-op']                                \r\n",
							"        #                             ]  \r\n",
							"\r\n",
							"\r\n",
							"        # self.schemas['dbo.vwDMFactHalfDayAttendance'] = [ \r\n",
							"        #                                 ['SKHalfDayAttendance', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentType', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['ArrivedLate', 'string', 'no-op'],\r\n",
							"        #                                 ['DepartedEarly', 'string', 'no-op'],\r\n",
							"        #                                 ['HasNote', 'string', 'no-op'],\r\n",
							"        #                                 ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['Iscurrent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKTimeSliceAMPM', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceNote', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentOrganisationDetails', 'integer', 'no-op']                               \r\n",
							"        #                             ] \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        # self.schemas['DMFactPeriodAttendance'] = [ \r\n",
							"        #                                 ['SKPeriodAttendance', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPerson', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYear', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKCampus', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKGender', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKATSI', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKStudentType', 'integer', 'no-op'],\r\n",
							"        #                                 ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"        #                                 ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"        #                                 ['ArrivedLate', 'string', 'no-op'],\r\n",
							"        #                                 ['DepartedEarly', 'string', 'no-op'],\r\n",
							"        #                                 ['HasNote', 'string', 'no-op'],\r\n",
							"        #                                 ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['Iscurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['SKStudentOrganisationDetails', 'integer', 'no-op']                              \r\n",
							"        #                             ]   \r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactWholeDayAttendance'] = [ \r\n",
							"                                        ['SKWholeDayAttendance', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"                                        ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentType', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'string', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'string', 'no-op'],\r\n",
							"                                        ['HasNote', 'string', 'no-op'],\r\n",
							"                                        ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['WholeDayAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['PartialAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['NoAbsence', 'integer', 'no-op'],\r\n",
							"                                        ['Disability', 'integer', 'no-op']                                \r\n",
							"                                    ]   \r\n",
							"                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'AggWholeDayAttendanceBySchool', self.schemas['AggWholeDayAttendanceBySchool'], None, 'SKAggWholeDayAttendanceBySchool')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'AggWholeDayAttendanceByStudent', self.schemas['AggWholeDayAttendanceByStudent'], None, 'SKAggWholeDayAttendanceByStudent')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceCode'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceNote'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMAttendanceStatus'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactAttendanceCheckin'], '<partition>', '<key>')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactAttendanceRealTime'], '<partition>', '<key>')\r\n",
							"\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactAttendanceRealTime'], '<partition>', '<key>')\r\n",
							"\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'attendance', self.schemas['DMFactMySchoolsAttendance'], '<partition>', '<key>')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactWholeDayAttendance', self.schemas['DMFactWholeDayAttendance'], None, 'SKWholeDayAttendance')\r\n",
							"\r\n",
							"\r\n",
							"        \r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student_test_file', self.schemas['student_test'], 'LastUpdateDate', 'SKStudent') # try to partition by LastUpdateDate instead of CreateDate\r\n",
							"\r\n",
							"        #oea.ingest_incremental_data(self.source_folder, 'student', self.schemas['student'], 'name', 'id')\r\n",
							"        #oea.ingest_snapshot_data(self.source_folder, 'studentsectionmark', self.schemas['studentsectionmark'], 'school_year', 'id')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'studentdemographics', self.schemas['studentdemographics'], 'school_year', 'id')\r\n",
							"\r\n",
							"attendance_object = Attendance_object()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Class_period_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2657bd02-dcdf-4610-9dd2-cbdc7058b3b9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Class_period_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='class_period', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMFactPeriodAttendance'] = [\r\n",
							"                                        ['SKPeriodAttendance', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodStartTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKPeriodEndTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodePrevalent', 'integer', 'no-op'],\r\n",
							"                                        ['SKAttendanceCodeCounted', 'integer', 'no-op'],\r\n",
							"                                        ['SKArrivalTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKDepartureTime', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTermWeek', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentType', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersonImportIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['TotalSchoolMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['TotalMinutesMissed', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesArrivedLate', 'integer', 'no-op'],\r\n",
							"                                        ['MinutesDepartedEarly', 'integer', 'no-op'],\r\n",
							"                                        ['UnmarkedMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['UnscheduledMinutes', 'integer', 'no-op'],\r\n",
							"                                        ['ArrivedLate', 'string', 'no-op'],\r\n",
							"                                        ['DepartedEarly', 'string', 'no-op'],\r\n",
							"                                        ['HasNote', 'string', 'no-op'],\r\n",
							"                                        ['SliceRecordCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op']                                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMClass'] = [\r\n",
							"                                        ['SKClass', 'integer', 'no-op'],\r\n",
							"                                        ['BKClassId', 'integer', 'no-op'],\r\n",
							"                                        ['ClassSifCode', 'string', 'no-op'],\r\n",
							"                                        ['ClassSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['ClassGroup', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactPeriodAttendance', self.schemas['DMFactPeriodAttendance'], 'LastUpdateDate', 'SKPeriodAttendance')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMClass', self.schemas['DMClass'], 'LastUpdateDate', 'SKClass')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"class_period_object = Class_period_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataCopy_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bfce1eda-5d64-4ed8-bf0b-60e46f85bcfb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"class DataCopy(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder, pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"        \r\n",
							"    def createFoldersForAll(self):\r\n",
							"        file_list = mssparkutils.fs.ls(self.stage1np)\r\n",
							"        for file in file_list:\r\n",
							"            # ignore subfolders\r\n",
							"            if file.isDir:\r\n",
							"                continue\r\n",
							"                \r\n",
							"            # if the filename is preceded by 'dbovw', remove it and use the rest of the file name as the directory\r\n",
							"            if file.name.find('dbovw') == 0:\r\n",
							"                destination = file.name.replace('dbovw', '')\r\n",
							"            elif file.name.find('dbo.vw') == 0:\r\n",
							"                destination = file.name.replace('dbo.vw', '')\r\n",
							"            elif file.name.find('dbo.') == 0:\r\n",
							"                destination = file.name.replace('dbo.', '')\r\n",
							"            elif file.name.find('dbo') == 0:\r\n",
							"                destination = file.name.replace('dbo', '')\r\n",
							"            else:\r\n",
							"                destination = file.name\r\n",
							"            \r\n",
							"            # copy the file to the created folder\r\n",
							"            self._copyToFolder(file, destination)\r\n",
							"\r\n",
							"\r\n",
							"    def _copyToFolder(self, file, destination):\r\n",
							"        \"\"\" Moves the file to a folder that is based on the filename without its file extension\"\"\"\r\n",
							"        tokens = destination.split(\".\")\r\n",
							"        target = self.stage1np + '/' + tokens[0] +'/' + file.name\r\n",
							"        mssparkutils.fs.mv(file.path, target, True) # will create the new dir and move file into it\r\n",
							"\r\n",
							"\r\n",
							"# instantiate the datacopy with a source folder that contains all the ingested data files \r\n",
							"datacopy = DataCopy(source_folder)\r\n",
							"\r\n",
							"datacopy.createFoldersForAll()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Enrolment_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f6e4bfde-0094-4e15-a144-54d994d3776b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Enrolment_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='enrolment', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMEnrolmentStatus'] = [\r\n",
							"                                        ['SKEnrolmentStatus', 'integer', 'no-op'],\r\n",
							"                                        ['BKEnrolmentStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentStatusDesc', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentActive', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentActiveYesNo', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentGroup', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op']                                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentEnrolment'] = [\r\n",
							"                                        ['UIDEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentSubmitted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentStarted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentEnded', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['EslYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LboteYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['SwdYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentFTE', 'double', 'no-op'],\r\n",
							"                                        ['SKMainCampus', 'integer', 'no-op']                                                           \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentEnrolmentCounts'] = [\r\n",
							"                                        ['SKStudentEnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTE_Int', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTE_YesNo', 'string', 'no-op'], #converted varchar to string\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKDate', 'integer', 'no-op'],\r\n",
							"                                        ['StudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ReceivesESL_Int', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESL_YesNo', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL_Int', 'integer', 'no-op'],\r\n",
							"                                        ['RequiresESL_YesNo', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactSubjectEnrolment'] = [\r\n",
							"                                        ['SKFactSubjectEnrolment', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKStaff', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKSubject', 'integer', 'no-op'],\r\n",
							"                                        ['SKActivity', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentStartDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentEndDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op']                                                                                                 \r\n",
							"                                        ]\r\n",
							"            \r\n",
							"\r\n",
							"      \r\n",
							"\r\n",
							"        self.schemas['DMPreEnrolment'] = [\r\n",
							"                                        ['SKEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentYear', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceEnrolmentId', 'string', 'no-op'],\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['BKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['DateEnrolmentSubmitted', 'date', 'no-op'],\r\n",
							"                                        ['DateEnrolmentStarted', 'date', 'no-op'],\r\n",
							"                                        ['DateEnrolmentEnded', 'date', 'no-op'],\r\n",
							"                                        ['EnrolmentStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['EslYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LboteYesNo', 'string', 'no-op'],\r\n",
							"                                        ['AtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['SwdYesNo', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentFTE', 'double', 'no-op'],\r\n",
							"                                        ['MainCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceStatus', 'integer', 'no-op']                                                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMPreEnrolmentId'] = [\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceEnrolmentId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMActivity'] = [\r\n",
							"                                        ['SKActivity', 'integer', 'no-op'],\r\n",
							"                                        ['BKActivity', 'string', 'no-op'],\r\n",
							"                                        ['ActivityCode', 'string', 'no-op'],\r\n",
							"                                        ['ActivityName', 'string', 'no-op'],\r\n",
							"                                        ['AcamademicYear', 'integer', 'no-op'],\r\n",
							"                                        ['Status', 'integer', 'no-op'],\r\n",
							"                                        ['SubjectCode', 'string', 'no-op'],\r\n",
							"                                        ['StartDateTime', 'string', 'no-op'],\r\n",
							"                                        ['EndDateTime', 'string', 'no-op'],\r\n",
							"                                        ['ManagingCompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['DefaultLocation', 'string', 'no-op'],\r\n",
							"                                        ['ActivityType', 'integer', 'no-op'],\r\n",
							"                                        ['ActivityTypeDescription', 'string', 'no-op'],\r\n",
							"                                        ['AttendanceMode', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceModeDescription', 'string', 'no-op'],\r\n",
							"                                        ['RunningStatus', 'integer', 'no-op'],\r\n",
							"                                        ['RunningStatusDescription', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMSubject'] = [\r\n",
							"                                        ['SKSubject', 'integer', 'no-op'],\r\n",
							"                                        ['BKSubject', 'string', 'no-op'],\r\n",
							"                                        ['AcademicYear', 'integer', 'no-op'],\r\n",
							"                                        ['AcademicYearName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectLongName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectShortName', 'string', 'no-op'],\r\n",
							"                                        ['SubjectImportIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['Status', 'string', 'no-op'],\r\n",
							"                                        ['SubjectYearLevel', 'string', 'no-op'],\r\n",
							"                                        ['FacultyImportIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['FacultyLongName', 'string', 'no-op'],\r\n",
							"                                        ['FacultyShortName', 'string', 'no-op'],\r\n",
							"                                        ['FacultyStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMRollGroup'] = [\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['BKRollGroup', 'string', 'no-op'],\r\n",
							"                                        ['RollGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['Iscurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"                             \r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMEnrolmentStatus', self.schemas['DMEnrolmentStatus'], 'LastUpdateDate', 'SKEnrolmentStatus')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactStudentEnrolment', self.schemas['DMFactStudentEnrolment'], 'LastUpdateDate', 'UIDEnrolmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactStudentEnrolmentCounts', self.schemas['DMFactStudentEnrolmentCounts'], None, 'SKStudentEnrolmentCount')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactSubjectEnrolment', self.schemas['DMFactSubjectEnrolment'], 'LastUpdateDate', 'SKFactSubjectEnrolment')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPreEnrolment', self.schemas['DMPreEnrolment'], 'LastUpdateDate', 'SKEnrolmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPreEnrolmentId', self.schemas['DMPreEnrolmentId'], 'LastUpdateDate', 'SKPreEnrolmentId')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMActivity', self.schemas['DMActivity'], 'LastUpdateDate', 'SKActivity')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMSubject', self.schemas['DMSubject'], 'LastUpdateDate', 'SKSubject')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMRollGroup', self.schemas['DMRollGroup'], 'LastUpdateDate', 'SKRollGroup')\r\n",
							"\r\n",
							"\r\n",
							"enrolment_object = Enrolment_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MySchools_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2a587bcf-2163-4ef0-9cfc-a61e5aa92db4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class MySchools_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='MySchools', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsAttendance'] = [\r\n",
							"                                        ['SKMySchoolsAttendance', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsAttendance', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKSchoolTerm', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceRate', 'double', 'no-op'],\r\n",
							"                                        ['IndigenousAttendanceRate', 'double', 'no-op'],\r\n",
							"                                        ['NonIndigenousAttendanceRate', 'double', 'no-op'],\r\n",
							"                                        ['AttendanceLevel', 'double', 'no-op'],\r\n",
							"                                        ['IndigenousAttendanceLevel', 'double', 'no-op'],\r\n",
							"                                        ['NonIndigenousAttendanceLevel', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                           \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsEnrolmentsByGrade'] = [\r\n",
							"                                        ['SKMySchoolsEnrolmentsByGrade', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsEnrolmentsByGrade', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                          \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsFinance'] = [\r\n",
							"                                        ['SKMySchoolsFinance', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsFinance', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['IncomeAustralianGovernmentRecurrentFunding', 'double', 'no-op'],\r\n",
							"                                        ['IncomeStateTerritoryGovernmentRecurrentFunding', 'double', 'no-op'],\r\n",
							"                                        ['IncomeFeesChargesandParentalContributions', 'double', 'no-op'],\r\n",
							"                                        ['IncomeOtherPrivateSources', 'double', 'no-op'],\r\n",
							"                                        ['TotalGrossIncome', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoCurrentCapitalProjects', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoFutureCapitalProjects', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoDebtServicing', 'double', 'no-op'],\r\n",
							"                                        ['TotalDeductions', 'double', 'no-op'],\r\n",
							"                                        ['TotalNetRecurrentIncome', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureAustralianGovernment', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureState/TerritoryGovernment', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureNewSchoolLoans', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureIncomeAllocatedtoCurrentCapitalProjects', 'double', 'no-op'],\r\n",
							"                                        ['CapitalExpenditureOtherPrivateSources', 'double', 'no-op'],\r\n",
							"                                        ['TotalCapitalExpenditure', 'double', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalentFundedEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['IncomeAustralianGovernmentRecurrentFundingPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['IncomeStateTerritoryGovernmentRecurrentFundingPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['IncomeFeesChargesandParentalContributionsPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['IncomeOtherPrivateSourcesPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['TotalGrossIncomePerStudent', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoCurrentCapitalProjectsPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoFutureCapitalProjectsPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['DeductionsIncomeAllocatedtoDebtServicingPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['TotalDeductionsPerStudent', 'double', 'no-op'],\r\n",
							"                                        ['TotalNetRecurrentIncomePerStudent', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                         \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsNAPLANResults'] = [\r\n",
							"                                        ['SKMySchoolsNAPLANResults', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsNAPLANResults', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['MeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanMarginLower', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanMarginUpper', 'double', 'no-op'],\r\n",
							"                                        ['Band1Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band2Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band3Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band4Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band5Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band6Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band7Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band8Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band9Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band10Percentage', 'double', 'no-op'],\r\n",
							"                                        ['ParticipationRate', 'double', 'no-op'],\r\n",
							"                                        ['AssessedPercentage', 'double', 'no-op'],\r\n",
							"                                        ['ExemptPercentage', 'double', 'no-op'],\r\n",
							"                                        ['AbsentPercentage', 'double', 'no-op'],\r\n",
							"                                        ['WithdrawnPercentage', 'double', 'no-op'],\r\n",
							"                                        ['NationalMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['ColourComparisontoNationalMean', 'string', 'no-op'],\r\n",
							"                                        ['ComparisontoNationalMeanDescription', 'string', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['ColourComparisontoSimilarSchoolsMean', 'string', 'no-op'],\r\n",
							"                                        ['ComparisontoSimilarSchoolsMeanDescription', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['StudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsNAPLANResultsSimilarSchools'] = [\r\n",
							"                                        ['SKMySchoolsNAPLANResultsSimilarSchools', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsNAPLANResultsSimilarSchools', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsSchoolMeanMarginLower', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsSchoolMeanMarginUpper', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand1Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand2Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand3Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand4Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand5Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand6Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand7Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand8Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand9Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand10Percentage', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsProfile'] = [\r\n",
							"                                        ['SKMySchoolsProfile', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsProfile', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['BottomSEA Quarter', 'integer', 'no-op'],\r\n",
							"                                        ['LowerMiddleSEAQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['UpperMiddleSEAQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['TopSEAQuarter', 'integer', 'no-op'],\r\n",
							"                                        ['TeachingStaff', 'integer', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalentTeachingStaff', 'double', 'no-op'],\r\n",
							"                                        ['NonTeachingStaff', 'integer', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalentNonTeaching Staff', 'double', 'no-op'],\r\n",
							"                                        ['TotalEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['GirlsEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['BoysEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalentEnrolments', 'double', 'no-op'],\r\n",
							"                                        ['IndigenousEnrolments', 'integer', 'no-op'],\r\n",
							"                                        ['LanguageBackgroundOtherThanEnglish', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsSeniorOutcomes'] = [\r\n",
							"                                        ['SKMySchoolsSeniorOutcomes', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsSeniorOutcomes', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SeniorSecondaryCertificatesAwarded', 'integer', 'no-op'],\r\n",
							"                                        ['CompletedSeniorSecondarySchool', 'integer', 'no-op'],\r\n",
							"                                        ['StudentsatUniversity', 'integer', 'no-op'],\r\n",
							"                                        ['StudentsatTAFE', 'integer', 'no-op'],\r\n",
							"                                        ['StudentsinEmployment', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                         \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsStudentGain'] = [\r\n",
							"                                        ['SKMySchoolsStudentGain', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsStudentGain', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentGainGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMedianNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMedianLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMedianUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['MatchedStudentPercentage', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                       \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsStudentGainSameStartingScore'] = [\r\n",
							"                                        ['SKMySchoolsStudentGainSameStartingScore', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsStudentGainSameStartingScore', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentGainGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMeanLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMeanUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMedianNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMedianLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SameStartingScoreSchoolMedianUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsStudentGainSimilarSchools'] = [\r\n",
							"                                        ['SKMySchoolsStudentGainSimilarSchools', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsStudentGainSimilarSchools', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentGainGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMedianNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMedianLowerMargin', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMedianUpperMargin', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsVETInSchools'] = [\r\n",
							"                                        ['SKMySchoolsVETInSchools', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsVETInSchools', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKVETStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SKVETClassification', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['ClassificationTotal', 'integer', 'no-op'],\r\n",
							"                                        ['CertificateI', 'integer', 'no-op'],\r\n",
							"                                        ['CertificateII', 'integer', 'no-op'],\r\n",
							"                                        ['CertificateIII', 'integer', 'no-op'],\r\n",
							"                                        ['CertificateIV', 'integer', 'no-op'],\r\n",
							"                                        ['DiplomaorHigher', 'integer', 'no-op'],\r\n",
							"                                        ['Other', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships'] = [\r\n",
							"                                        ['SKMySchoolsVETSchoolBasedApprenticeshipsTraineeships', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsVETSchoolBasedApprenticeshipsTraineeships', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadcount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                         \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMMySchoolsStudentGainGroup'] = [\r\n",
							"                                        ['SKStudentGainGroup', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentGainGroup', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYearRange', 'string', 'no-op'],\r\n",
							"                                        ['StudentGradeLevelRange', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDescription', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                        \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMMySchoolsVETClassification'] = [\r\n",
							"                                        ['SKVETClassification', 'integer', 'no-op'],\r\n",
							"                                        ['BKVETClassification', 'string', 'no-op'],\r\n",
							"                                        ['HeadClassificationDesc', 'string', 'no-op'],\r\n",
							"                                        ['SubClassificationDesc', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDescription', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMMySchoolsVETStatus'] = [\r\n",
							"                                        ['SKVETStatus', 'integer', 'no-op'],\r\n",
							"                                        ['BKVETStatus', 'string', 'no-op'],\r\n",
							"                                        ['VETStatus', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDescription', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsAttendance', self.schemas['DMFactMySchoolsAttendance'], 'LastUpdateDate', 'SKMySchoolsAttendance')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsEnrolmentsByGrade', self.schemas['DMFactMySchoolsEnrolmentsByGrade'], 'LastUpdateDate', 'SKMySchoolsEnrolmentsByGrade')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsFinance', self.schemas['DMFactMySchoolsFinance'], 'LastUpdateDate', 'SKMySchoolsFinance')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsNAPLANResults', self.schemas['DMFactMySchoolsNAPLANResults'], 'LastUpdateDate', 'SKMySchoolsNAPLANResults')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsNAPLANResultsSimilarSchools', self.schemas['DMFactMySchoolsNAPLANResultsSimilarSchools'], 'LastUpdateDate', 'SKMySchoolsNAPLANResultsSimilarSchools')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsProfile', self.schemas['DMFactMySchoolsProfile'], 'LastUpdateDate', 'SKMySchoolsProfile')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsSeniorOutcomes', self.schemas['DMFactMySchoolsSeniorOutcomes'], 'LastUpdateDate', 'SKMySchoolsSeniorOutcomes')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsStudentGain', self.schemas['DMFactMySchoolsStudentGain'], 'LastUpdateDate', 'SKMySchoolsStudentGain')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsStudentGainSameStartingScore', self.schemas['DMFactMySchoolsStudentGainSameStartingScore'], 'LastUpdateDate', 'SKMySchoolsStudentGainSameStartingScore')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsStudentGainSimilarSchools', self.schemas['DMFactMySchoolsStudentGainSimilarSchools'], 'LastUpdateDate', 'SKMySchoolsStudentGainSimilarSchools')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsVETInSchools', self.schemas['DMFactMySchoolsVETInSchools'], 'LastUpdateDate', 'SKMySchoolsVETInSchools')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships', self.schemas['DMFactMySchoolsVETSchoolBasedApprenticeshipsTraineeships'], 'LastUpdateDate', 'SKMySchoolsVETSchoolBasedApprenticeshipsTraineeships')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMMySchoolsStudentGainGroup', self.schemas['DMMySchoolsStudentGainGroup'], 'LastUpdateDate', 'SKStudentGainGroup')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMMySchoolsVETClassification', self.schemas['DMMySchoolsVETClassification'], 'LastUpdateDate', 'SKVETClassification')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMMySchoolsVETStatus', self.schemas['DMMySchoolsVETStatus'], 'LastUpdateDate', 'SKVETStatus')\r\n",
							"        \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"myschools_object = MySchools_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NAPLAN_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e2c8144d-ae22-4abb-ac5a-c6d9e10e3a8a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class NAPLAN_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='NAPLAN', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['NaplanData'] = [\r\n",
							"                                        ['SkPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['Test', 'string', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBand', 'integer', 'no-op'],\r\n",
							"                                        ['Band', 'string', 'no-op']                                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NaplanNational'] = [\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['Test', 'string', 'no-op'],\r\n",
							"                                        ['AverageScoreNational', 'double', 'no-op']                                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NaplanNationalAverage'] = [\r\n",
							"                                        ['Year', 'integer', 'no-op'],\r\n",
							"                                        ['Year Level', 'string', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],   #changed float to double\r\n",
							"                                        ['Test', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsNAPLANResults'] = [\r\n",
							"                                        ['SKMySchoolsNAPLANResults', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsNAPLANResults', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['MeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanMarginLower', 'double', 'no-op'],\r\n",
							"                                        ['SchoolMeanMarginUpper', 'double', 'no-op'],\r\n",
							"                                        ['Band1Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band2Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band3Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band4Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band5Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band6Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band7Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band8Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band9Percentage', 'double', 'no-op'],\r\n",
							"                                        ['Band10Percentage', 'double', 'no-op'],\r\n",
							"                                        ['ParticipationRate', 'double', 'no-op'],\r\n",
							"                                        ['AssessedPercentage', 'double', 'no-op'],\r\n",
							"                                        ['ExemptPercentage', 'double', 'no-op'],\r\n",
							"                                        ['AbsentPercentage', 'double', 'no-op'],\r\n",
							"                                        ['WithdrawnPercentage', 'double', 'no-op'],\r\n",
							"                                        ['NationalMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['ColourComparisontoNationalMean', 'string', 'no-op'],\r\n",
							"                                        ['ComparisontoNationalMeanDescription', 'string', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['ColourComparisontoSimilarSchoolsMean', 'string', 'no-op'],\r\n",
							"                                        ['ComparisontoSimilarSchoolsMeanDescription', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['StudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['LocationId', 'integer', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactMySchoolsNAPLANResultsSimilarSchools'] = [\r\n",
							"                                        ['SKMySchoolsNAPLANResultsSimilarSchools', 'integer', 'no-op'],\r\n",
							"                                        ['BKMySchoolsNAPLANResultsSimilarSchools', 'string', 'no-op'],\r\n",
							"                                        ['SKCalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessment', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['ICSEACode', 'integer', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsMeanNAPLANScore', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsSchoolMeanMarginLower', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsSchoolMeanMarginUpper', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand1Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand2Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand3Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand4Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand5Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand6Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand7Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand8Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand9Percentage', 'double', 'no-op'],\r\n",
							"                                        ['SimilarSchoolsBand10Percentage', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANACARABands'] = [\r\n",
							"                                        ['SKNaplanAcaraBands', 'integer', 'no-op'],\r\n",
							"                                        ['BKNaplanAcaraBandsId', 'string', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKStateTerritory', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssesmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['AverageAge', 'string', 'no-op'],\r\n",
							"                                        ['YearsOfSchooling', 'string', 'no-op'],\r\n",
							"                                        ['ParticipationRate', 'double', 'no-op'],\r\n",
							"                                        ['Exempt', 'double', 'no-op'],\r\n",
							"                                        ['BandPercentage', 'double', 'no-op'],\r\n",
							"                                        ['NationalMinimumStandard', 'double', 'no-op'],\r\n",
							"                                        ['NationalMinimumStandardCI', 'double', 'no-op'],\r\n",
							"                                        ['MeanScale', 'double', 'no-op'],\r\n",
							"                                        ['MeanScaleCI', 'double', 'no-op'],\r\n",
							"                                        ['NotStatedPercentage', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANOnlineStudentItemResponse'] = [\r\n",
							"                                        ['SKFactNAPLANOnlineStudentItemResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineStudentItemResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineStudentResult', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANTest', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineTestPath', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineTestlet', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineTestItem', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANParticipationCode', 'integer', 'no-op'],\r\n",
							"                                        ['SkYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['PersistentIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessBit', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessInt', 'integer', 'no-op'],\r\n",
							"                                        ['LapsedTimeItemSeconds', 'double', 'no-op'],\r\n",
							"                                        ['SequenceNumber', 'integer', 'no-op'],\r\n",
							"                                        ['ItemWeight', 'integer', 'no-op'],\r\n",
							"                                        ['TestletSubScore', 'integer', 'no-op'],\r\n",
							"                                        ['DomainScaledScore', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANOnlineStudentTestResult'] = [\r\n",
							"                                        ['SKFactNAPLANOnlineStudentTestResult', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineStudentTestResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineStudentResult', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANOnlineTestPath', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANParticipationCode', 'integer', 'no-op'],\r\n",
							"                                        ['StudentDomainBand', 'integer', 'no-op'],\r\n",
							"                                        ['RawScore', 'double', 'no-op'],\r\n",
							"                                        ['ScaledScoreValue', 'double', 'no-op'],\r\n",
							"                                        ['ScaledScoreLogitValue', 'double', 'no-op'],\r\n",
							"                                        ['ScaledScoreStandardError', 'double', 'no-op'],\r\n",
							"                                        ['ScaledScoreLogitStandardError', 'double', 'no-op'],\r\n",
							"                                        ['DomainNationalAverage', 'double', 'no-op'],\r\n",
							"                                        ['DomainSchoolAverage', 'double', 'no-op'],\r\n",
							"                                        ['DomainJurisdictionAverage', 'double', 'no-op'],\r\n",
							"                                        ['DomainStateAverage', 'double', 'no-op'],\r\n",
							"                                        ['DomainTopNational60Percent', 'double', 'no-op'],\r\n",
							"                                        ['DomainBottomNational60Percent', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ActualStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ExpectedStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualStateGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualNationalGrowth', 'double', 'no-op'],\r\n",
							"                                        ['DomainNationalStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['DomainStateStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['DomainJurisdictionStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['DomainSchoolStandardDeviation', 'double', 'no-op'],\r\n",
							"                                        ['ElapsedTimeSecs', 'double', 'no-op'],\r\n",
							"                                        ['SKNAPLANTest', 'integer', 'no-op'],\r\n",
							"                                        ['StatisticallySimilarSchoolsCEnetGroupAverage', 'double', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNAPLANStudentResponse'] = [\r\n",
							"                                        ['SKFactNAPLANStudentResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANStudentResponseId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANQuestionId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCorrectAnswer', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANResponse', 'integer', 'no-op'],\r\n",
							"                                        ['SKNAPLANTextResponse', 'integer', 'no-op'],\r\n",
							"                                        ['IsCorrectAnswer', 'string', 'no-op'],\r\n",
							"                                        ['SchoolPercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['DiocesePercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['StatePercentCorrect', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCampus', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreSchool', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreDiocese', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreNational', 'double', 'no-op'],\r\n",
							"                                        ['PercentCorrectNSW', 'double', 'no-op'],\r\n",
							"                                        ['PercentCorrectQLD', 'double', 'no-op'],\r\n",
							"                                        ['PercentCorrectNational', 'double', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactNaplanStudentYearResult'] = [\r\n",
							"                                        ['UId', 'integer', 'no-op'],\r\n",
							"                                        ['SkStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SkPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SkYear', 'integer', 'no-op'],\r\n",
							"                                        ['SkNaplanStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SkExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['SkNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkNAPLANACARAAggregateId', 'integer', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCampus', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreSchool', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreDiocese', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreNational', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCenetState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCenetNational', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKNaplanResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanSourceId', 'integer', 'no-op'],\r\n",
							"                                        ['StandardDeviationState', 'double', 'no-op'],\r\n",
							"                                        ['StandardDeviationNational', 'double', 'no-op'],\r\n",
							"                                        ['ActualStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ExpectedStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualStateGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualNationalGrowth', 'double', 'no-op']                                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLAN'] = [\r\n",
							"                                        ['SKNaplanResultId', 'integer', 'no-op'],\r\n",
							"                                        ['uidNaplanResult', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['LocalSchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['LocalStudentId', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['Indigenous', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['ScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['BandReading', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['BandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['BandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['BandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['BandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandReading', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentDisplayId', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op']                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANACARAAggregate'] = [\r\n",
							"                                        ['SkNAPLANACARAAggregateId', 'integer', 'no-op'],\r\n",
							"                                        ['BkNAPLANACARAAggregateId', 'string', 'no-op'],\r\n",
							"                                        ['BkYear', 'integer', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['BkNaplanAssessmentArea', 'string', 'no-op'],\r\n",
							"                                        ['ACT', 'double', 'no-op'],\r\n",
							"                                        ['ACTFemale', 'double', 'no-op'],\r\n",
							"                                        ['ACTIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['ACTLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['ACTMale', 'double', 'no-op'],\r\n",
							"                                        ['ACTNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['ACTNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['ACTParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['Aust', 'double', 'no-op'],\r\n",
							"                                        ['AustFemale', 'double', 'no-op'],\r\n",
							"                                        ['AustIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['AustLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['AustMale', 'double', 'no-op'],\r\n",
							"                                        ['AustNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['AustNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['AustParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['NSW', 'double', 'no-op'],\r\n",
							"                                        ['NSWFemale', 'double', 'no-op'],\r\n",
							"                                        ['NSWIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['NSWLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['NSWMale', 'double', 'no-op'],\r\n",
							"                                        ['NSWNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['NSWNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['NSWParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['NT', 'double', 'no-op'],\r\n",
							"                                        ['NTFemale', 'double', 'no-op'],\r\n",
							"                                        ['NTIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['NTLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['NTMale', 'double', 'no-op'],\r\n",
							"                                        ['NTNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['NTNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['NTParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['Qld', 'double', 'no-op'],\r\n",
							"                                        ['QldFemale', 'double', 'no-op'],\r\n",
							"                                        ['QldIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['QldLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['QldMale', 'double', 'no-op'],\r\n",
							"                                        ['QldNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['QldNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['QldParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['SA', 'double', 'no-op'],\r\n",
							"                                        ['SAFemale', 'double', 'no-op'],\r\n",
							"                                        ['SAIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['SALBOTE', 'double', 'no-op'],\r\n",
							"                                        ['SAMale', 'double', 'no-op'],\r\n",
							"                                        ['SANonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['SANonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['SAParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['Tas', 'double', 'no-op'],\r\n",
							"                                        ['TasFemale', 'double', 'no-op'],\r\n",
							"                                        ['TasIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['TasLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['TasMale', 'double', 'no-op'],\r\n",
							"                                        ['TasNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['TasNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['TasParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['Vic', 'double', 'no-op'],\r\n",
							"                                        ['VicFemale', 'double', 'no-op'],\r\n",
							"                                        ['VicIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['VicLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['VicMale', 'double', 'no-op'],\r\n",
							"                                        ['VicNonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['VicNonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['VicParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['WA', 'double', 'no-op'],\r\n",
							"                                        ['WAFemale', 'double', 'no-op'],\r\n",
							"                                        ['WAIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['WALBOTE', 'double', 'no-op'],\r\n",
							"                                        ['WAMale', 'double', 'no-op'],\r\n",
							"                                        ['WANonIndigenous', 'double', 'no-op'],\r\n",
							"                                        ['WANonLBOTE', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationBachelor', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationCertificate', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationDiploma', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationYear11', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalEducationYear12', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationGroup1', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationGroup2', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationGroup3', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationGroup4', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationNotInPaidWork', 'double', 'no-op'],\r\n",
							"                                        ['WAParentalOccupationNotStated', 'double', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                  \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANAnswer'] = [\r\n",
							"                                        ['SKNAPLANAnswerId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANAnswerId', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANQuestionId', 'string', 'no-op'],\r\n",
							"                                        ['Answer', 'string', 'no-op'],\r\n",
							"                                        ['IsCorrectAnswer', 'string', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder3', 'double', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                    \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANAssessmentArea'] = [\r\n",
							"                                        ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNaplanAssesmentArea', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaDesc', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaShortDesc', 'string', 'no-op'],\r\n",
							"                                        ['NaplanAssesmentAreaBusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANOnlineStudentItemResponse'] = [\r\n",
							"                                        ['SKNAPLANOnlineStudentItemResponse', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANOnlineStudentItemResponse', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANTestId', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANOnlineTestletResponseId', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANOnlineTestItemId', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANOnlineTestItemLocalId', 'string', 'no-op'],\r\n",
							"                                        ['Response', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectness', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessBit', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCorrectnessInt', 'integer', 'no-op'],\r\n",
							"                                        ['Score', 'integer', 'no-op'],\r\n",
							"                                        ['LapsedTimeItemDisplay', 'string', 'no-op'],\r\n",
							"                                        ['LapsedTimeSeconds', 'double', 'no-op'],\r\n",
							"                                        ['Script', 'string', 'no-op'],\r\n",
							"                                        ['SequenceNumber', 'integer', 'no-op'],\r\n",
							"                                        ['ItemWeight', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                    \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANOnlineStudentResult'] = [\r\n",
							"                                        ['SKNAPLANOnlineStudentResult', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANOnlineStudentResult', 'string', 'no-op'],\r\n",
							"                                        ['LocalId', 'string', 'no-op'],\r\n",
							"                                        ['StateProvinceId', 'string', 'no-op'],\r\n",
							"                                        ['AcceptableUsePolicy', 'string', 'no-op'],\r\n",
							"                                        ['EducationSupport', 'string', 'no-op'],\r\n",
							"                                        ['HomeSchooledStudent', 'string', 'no-op'],\r\n",
							"                                        ['Sensitive', 'string', 'no-op'],\r\n",
							"                                        ['OfflineDelivery', 'string', 'no-op'],\r\n",
							"                                        ['AlertMessages', 'string', 'no-op'],\r\n",
							"                                        ['MedicalAlertMessages', 'string', 'no-op'],\r\n",
							"                                        ['NameType', 'string', 'no-op'],\r\n",
							"                                        ['FamilyName', 'string', 'no-op'],\r\n",
							"                                        ['GivenName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredGivenName', 'string', 'no-op'],\r\n",
							"                                        ['BKAtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSISifDesc', 'string', 'no-op'],\r\n",
							"                                        ['GenderSifCode', 'string', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthDate', 'string', 'no-op'],   #replaced datetime with string\r\n",
							"                                        ['TestYear', 'integer', 'no-op'],\r\n",
							"                                        ['PlatformStudentIdentifier', 'string', 'no-op'],\r\n",
							"                                        ['PersistentIdentifier', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['BandReading', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['BandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['BandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['BandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['BandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['CountryOfBirthCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CitizenShipStatusSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CitizenShipStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['EnglishProficiencyCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassSifCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['VisaStatisticalCode', 'string', 'no-op'],\r\n",
							"                                        ['DwellingArrangementCode', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResident', 'string', 'no-op'],\r\n",
							"                                        ['SchoolLocalId', 'string', 'no-op'],\r\n",
							"                                        ['HomeroomLocalId', 'string', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['FTE', 'string', 'no-op'],\r\n",
							"                                        ['Parent1LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EmploymentTypeSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EmploymentTypeSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EmploymentTypeSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EmploymentTypeSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationNonSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent1EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationNonSchoolLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['Parent2EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LocalCampusId', 'string', 'no-op'],\r\n",
							"                                        ['SchoolACARAId', 'string', 'no-op'],\r\n",
							"                                        ['Homegroup', 'string', 'no-op'],\r\n",
							"                                        ['ClassCode', 'string', 'no-op'],\r\n",
							"                                        ['MembershipType', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['ReportingSchoolId', 'string', 'no-op'],\r\n",
							"                                        ['OtherEnrollmentSchoolACARAId', 'string', 'no-op'],\r\n",
							"                                        ['AddressType', 'string', 'no-op'],\r\n",
							"                                        ['AddressRole', 'string', 'no-op'],\r\n",
							"                                        ['AddressStreetLine1', 'string', 'no-op'],\r\n",
							"                                        ['AddressStreetLine2', 'string', 'no-op'],\r\n",
							"                                        ['AddressCity', 'string', 'no-op'],\r\n",
							"                                        ['AddressStateProvince', 'string', 'no-op'],\r\n",
							"                                        ['AddressPostalCode', 'string', 'no-op'],\r\n",
							"                                        ['AddressCountry', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfCitizenshipSifCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfCitizenshipSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfResidencySifCode', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfResidencySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LanguageSifCode', 'string', 'no-op'],\r\n",
							"                                        ['LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddressType', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddressValue', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumberType', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['PhoneNumberListedStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandReading', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEDescription', 'string', 'no-op'],\r\n",
							"                                        ['IsOnlineDesc', 'string', 'no-op'],\r\n",
							"                                        ['ConcatenatedName', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANOnlineStudentTestResultId'] = [\r\n",
							"                                        ['SKNAPLANOnlineStudentTestResultId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANOnlineStudentTestResultId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANStudent'] = [\r\n",
							"                                        ['SkNaplanStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['uidNaplanResult', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['LocalSchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['LocalStudentId', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['Indigenous', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['GenderGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentDisplayId', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANStudentResponseId'] = [\r\n",
							"                                        ['SKNAPLANStudentResponseId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANStudentResponseId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANTest'] = [\r\n",
							"                                        ['SKNAPLANTest', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANTest', 'string', 'no-op'],\r\n",
							"                                        ['TestYear', 'integer', 'no-op'],\r\n",
							"                                        ['NAPTestLocalId', 'string', 'no-op'],\r\n",
							"                                        ['TestName', 'string', 'no-op'],\r\n",
							"                                        ['TestLevelCode', 'integer', 'no-op'],\r\n",
							"                                        ['TestType', 'string', 'no-op'],\r\n",
							"                                        ['StagesCount', 'string', 'no-op'],\r\n",
							"                                        ['Domain', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op'],\r\n",
							"                                        ['IsOnlineDesc', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc2', 'string', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['TestRefId', 'string', 'no-op']                                                 \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANTextResponse'] = [\r\n",
							"                                        ['SKNAPLANTextResponse', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANTextResponse', 'string', 'no-op'],\r\n",
							"                                        ['BKNAPLANQuestionId', 'string', 'no-op'],\r\n",
							"                                        ['TextResponse', 'string', 'no-op'],\r\n",
							"                                        ['IsCorrectAnswer', 'integer', 'no-op'],\r\n",
							"                                        ['SortOrder1', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder2', 'double', 'no-op'],\r\n",
							"                                        ['SortOrder3', 'double', 'no-op'],\r\n",
							"                                        ['BusinessDesc1', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['ResponseCode', 'string', 'no-op'],\r\n",
							"                                        ['ResponseDescription', 'string', 'no-op']                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        # self.schemas['NAPLANAssessmentArea'] = [\r\n",
							"        #                                 ['SKNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"        #                                 ['BKNaplanAssesmentArea', 'string', 'no-op'],\r\n",
							"        #                                 ['NaplanAssesmentAreaDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['NaplanAssesmentAreaShortDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['NaplanAssesmentAreaBusinessDesc', 'string', 'no-op'],\r\n",
							"        #                                 ['PrimarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['SecondarySort', 'double', 'no-op'],\r\n",
							"        #                                 ['CreateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"        #                                 ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"        #                                 ['IsCurrent', 'string', 'no-op'],\r\n",
							"        #                                 ['ScdReason', 'string', 'no-op']                                               \r\n",
							"        #                                 ]\r\n",
							"\r\n",
							"        self.schemas['DMExamBands'] = [\r\n",
							"                                        ['SKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['BKExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Band', 'string', 'no-op'],\r\n",
							"                                        ['BandDescription', 'string', 'no-op'],\r\n",
							"                                        ['BandGroup', 'string', 'no-op'],\r\n",
							"                                        ['ExamGroup', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['BusinessGroup1', 'string', 'no-op'],\r\n",
							"                                        ['BusinessGroup2', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op']                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NAPLANNAPLAN'] = [\r\n",
							"                                        ['SKNaplanResultId', 'integer', 'no-op'],\r\n",
							"                                        ['uidNaplanResult', 'string', 'no-op'],\r\n",
							"                                        ['CalendarYear', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['LocalSchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['LocalStudentId', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['Indigenous', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['ScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['BandReading', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['BandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['BandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['BandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['ScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['BandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['PreviousScoreReading', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandReading', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreWriting', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandWriting', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreSpelling', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandSpelling', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreGrammarPunctuation', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandGrammarPunctuation', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousScoreNumeracy', 'double', 'no-op'],\r\n",
							"                                        ['PreviousBandNumeracy', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentDisplayId', 'string', 'no-op'],\r\n",
							"                                        ['IsOnline', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NAPLANNAPLANStudentView'] = [\r\n",
							"                                        ['SkNaplanStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['uidNaplanResult', 'string', 'no-op'],\r\n",
							"                                        ['StudentFirstName', 'string', 'no-op'],\r\n",
							"                                        ['StudentSurname', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentId', 'string', 'no-op'],\r\n",
							"                                        ['PersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['LocalSchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['LocalStudentId', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['Indigenous', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTE', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['GenderGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEGroupDesc', 'string', 'no-op'],\r\n",
							"                                        ['SourceSystemStudentDisplayId', 'string', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NAPLANStudent'] = [\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['BKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['OfficialFirstName', 'string', 'no-op'],\r\n",
							"                                        ['OfficialSurname', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredSurname', 'string', 'no-op'],\r\n",
							"                                        ['SingleNameOnly', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['DOB', 'date', 'no-op'],\r\n",
							"                                        ['AttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentAddressStreet', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressState', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressPostCode', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLatitude', 'double', 'no-op'],\r\n",
							"                                        ['StudentAddressLongitude', 'double', 'no-op'],\r\n",
							"                                        ['HomePhone', 'string', 'no-op'],\r\n",
							"                                        ['HomeEmail', 'string', 'no-op'],\r\n",
							"                                        ['StudentMobile', 'string', 'no-op'],\r\n",
							"                                        ['StudentEmail', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['CitizenshipResidencyStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassId', 'integer', 'no-op'],\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryData', 'date', 'no-op'],\r\n",
							"                                        ['VisaEndDate', 'date', 'no-op'],\r\n",
							"                                        ['AtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ESLYesNo', 'string', 'no-op'],\r\n",
							"                                        ['EslLanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['SWDYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SwdSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1Email', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Phone', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Mobile', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2Email', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Phone', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Mobile', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['BaptismDate', 'date', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['ConfirmationDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstEucharistDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstReconciliationDate', 'date', 'no-op'],\r\n",
							"                                        ['RollGroup', 'string', 'no-op']                                              \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['NAPLANStudentYearResult'] = [\r\n",
							"                                        ['UId', 'integer', 'no-op'],\r\n",
							"                                        ['SkStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SkPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SkYear', 'integer', 'no-op'],\r\n",
							"                                        ['SkNaplanStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SkExamBandId', 'integer', 'no-op'],\r\n",
							"                                        ['SkNaplanAssessmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkNAPLANACARAAggregateId', 'integer', 'no-op'],\r\n",
							"                                        ['Score', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCampus', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreSchool', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreDiocese', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreNational', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCenetState', 'double', 'no-op'],\r\n",
							"                                        ['AverageScoreCenetNational', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKNaplanResultId', 'integer', 'no-op'],\r\n",
							"                                        ['SKNaplanSourceId', 'integer', 'no-op'],\r\n",
							"                                        ['StandardDeviationState', 'double', 'no-op'],\r\n",
							"                                        ['StandardDeviationNational', 'double', 'no-op'],\r\n",
							"                                        ['ActualStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ExpectedStudentGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualStateGrowth', 'double', 'no-op'],\r\n",
							"                                        ['ActualNationalGrowth', 'double', 'no-op']                                               \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANOnlineTestPath'] = [\r\n",
							"                                        ['SKNAPLANOnlineTestPath', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANOnlineTestPath', 'string', 'no-op'],\r\n",
							"                                        ['NAPTestLocalId', 'string', 'no-op'],\r\n",
							"                                        ['TestName', 'string', 'no-op'],\r\n",
							"                                        ['BKYearLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['YearLevelSifCode', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['TestType', 'string', 'no-op'],\r\n",
							"                                        ['StagesCount', 'string', 'no-op'],\r\n",
							"                                        ['BKNaplanAssesmentArea', 'string', 'no-op'],\r\n",
							"                                        ['TestYear', 'string', 'no-op'],\r\n",
							"                                        ['PathTakenForDomain', 'string', 'no-op'],\r\n",
							"                                        ['ParallelTest', 'string', 'no-op'],\r\n",
							"                                        ['DomainBand1Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand1Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand2Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand2Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand3Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand3Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand4Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand4Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand5Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand5Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand6Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand6Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand7Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand7Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand8Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand8Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand9Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand9Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand10Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainBand10Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel1Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel1Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel2Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel2Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel3Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel3Upper', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel4Lower', 'integer', 'no-op'],\r\n",
							"                                        ['DomainProficiencyLevel4Upper', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping1', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping2', 'string', 'no-op'],\r\n",
							"                                        ['TestPathGrouping3', 'string', 'no-op']                                                            \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNAPLANParticipationCode'] = [\r\n",
							"                                        ['SKNAPLANParticipationCode', 'integer', 'no-op'],\r\n",
							"                                        ['BKNAPLANParticipationCode', 'string', 'no-op'],\r\n",
							"                                        ['NAPLANParticipationText', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMNaplanSourceID'] = [\r\n",
							"                                        ['SKNaplanSourceId', 'integer', 'no-op'],\r\n",
							"                                        ['BKNaplanSourceId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMStateTerritory'] = [\r\n",
							"                                        ['SKStateTerritory', 'integer', 'no-op'],\r\n",
							"                                        ['BKStateTerritoryId', 'integer', 'no-op'],\r\n",
							"                                        ['StateTerritorySIFCode', 'string', 'no-op'],\r\n",
							"                                        ['StateTerritorySIFName', 'string', 'no-op'],\r\n",
							"                                        ['BusinessDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimarySort', 'double', 'no-op'],\r\n",
							"                                        ['SecondarySort', 'double', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NaplanData', self.schemas['NaplanData'], None, 'SkPersistentStudentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NaplanNational', self.schemas['NaplanNational'], None, 'CalendarYear')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NaplanNationalAverage', self.schemas['NaplanNationalAverage'], None, 'Year')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsNAPLANResults', self.schemas['DMFactMySchoolsNAPLANResults'], 'LastUpdateDate', 'SKMySchoolsNAPLANResults')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactMySchoolsNAPLANResultsSimilarSchools', self.schemas['DMFactMySchoolsNAPLANResultsSimilarSchools'], 'LastUpdateDate', 'SKMySchoolsNAPLANResultsSimilarSchools')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANACARABands', self.schemas['DMFactNAPLANACARABands'], 'LastUpdateDate', 'SKNaplanAcaraBands')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANOnlineStudentItemResponse', self.schemas['DMFactNAPLANOnlineStudentItemResponse'], 'LastUpdateDate', 'SKFactNAPLANOnlineStudentItemResponse')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANOnlineStudentTestResult', self.schemas['DMFactNAPLANOnlineStudentTestResult'], 'LastUpdateDate', 'SKFactNAPLANOnlineStudentTestResult')\r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'DMFactNAPLANStudentResponse', self.schemas['DMFactNAPLANStudentResponse'], 'LastUpdateDate', 'SKFactNAPLANStudentResponse')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactNaplanStudentYearResult', self.schemas['DMFactNaplanStudentYearResult'], 'LastUpdateDate', 'UId')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLAN', self.schemas['DMNAPLAN'], 'LastUpdateDate', 'SKNaplanResultId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANACARAAggregate', self.schemas['DMNAPLANACARAAggregate'], 'LastUpdateDate', 'SkNAPLANACARAAggregateId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANAnswer', self.schemas['DMNAPLANAnswer'], 'LastUpdateDate', 'SKNAPLANAnswerId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANAssessmentArea', self.schemas['DMNAPLANAssessmentArea'], 'LastUpdateDate', 'SKNaplanAssessmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANOnlineStudentItemResponse', self.schemas['DMNAPLANOnlineStudentItemResponse'], 'LastUpdateDate', 'SKNAPLANOnlineStudentItemResponse')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANOnlineStudentResult', self.schemas['DMNAPLANOnlineStudentResult'], 'LastUpdateDate', 'SKNAPLANOnlineStudentResult')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANOnlineStudentTestResultId', self.schemas['DMNAPLANOnlineStudentTestResultId'], 'LastUpdateDate', 'SKNAPLANOnlineStudentTestResultId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANStudent', self.schemas['DMNAPLANStudent'], 'LastUpdateDate', 'SkNaplanStudentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANStudentResponseId', self.schemas['DMNAPLANStudentResponseId'], 'LastUpdateDate', 'SKNAPLANStudentResponseId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANTest', self.schemas['DMNAPLANTest'], 'LastUpdateDate', 'SKNAPLANTest')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANTextResponse', self.schemas['DMNAPLANTextResponse'], 'LastUpdateDate', 'SKNAPLANTextResponse')\r\n",
							"        # oea.ingest_delta_data(self.source_folder, 'NAPLANAssessmentArea', self.schemas['NAPLANAssessmentArea'], 'LastUpdateDate', 'SKNaplanAssessmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMExamBands', self.schemas['DMExamBands'], 'LastUpdateDate', 'SKExamBandId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NAPLANNAPLAN', self.schemas['NAPLANNAPLAN'], 'LastUpdateDate', 'SKNaplanResultId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NAPLANNAPLANStudentView', self.schemas['NAPLANNAPLANStudentView'], 'LastUpdateDate', 'SkNaplanStudentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'NAPLANStudent', self.schemas['NAPLANStudent'], None, 'BKSourceStudentId')\r\n",
							"        \r\n",
							"        # empty table - investigate possible issue \r\n",
							"        #oea.ingest_delta_data(self.source_folder, 'NAPLANStudentYearResult', self.schemas['NAPLANStudentYearResult'], 'LastUpdateDate', 'UId')\r\n",
							"\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANOnlineTestPath', self.schemas['DMNAPLANOnlineTestPath'], 'LastUpdateDate', 'SKNAPLANOnlineTestPath')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNAPLANParticipationCode', self.schemas['DMNAPLANParticipationCode'], 'LastUpdateDate', 'SKNAPLANParticipationCode')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMNaplanSourceID', self.schemas['DMNaplanSourceID'], 'LastUpdateDate', 'SKNaplanSourceId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStateTerritory', self.schemas['DMStateTerritory'], 'LastUpdateDate', 'SKStateTerritory')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"naplan_object = NAPLAN_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NCCD_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "165b89a1-0a56-4cea-9a39-518599805848"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class NCCD_object(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='NCCD', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMCensusStudentWithDisabilityId'] = [\r\n",
							"                                        ['SKCensusStudentWithDisabilityId', 'integer', 'no-op'],\r\n",
							"                                        ['BKCensusStudentWithDisabilityId', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                   \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMDisabilityCategoryAdjustment'] = [\r\n",
							"                                        ['SKDisabilityCategoryAdjustment', 'integer', 'no-op'],\r\n",
							"                                        ['BKDisabilityCategoryAdjustment', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityCategory', 'string', 'no-op'],\r\n",
							"                                        ['LevelOfAdjustment', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']                                                                \r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactCensusStudentWithDisability'] = [\r\n",
							"                                        ['SKFactCensusStudentWithDisability', 'integer', 'no-op'],\r\n",
							"                                        ['SKCensusStudentWithDisabilityId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKDisabilityCategoryAdjustment', 'integer', 'no-op'],\r\n",
							"                                        ['NumberOfStudents', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op']                                                             \r\n",
							"                                        ]\r\n",
							"\r\n",
							"                                 \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMCensusStudentWithDisabilityId', self.schemas['DMCensusStudentWithDisabilityId'], 'LastUpdateDate', 'SKCensusStudentWithDisabilityId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMDisabilityCategoryAdjustment', self.schemas['DMDisabilityCategoryAdjustment'], 'LastUpdateDate', 'SKDisabilityCategoryAdjustment')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactCensusStudentWithDisability', self.schemas['DMFactCensusStudentWithDisability'], 'LastUpdateDate', 'SKFactCensusStudentWithDisability')\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"nccd_object = NCCD_object()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "695da1d7-9611-4120-9a7f-4d68c66a108c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"\r\n",
							"# use as the source for ingested files to be moved into individual folders using DataCopy\r\n",
							"source_folder = ''\r\n",
							"\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /Acer_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_AE')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1661f434-f0e0-4806-95cb-a166e39c14ce"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /AE_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Acer')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5ecc3942-817a-4fa8-9c0e-c00b6fd28876"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Acer_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Attendance')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "819620a4-2f12-4b37-8d29-ccd220f84d6b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Attendance_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Class_Period')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "73e2f3b1-030c-403f-ac37-3589da43c547"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Class_period_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Enrolment')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5a6fd298-c48c-4cd8-a085-2e96dbbeb0fc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Enrolment_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_MySchools')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d988cc9d-e5a9-400b-b4e9-55dc2e56ad43"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /MySchools_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_NAPLAN')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "89f4139f-91c0-44c5-90b6-e2d7ff054d63"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /NAPLAN_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_NCCD')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c25f5ecd-0140-4ab3-aa42-643d84b2dfe4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /NCCD_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_connector_Student_Profile')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "OEA Connectors"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ed6ecf81-a647-4108-b214-62ba2f0f9314"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# OEA connector\n",
							"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
							"\n",
							"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
							"# Note that kwargs allows you to pass in a dict of params, but the dict has to specified as a string when invoked from a pipeline.\r\n",
							"# Also note that you can refer to attributes of an object in the params, for example: {'path':oea.stage2np}\r\n",
							"object_name = ''\r\n",
							"method_name = ''\r\n",
							"source_folder = ''\r\n",
							"kwargs = '{}'"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /OEA_py"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /DataCopy_py"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": false,
								"source_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"%run /Student_profile_py"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"obj = eval(object_name)\r\n",
							"kwargs = eval(kwargs)\r\n",
							"m = getattr(obj, method_name)\r\n",
							"result = m(**kwargs)\r\n",
							"mssparkutils.notebook.exit(result)"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OEA_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "27b938df-7b10-45e1-bcd3-384ce12ea1d2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"from delta.tables import DeltaTable\n",
							"from notebookutils import mssparkutils\n",
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, ArrayType, TimestampType, BooleanType, ShortType, DateType\n",
							"from pyspark.sql import functions as F\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.utils import AnalysisException\n",
							"import pandas as pd\n",
							"import sys\n",
							"import re\n",
							"import json\n",
							"import datetime\n",
							"import pytz\n",
							"import random\n",
							"import io\n",
							"import logging\n",
							"\n",
							"logger = logging.getLogger('OEA')\n",
							"\n",
							"class OEA:\n",
							"    def __init__(self, storage_account='', instrumentation_key=None, salt='', logging_level=logging.DEBUG):\n",
							"        if storage_account:\n",
							"            self.storage_account = storage_account\n",
							"        else:\n",
							"            oea_id = mssparkutils.env.getWorkspaceName()[8:] # extracts the OEA id for this OEA instance from the synapse workspace name (based on OEA naming convention)\n",
							"            self.storage_account = 'stoea' + oea_id # sets the name of the storage account based on OEA naming convention\n",
							"            self.keyvault = 'kv-oea-' + oea_id\n",
							"        self.keyvault_linked_service = 'LS_KeyVault_OEA'\n",
							"        self.serverless_sql_endpoint = mssparkutils.env.getWorkspaceName() + '-ondemand.sql.azuresynapse.net'\n",
							"        self._initialize_logger(instrumentation_key, logging_level)\n",
							"        self.salt = salt\n",
							"        self.timezone = 'EST'\n",
							"        self.stage1np = 'abfss://stage1np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage2np = 'abfss://stage2np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage2p = 'abfss://stage2p@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage3np = 'abfss://stage3np@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.stage3p = 'abfss://stage3p@' + self.storage_account + '.dfs.core.windows.net'\n",
							"        self.framework_path = 'abfss://oea-framework@' + self.storage_account + '.dfs.core.windows.net'\n",
							"\n",
							"        # Initialize framework db\n",
							"        spark.sql(f\"CREATE DATABASE IF NOT EXISTS oea\")\n",
							"        spark.sql(f\"CREATE TABLE IF NOT EXISTS oea.env (name string not null, value string not null, description string) USING DELTA LOCATION '{self.framework_path}/db/env'\")\n",
							"        df = spark.sql(\"select value from oea.env where name='storage_account'\")\n",
							"        if df.first(): spark.sql(f\"UPDATE oea.env set value='{self.storage_account}' where name='storage_account'\")\n",
							"        else: spark.sql(f\"INSERT INTO oea.env VALUES ('storage_account', '{self.storage_account}', 'The name of the data lake storage account for this OEA instance.')\")\n",
							"        spark.sql(f\"CREATE TABLE IF NOT EXISTS OEA.watermark (source string not null, entity string not null, watermark timestamp not null) USING DELTA LOCATION '{self.framework_path}/db/watermark'\")\n",
							"\n",
							"        logger.debug(\"OEA initialized.\")\n",
							"    \n",
							"    def path(self, container_name, directory_path=None):\n",
							"        if directory_path:\n",
							"            return f'abfss://{container_name}@{self.storage_account}.dfs.core.windows.net/{directory_path}'\n",
							"        else:\n",
							"            return f'abfss://{container_name}@{self.storage_account}.dfs.core.windows.net'\n",
							"\n",
							"    def convert_path(self, path):\n",
							"        \"\"\" Converts the given path into a valid url.\n",
							"            eg, convert_path('stage1np/contoso_sis/student/*') # returns abfss://stage1np@storageaccount.dfs.core.windows.net/contoso_sis/student/*\n",
							"        \"\"\"\n",
							"        path_args = path.split('/')\n",
							"        stage = path_args.pop(0)\n",
							"        return self.path(stage, '/'.join(path_args))            \n",
							"\n",
							"    def _initialize_logger(self, instrumentation_key, logging_level):\n",
							"        logging.lastResort = None\n",
							"        # the logger will print an error like \"ValueError: I/O operation on closed file\" because we're trying to have log messages also print to stdout\n",
							"        # and apparently this causes issues on some of the spark executor nodes. The bottom line is that we don't want these logging errors to get printed in the notebook output.\n",
							"        logging.raiseExceptions = False\n",
							"        logger.setLevel(logging_level)\n",
							"\n",
							"        handler = logging.StreamHandler(sys.stdout)\n",
							"        handler.setLevel(logging_level)\n",
							"        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
							"        handler.setFormatter(formatter)\n",
							"        logger.addHandler(handler)\n",
							"\n",
							"    def get_value_from_db(self, query):\n",
							"        df = spark.sql(query)\n",
							"        if df.first(): return df.first()[0]\n",
							"        else: return None\n",
							"\n",
							"    def get_last_watermark(self, source, entity):\n",
							"        return self.get_value_from_db(f\"select w.watermark from oea.watermark w where w.source='{source}' and w.entity='{entity}' order by w.watermark desc\")\n",
							"\n",
							"    def insert_watermark(self, source, entity, watermark_datetime):\n",
							"        spark.sql(f\"insert into oea.watermark values ('{source}', '{entity}', '{watermark_datetime}')\")\n",
							"\n",
							"    def get_secret(self, secret_name):\n",
							"        \"\"\" Retrieves the specified secret from the keyvault.\n",
							"            This method assumes that the keyvault linked service has been setup and is accessible.\n",
							"        \"\"\"\n",
							"        sc = SparkSession.builder.getOrCreate()\n",
							"        token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\n",
							"        value = token_library.getSecret(self.keyvault, secret_name, self.keyvault_linked_service)        \n",
							"        return value\n",
							"\n",
							"    def delete(self, path):\n",
							"        oea.rm_if_exists(self.convert_path(path))\n",
							"\n",
							"    def land(self, data_source, entity, df, partition_label='', format_str='csv', header=True, mode='overwrite'):\n",
							"        \"\"\" Lands data in stage1np. If partition label is not provided, the current datetime is used with the label of 'batchdate'.\n",
							"            eg, land('contoso_isd', 'student', data, 'school_year=2021')\n",
							"        \"\"\"\n",
							"        tz = pytz.timezone(self.timezone)\n",
							"        datetime_str = datetime.datetime.now(tz).replace(microsecond=0).isoformat()\n",
							"        datetime_str = datetime_str.replace(':', '') # Path names can't have a colon - https://github.com/apache/hadoop/blob/trunk/hadoop-common-project/hadoop-common/src/site/markdown/filesystem/introduction.md#path-names\n",
							"        df.write.format(format_str).save(self.path('stage1np', f'{data_source}/{entity}/{partition_label}/batchdate={datetime_str}'), header=header, mode=mode)\n",
							"\n",
							"    def load(self, folder, table, stage=None, data_format='delta'):\n",
							"        \"\"\" Loads a dataframe based on the path specified in the given args \"\"\"\n",
							"        if stage is None: stage = self.stage2p\n",
							"        path = f\"{stage}/{folder}/{table}\"\n",
							"        try:\n",
							"            df = spark.read.load(f\"{stage}/{folder}/{table}\", format=data_format)\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(\"Failed to load. Are you sure you have the right path?\\nMore info below:\\n\" + str(e)) \n",
							"\n",
							"    def load_csv(self, path, header=True):\n",
							"        \"\"\" Loads a dataframe based on the path specified \n",
							"            eg, df = load_csv('stage1np/example/student/*')\n",
							"        \"\"\"\n",
							"        url_path = self.convert_path(path)\n",
							"        try:\n",
							"            df = spark.read.load(url_path, format='csv', header=header)\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(f\"Failed to load from: {url_path}. Are you sure you have the right path?\\nMore info below:\\n\" + str(e))\n",
							"\n",
							"    def load_delta(self, path):\n",
							"        \"\"\" Loads a dataframe based on the path specified \n",
							"            eg, df = load_delta('stage2np/example/student/*')\n",
							"        \"\"\"\n",
							"        url_path = self.convert_path(path)\n",
							"        try:\n",
							"            df = spark.read.load(url_path, format='delta')\n",
							"            return df        \n",
							"        except AnalysisException as e:\n",
							"            raise ValueError(f\"Failed to load from: {url_path}. Are you sure you have the right path?\\nMore info below:\\n\" + str(e))\n",
							"\n",
							"    def load_from_stage1(self, path_and_filename, data_format='csv', header=True):\n",
							"        \"\"\" Loads a dataframe with data from stage1, based on the path specified in the given args \"\"\"\n",
							"        path = f\"{self.stage1np}/{path_and_filename}\"\n",
							"        df = spark.read.load(path, format=data_format, header=header)\n",
							"        return df        \n",
							"\n",
							"    def load_sample_from_csv_file(self, path_and_filename, header=True, stage=None):\n",
							"        \"\"\" Loads a sample from the specified csv file and returns a pandas dataframe.\n",
							"            Ex: print(load_sample_from_csv_file('/student_data/students.csv'))\n",
							"        \"\"\"\n",
							"        if stage is None: stage = self.stage1np\n",
							"        csv_str = mssparkutils.fs.head(f\"{stage}/{path_and_filename}\") # https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python#preview-file-content\n",
							"        complete_lines = re.match(r\".*\\n\", csv_str, re.DOTALL).group(0)\n",
							"        if header: header = 0 # for info on why this is needed: https://pandas.pydata.org/pandas-docs/dev/reference/api/pandas.read_csv.html\n",
							"        else: header = None\n",
							"        pdf = pd.read_csv(io.StringIO(complete_lines), sep=',', header=header)\n",
							"        return pdf\n",
							"\n",
							"    def print_stage(self, path):\n",
							"        \"\"\" Prints out the highlevel contents of the specified stage.\"\"\"\n",
							"        msg = path + \"\\n\"\n",
							"        folders = self.get_folders(path)\n",
							"        for folder_name in folders:\n",
							"            entities = self.get_folders(path + '/' + folder_name)\n",
							"            msg += f\"{folder_name}: {entities}\\n\"\n",
							"        print(msg)            \n",
							"\n",
							"    def fix_column_names(self, df):\n",
							"        \"\"\" Fix column names to satisfy the Parquet naming requirements by substituting invalid characters with an underscore. \"\"\"\n",
							"        df_with_valid_column_names = df.select([F.col(col).alias(re.sub(\"[ ,;{}()\\n\\t=]+\", \"_\", col)) for col in df.columns])\n",
							"        return df_with_valid_column_names\n",
							"\n",
							"    def to_spark_schema(self, schema):#: list[list[str]]):\n",
							"        \"\"\" Creates a spark schema from a schema specified in the OEA schema format. \n",
							"            Example:\n",
							"            schemas['Person'] = [['Id','string','hash'],\n",
							"                                    ['CreateDate','timestamp','no-op'],\n",
							"                                    ['LastModifiedDate','timestamp','no-op']]\n",
							"            to_spark_schema(schemas['Person'])\n",
							"        \"\"\"\n",
							"        fields = []\n",
							"        for col_name, dtype, op in schema:\n",
							"            fields.append(StructField(col_name, globals()[dtype.lower().capitalize() + \"Type\"](), True))\n",
							"        spark_schema = StructType(fields)\n",
							"        return spark_schema\n",
							"\n",
							"    def ingest_incremental_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes incremental batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing incremental data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.readStream.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        #df = spark.read.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        #display(df)\n",
							"        #df = df.withColumn('batchdate', F.to_timestamp(df.batchdate, \"yyyy-MM-dd'T'HHmmssZ\"))\n",
							"        df = df.dropDuplicates([primary_key]) # drop duplicates across batches. More info: https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#streaming-deduplication\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:        \n",
							"            query = df_pseudo.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", source_path + '/_checkpoints/incremental_p').partitionBy(partition_by)\n",
							"            query = query.start(p_destination_path)\n",
							"            query.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"            logger.info(query.lastProgress)\n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            query2 = df_lookup.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", source_path + '/_checkpoints/incremental_np').partitionBy(partition_by)\n",
							"            query2 = query2.start(np_destination_path)\n",
							"            query2.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"            logger.info(query2.lastProgress)        \n",
							"\n",
							"    def _merge_into_table(self, df, destination_path, checkpoints_path, condition):\n",
							"        \"\"\" Merges data from the given dataframe into the delta table at the specified destination_path, based on the given condition.\n",
							"            If not delta table exists at the specified destination_path, a new delta table is created and the data from the given dataframe is inserted.\n",
							"            eg, merge_into_table(df_lookup, np_destination_path, source_path + '/_checkpoints/delta_np', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"        \"\"\"\n",
							"        if DeltaTable.isDeltaTable(spark, destination_path):      \n",
							"            dt = DeltaTable.forPath(spark, destination_path)\n",
							"            def upsert(batch_df, batchId):\n",
							"                dt.alias(\"current\").merge(batch_df.alias(\"updates\"), condition).whenMatchedUpdateAll().whenNotMatchedInsertAll().execute()                \n",
							"            query = df.writeStream.format(\"delta\").foreachBatch(upsert).outputMode(\"update\").trigger(once=True).option(\"checkpointLocation\", checkpoints_path)\n",
							"        else:\n",
							"            logger.info(f'Delta table does not yet exist at {destination_path} - creating one now and inserting initial data.')\n",
							"            query = df.writeStream.format(\"delta\").outputMode(\"append\").trigger(once=True).option(\"checkpointLocation\", checkpoints_path)\n",
							"        query = query.start(destination_path)\n",
							"        query.awaitTermination()   # block until query is terminated, with stop() or with error; A StreamingQueryException will be thrown if an exception occurs.\n",
							"        logger.info(query.lastProgress)    \n",
							"\n",
							"    def ingest_delta_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes delta batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing delta data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.readStream.load(source_path + '/*', format=data_format, header=header_flag, schema=spark_schema)\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:\n",
							"            self._merge_into_table(df_pseudo, p_destination_path, source_path + '/_checkpoints/delta_p', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            self._merge_into_table(df_lookup, np_destination_path, source_path + '/_checkpoints/delta_np', \"current.id_pseudonym = updates.id_pseudonym\")\n",
							"\n",
							"    def ingest_snapshot_data(self, source_system, tablename, schema, partition_by, primary_key='id', data_format='csv', has_header=True):\n",
							"        \"\"\" Processes snapshot batch data from stage1 into stage2 \"\"\"\n",
							"        source_path = f'{self.stage1np}/{source_system}/{tablename}'\n",
							"        latest_batch = self.get_latest_folder(source_path)\n",
							"        source_path = source_path + '/' + latest_batch\n",
							"        p_destination_path = f'{self.stage2p}/{source_system}/{tablename}_pseudo'\n",
							"        np_destination_path = f'{self.stage2np}/{source_system}/{tablename}_lookup'\n",
							"        logger.info(f'Processing snapshot data from: {source_path} and writing out to: {p_destination_path}')\n",
							"\n",
							"        if has_header: header_flag = 'true'\n",
							"        else: header_flag = 'false'\n",
							"        spark_schema = self.to_spark_schema(schema)\n",
							"        df = spark.read.load(source_path, format=data_format, header=header_flag, schema=spark_schema)\n",
							"        df = df.dropDuplicates([primary_key]) # More info: https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#streaming-deduplication\n",
							"        \n",
							"        df_pseudo, df_lookup = self.pseudonymize(df, schema)\n",
							"\n",
							"        if len(df_pseudo.columns) == 0:\n",
							"            logger.info('No data to be written to stage2p')\n",
							"        else:\n",
							"            df_pseudo.write.save(p_destination_path, format='delta', mode='overwrite', partitionBy=partition_by) \n",
							"\n",
							"        if len(df_lookup.columns) == 0:\n",
							"            logger.info('No data to be written to stage2np')\n",
							"        else:\n",
							"            df_lookup.write.save(np_destination_path, format='delta', mode='overwrite', partitionBy=partition_by) \n",
							"\n",
							"    def pseudonymize(self, df, schema): #: list[list[str]]):\n",
							"        \"\"\" Performs pseudonymization of the given dataframe based on the provided schema.\n",
							"            For example, if the given df is for an entity called person, \n",
							"            2 dataframes will be returned, one called person that has hashed ids and masked fields, \n",
							"            and one called person_lookup that contains the original person_id, person_id_pseudo,\n",
							"            and the non-masked values for columns marked to be masked.\"\"\"\n",
							"        \n",
							"        df_pseudo = df_lookup = df\n",
							"\n",
							"        for col_name, dtype, op in schema:\n",
							"            if op == \"hash-no-lookup\" or op == \"hnl\":\n",
							"                # This means that the lookup can be performed against a different table so no lookup is needed.\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256)).withColumnRenamed(col_name, col_name + \"_pseudonym\")\n",
							"                df_lookup = df_lookup.drop(col_name)           \n",
							"            elif op == \"hash\" or op == 'h':\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256)).withColumnRenamed(col_name, col_name + \"_pseudonym\")\n",
							"                df_lookup = df_lookup.withColumn(col_name + \"_pseudonym\", F.sha2(F.concat(F.col(col_name), F.lit(self.salt)), 256))\n",
							"            elif op == \"mask\" or op == 'm':\n",
							"                df_pseudo = df_pseudo.withColumn(col_name, F.lit('*'))\n",
							"            elif op == \"partition-by\":\n",
							"                pass # make no changes for this column so that it will be in both dataframes and can be used for partitioning\n",
							"            elif op == \"no-op\" or op == 'x':\n",
							"                df_lookup = df_lookup.drop(col_name)\n",
							"\n",
							"        df_pseudo = self.fix_column_names(df_pseudo)\n",
							"        df_lookup = self.fix_column_names(df_lookup)\n",
							"\n",
							"        return (df_pseudo, df_lookup)\n",
							"\n",
							"    # Returns true if the path exists\n",
							"    def path_exists(self, path):\n",
							"        tableExists = False\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            tableExists = True\n",
							"        except Exception as e:\n",
							"            # This Exception comes as a generic Py4JJavaError that occurs when the path specified is not found.\n",
							"            pass\n",
							"        return tableExists\n",
							"\n",
							"    def ls(self, path):\n",
							"        if not path.startswith(\"abfss:\"):\n",
							"            path = self.convert_path(path)\n",
							"        folders = []\n",
							"        files = []\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            for item in items:\n",
							"                if item.isFile:\n",
							"                    files.append(item.name)\n",
							"                elif item.isDir:\n",
							"                    folders.append(item.name)\n",
							"        except Exception as e:\n",
							"            logger.warning(\"[OEA] Could not peform ls on specified path: \" + path + \"\\nThis may be because the path does not exist.\")\n",
							"        return (folders, files)\n",
							"\n",
							"    def print_stage(self, path):\n",
							"        print(path)\n",
							"        folders = self.get_folders(path)\n",
							"        for folder_name in folders:\n",
							"            entities = self.get_folders(path + '/' + folder_name)\n",
							"            print(f\"{folder_name}: {entities}\")\n",
							"\n",
							"    # Return the list of folders found in the given path.\n",
							"    def get_folders(self, path):\n",
							"        dirs = []\n",
							"        try:\n",
							"            items = mssparkutils.fs.ls(path)\n",
							"            for item in items:\n",
							"                #print(item.name, item.isDir, item.isFile, item.path, item.size)\n",
							"                if item.isDir:\n",
							"                    dirs.append(item.name)\n",
							"        except Exception as e:\n",
							"            logger.warning(\"[OEA] Could not get list of folders in specified path: \" + path + \"\\nThis may be because the path does not exist.\")\n",
							"        return dirs\n",
							"\n",
							"    def get_latest_folder(self, path):\n",
							"        folders = self.get_folders(path)\n",
							"        if len(folders) > 0: return folders[-1]\n",
							"        else: return None\n",
							"\n",
							"    # Remove a folder if it exists (defaults to use of recursive removal).\n",
							"    def rm_if_exists(self, path, recursive_remove=True):\n",
							"        try:\n",
							"            mssparkutils.fs.rm(path, recursive_remove)\n",
							"        except Exception as e:\n",
							"            pass\n",
							"\n",
							"    def pop_from_path(self, path):\n",
							"        \"\"\" Pops the last arg in a path and returns the path and the last arg as a tuple.\n",
							"            pop_from_path('abfss://stage2@xyz.dfs.core.windows.net/ms_insights/test.csv') # returns ('abfss://stage2@xyz.dfs.core.windows.net/ms_insights', 'test.csv')\n",
							"        \"\"\"\n",
							"        m = re.match(r\"(.*)\\/([^/]+)\", path)\n",
							"        return (m.group(1), m.group(2))\n",
							"\n",
							"    def parse_source_path(self, path):\n",
							"        \"\"\" Parses a path that looks like this: abfss://stage2p@stoeacisd3ggimpl3.dfs.core.windows.net/ms_insights\n",
							"            and returns a dictionary like this: {'stage_num': '2', 'ss': 'ms_insights'}\n",
							"            Note that it will also return a 'stage_num' of 2 if the path is stage2p or stage2np - this is by design because the spark db with the s2 prefix will be used for data in stage2 and stage2p.\n",
							"        \"\"\"\n",
							"        m = re.match(r\".*:\\/\\/stage(?P<stage_num>\\d+)[n]?[p]?@[^/]+\\/(?P<ss>[^/]+)\", path)\n",
							"        return m.groupdict()\n",
							"    \n",
							"    def create_lake_db(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Creates a spark db that points to data in the given stage under the specified source directory (assumes that every folder in the source_dir is a table).\n",
							"            Example: create_lake_db(2, 'contoso_sis')\n",
							"            Note that a spark db that points to source data in the delta format can't be queried via SQL serverless pool. More info here: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql/resources-self-help-sql-on-demand#delta-lake\n",
							"        \"\"\"\n",
							"        db_name = f's{stage_num}_{source_dir}'\n",
							"        spark.sql(f'CREATE DATABASE IF NOT EXISTS {db_name}')\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}np', source_dir), source_format)\n",
							"        result = \"Database created: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result       \n",
							"\n",
							"    def create_lake_db_nohashing(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Creates the lake db as above but ingores the np folder (for no hashing) \"\"\"\n",
							"        \n",
							"        db_name = f's{stage_num}_{source_dir}'\n",
							"        spark.sql(f'CREATE DATABASE IF NOT EXISTS {db_name}')\n",
							"        self.create_lake_views(db_name, self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        result = \"Database created: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result        \n",
							"\n",
							"    def create_lake_views(self, db_name, source_path, source_format):\n",
							"        dirs = self.get_folders(source_path)\n",
							"        for table_name in dirs:\n",
							"            spark.sql(f\"create table if not exists {db_name}.{table_name} using {source_format} location '{source_path}/{table_name}'\")\n",
							"\n",
							"    def drop_lake_db(self, db_name):\n",
							"        spark.sql(f'DROP DATABASE IF EXISTS {db_name} CASCADE')\n",
							"        result = \"Database dropped: \" + db_name\n",
							"        logger.info(result)\n",
							"        return result       \n",
							"\n",
							"    def create_sql_db(self, stage_num, source_dir, source_format='DELTA'):\n",
							"        \"\"\" Prints out the sql script needed for creating a sql serverless db and set of views. \"\"\"\n",
							"        db_name = f'sqls{stage_num}_{source_dir}'\n",
							"        cmd += '-- Create a new sql script then execute the following in it:'\n",
							"        cmd += f\"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '{db_name}')\\nBEGIN\\n  CREATE DATABASE {db_name};\\nEND;\\nGO\\n\"\n",
							"        cmd += f\"USE {db_name};\\nGO\\n\\n\"\n",
							"        cmd += self.create_sql_views(self.path(f'stage{stage_num}p', source_dir), source_format)\n",
							"        cmd += self.create_sql_views(self.path(f'stage{stage_num}np', source_dir), source_format)\n",
							"        print(cmd)\n",
							"\n",
							"    def create_sql_views(self, source_path, source_format):\n",
							"        cmd = ''      \n",
							"        dirs = self.get_folders(source_path)\n",
							"        for table_name in dirs:\n",
							"            cmd += f\"CREATE OR ALTER VIEW {table_name} AS\\n  SELECT * FROM OPENROWSET(BULK '{source_path}/{table_name}', FORMAT='{source_format}') AS [r];\\nGO\\n\"\n",
							"        return cmd\n",
							"\n",
							"    def drop_sql_db(self, db_name):\n",
							"        print('Click on the menu next to the SQL db and select \"Delete\"')\n",
							"\n",
							"    # List installed packages\n",
							"    def list_packages(self):\n",
							"        import pkg_resources\n",
							"        for d in pkg_resources.working_set:\n",
							"            print(d)\n",
							"\n",
							"    def print_schema_starter(self, entity_name, df):\n",
							"        \"\"\" Prints a starter schema that can be modified as needed when developing the oea schema for a new module. \"\"\"\n",
							"        st = f\"self.schemas['{entity_name}'] = [\"\n",
							"        for col in df.schema:\n",
							"            st += f\"['{col.name}', '{str(col.dataType)[:-4].lower()}', 'no-op'],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\"\n",
							"        return st[:-11] + ']'\n",
							"\n",
							"    def write_rows_as_csv(data, folder, filename, container=None):\n",
							"        \"\"\" Writes a dictionary as a csv to the specified location. This is helpful when creating test data sets and landing them in stage1np.\n",
							"            data = [{'id':'1','fname':'John'}, {'id':'1','fname':'Jane'}]\n",
							"        \"\"\"\n",
							"        if container == None: container = self.stage1np\n",
							"        pdf = pd.DataFrame(data)\n",
							"        mssparkutils.fs.put(f\"{container}/{folder}/{filename}\", pdf.to_csv(index=False), True) # True indicates overwrite mode  \n",
							"\n",
							"    def write_rowset_as_csv(data, folder, container=None):\n",
							"        \"\"\" Writes out as csv rows the passed in data. The inbound data should be in a format like this:\n",
							"            data = { 'students':[{'id':'1','fname':'John'}], 'courses':[{'id':'31', 'name':'Math'}] }\n",
							"        \"\"\"\n",
							"        if container == None: container = self.stage1np\n",
							"        for entity_name, value in data.items():\n",
							"            pdf = pd.DataFrame(value)\n",
							"            mssparkutils.fs.put(f\"{container}/{folder}/{entity_name}.csv\", pdf.to_csv(index=False), True) # True indicates overwrite mode         \n",
							"\n",
							"    def create_empty_dataframe(self, schema):\n",
							"        \"\"\" Creates an empty dataframe based on the given schema which is specified as an array of column names and sql types.\n",
							"            eg, schema = [['data_source','string'], ['entity','string'], ['watermark','timestamp']]\n",
							"        \"\"\"\n",
							"        fields = []\n",
							"        for col_name, col_type in schema:\n",
							"            fields.append(StructField(col_name, globals()[col_type.lower().capitalize() + \"Type\"](), True))\n",
							"        spark_schema = StructType(fields)\n",
							"        df = spark.createDataFrame(spark.sparkContext.emptyRDD(), spark_schema)\n",
							"        return df\n",
							"\n",
							"    def delete_data_source(self, data_source):\n",
							"        self.rm_if_exists(self.convert_path(f'stage1np/{data_source}'))\n",
							"        self.rm_if_exists(self.convert_path(f'stage2np/{data_source}'))\n",
							"        self.rm_if_exists(self.convert_path(f'stage2p/{data_source}'))\n",
							"\n",
							"class BaseOEAModule:\n",
							"    \"\"\" Provides data processing methods for Contoso SIS data (the student information system for the fictional Contoso school district).  \"\"\"\n",
							"    def __init__(self, source_folder, pseudonymize = True):\n",
							"        self.source_folder = source_folder\n",
							"        self.pseudonymize = pseudonymize\n",
							"        self.stage1np = f\"{oea.stage1np}/{source_folder}\"\n",
							"        self.stage2np = f\"{oea.stage2np}/{source_folder}\"\n",
							"        self.stage2p = f\"{oea.stage2p}/{source_folder}\"\n",
							"        self.stage3np = f\"{oea.stage3np}/{source_folder}\"\n",
							"        self.stage3p = f\"{oea.stage3p}/{source_folder}\"\n",
							"        self.module_path = f\"{oea.framework_path}/modules/{source_folder}\"\n",
							"        self.schemas = {}\n",
							"\n",
							"    def _process_entity_from_stage1(self, path, entity_name, format='csv', write_mode='overwrite', header='true'):\n",
							"        spark_schema = oea.to_spark_schema(self.schemas[entity_name])\n",
							"        df = spark.read.format(format).load(f\"{self.stage1np}/{path}/{entity_name}\", header=header, schema=spark_schema)\n",
							"\n",
							"        if self.pseudonymize:\n",
							"            df_pseudo, df_lookup = oea.pseudonymize(df, self.schemas[entity_name])\n",
							"            df_pseudo.write.format('delta').mode(write_mode).save(f\"{self.stage2p}/{entity_name}\")\n",
							"            if len(df_lookup.columns) > 0:\n",
							"                df_lookup.write.format('delta').mode(write_mode).save(f\"{self.stage2np}/{entity_name}_lookup\")\n",
							"        else:\n",
							"            df = oea.fix_column_names(df)   \n",
							"            df.write.format('delta').mode(write_mode).save(f\"{self.stage2np}/{entity_name}\")\n",
							"\n",
							"    def delete_stage1(self):\n",
							"        oea.rm_if_exists(self.stage1np)\n",
							"\n",
							"    def delete_stage2(self):\n",
							"        oea.rm_if_exists(self.stage2np)\n",
							"        oea.rm_if_exists(self.stage2p)\n",
							"\n",
							"    def delete_stage3(self):\n",
							"        oea.rm_if_exists(self.stage3np)\n",
							"        oea.rm_if_exists(self.stage3p)                \n",
							"\n",
							"    def delete_all_stages(self):\n",
							"        self.delete_stage1()\n",
							"        self.delete_stage2()\n",
							"        self.delete_stage3()\n",
							"\n",
							"    def create_stage2_lake_db(self, format='DELTA'):\n",
							"        oea.create_lake_db(self.stage2p, format)\n",
							"        oea.create_lake_db(self.stage2np, format)\n",
							"\n",
							"    def create_stage3_lake_db(self, format='DELTA'):\n",
							"        oea.create_lake_db(self.stage3p, format)\n",
							"        oea.create_lake_db(self.stage3np, format)\n",
							"\n",
							"    def copy_test_data_to_stage1(self):\n",
							"        mssparkutils.fs.cp(self.module_path + '/test_data', self.stage1np, True)   \n",
							"\n",
							"class DataLakeWriter:\n",
							"    def __init__(self, root_destination):\n",
							"        self.root_destination = root_destination\n",
							"\n",
							"    def write(self, path_and_filename, data_str, format='csv'):\n",
							"        mssparkutils.fs.append(f\"{self.root_destination}/{path_and_filename}\", data_str, True) # Set the last parameter as True to create the file if it does not exist\n",
							"\n",
							"oea = OEA()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fe3fd236-64e6-4701-9d7e-b184eb860cb8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# example df\r\n",
							"data = [(\"James\",\"M\",60000),(\"Michael\",\"M\",70000),\r\n",
							"        (\"Robert\",None,400000),(\"Maria\",\"F\",500000),\r\n",
							"        (\"Jen\",\"\",None)]\r\n",
							"\r\n",
							"columns = [\"name\",\"gender\",\"salary\"]\r\n",
							"df = spark.createDataFrame(data = data, schema = columns)\r\n",
							"\r\n",
							"df.createOrReplaceTempView('vw_df')\r\n",
							"\r\n",
							"#df.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# source locations\r\n",
							"sourcep = oea.stage2p\r\n",
							"sourcenp = oea.stage2np\r\n",
							"\r\n",
							"test_source = sourcep + '/student/DMStudent_pseudo'\r\n",
							"\r\n",
							"# create source dataframe from stage 2\r\n",
							"test_df = spark.read.load(f\"{test_source}\", format='delta')\r\n",
							"\r\n",
							"# create a sql view of the dataframe\r\n",
							"test_df.createOrReplaceTempView('test_dmstudent_df')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Testing Transform_Functions functions"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"## Put test function here\r\n",
							"\r\n",
							"# def DMStudent_pseudo(df):\r\n",
							"\r\n",
							"#     sourcep = oea.stage2p\r\n",
							"\r\n",
							"#     df.createOrReplaceTempView('vw_df_dmstudent_pseudo')\r\n",
							"\r\n",
							"#     final_df = spark.sql(\"select * from vw_df_dmstudent_pseudo where length(bksourcestudentid) = 36\")\r\n",
							"\r\n",
							"#     return final_df\r\n",
							"\r\n",
							"def DMPersonDemographic_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmpersondemographic_pseudo')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select * from vw_df_dmpersondemographic_pseudo where PersonType = 'Student' or PersonType = 'Staff'\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"## Test \r\n",
							"\r\n",
							"# sourcep = oea.stage2p\r\n",
							"# test_df = spark.read.load(sourcep + \"/student/DMStudent_pseudo\", format='delta')\r\n",
							"\r\n",
							"# result_test = DMStudent_pseudo(test_df)\r\n",
							"# # result_test.show()\r\n",
							"\r\n",
							"# result_test.createOrReplaceTempView('vw_df_test_checkresult2')\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"test_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"\r\n",
							"result_test = DMPersonDemographic_pseudo(test_df)\r\n",
							"# result_test.show()\r\n",
							"\r\n",
							"result_test.createOrReplaceTempView('vw_df_test_checkresult3')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- check sql results\r\n",
							"\r\n",
							"-- select count(*) from vw_df_test_checkresult2\r\n",
							"-- where length(bksourcestudentid) = 36\r\n",
							"\r\n",
							"select persontype, count(*) from vw_df_test_checkresult3 group by persontype"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need for the classenrolments table\r\n",
							"sourcep = oea.stage2p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    LocationID AS LocationAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT cy.Year AS CalendarYear,\r\n",
							"    C.SchoolId AS AGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    student.FirstName  AS  StudentFirstName,\r\n",
							"    student.LastName AS StudentLastName,\r\n",
							"    Student.Ceider,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    s.SubjectShortName AS Subject,\r\n",
							"    a.ActivityName AS  ClassName,\r\n",
							"    a.ActivityCode AS ClassCode,\r\n",
							"    ClassStartDate.date AS ClassStartDate,\r\n",
							"    ClassEndDate.date AS ClassEndDate,\r\n",
							"    staff.FirstName AS StaffFirstName,\r\n",
							"    staff.LastName AS StaffLastName,\r\n",
							"    c.CompassSchoolURL\r\n",
							"\r\n",
							"    FROM vw_factsubjectenrolment f\r\n",
							"    JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\r\n",
							"    AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"    JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\r\n",
							"    JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\r\n",
							"    JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\r\n",
							"    JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"    JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"    JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\r\n",
							"\r\n",
							"    JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\r\n",
							"    JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\r\n",
							"\r\n",
							"    AND cy.Year = 2022\r\n",
							"    --WHERE ClassEndDate.date > date_format('1/10/2022', 'd/mm/yyyy') --current_date() -- spark sql uses current_date() instead of GETDATE()\r\n",
							"    --AND s.SubjectShortName <> 'Unknown'\r\n",
							"    ORDER BY\r\n",
							"    AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    LocationID AS LocationAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    d.date AS DateLeft\r\n",
							"FROM\r\n",
							"    vw_factpersonmilestone f\r\n",
							"JOIN vw_dmdate d ON f.SKMilestoneStartDate = d.SKDate\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'False'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"    AND Date < current_date()\r\n",
							"ORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"from pyspark.sql.functions import max\r\n",
							"\r\n",
							"\r\n",
							"sourcep = oea.stage2p\r\n",
							"df = spark.read.load(sourcep + \"/ACER/DMFactPATResults_pseudo\", format='delta')\r\n",
							"\r\n",
							"#aggdf = df.groupBy(\"SKCampus\", \"SKYearLevel\", \"SKDate\", \"SKPATTest\").agg(max(\"NormMeanScaledScore\").alias(\"newNormMean\"))\r\n",
							"aggdf = df.groupBy(\"SKPATTest\").agg(max(\"NormMeanScaledScore\").alias(\"NormMeanScaledScore_cleaned\"))\r\n",
							"\r\n",
							"#aggdf.show(truncate=False)\r\n",
							"\r\n",
							"#column=[\"newNormMean\"]\r\n",
							"#aggdf.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in column]).show()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL_Transforms')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "14116815-64b1-4dfe-a1b7-c9de3a40bdc3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## This note book contains data transformations using SQL"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Load all required dataframes and convert them to temp sql views"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# setup the temp tables we need for the classenrolments table\r\n",
							"sourcep = oea.stage2p\r\n",
							"\r\n",
							"# used for classenrolment view\r\n",
							"factsubjectenrolment_df = spark.read.load(sourcep + \"/enrolment/DMFactSubjectEnrolment_pseudo\", format='delta')\r\n",
							"dmactivity_df = spark.read.load(sourcep + \"/enrolment/DMActivity_pseudo\", format='delta')\r\n",
							"dmsubject_df = spark.read.load(sourcep + \"/enrolment/DMSubject_pseudo\", format='delta')\r\n",
							"dmpersondemographic_df = spark.read.load(sourcep + \"/student/DMPersonDemographic_pseudo\", format='delta')\r\n",
							"dmyearlevel_df = spark.read.load(sourcep + \"/ACER/DMYearLevel_pseudo\", format='delta')\r\n",
							"dmcampus_df = spark.read.load(sourcep + \"/ACER/DMCampus_pseudo\", format='delta')\r\n",
							"dmdate_df = spark.read.load(sourcep + \"/ACER/DMDate_pseudo\", format='delta')\r\n",
							"dmcalendaryear_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"# used for active student view\r\n",
							"factpersonmilestone_df = spark.read.load(sourcep + \"/student/DMFactPersonMilestone_pseudo\", format='delta')\r\n",
							"dmrollgroup_df = spark.read.load(sourcep + \"/enrolment/DMRollGroup_pseudo\", format='delta')\r\n",
							"\r\n",
							"# create temp sql views\r\n",
							"factsubjectenrolment_df.createOrReplaceTempView('vw_factsubjectenrolment')\r\n",
							"dmactivity_df.createOrReplaceTempView('vw_dmactivity')\r\n",
							"dmsubject_df.createOrReplaceTempView('vw_dmsubject')\r\n",
							"dmpersondemographic_df.createOrReplaceTempView('vw_dmpersondemographic')\r\n",
							"dmyearlevel_df.createOrReplaceTempView('vw_dmyearlevel')\r\n",
							"dmcampus_df.createOrReplaceTempView('vw_dmcampus')\r\n",
							"dmdate_df.createOrReplaceTempView('vw_dmdate')\r\n",
							"dmcalendaryear_df.createOrReplaceTempView('vw_dmcalendaryear')\r\n",
							"factpersonmilestone_df.createOrReplaceTempView('vw_factpersonmilestone')\r\n",
							"dmrollgroup_df.createOrReplaceTempView('vw_dmrollgroup')\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Create the SQL temp views from the loaded dataframes "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"CREATE TEMP VIEW vw_classenrolment\r\n",
							"AS\r\n",
							"SELECT cy.Year AS CalendarYear,\r\n",
							"    C.SchoolId AS AGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    student.FirstName  AS  StudentFirstName,\r\n",
							"    student.LastName AS StudentLastName,\r\n",
							"    Student.Ceider,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    s.SubjectShortName AS Subject,\r\n",
							"    a.ActivityName AS  ClassName,\r\n",
							"    a.ActivityCode AS ClassCode,\r\n",
							"    ClassStartDate.date AS ClassStartDate,\r\n",
							"    ClassEndDate.date AS ClassEndDate,\r\n",
							"    staff.FirstName AS StaffFirstName,\r\n",
							"    staff.LastName AS StaffLastName,\r\n",
							"    c.CompassSchoolURL\r\n",
							"\r\n",
							"    FROM vw_factsubjectenrolment f\r\n",
							"    JOIN vw_dmactivity a ON f.SKActivity = a.SKActivity\r\n",
							"    AND a.ActivityTypeDescription = 'Standard Class'\r\n",
							"    JOIN vw_dmsubject s ON f.SKSubject = s.SKSubject\r\n",
							"    JOIN vw_dmpersondemographic student ON f.SKStudent = student.SKPerson\r\n",
							"    JOIN vw_dmpersondemographic staff ON f.SKStaff = staff.SKPerson\r\n",
							"    JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"    JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"    JOIN vw_dmdate ClassStartDate ON f.SKEnrolmentStartDate = ClassStartDate.SKDate\r\n",
							"\r\n",
							"    JOIN vw_dmdate ClassEndDate ON f.SKEnrolmentEndDate = ClassEndDate.SKDate\r\n",
							"    JOIN vw_dmcalendaryear cy ON f.SKYear = cy.SKYear\r\n",
							"\r\n",
							"    AND cy.Year = 2022\r\n",
							"    WHERE ClassEndDate.date > current_date() -- spark sql uses current_date() instead of GETDATE()\r\n",
							"    AND s.SubjectShortName <> 'Unknown'\r\n",
							"    ORDER BY\r\n",
							"    AGEID, YearLevel, StudentFirstName, StudentLastName,Ceider"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"CREATE TEMP VIEW vw_activestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    LocationID AS LocationAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.SKYearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    pd.SKPerson\r\n",
							"\r\n",
							"FROM vw_factpersonmilestone f\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'True'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"ORDER BY SchoolAGEID, yl.YearLevelSifDesc, pd.FirstName, pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"CREATE TEMP VIEW vw_inactivestudent\r\n",
							"AS\r\n",
							"SELECT SchoolID AS SchoolAGEID,\r\n",
							"    LocationID AS LocationAGEID,\r\n",
							"    c.CampusSuburbAndName,\r\n",
							"    pd.FirstName,\r\n",
							"    pd.LastName,\r\n",
							"    yl.YearLevelSifDesc AS YearLevel,\r\n",
							"    rg.RollGroupDesc AS RollGroup,\r\n",
							"    pd.Ceider,\r\n",
							"    d.date AS DateLeft\r\n",
							"FROM\r\n",
							"    vw_factpersonmilestone f\r\n",
							"JOIN vw_dmdate d ON f.SKMilestoneStartDate = d.SKDate\r\n",
							"JOIN vw_dmpersondemographic pd ON f.SKPerson = pd.SKPerson\r\n",
							"JOIN vw_dmcampus c ON f.SKCampus = c.SKCampus\r\n",
							"JOIN vw_dmyearlevel yl ON f.SKYearLevel = yl.SKYearLevel\r\n",
							"JOIN vw_dmrollgroup rg ON f.SKRollGroup = rg.SKRollGroup\r\n",
							"\r\n",
							"WHERE \r\n",
							"    f.IsCurrentMilestone = 'True'\r\n",
							"    AND f.IsActiveMilestone = 'False'\r\n",
							"    AND pd.PersonType = 'Student'\r\n",
							"    AND Date < current_date()\r\n",
							"ORDER BY SchoolAGEID,yl.YearLevelSifDesc, pd.FirstName,pd.LastName\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### Save the SQL Temp views created above "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# now save the sql views created above\r\n",
							"classenrolment_df = spark.read.table('vw_classenrolment')\r\n",
							"activestudent_df = spark.read.table('vw_activestudent')\r\n",
							"inactivestudent_df = spark.read.table('vw_inactivestudent')\r\n",
							"\r\n",
							"saveToTarget(classenrolment_df, destination_p, f'{version}/_DMClassEnrolment')\r\n",
							"saveToTarget(activestudent_df, destination_p, f'{version}/_FACTActiveStudent')\r\n",
							"saveToTarget(inactivestudent_df, destination_p, f'{version}/_FACTInactiveStudent')\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Student_profile_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Data Objects"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bf16226e-ea33-43d4-b993-b34c77becad1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"class Student_profile(BaseOEAModule):\r\n",
							"    def __init__(self, source_folder='student', pseudonymize = True):\r\n",
							"        BaseOEAModule.__init__(self, source_folder, pseudonymize)\r\n",
							"\r\n",
							"        self.schemas['DMDetailedStudentPreSubmission'] = [\r\n",
							"                                        ['SKDetailedStudentPreSubmission', 'integer', 'no-op'],\r\n",
							"                                        ['BKDetailedStudentPreSubmission', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CensusYear', 'integer', 'no-op'],\r\n",
							"                                        ['CensusPeriod', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseIdentifierStudentId', 'string', 'no-op'],\r\n",
							"                                        ['OfficialFirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['OfficialLastName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['YearLevel', 'string', 'no-op'],\r\n",
							"                                        ['RollClass', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'date', 'no-op'],\r\n",
							"                                        ['GenderSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEFlag', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['ReceivesESL', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['IndigenousSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['NationalitySourceValue', 'string', 'no-op'],\r\n",
							"                                        ['NationalitySIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['NationalitySIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResidentIndicator', 'string', 'no-op'],\r\n",
							"                                        ['PermanentResidentStatus', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'date', 'no-op'],\r\n",
							"                                        ['VisaSubClassNumber', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'no-op'],\r\n",
							"                                        ['FullTimeEquivalent', 'double', 'no-op'],\r\n",
							"                                        ['BoardingFlag', 'string', 'no-op'],\r\n",
							"                                        ['OverseasStudentFlag', 'string', 'no-op'],\r\n",
							"                                        ['ReligionSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['ReligionSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionCategory', 'string', 'no-op'],\r\n",
							"                                        ['PreviousSchoolName', 'string', 'no-op'],\r\n",
							"                                        ['PreviousSchoolAGEID', 'integer', 'no-op'],\r\n",
							"                                        ['DateEnrolled', 'date', 'no-op'],\r\n",
							"                                        ['Guardian1FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1SchoolEducationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1SchoolEducationSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Surname', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2SchoolEducationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2SchoolEducationSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSourceValue', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['SWDSourceValueFlag', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentStatus', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentStatusSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['StudentStatus', 'string', 'no-op'],\r\n",
							"                                        ['DateLeft', 'date', 'no-op'],\r\n",
							"                                        ['CreatedDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['CompassProfileURL', 'string', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANSchoolName', 'string', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANSchoolACARAId', 'integer', 'no-op'],\r\n",
							"                                        ['PreviousNAPLANYear', 'integer', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2GenderSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2CountryOfBirthSIFCode', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2CountryOfBirthSIFDesc', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressState', 'string', 'no-op'],\r\n",
							"                                        ['StudentPostCode', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1AddressState', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1Postcode', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressLine1', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressLine2', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressSuburb', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2AddressState', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2Postcode', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactPersonMilestone'] = [\r\n",
							"                                        ['SKPersonMilestone', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersonType', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentID', 'integer', 'no-op'],\r\n",
							"                                        ['SKMilestoneStartDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKMilestoneEndDate', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKRollGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKHouseGroup', 'integer', 'no-op'],\r\n",
							"                                        ['SKATSI', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudentOrganisationDetail', 'integer', 'no-op'],\r\n",
							"                                        ['SKStaffOrganisationDetail', 'integer', 'no-op'],\r\n",
							"                                        ['PersonHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['FTETimeAllocation', 'double', 'no-op'],\r\n",
							"                                        ['PartTime', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['ESL', 'string', 'no-op'],\r\n",
							"                                        ['EALD', 'string', 'no-op'],\r\n",
							"                                        ['ExternalStudent', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['IsActiveMilestone', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrentMilestone', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"        self.schemas['DMFactStudent'] = [\r\n",
							"                                        ['FullTimeStudentSummaryId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCensusYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKGender', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['SKAge', 'integer', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['Count', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SKCensusGroupingId', 'integer', 'no-op'],\r\n",
							"                                        ['FTE', 'double', 'no-op'],\r\n",
							"                                        ['SKAttendanceStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SWDCount', 'integer', 'no-op'],\r\n",
							"                                        ['ESLCOUNT', 'integer', 'no-op'],\r\n",
							"                                        ['BoarderCount', 'integer', 'no-op'],\r\n",
							"                                        ['OverseasStudentCount', 'integer', 'no-op'],\r\n",
							"                                        ['DistanceEducationCount', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousDistanceEducationCount', 'integer', 'no-op'],\r\n",
							"                                        ['StudentOnVisaCount', 'integer', 'no-op'],\r\n",
							"                                        ['StudentOnBridgeVisaCount', 'integer', 'no-op'],\r\n",
							"                                        ['IndigenousBoardersCount', 'integer', 'no-op'],\r\n",
							"                                        ['SWDDistanceEdCount', 'integer', 'no-op'],\r\n",
							"                                        ['NotStatedIndigenousPrimaryCount', 'integer', 'no-op'],\r\n",
							"                                        ['NotStatedIndigenousSecondaryCount', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTECount', 'integer', 'no-op']\r\n",
							"                                        ]\r\n",
							"\r\n",
							"        self.schemas['DMFactStudentEnrolment'] = [\r\n",
							"                                        ['UIDEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentYear', 'integer', 'no-op'],\r\n",
							"                                        ['SKPreEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SkEnrolmentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['SKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['SKGenderId', 'integer', 'no-op'],\r\n",
							"                                        ['SKCampus', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentSubmitted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentStarted', 'integer', 'no-op'],\r\n",
							"                                        ['SKDateEnrolmentEnded', 'integer', 'no-op'],\r\n",
							"                                        ['SKEnrolmentStatus', 'integer', 'no-op'],\r\n",
							"                                        ['SKYearLevel', 'integer', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['EslYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LboteYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SKAtsi', 'integer', 'no-op'],\r\n",
							"                                        ['SwdYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SKAttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentHeadCount', 'integer', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentCount', 'integer', 'no-op'],\r\n",
							"                                        ['EnrolmentFTE', 'double', 'no-op'],\r\n",
							"                                        ['SKMainCampus', 'integer', 'no-op']\r\n",
							"                                        ]\r\n",
							"        self.schemas['DMPersonDemographic'] = [\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['BKPerson', 'string', 'no-op'],\r\n",
							"                                        ['PersonType', 'string', 'no-op'],\r\n",
							"                                        ['Ceider', 'integer', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['Title', 'string', 'no-op'],\r\n",
							"                                        ['FirstName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],\r\n",
							"                                        ['LastName', 'string', 'no-op'],\r\n",
							"                                        ['PreferredLastName', 'string', 'no-op'],\r\n",
							"                                        ['MiddleName', 'string', 'no-op'],\r\n",
							"                                        ['SecondMiddleName', 'string', 'no-op'],\r\n",
							"                                        ['EmailAddress', 'string', 'no-op'],\r\n",
							"                                        ['UsualTransport', 'string', 'no-op'],\r\n",
							"                                        ['HomePhoneNumber', 'string', 'no-op'],\r\n",
							"                                        ['MobileNumber', 'string', 'no-op'],\r\n",
							"                                        ['DateOfDeath', 'string', 'no-op'],\r\n",
							"                                        ['DateOfBirth', 'string', 'no-op'],\r\n",
							"                                        ['RecievesESL', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE', 'string', 'no-op'],\r\n",
							"                                        ['InterpreterRequired', 'string', 'no-op'],\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderDesc', 'string', 'no-op'],\r\n",
							"                                        ['ATSIId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountryDesc', 'string', 'no-op'],\r\n",
							"                                        ['NationalityId', 'integer', 'no-op'],\r\n",
							"                                        ['NationalityDesc', 'string', 'no-op'],\r\n",
							"                                        ['ArrivalDate', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassCode', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassName', 'string', 'no-op'],\r\n",
							"                                        ['VisaExpiryDate', 'string', 'no-op'],\r\n",
							"                                        ['YouthAllowance', 'string', 'no-op'],\r\n",
							"                                        ['GovernmentFunded', 'string', 'no-op'],\r\n",
							"                                        ['GovCode2', 'string', 'no-op'],\r\n",
							"                                        ['Disability', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded', 'string', 'no-op'],\r\n",
							"                                        ['LivingArrangements', 'string', 'no-op'],\r\n",
							"                                        ['ResidentialStatus', 'string', 'no-op'],\r\n",
							"                                        ['RefugeeStatus', 'string', 'no-op'],\r\n",
							"                                        ['AmbulanceSubscriber', 'string', 'no-op'],\r\n",
							"                                        ['UserName', 'string', 'no-op'],\r\n",
							"                                        ['Occupation', 'string', 'no-op'],\r\n",
							"                                        ['OccupationGroup', 'string', 'no-op'],\r\n",
							"                                        ['Employer', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['NonSchoolEducation', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesBH', 'string', 'no-op'],\r\n",
							"                                        ['ContactNotesAH', 'string', 'no-op'],\r\n",
							"                                        ['EarliestMilestoneDate', 'string', 'no-op'],\r\n",
							"                                        ['Contactable', 'string', 'no-op'],\r\n",
							"                                        ['EmailAllowed', 'string', 'no-op'],\r\n",
							"                                        ['SMSAllowed', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToMedia', 'string', 'no-op'],\r\n",
							"                                        ['PublishPhotoToInternal', 'string', 'no-op'],\r\n",
							"                                        ['AuthenticationMode', 'string', 'no-op'],\r\n",
							"                                        ['FeeMode', 'string', 'no-op'],\r\n",
							"                                        ['ImportMode', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['RequiresESLInt', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTEInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityInt', 'integer', 'no-op'],\r\n",
							"                                        ['DisabilityFundedInt', 'integer', 'no-op'],\r\n",
							"                                        ['ReceivesESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['RequiresESL_YN', 'string', 'no-op'],\r\n",
							"                                        ['LBOTE_YN', 'string', 'no-op'],\r\n",
							"                                        ['Disability_YN', 'string', 'no-op'],\r\n",
							"                                        ['DisabilityFunded_YN', 'string', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['CommunicationPreference', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op'],\r\n",
							"                                        ['ProgramCode', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligiousOrLay', 'string', 'no-op'],\r\n",
							"                                        ['Parish', 'string', 'no-op'],\r\n",
							"                                        ['ImmunisationRecordSighted', 'string', 'no-op'],\r\n",
							"                                        ['HomeTown', 'string', 'no-op'],\r\n",
							"                                        ['HeadLiceCheckAllowed', 'string', 'no-op'],\r\n",
							"                                        ['TownOfBirth', 'string', 'no-op']\r\n",
							"                                        ]\r\n",
							"        \r\n",
							"\r\n",
							"        self.schemas['DMStudent'] = [\r\n",
							"                                        ['SKStudent', 'integer', 'no-op'],\r\n",
							"                                        ['BKSourceStudentId', 'string', 'no-op'],\r\n",
							"                                        ['BKPersistentStudentId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['CampusName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolId', 'integer', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['DioceseId', 'integer', 'no-op'],\r\n",
							"                                        ['DioceseName', 'string', 'no-op'],\r\n",
							"                                        ['VisaSubClassId', 'integer', 'no-op'],   ## no-op\r\n",
							"                                        ['VisaSubClassDesc', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['VisaIdentificationNumber', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['VisaExpiryData', 'date', 'no-op'],   ## no-op\r\n",
							"                                        ['VisaEndDate', 'date', 'no-op'],   ## no-op\r\n",
							"                                        ['CitizenshipResidencyStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['CitizenshipResidencyStatusDesc', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['SingleNameOnly', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['OfficialFirstName', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['PreferredFirstName', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['OfficialSurname', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['PreferredSurname', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['DOB', 'date', 'no-op'], ## no-op\r\n",
							"                                        ['GenderId', 'integer', 'no-op'],\r\n",
							"                                        ['GenderSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BirthCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['BirthCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryCitizenshipCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountryId', 'integer', 'no-op'],\r\n",
							"                                        ['PrimaryPassportIssueCountrySifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AttendanceStatusId', 'integer', 'no-op'],\r\n",
							"                                        ['AttendanceStatusSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['RollGroup', 'string', 'no-op'],\r\n",
							"                                        ['FFPOS', 'string', 'no-op'],\r\n",
							"                                        ['ESLYesNo', 'string', 'no-op'],\r\n",
							"                                        ['EslLanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['ESLLanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['LBOTEYesNo', 'string', 'no-op'],\r\n",
							"                                        ['LBOTELanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['LBOTELanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['AtsiId', 'integer', 'no-op'],\r\n",
							"                                        ['ATSIDesc', 'string', 'no-op'],\r\n",
							"                                        ['ReligionId', 'integer', 'no-op'],\r\n",
							"                                        ['ReligionDesc', 'string', 'no-op'],\r\n",
							"                                        ['SWDYesNo', 'string', 'no-op'],\r\n",
							"                                        ['SwdId', 'integer', 'no-op'],\r\n",
							"                                        ['SwdSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressStreet', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentAddressSuburb', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentAddressPostCode', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['BKStudentAddressState', 'integer', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentAddressState', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentAddressGeoData', 'string', 'no-op'],\r\n",
							"                                        ['StudentAddressLongitude', 'double', 'no-op'], #changed 'decimal' to 'double' (float doesn't work)\r\n",
							"                                        ['StudentAddressLatitude', 'double', 'no-op'], #changed 'decimal' to 'double' (float doesn't work)\r\n",
							"                                        ['HomePhone', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['HomeEmail', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentMobile', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['StudentEmail', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1FirstName', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1Surname', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1Phone', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1Mobile', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1Email', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian1OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian1LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2FirstName', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2Surname', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2Phone', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2Mobile', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2Email', 'string', 'no-op'],   ## no-op\r\n",
							"                                        ['Guardian2OccupationalGroupId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2OccupationalGroupSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2EducationNonSchoolLevelSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageId', 'integer', 'no-op'],\r\n",
							"                                        ['Guardian2LanguageSifDesc', 'string', 'no-op'],\r\n",
							"                                        ['BaptismDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstReconciliationDate', 'date', 'no-op'],\r\n",
							"                                        ['FirstEucharistDate', 'date', 'no-op'],\r\n",
							"                                        ['ConfirmationDate', 'date', 'no-op'],\r\n",
							"                                        ['BaptismParish', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'timestamp', 'no-op'], #changed 'string' to 'timestamp'\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['MainCampusId', 'integer', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['SKPerson', 'integer', 'no-op'],\r\n",
							"                                        ['StudentReportingId', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictions_YN', 'string', 'no-op'],\r\n",
							"                                        ['AccessRestrictionsInt', 'integer', 'no-op']\r\n",
							"                                        ]    \r\n",
							"\r\n",
							"        self.schemas['DMStudentOrganisationDetails'] = [\r\n",
							"                                        ['SKStudentOrganisationDetails', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentOrganisationDetails', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationName', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserEmail', 'string', 'no-op'],\r\n",
							"                                        ['Boarder', 'string', 'no-op'],\r\n",
							"                                        ['DateAppliedFor', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentConditions', 'string', 'no-op'],\r\n",
							"                                        ['TransportDetails', 'string', 'no-op'],\r\n",
							"                                        ['IntendedFutureSchool', 'string', 'no-op'],\r\n",
							"                                        ['LockerDetails', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op'],\r\n",
							"                                        ['OrganisationUserId', 'integer', 'no-op'],\r\n",
							"                                        ['Status', 'string', 'no-op'],\r\n",
							"                                        ['GetPersonPhotoURL', 'string', 'no-op'],\r\n",
							"                                        ['BoarderType', 'string', 'no-op'],\r\n",
							"                                        ['CensusStartDate', 'string', 'no-op'],\r\n",
							"                                        ['CampusId', 'integer', 'no-op'],\r\n",
							"                                        ['StudentCompassURL', 'string', 'no-op'],\r\n",
							"                                        ['EnrolmentWithdrawalReason', 'string', 'no-op'],\r\n",
							"                                        ['ExternalScholarship', 'string', 'no-op'],\r\n",
							"                                        ['DateNotifiedOfLeaving', 'string', 'no-op']\r\n",
							"                                    ]  \r\n",
							"\r\n",
							"        self.schemas['DMStudentSchoolHistory'] = [ \r\n",
							"                                        ['SKStudentSchoolHistory', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentSchoolHistory', 'string', 'no-op'],\r\n",
							"                                        ['CompassPersonId', 'string', 'no-op'],\r\n",
							"                                        ['SchoolName', 'string', 'no-op'],\r\n",
							"                                        ['SchoolCode', 'string', 'no-op'],\r\n",
							"                                        ['SchoolStartDate', 'string', 'no-op'],\r\n",
							"                                        ['SchoolEndDate', 'string', 'no-op'],\r\n",
							"                                        ['YearLevelFinish', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['SCDReason', 'string', 'no-op']\r\n",
							"                                    ] \r\n",
							"\r\n",
							"        self.schemas['DMStudentType'] = [ \r\n",
							"                                        ['SKStudentType', 'integer', 'no-op'],\r\n",
							"                                        ['BKStudentType', 'string', 'no-op'],\r\n",
							"                                        ['StudentType', 'string', 'no-op'],\r\n",
							"                                        ['StudentStatus', 'string', 'no-op'],\r\n",
							"                                        ['CreateDate', 'string', 'no-op'],\r\n",
							"                                        ['LastUpdateDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveStartDate', 'string', 'no-op'],\r\n",
							"                                        ['EffectiveEndDate', 'string', 'no-op'],\r\n",
							"                                        ['IsCurrent', 'string', 'no-op'],\r\n",
							"                                        ['ScdReason', 'string', 'no-op']\r\n",
							"                                    ]   \r\n",
							"                                          \r\n",
							"\r\n",
							"    def ingest(self):\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMDetailedStudentPreSubmission', self.schemas['DMDetailedStudentPreSubmission'], 'LastUpdateDate', 'SKDetailedStudentPreSubmission')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactPersonMilestone', self.schemas['DMFactPersonMilestone'], 'LastUpdateDate', 'SKPersonMilestone')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactStudent', self.schemas['DMFactStudent'], 'LastUpdateDate', 'FullTimeStudentSummaryId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMFactStudentEnrolment', self.schemas['DMFactStudentEnrolment'], 'LastUpdateDate', 'UIDEnrolmentId')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMPersonDemographic', self.schemas['DMPersonDemographic'], 'LastUpdateDate', 'SKPerson')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStudent', self.schemas['DMStudent'], 'LastUpdateDate', 'SKStudent')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStudentOrganisationDetails', self.schemas['DMStudentOrganisationDetails'], 'LastUpdateDate', 'SKStudentOrganisationDetails')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStudentSchoolHistory', self.schemas['DMStudentSchoolHistory'], 'LastUpdateDate', 'SKStudentSchoolHistory')\r\n",
							"        oea.ingest_delta_data(self.source_folder, 'DMStudentType', self.schemas['DMStudentType'], 'LastUpdateDate', 'SKStudentType')\r\n",
							"\r\n",
							"student_profile = Student_profile()"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transform_Functions_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8ab8d1f1-cd3e-4c97-862a-4585a1404490"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import when, max\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMYearLevel_pseudo(df):\r\n",
							"\r\n",
							"    df = df.withColumn(\"DisplayName\", when(df.BusinessDesc == \"Unknown\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"Ungraded\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"SecondaryUngraded\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"PrimaryUngraded\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"Childcare\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"4yo Kindergarten\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"3yo Kindergarten\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"TwoYearsBeforeYear1\", \"\")\r\n",
							"                                        .when(df.BusinessDesc == \"Pre-Year 1\", \"Prep\")\r\n",
							"                                        .when(df.BusinessDesc == \"Pre-School\", \"Prep\")\r\n",
							"                                        .when(df.BusinessDesc == \"OneYearBeforeYear1\", \"Prep\")\r\n",
							"                                        .otherwise(df.BusinessDesc)\r\n",
							"                                        )\r\n",
							"\r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMCampus_pseudo(df):\r\n",
							"    df = df.filter(df.DioceseName == 'Townsville') \\\r\n",
							"            .filter(df.SchoolName !=  'Townsville Catholic Education Office') \\\r\n",
							"            .filter(df.SchoolName !=  'Canossa Convent School') \\\r\n",
							"            .filter(df.SchoolName !=  'St Patrick\\'s College Townsville')\r\n",
							"\r\n",
							"    return df\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMDate_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmdate_pseudo')\r\n",
							"\r\n",
							"    calendar_df = spark.read.load(sourcep + \"/ACER/DMCalendarYear_pseudo\", format='delta')\r\n",
							"\r\n",
							"    calendar_df.createOrReplaceTempView('vw_df_calendar')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select d.*, c.skyear from vw_df_dmdate_pseudo d left join vw_df_calendar c on d.year = c.year where d.year >= 2008 and d.year <= 2030\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMStudent_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmstudent_pseudo')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select * from vw_df_dmstudent_pseudo where length(bksourcestudentid) = 36\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMNAPLAN_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmnaplan_pseudo')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select * from vw_df_dmnaplan_pseudo where PersistentStudentID <> -1\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMPersonDemographic_pseudo(df):\r\n",
							"\r\n",
							"    sourcep = oea.stage2p\r\n",
							"\r\n",
							"    df.createOrReplaceTempView('vw_df_dmpersondemographic_pseudo')\r\n",
							"\r\n",
							"    final_df = spark.sql(\"select * from vw_df_dmpersondemographic_pseudo where PersonType = 'Student' or PersonType = 'Staff'\")\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def DMFactPATResults_pseudo(df):\r\n",
							"    return df.groupBy(\"SKPATTest\").agg(max(\"NormMeanScaledScore\").alias(\"NormMeanScaledScore_cleaned\"))"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transformations_py')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "552ce59d-2696-4587-9470-da1a2f982630"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Transformation functions for each data table ingested "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage3/Transform_Functions_py"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def transformation(df, name):\r\n",
							"\r\n",
							"    if name == \"DMYearLevel_pseudo\":\r\n",
							"        final_df = DMYearLevel_pseudo(df)\r\n",
							"    elif name == \"DMCampus_pseudo\":\r\n",
							"        final_df = DMCampus_pseudo(df)\r\n",
							"    elif name == \"DMDate_pseudo\":\r\n",
							"        final_df = DMDate_pseudo(df)\r\n",
							"    elif name == \"DMStudent_pseudo\":\r\n",
							"        final_df = DMStudent_pseudo(df)\r\n",
							"    elif name == \"DMNAPLAN_pseudo\":\r\n",
							"        final_df = DMNAPLAN_pseudo(df)\r\n",
							"    elif name == \"DMPersonDemographic_pseudo\":\r\n",
							"        final_df = DMPersonDemographic_pseudo(df)\r\n",
							"    else:  \r\n",
							"        final_df = df\r\n",
							"\r\n",
							"    return final_df"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# call this function with the name of the table to transform\r\n",
							"def transform(tableName):\r\n",
							"\r\n",
							"    try:\r\n",
							"        df = spark.read.load(f\"{tableName.path}\", format='delta')\r\n",
							"        return transformation(df, tableName.name)\r\n",
							"\r\n",
							"    except AnalysisException as e:\r\n",
							"        raise ValueError(f\"Failed to load {tableName.path}. Check the paths.\\nMore info below:\\n\" + str(e)) \r\n",
							"    \r\n",
							"    return None"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transforms_Connector')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Stage3"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark3p1sm",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "08bf7eb6-290b-462f-9ee0-9caf418812f8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/09921ef6-5d34-4a25-a233-84ffa9485571/resourceGroups/rg-oea-tceooeadev01/providers/Microsoft.Synapse/workspaces/syn-oea-tceooeadev01/bigDataPools/spark3p1sm",
						"name": "spark3p1sm",
						"type": "Spark",
						"endpoint": "https://syn-oea-tceooeadev01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Load data from Stage2"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run OEA_py"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage3/Transformations_py"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage3/Transform_Functions_py"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stage2 locations defined in the base OEA\r\n",
							"source_p = oea.stage2p \r\n",
							"source_np = oea.stage2np\r\n",
							"\r\n",
							"# stage3 locations defined in OEA\r\n",
							"destination_p = oea.stage3p\r\n",
							"destination_np = oea.stage3np\r\n",
							"\r\n",
							"# stage3 version (eg. pilot)\r\n",
							"version = 'pilot'\r\n",
							""
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def saveToTarget(df, target_system, target_path):\r\n",
							"    path = f'{target_system}/{target_path}'\r\n",
							"    df.write.format('delta').option(\"overwriteSchema\", \"true\").save(path, header=True, mode=\"overwrite\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# load data, transform then save from each source folder to the destination \r\n",
							"def stage3Transform(source, destination):\r\n",
							"    # source - for each major folder, iterate through each subfolder\r\n",
							"    folders = mssparkutils.fs.ls(source)\r\n",
							"    for folder in folders:\r\n",
							"        #ignore files\r\n",
							"        if folder.isFile:\r\n",
							"            continue\r\n",
							"        # iterate through each subfolder\r\n",
							"        subfolders = mssparkutils.fs.ls(folder.path)\r\n",
							"        for subfolder in subfolders:\r\n",
							"            #There shouldn't be any files at this directory level \r\n",
							"            if subfolder.isFile:\r\n",
							"                continue\r\n",
							"\r\n",
							"            # run transformations\r\n",
							"            transformed_df = transform(subfolder)\r\n",
							"            # if transformation has worked..\r\n",
							"            if transformed_df:\r\n",
							"                saveToTarget(transformed_df, destination, f'{version}/{subfolder.name}')\r\n",
							"            else:\r\n",
							"                print(f'Errors in Transform - Skipping: {folder.name}/{subfolder.name}')\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stage3Transform(source_p, destination_p)"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stage3Transform(source_np, destination_np)"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Creation of additional views"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run Stage3/SQL_Transforms"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark3p1sm')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 8,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiasoutheast"
		}
	]
}